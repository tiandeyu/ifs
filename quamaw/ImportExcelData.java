/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.quamaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import jxl.Cell;
import jxl.CellType;
import jxl.DateCell;
import jxl.Sheet;
import jxl.Workbook;  
import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ImportExcelData extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.quaasw.ImportExcelData");

   private ASPContext ctx;
   private String strTitle;

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------



   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  ImportExcelData (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      ctx = mgr.getASPContext();
      
      strTitle = ctx.readValue("IEDTITLE",mgr.getQueryStringValue("IMPTITLE"));
      if (mgr.isEmpty(strTitle))
         strTitle = "Excel数据导入";

      if(mgr.buttonPressed("IMPORT"))
         directImportExcel();

      //adjust();
      
      ctx.writeValue("IEDTITLE",strTitle);
   }



   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {

   }



   public void  adjust()
   {
      //
   }
   
   /*
   public void uploadImport()
   {
      if(createUploadDir())
         uploadImportExcel();
      else
         directImportExcel();
   }
   
   public boolean createUploadDir()
   {
      File dirFile = null;
      try  {
         dirFile = new File("D:/upload");
         if (!(dirFile.exists()) && !(dirFile.isDirectory()))  {
            boolean creadok = dirFile.mkdirs();
            if (!creadok)  {
               return false;
            }
         }
         
         dirFile = new File("D:/upload/temp");
         if (!(dirFile.exists()) && !(dirFile.isDirectory()))  {
            boolean creadok = dirFile.mkdirs();
            if (!creadok)  {
               return false;
            }
         }
      } catch (Exception e)  {
         return false ;
      } 
      return true;
   }

   //上传后导入
   public void uploadImportExcel()
   {
      ASPManager mgr = getASPManager();
      String msg = "";

      HttpServletRequest request = mgr.getPageRequest();
      if (ServletFileUpload.isMultipartContent(request))
      {
         try{
            DiskFileItemFactory factory = new DiskFileItemFactory();
            factory.setSizeThreshold(4096);
            File tempFile=new File("d:/upload/temp/");
            factory.setRepository(tempFile);
            
            ServletFileUpload upload = new ServletFileUpload(factory);
            upload.setSizeMax(1024 * 1024 * 10);
            upload.setHeaderEncoding("utf-8");
            List<FileItem> items = upload.parseRequest(request);//得到所有的文件
            Iterator<FileItem> itr = items.iterator();
            while(itr.hasNext()){//依次处理每个文件
               FileItem item=(FileItem)itr.next();
               if(!item.isFormField())
               {
                  String fileName=item.getName();//获得文件名，包括路径
                  if(fileName!=null){
                     if(fileName.toUpperCase().endsWith(".XLS"))
                     {
                        int pos = fileName.lastIndexOf(File.separator);
                        if (pos > 0) {
                           fileName=fileName.substring(pos + 1);
                        }
                        File xf=new File("d:/upload"+File.separator+fileName);
                        item.write(xf);
                        importOneExcel(xf);
                        item.delete();
                     }
                     else
                     {
                        item.delete();
                        msg = "非Excel文件不能导入，请选择Excel文件！";
                     }
                  }
               }
            }
            if ("".equals(msg))
               msg = "数据导入完成，请到相应业务界面进行仔细检查核对。";
            mgr.showAlert(msg);
         }
         catch(Exception e){
            error(e);
         }
      }
      else
         mgr.showAlert("只能处理multipart/form-data类型的数据!");

   }
   */
   
   public void importOneExcel(File file)
   {
      Workbook book=null;

      try
      {
         book = Workbook.getWorkbook(file);
         Sheet s = book.getSheet(0);

         int n = 1;
         String sheets = s.getCell(3, 0).getContents().trim();
         if (isEmpty(sheets) || !sheets.matches("^[0-9]*$"))
            n = 1;
         else
            n = Integer.valueOf(sheets);

         String pkey = "";
         String tkey = "";
         for(int i=0;i<n;i++)
         {
            s = book.getSheet(i);
            tkey = importOneSheet(s,pkey);
            if(tkey.indexOf((char)30) > 0)
               pkey = tkey;
         }

      }
      catch(Throwable any)
      {
         error(any);
      }
      finally
      {
         try
         {
            book.close();
         }
         catch(Throwable any)
         {
            error(any);
         }
      }
   }
   
   //直接导入（不上传文件）
   public void directImportExcel()
   {
      ASPManager mgr = getASPManager();
      String msg = "";

      HttpServletRequest request = mgr.getAspRequest();
      if (ServletFileUpload.isMultipartContent(request))
      {
         try{    
            FileItemFactory factory = new DiskFileItemFactory();
            ServletFileUpload upload = new ServletFileUpload(factory);
            upload.setSizeMax(1024 * 1024 * 10);
            upload.setHeaderEncoding("utf-8");
            List<FileItem> items = upload.parseRequest(request);//得到所有的文件
            Iterator<FileItem> itr = items.iterator();
            while(itr.hasNext()){//依次处理每个文件
               FileItem item=(FileItem)itr.next();
               String fileName=item.getName();//获得文件名，包括路径
               if(fileName!=null){
                  if(fileName.toUpperCase().endsWith(".XLS"))
                  {
                     InputStream is = item.getInputStream();
                     importOneExcel(is);  
                     is.close();
                     item.delete();
                  }
                  else
                  {
                     item.delete();
                     msg = "非Excel文件不能导入，请选择Excel文件！";
                  }
               }
            }
            if ("".equals(msg))
               msg = "数据导入完成，请到相应业务界面进行仔细检查核对。";
            mgr.showAlert(msg);
         }
         catch(Exception e){
            error(e);
         }
      }
      else
         mgr.showAlert("只能处理multipart/form-data类型的数据!");

   }

   public void importOneExcel(InputStream is)
   {
      Workbook book=null;

      try
      {
         book = Workbook.getWorkbook(is);
         Sheet s = book.getSheet(0);

         int n = 1;
         String sheets = s.getCell(3, 0).getContents().trim();
         if (isEmpty(sheets) || !sheets.matches("^[0-9]*$"))
            n = 1;
         else
            n = Integer.valueOf(sheets);

         String pkey = "";
         String tkey = "";
         for(int i=0;i<n;i++)
         {
            s = book.getSheet(i);
            tkey = importOneSheet(s,pkey);
            if(tkey.indexOf((char)30) > 0)
               pkey = tkey;
         }

      }
      catch(Throwable any)
      {
         error(any);
      }
      finally
      {
         try
         {
            book.close();
         }
         catch(Throwable any)
         {
            error(any);
         }
      }
   }

   public String importOneSheet(Sheet s,String pk_attr)
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      String pre_attr;
      String attribute = null;
      int real_rows = s.getRows();
      int real_cols = s.getColumns();

      try
      {
         if (real_rows * real_cols == 0)
         {
            mgr.showAlert(s.getName() + "中没有规范的数据，跳过导入!");
            return "";
         }
         
         while(real_rows>4 && isRowEmpty(s,real_rows - 1,real_cols))
            real_rows--;
         
         if (real_rows < 5)
         {
            mgr.showAlert(s.getName() + "中没有规范的数据，跳过导入!");
            return "";
         }

         //取得包头
         String pkg = s.getCell(1, 0).getContents().trim().toUpperCase();
         if(mgr.isEmpty(pkg) || pkg.indexOf("_API") < 0)
         {
            mgr.showAlert(s.getName() + "中非法的包名" + pkg + "!");
            return "";
         }

         //用户权限判断
         trans.addSecurityQuery(pkg,"New__");
         trans = mgr.perform(trans);
         ASPBuffer availObj = trans.getSecurityInfo();
         trans.clear();
         if (!availObj.itemExists(pkg + ".New__"))
         {
            mgr.showAlert("当前用户对 " + pkg + ".New__ 没有权限，无权导入!");
            return "";
         }

         //取得列名
         Cell[] rowcol = s.getRow(2);
         int maxcols = rowcol.length;

         if(maxcols < 1 || mgr.isEmpty(rowcol[0].getContents().trim()))
         {
            mgr.showAlert("Excel第3行格式有误，不能导入!");
            return "";
         }

         String[] column_name = new String[maxcols];
         real_cols = maxcols;
         for(int n=0; n<maxcols; n++)
         {
            if (mgr.isEmpty(rowcol[n].getContents().trim()))
            {
               real_cols = n;
               break;
            }
            column_name[n] = rowcol[n].getContents().trim().toUpperCase();
         }

         //New__ PREPARE
         pre_attr = "";
         cmd = trans.addCustomCommand("GETDFT",pkg + ".New__");
         cmd.addParameter("INFO", "S", "OUT", "");
         cmd.addParameter("OBJID", "S", "OUT", "");
         cmd.addParameter("OBJVERSION", "S", "OUT", "");
         cmd.addParameter("ATTR", "S", "IN_OUT", pre_attr);
         cmd.addParameter("ACTION", "S", "IN", "PREPARE");

         trans = mgr.perform(trans);
         pre_attr = trans.getValue("GETDFT/DATA/ATTR");
         if(mgr.isEmpty(pre_attr))
            pre_attr = "";
         trans.clear();
         
         //循环数据行
         String row_attr;
         String val = null;
         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
         Cell cellContent;
         DateCell dc;
         for (int i = 4; i < real_rows; i++) {
            /*
            //判断是否是空行，空行时直接退出(或者跳过? continue)
            //如果表单中有用到数据有效性 序列，会影响jxl对行数的读取
            //加上判断也不太好，会影响速度;无需判断了，在前面已经计算过实际的行数了
            if(isRowEmpty(s,i,cols))
               break;
            */
            
            row_attr = "";
            for (int j = 0; j < real_cols; j++) {
               //判断数据类型
               val = s.getCell(j, i).getContents().trim();
               
               cellContent = s.getCell(j,i);
               if (mgr.isEmpty(val))
               {
                  val = "";
               }
               else if (cellContent.getType() == CellType.DATE)
               {
                  dc=(DateCell)cellContent;
                  val=sdf.format(dc.getDate());
               }
               row_attr += column_name[j] + (char)31 + val + (char)30;
            }

            //New__ DO
            attribute = pk_attr + pre_attr + row_attr;
            cmd = trans.addCustomCommand("IMPXLS" + i,pkg + ".New__");
            cmd.addParameter("INFO", "S", "OUT", "");
            cmd.addParameter("OBJID", "S", "OUT", "");
            cmd.addParameter("OBJVERSION", "S", "OUT", "");
            cmd.addParameter("ATTR", "S", "IN_OUT", attribute);
            cmd.addParameter("ACTION", "S", "IN", "DO");
             trans = trans;  
            //每10行一插入，提高导入的效率
            if ((i-3)%10 == 0 || (i == real_rows - 1))
            {
               trans = mgr.perform(trans);
               attribute = trans.getValue("IMPXLS" + i + "/DATA/ATTR");
               trans.clear();
            }
         }
      }
      catch(Throwable any)
      {
         error(any);
      }

      //处理返回的内容，只返回主键
      //假设状态机字段返回时在后边
      if(mgr.isEmpty(attribute))
      {
         return "";
      }
      else
      {
         int pos = attribute.indexOf("__OBJSTATE");
         if (pos < 0)
         {
            return attribute;
         }
         else
            return attribute.substring(0, pos);
      }
   }
   
   private boolean isEmpty(String variable)
   {
      return variable==null || variable.equals("");
   }
   
   private boolean isRowEmpty(Sheet s,int row,int cols)
   {
      for(int i=0;i<cols;i++)
      {
         if(!isEmpty(s.getCell(i, row).getContents().trim()))
            return false;
      }
      return true;
   }
   


   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      //"IMPORTEXCELDATADESC: Excel数据导入"
      return strTitle;
   }


   protected String getTitle()
   {
      return strTitle;
   }

   protected AutoString getContents() throws FndException
   {
   	AutoString out = getOutputStream();
   	out.clear();
   	ASPManager mgr = getASPManager();

   	out.append("<html>\n");
   	out.append("<head>");
   	out.append(mgr.generateHeadTag(this.getDescription()));
   	out.append("<title>");
   	out.append(this.getTitle());
   	out.append("</title>\n");
   	out.append("</head>\n");
   	out.append("<body ");
   	out.append(mgr.generateBodyTag());
   	out.append(">\n");
   	out.append("<form ");
   	//out.append(mgr.generateFormTag());
   	out.append("id=\"form1\" name=\"form1\" method=\"post\" action=\"" + getFormTagAction() + "\" enctype=\"multipart/form-data\"");
   	out.append(">\n");
   	out.append(mgr.startPresentation(this.getDescription()));

   	out.append("<table width=\"90%\" border=\"0\">\n");
   	out.append("  <tr>\n");
   	out.append("    <th width=\"6%\" scope=\"row\">&nbsp;</th>\n");
   	out.append("    <td colspan=\"4\">请选择要导入数据的Excel文件(.xls)</td>\n");
   	out.append("    <td width=\"11%\">&nbsp;</td>\n");
   	out.append("  </tr>\n");
   	out.append("  <tr>\n");
   	out.append("    <th scope=\"row\">&nbsp;</th>\n");
   	out.append("    <td>Excel文件</td>\n");
   	out.append("    <td colspan=\"3\"><label>\n");
   	out.append("      <input name=\"XLS_FILE\" type=\"file\" id=\"XLS_FILE\" size=\"60\" />\n");
   	out.append("    </label></td>\n");
   	out.append("    <td>&nbsp;</td>\n");
   	out.append("  </tr>\n");
   	out.append("  <tr>\n");
   	out.append("    <th scope=\"row\">&nbsp;</th>\n");
   	out.append("    <td>&nbsp;</td>\n");
   	out.append("    <td width=\"20%\" align=\"right\"><label>\n");
   	out.append("      <input type=\"button\" name=\"IMPORT\" id=\"IMPORT\" value=\"  导 入  \" onclick=\"doImport()\" />\n");
   	out.append("    </label></td>\n");
   	out.append("    <td width=\"5%\" align=\"center\">&nbsp;</td>\n");
   	//out.append("    <td width=\"50%\" align=\"left\"><input type=\"reset\" name=\"Reset\" id=\"Reset\" value=\"  重 置  \" /></td>\n");
      out.append("    <td width=\"50%\" align=\"left\"><input type=\"button\" name=\"Close\" id=\"Close\" value=\"  关 闭  \" onclick=\"javascript:window.close();\" /></td>\n");
   	out.append("    <td>&nbsp;</td>\n");
   	out.append("  </tr>\n");
   	out.append("</table>\n");


   	appendDirtyJavaScript("\n\n\n");
   	appendDirtyJavaScript("function doImport()\n");
   	appendDirtyJavaScript("{\n");
   	appendDirtyJavaScript("		fld = getField_('XLS_FILE',-1);\n");
   	appendDirtyJavaScript("		if(!checkMandatory_(fld,'Excel文件','请选择要导入的Excel文件！'))\n");
   	appendDirtyJavaScript("		   return;\n");
   	//appendDirtyJavaScript("		document.forms[0].submit();\n");
      appendDirtyJavaScript("    if(getValue_('XLS_FILE',-1).toUpperCase().indexOf('.XLS') < 0){\n");
      appendDirtyJavaScript("       alert(\"请选择Excel文件！\");\n");
      appendDirtyJavaScript("       return;\n");
      appendDirtyJavaScript("       }\n");

   	appendDirtyJavaScript("    with(document.getElementById(\"form1\")){\n");
   	appendDirtyJavaScript("       method='post';\n");
   	appendDirtyJavaScript("       action='"+getFormTagAction()+"?IMPORT=Y';\n");
   	appendDirtyJavaScript("       submit();\n");
   	appendDirtyJavaScript("       }\n");
      appendDirtyJavaScript("       document.getElementById(\"IMPORT\").value=\" 导入中... \";\n");
      appendDirtyJavaScript("       document.getElementById(\"IMPORT\").disabled=true;\n");
      appendDirtyJavaScript("       document.getElementById(\"Close\").disabled=true;\n");
   	appendDirtyJavaScript("		}\n");

   	out.append(mgr.endPresentation());
   	out.append("</form>\n");
   	out.append("</body>\n");
   	out.append("</html>");

   	return out;
   }
}
