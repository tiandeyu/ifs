/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.quamaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.docmaw.DocmawUtil;
import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class QuanlityStandardLine extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.quamaw.QuanlityStandardLine");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   private ASPBlock itemblk;
   private ASPRowSet itemset;
   private ASPCommandBar itembar;
   private ASPTable itemtbl;
   private ASPBlockLayout itemlay;
   
   private ASPBlock quality_standard_line_blk;
   private ASPRowSet quality_standard_line_set;
   private ASPCommandBar quality_standard_line_bar;
   private ASPTable quality_standard_line_tbl;
   private ASPBlockLayout quality_standard_line_lay;
   
   private ASPBlock Pending_doc_reference_object_blk;
   private ASPRowSet Pending_doc_reference_object_set;
   private ASPCommandBar Pending_doc_reference_object_bar;
   private ASPTable Pending_doc_reference_object_tbl;
   private ASPBlockLayout Pending_doc_reference_object_lay;
   
   private String standardno_;
   private String project_type_;
   private String subprojno_;
   private ASPTransactionBuffer trans;
   private ASPQuery q;
   private boolean aSubProject;
   private ASPContext ctx;
   private ASPCommand cmd;
   private ASPBuffer data;
   private int currrow;
   private boolean bRefreshTree;
   private boolean bRefreshParent;
   private boolean bRefreshTreeOnly;
//   private String saveRow;
   private String comnd;
   private String list_index;
   private String parent_index;  
   private String customBodyTag;
   private String re;
   protected String sMessage;
   private int selectedRow;
   private int itemrowno;
   private int headrowno;
   
   private ASPTabContainer tabs;
   private ASPTabContainer item_tabs;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  QuanlityStandardLine (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      trans  = mgr.newASPTransactionBuffer();
      ctx   = mgr.getASPContext();
      
      String str = mgr.getQueryStringValue("PROJECT_TYPE_NO");
      String str1 = mgr.getQueryStringValue("SUB_PROJ_NO");
      String str2 = mgr.getQueryStringValue("STANDARD_NO");
      System.out.println(str);
      list_index    = ctx.readValue("LISTINDEX","0");
      parent_index  = ctx.readValue("PARENTINDEX","0");
      aSubProject   = ctx.readFlag("ASUBPROJECT",false);
//      saveRow       = ctx.readValue("SAVEROW","");
      
      bRefreshTree      = false;
      bRefreshParent    = false;
      
      
      if (!mgr.isEmpty(mgr.getQueryStringValue("INDEX")))
         list_index = mgr.readValue("INDEX");
      if (!mgr.isEmpty(mgr.getQueryStringValue("PARENT_INDEX")))
         parent_index = mgr.readValue("PARENT_INDEX");

      if( mgr.commandBarActivated() ) {
         comnd = mgr.readValue("__COMMAND");
         eval(mgr.commandBarFunction());
         if ( "ITEM0.SaveReturn".equals(comnd)  )
         {
            bRefreshTree = true;
         }  
         else if ("ITEM0.Delete".equals(comnd) ||  "ITEM3.Delete".equals(comnd))
            bRefreshParent = true;
      }
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
//      else if( !mgr.isEmpty(mgr.getQueryStringValue("SUB_PROJ_NO")) )
//         okFind();
      else if ((!mgr.isEmpty(mgr.getQueryStringValue("STANDARD_NO")) && (!mgr.isEmpty(mgr.getQueryStringValue("SUB_PROJ_NO")))  && (!mgr.isEmpty(mgr.getQueryStringValue("PROJECT_TYPE_NO")))) )
         searchSubProj();
      else if (!mgr.isEmpty(mgr.getQueryStringValue("STANDARD_NO")))
         okFindQuery(); 
//         searchSubProj();
      adjust();
      
      
      ctx.writeValue("LISTINDEX",list_index);
      ctx.writeValue("PARENTINDEX",parent_index);
      ctx.writeFlag("ASUBPROJECT",aSubProject);
//      ctx.writeValue("SAVEROW",saveRow);
      
      tabs.saveActiveTab();
      item_tabs.saveActiveTab();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   
   
   public void  okFindQuery()
   {
      ASPManager mgr = getASPManager();
      int headrow ;
      headrow = headset.getRowSelected();
      standardno_    = mgr.readValue("STANDARD_NO");
      project_type_  = mgr.readValue("PROJECT_TYPE_NO");
      subprojno_     = mgr.readValue("SUB_PROJ_NO");
      q = trans.addQuery(itemblk);
      q.addWhereCondition("STANDARD_NO = ? AND PROJECT_TYPE_NO = ? AND SUB_PROJ_NO = ?");
//      q.addWhereCondition("STANDARD_NO = ? AND PROJECT_TYPE_NO = ? ");
      q.addParameter("STANDARD_NO",standardno_);
      q.addParameter("PROJECT_TYPE_NO",project_type_);
      q.addParameter("SUB_PROJ_NO", "1");
      q.includeMeta("ALL");
      mgr.querySubmit(trans,itemblk);
//      mgr.submit(trans);
//      headset.goTo(headrowno);
      if ( itemset.countRows() == 0 ){
         itemset.clear();
         itemset.addRow(null);
      }
//      searchSubProj();
      aSubProject = false;
   }
   
   public void  searchSubProj()
   {
      ASPManager mgr = getASPManager();

      standardno_     = mgr.readValue("STANDARD_NO");
      project_type_    = mgr.readValue("PROJECT_TYPE_NO");
      subprojno_  = mgr.readValue("SUB_PROJ_NO");
      aSubProject = true;

      trans.clear();
      if (mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      mgr.querySubmit(trans,headblk);

      if (  headset.countRows() == 0 )
      {
         mgr.showAlert(mgr.translate("PROJWPROJECTINFONODATA: No data found."));
         headset.clear();
      }
      okFindITEM0();
   }
   
//-----------------------------------------------------------------------------

   
   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("QUANLITYSTANDARDLINENODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","QUANLITY_STANDARD_LINE_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }
   
   public void  okFindITEM0()
   {
      int headrowno;
      ASPManager mgr = getASPManager();
      
      if (itemset.countRows()==0)
      {
         trans.clear();
         headrowno = itemset.getCurrentRowNo();

         q = trans.addEmptyQuery(itemblk);
         q.addWhereCondition("STANDARD_NO = ?");
         q.addParameter("STANDARD_NO", standardno_);
         
         q.addWhereCondition("PROJECT_TYPE_NO = ?");
         q.addParameter("PROJECT_TYPE_NO", project_type_);
         
         q.addWhereCondition("SUB_PROJ_NO = ?");
         q.addParameter("SUB_PROJ_NO", subprojno_);
         q.includeMeta("ALL");
         mgr.submit(trans);
         itemset.goTo(headrowno);

      }   
        else{
           standardno_    = itemset.getValueAt(0,"STANDARD_NO");
           project_type_  = itemset.getValueAt(0,"PROJECT_TYPE_NO");
           subprojno_     = itemset.getValueAt(0,"SUB_PROJ_NO"); 
            q = trans.addEmptyQuery(itemblk);
            q.addWhereCondition("STANDARD_NO = ? AND PROJECT_TYPE_NO = ? AND SUB_PROJ_NO = ?");
            q.addParameter("STANDARD_NO", standardno_);
            q.addParameter("PROJECT_TYPE_NO", project_type_);
            q.addParameter("SUB_PROJ_NO", subprojno_);
            q.includeMeta("ALL");
            mgr.submit(trans);    
            if (  itemset.countRows() == 0 )
            {
               mgr.showAlert("QUANLITYSTANDARDLINENODATA: No data found.");
               itemset.clear();
            }
        }
      okFindITEM11();
   }
   
   public void  okFindQuery1()
   {
      ASPManager mgr = getASPManager();
      int headrow ;
      headrow = headset.getRowSelected();
      standardno_    = itemset.getValueAt(0,"STANDARD_NO");
      project_type_  = itemset.getValueAt(0,"PROJECT_TYPE_NO");
      subprojno_     = itemset.getValueAt(0,"SUB_PROJ_NO");
      q = trans.addQuery(quality_standard_line_blk);
      if(!subprojno_.equals("1"))
      q.addWhereCondition("sub_proj_no like '"+subprojno_+"%'");
      q.addWhereCondition("STANDARD_NO = ? AND PROJECT_TYPE_NO = ? ");
      q.addParameter("STANDARD_NO",standardno_);
      q.addParameter("PROJECT_TYPE_NO",project_type_);
      q.includeMeta("ALL");
      mgr.querySubmit(trans,quality_standard_line_blk);
      if ( quality_standard_line_set.countRows() == 0 ){
         quality_standard_line_set.clear();
         quality_standard_line_set.addRow(null);
      }
      aSubProject = false;
   }
   
   public void okFindITEM11()
   {
      ASPManager mgr = getASPManager();
      if(itemset.countRows() == 0){
         return;
      }
      String luName = "QuanlityStandardLine";
      String view = "QUANLITY_STANDARD_LINE";//itemblk.getView();
      String objid  = itemset.getValue("OBJID");
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      ASPCommand  cmd = trans.addCustomCommand("KEYREF", " client_sys.get_key_reference");
      cmd.addParameter("KEYREF", "S", "OUT", null);
      cmd.addParameter("BIZ_LU", "S", "IN", luName);
      cmd.addParameter("BIZ_OBJID", "S", "IN", objid);
      trans = mgr.validate(trans);
      String keyReference = trans.getValue("KEYREF/DATA/KEYREF");
      trans.clear();
      q = trans.addQuery(Pending_doc_reference_object_blk);
      q.addWhereCondition("LU_NAME = ?");
      q.addWhereCondition("KEY_REF = ?");
//      q.addWhereCondition("DOC_CLASS = ?");
//    q.addParameter("ITEM1_LU_NAME", "DesgRule");
//    q.addParameter("ITEM1_KEY_REF", "ID=1^");
      q.addParameter("ITEM1_LU_NAME", luName);
      q.addParameter("ITEM1_KEY_REF", keyReference);
//      q.addParameter("ITEM1_DOC_CLASS", "DSWJ");  
      q.includeMeta("ALL");
      int headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,Pending_doc_reference_object_blk);
      itemset.goTo(headrowno);
   }


   public void  newRowITEM0()
   {
      String parentprojectno;
      ASPManager mgr = getASPManager();

      cmd = trans.addEmptyCommand("ITEM","QUANLITY_STANDARD_LINE_API.New__",itemblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM/DATA");
      data.setFieldItem("ITEM_STANDARD_NO",headset.getValue("STANDARD_NO"));
      data.setFieldItem("ITEM_PROJECT_TYPE_NO",headset.getValue("PROJECT_TYPE_NO"));

      if (aSubProject)
      {
         currrow  = itemset.getCurrentRowNo();
         itemset.goTo(currrow);
         parentprojectno = itemset.getValue("SUB_PROJ_NO");
         data.setFieldItem("PARENT_PROJ_NO",parentprojectno);
      }
      itemset.addRow(data);
   }   
/*   public void  newRowITEM1()
   {
      String parentprojectno;
      ASPManager mgr = getASPManager();

      cmd = trans.addEmptyCommand("ITEM","QUANLITY_STANDARD_LINE_API.New__",itemblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM/DATA");
      data.setFieldItem("ITEM_STANDARD_NO",headset.getValue("STANDARD_NO"));
      data.setFieldItem("ITEM_PROJECT_TYPE_NO",headset.getValue("PROJECT_TYPE_NO"));

      if (aSubProject)
      {
         currrow  = itemset.getCurrentRowNo();
         itemset.goTo(currrow);
         parentprojectno = itemset.getValue("SUB_PROJ_NO");
         data.setFieldItem("PARENT_PROJ_NO",parentprojectno);
      }
      itemset.addRow(data);
   } */
   
   public void  saveRowReturn()
   {
      String fndUser = null;

      itemset.changeRow();
//      fndUser = getASPInfoServices().getFndUser();
      saveRowConf();
   }   

   public void  saveRowConf()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      mgr.submit(trans);
      okFindITEM0();
      bRefreshTree = true;
//      saveRow = "False";
      trans.clear();
   }
   
   public void  deleteRowITEM0()
   {
      ASPManager mgr = getASPManager();
      int currHead = headset.getCurrentRowNo();

      if (itemlay.isMultirowLayout())
         itemset.goTo(itemset.getRowSelected());

      itemset.unselectRows();
      itemset.selectRow();

      itemset.setRemoved();

      mgr.submit(trans);
      bRefreshTree = true;
      if (itemset.countRows()>0)
         itemset.refreshAllRows();
      headset.goTo(currHead);         
         
   }
      
   
   public void  deleteITEM0Last()
   {
      ASPManager mgr = getASPManager();

      trans.clear();
      itemset.setSelectedRowsRemoved();
      int currrow = headset.getCurrentRowNo();
      mgr.submit(trans);
      trans.clear();
      headset.goTo(currrow);
   }   
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();
      
      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJECT_TYPE_NO").
              setMandatory().
              setInsertable().
              setLabel("QUANLITYSTANDARDPROJECTTYPENO: Project Type No").
              setSize(20);
      headblk.addField("STANDARD_NO").
              setMandatory().
              setInsertable().
              setLabel("QUANLITYSTANDARDSTANDARDNO: Standard No").
              setSize(50);
      headblk.addField("STANDARD_DESC").
              setInsertable().
              setLabel("QUANLITYSTANDARDSTANDARDDESC: Standard Desc").
              setSize(50).
              setMaxLength(100);
      headblk.setView("QUANLITY_STANDARD");
      headblk.defineCommand("QUANLITY_STANDARD_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();

      headbar = mgr.newASPCommandBar(headblk);
      headbar.disableCommand(headbar.BACK);
      headbar.disableCommand(headbar.FORWARD);
      headbar.disableCommand(headbar.FIND);
      headbar.disableCommand(headbar.NEWROW);
      headbar.disableCommand(headbar.DELETE);
      headbar.disableCommand(headbar.EDITROW);
      headbar.disableCommand(headbar.DUPLICATEROW);   

      headbar.addCustomCommand("activateSubProject",mgr.translate("QUASTANDARDLINE: Qua Standard Line"));
      headbar.addCustomCommand("activateQualityQlanLine",mgr.translate("QUANLITYSTANDARDLINEQUALITYQLANLINE: Quality Qlan Line "));
      
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle(mgr.translate("QUANLITYSTANDARDTBLHEAD: Quanlity Standards"));

      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.SINGLE_LAYOUT);
      headlay.setDialogColumns(2);

      itemblk = mgr.newASPBlock("ITEM");
      itemblk.addField("ITEM_OBJID").
              setDbName("OBJID").
              setHidden();
      itemblk.addField("ITEM_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      itemblk.addField("ITEM_PROJECT_TYPE_NO").
              setDbName("PROJECT_TYPE_NO").
              setMandatory().
              setInsertable().
              setHidden().
              setLabel("QUANLITYSTANDARDLINEPROJECTTYPENO: Project Type No").
              setSize(20);
      itemblk.addField("ITEM_STANDARD_NO").
              setDbName("STANDARD_NO").
              setMandatory().
              setHidden().
              setInsertable().
              setLabel("QUANLITYSTANDARDLINESTANDARDNO: Standard No").
              setSize(50);
      itemblk.addField("SUB_PROJ_NAME").
              setInsertable().
              setLabel("QUANLITYSTANDARDLINESUBPROJNAME: Sub Proj Name").
              setSize(50).
              setMaxLength(100);  
      itemblk.addField("SUB_PROJ_NO").
              setReadOnly().
              setLabel("QUANLITYSTANDARDLINESUBPROJNO: Sub Proj No").
              setSize(50);         
      itemblk.addField("PARENT_PROJ_NO").
              setInsertable().
              setHidden().
              setLabel("QUANLITYSTANDARDLINEPARENTPROJNO: Parent Proj No").
              setSize(50);
      itemblk.addField("NODE_LEVEL","Number").
              setInsertable().
              setHidden().
              setLabel("QUANLITYSTANDARDLINENODELEVEL: Node Level").
              setSize(30);
      itemblk.addField("IS_LEAF").
              setInsertable().
              setHidden().
              setLabel("QUANLITYSTANDARDLINEISLEAF: Is Leaf").
              setSize(5);
      itemblk.addField("IS_MAIN_CONTROL").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINEISMAINCONTROL: Is Main Control").
              setSize(5);
      itemblk.addField("SHOULD_CHECK_NUM","Number").
              setInsertable().
              setLabel("QUANLITYSTANDARDLINESHOULDCHECKNUM: Should Check Num").
              setSize(30);
      itemblk.addField("TEMPLET_NO").
              setInsertable().
              setLabel("QUANLITYSTANDARDLINETEMPLETNO: Templet No").
              setSize(20);
      itemblk.addField("CONSTRUCT_ORG").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINECONSTRUCTORG: Construct Org").
              setSize(5);
      itemblk.addField("SURVEY_ORG").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINESURVEYORG: Survey Org").
              setSize(5);
      itemblk.addField("DESIGN_ORG").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINEDESIGNORG: Design Org").
              setSize(5);
      itemblk.addField("SUPERVISION_ORG").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINESUPERVISIONORG: Supervision Org").
              setSize(5);
      itemblk.addField("BULIDING_ORG").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINEBULIDINGORG: Buliding Org").
              setSize(5);
      itemblk.addField("MANUFACTURE_ORG").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINEMANUFACTUREORG: Manufacture Org").
              setSize(5);
      itemblk.addField("QUA_CLASS_NO").
              setInsertable().
//              setDynamicLOV("QUA_PROJECT_CLASS").
              setDynamicLOV("QUA_PROJECT_CLASS","ITEM_PROJECT_TYPE_NO").
              setLabel("QUANLITYSTANDARDLINEQUACLASSNO: Qua Class No").
              setSize(20).
              setMaxLength(50);
      itemblk.addField("QUA_CLASS_DESC").
              setFunction("QUA_PROJECT_CLASS_API.Get_Description(:ITEM_PROJECT_TYPE_NO,:QUA_CLASS_NO)").
              setLabel("QUANLITYSTANDARDLINEQUACLASSDESC: Qua Class Desc").
              setReadOnly();      
      mgr.getASPField("QUA_CLASS_NO").setValidation("QUA_CLASS_DESC");
      itemblk.addField("QUA_MODE_NO").
              setInsertable().
              setDynamicLOV("QUA_CONTROL_MODE").
              setLabel("QUANLITYSTANDARDLINEQUAMODENO: Qua Mode No").
              setSize(20).
              setMaxLength(50);
      itemblk.addField("QUA_MODE_DESC").
              setFunction("QUA_CONTROL_MODE_API.Get_Description(:QUA_MODE_NO)").
              setLabel("QUANLITYSTANDARDLINEQUAMODEDESC: Qua Mode No").
              setReadOnly();      
      mgr.getASPField("QUA_MODE_NO").setValidation("QUA_MODE_DESC");

      itemblk.addField("ENGINEERING_CATEGORY").
              setInsertable().
              setLabel("QUANLITYSTANDARDLINEENGINEERINGCATEGORY: Engineering Category").
              setSize(20).
              setMaxLength(50);
      itemblk.addField("WELDING_JOINT_CATEGORY").
              setInsertable().
              setLabel("QUANLITYSTANDARDLINEWELDINGJOINTCATEGORY: Welding Joint Category").
              setSize(20).
              setMaxLength(50);
      
      itemblk.addField("CON_UNIT_TEAM").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINECONUNITTEAM: Con Unit Team").
              setSize(20).
              setMaxLength(50);
      itemblk.addField("CON_UNIT_SITE").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINECONUNITSITE: Con Unit Site").
              setSize(20).
              setMaxLength(50);
      itemblk.addField("CON_UNIT_QC").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINECONUNITQC: Con Unit QC").
              setSize(20).
              setMaxLength(50);
      itemblk.addField("CON_UNIT_PROFE_COMPANY").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINECONUNITPROFECOMPANY: Con Unit Profe Company").
              setSize(20).
              setMaxLength(50);
      
      itemblk.setView("QUANLITY_STANDARD_LINE");
      itemblk.defineCommand("QUANLITY_STANDARD_LINE_API","New__,Modify__,Remove__");
      itemblk.setMasterBlock(headblk);
      itemset = itemblk.getASPRowSet();
      
      itembar = mgr.newASPCommandBar(itemblk);
      itembar.enableCommand(itembar.NEWROW);
      itembar.disableCommand(itembar.FIND);
      itembar.disableCommand(itembar.BACK);
      itembar.disableCommand(itembar.DUPLICATEROW);
      itembar.disableCommand(itembar.FORWARD);
      itembar.disableCommand(itembar.BACKWARD);
      itembar.disableCommand(itembar.SAVENEW);   
      itembar.defineCommand(itembar.OKFIND,"okFindITEM0");
      itembar.defineCommand(itembar.NEWROW,"newRowITEM0");
      itembar.defineCommand(itembar.SAVERETURN,"saveRowReturn");
      itembar.defineCommand(itembar.DELETE,"deleteRowITEM0");

      itembar.addCustomCommand("activateITEM11",mgr.translate("QUASTANDARDLINEPENDDOC: Qua Standard Line Pend Doc"));
      
      itemtbl = mgr.newASPTable(itemblk);
      itemtbl.setTitle("QUANLITYSTANDARDLINETBLITEM: Quanlity Standard Library Item");

      itemlay = itemblk.getASPBlockLayout();
      itemlay.setDefaultLayoutMode(itemlay.SINGLE_LAYOUT);

      itemlay.setDialogColumns(2);
      
      itemlay.defineGroup("Main", "SUB_PROJ_NO,SUB_PROJ_NAME,QUA_CLASS_NO,QUA_CLASS_DESC,QUA_MODE_NO,QUA_MODE_DESC,TEMPLET_NO,IS_MAIN_CONTROL,ENGINEERING_CATEGORY,WELDING_JOINT_CATEGORY", false, true);
      itemlay.defineGroup(mgr.translate("QUANLITYSTANDARDLINETBLITEMORG: Check Org Info"),"CONSTRUCT_ORG,SURVEY_ORG,DESIGN_ORG,SUPERVISION_ORG,BULIDING_ORG,MANUFACTURE_ORG,CON_UNIT_TEAM,CON_UNIT_SITE,CON_UNIT_QC,CON_UNIT_PROFE_COMPANY", true, true);
      itemlay.setSimple("QUA_CLASS_DESC");
      itemlay.setSimple("QUA_MODE_DESC");
 
      quality_standard_line_blk = mgr.newASPBlock("ITEM3");
      quality_standard_line_blk.addField("ITEM3_OBJID").
              setDbName("OBJID").
              setHidden();
      quality_standard_line_blk.addField("ITEM3_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      quality_standard_line_blk.addField("ITEM3_PROJECT_TYPE_NO").
              setDbName("PROJECT_TYPE_NO").
              setMandatory().
              setInsertable().
              setHidden().
              setLabel("QUANLITYSTANDARDLINEPROJECTTYPENO: Project Type No").
              setSize(20);
      quality_standard_line_blk.addField("ITEM3_STANDARD_NO").
              setDbName("STANDARD_NO").
              setMandatory().
              setHidden().
              setInsertable().
              setLabel("QUANLITYSTANDARDLINESTANDARDNO: Standard No").
              setSize(50);
      quality_standard_line_blk.addField("ITEM3_SUB_PROJ_NAME").
              setInsertable().
              setDbName("SUB_PROJ_NAME").
              setLabel("QUANLITYSTANDARDLINESUBPROJNAME: Sub Proj Name").
              setSize(50).
              setMaxLength(100);  
      quality_standard_line_blk.addField("ITEM3_SUB_PROJ_NO").
              setReadOnly().
              setDbName("SUB_PROJ_NO").
              setLabel("QUANLITYSTANDARDLINESUBPROJNO: Sub Proj No").
              setSize(50);         
      quality_standard_line_blk.addField("ITEM3_PARENT_PROJ_NO").
              setInsertable().
              setHidden().
              setDbName("PARENT_PROJ_NO").
              setLabel("QUANLITYSTANDARDLINEPARENTPROJNO: Parent Proj No").
              setSize(50);

      quality_standard_line_blk.addField("ITEM3_NODE_LEVEL","Number").
              setInsertable().
              setDbName("NODE_LEVEL").
              setHidden().
              setLabel("QUANLITYSTANDARDLINENODELEVEL: Node Level").
              setSize(30);
      quality_standard_line_blk.addField("ITEM3_IS_LEAF").
              setInsertable().
              setDbName("IS_LEAF").
              setHidden().
              setLabel("QUANLITYSTANDARDLINEISLEAF: Is Leaf").
              setSize(5);
      quality_standard_line_blk.addField("ITEM3_IS_MAIN_CONTROL").
              setInsertable().
              setDbName("IS_MAIN_CONTROL").
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINEISMAINCONTROL: Is Main Control").
              setSize(5);
      quality_standard_line_blk.addField("ITEM3_SHOULD_CHECK_NUM","Number").
              setInsertable().
              setDbName("SHOULD_CHECK_NUM").
              setLabel("QUANLITYSTANDARDLINESHOULDCHECKNUM: Should Check Num").
              setSize(30);
      quality_standard_line_blk.addField("ITEM3_TEMPLET_NO").
              setInsertable().
              setHidden().
              setDbName("TEMPLET_NO").
              setLabel("QUANLITYSTANDARDLINETEMPLETNO: Templet No").
              setSize(20);
      quality_standard_line_blk.addField("ITEM3_CONSTRUCT_ORG").
              setInsertable().
              setDbName("CONSTRUCT_ORG").
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINECONSTRUCTORG: Construct Org").
              setSize(5);
      quality_standard_line_blk.addField("ITEM3_SURVEY_ORG").
              setInsertable().
              setDbName("SURVEY_ORG").
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINESURVEYORG: Survey Org").
              setSize(5);
      quality_standard_line_blk.addField("ITEM3_DESIGN_ORG").
              setInsertable().
              setDbName("DESIGN_ORG").
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINEDESIGNORG: Design Org").
              setSize(5);
      quality_standard_line_blk.addField("ITEM3_SUPERVISION_ORG").
              setInsertable().
              setDbName("SUPERVISION_ORG").
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINESUPERVISIONORG: Supervision Org").
              setSize(5);
      quality_standard_line_blk.addField("ITEM3_BULIDING_ORG").
              setInsertable().
              setDbName("BULIDING_ORG").
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINEBULIDINGORG: Buliding Org").
              setSize(5);
      quality_standard_line_blk.addField("ITEM3_MANUFACTURE_ORG").
              setInsertable().
              setDbName("MANUFACTURE_ORG").
              setCheckBox("FALSE,TRUE").
              setLabel("QUANLITYSTANDARDLINEMANUFACTUREORG: Manufacture Org").
              setSize(5);
      quality_standard_line_blk.addField("ITEM3_QUA_CLASS_NO").
              setInsertable().
              setDbName("QUA_CLASS_NO").
              setDynamicLOV("QUA_PROJECT_CLASS").
//              setDynamicLOV("QUA_PROJECT_CLASS","ITEM_PROJECT_TYPE_NO").
              setLabel("QUANLITYSTANDARDLINEQUACLASSNO: Qua Class No").
              setSize(20).
              setMaxLength(50);
      quality_standard_line_blk.addField("ITEM3_QUA_CLASS_DESC").
              setFunction("QUA_PROJECT_CLASS_API.Get_Description(:ITEM_PROJECT_TYPE_NO,:QUA_CLASS_NO)").
              setLabel("QUANLITYSTANDARDLINEQUACLASSDESC: Qua Class Desc").
              setReadOnly();      
      mgr.getASPField("QUA_CLASS_NO").setValidation("QUA_CLASS_DESC");
      quality_standard_line_blk.addField("ITEM3_QUA_MODE_NO").
              setInsertable().
              setDbName("QUA_MODE_NO").
              setDynamicLOV("QUA_CONTROL_MODE").
              setLabel("QUANLITYSTANDARDLINEQUAMODENO: Qua Mode No").
              setSize(20).
              setMaxLength(50);
      quality_standard_line_blk.addField("ITEM3_QUA_MODE_DESC").
              setFunction("QUA_CONTROL_MODE_API.Get_Description(:QUA_MODE_NO)").
              setLabel("QUANLITYSTANDARDLINEQUAMODEDESC: Qua Mode No").
              setReadOnly();      
      mgr.getASPField("QUA_MODE_NO").setValidation("QUA_MODE_DESC");
         
      quality_standard_line_blk.setView("QUANLITY_STANDARD_LINE");
//      quality_standard_line_blk.defineCommand("QUANLITY_STANDARD_LINE_API","New__,Modify__,Remove__");
      quality_standard_line_blk.defineCommand("QUANLITY_STANDARD_LINE_API","Remove__");
      quality_standard_line_blk.setMasterBlock(headblk);      
      quality_standard_line_set = quality_standard_line_blk.getASPRowSet();
      quality_standard_line_bar = mgr.newASPCommandBar(quality_standard_line_blk);     
      quality_standard_line_tbl = mgr.newASPTable(quality_standard_line_blk);
      quality_standard_line_bar.defineCommand(quality_standard_line_bar.OKFIND, "okFindQuery1");
//      quality_standard_line_bar.defineCommand(quality_standard_line_bar.NEWROW, "newRowITEM1");
//      quality_standard_line_bar.disableCommand("quality_standard_line_bar.NEWROW");
      quality_standard_line_tbl.setTitle("QUANLITYSTANDARDLINETBLITEM: Quanlity Standard Line Item");
      quality_standard_line_tbl.enableRowSelect();
      quality_standard_line_tbl.setWrap();
      quality_standard_line_lay = quality_standard_line_blk.getASPBlockLayout();
      quality_standard_line_lay.setDefaultLayoutMode(quality_standard_line_lay.MULTIROW_LAYOUT);


      
      Pending_doc_reference_object_blk = mgr.newASPBlock("ITEM2");
      Pending_doc_reference_object_blk.addField("ITEM1_VIEW_FILE").
                                       setFunction("''").
                                       setReadOnly().  
                                       unsetQueryable().
                                       setLabel("DOCSENDTRANSREFERENCEBLKVIEWFILE: View File").
                                       setHyperlink("../docmaw/EdmMacro.page?PROCESS_DB=VIEW&DOC_TYPE=ORIGINAL", "ITEM1_DOC_CLASS DOC_CLASS,ITEM1_DOC_NO DOC_NO,ITEM1_DOC_SHEET DOC_SHEET,ITEM1_DOC_REV DOC_REV", "NEWWIN").
                                       setAsImageField();
      Pending_doc_reference_object_blk.addField("ITEM1_DOC_CLASS").setDbName("DOC_CLASS").setLabel("DOCSENDTRANSREFERENCEBLKDOCCLASS: Doc Class");
      Pending_doc_reference_object_blk.addField("ITEM1_DOC_NO").setDbName("DOC_NO").setLabel("DOCSENDTRANSREFERENCEBLKDOCNO: Doc No").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_DOC_SHEET").setDbName("DOC_SHEET").setLabel("DOCSENDTRANSREFERENCEBLKDOCSHEET: Doc sheet").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_DOC_REV").setDbName("DOC_REV").setLabel("DOCSENDTRANSREFERENCEBLKDOCREV: Doc Rev").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_LU_NAME").setDbName("LU_NAME").setLabel("DOCSENDTRANSREFERENCEBLKLUNAME: Lu Name").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_KEY_REF").setDbName("KEY_REF").setLabel("DOCSENDTRANSREFERENCEBLKKEYREF: Key Ref").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_KEY_VALUE").setDbName("KEY_VALUE").setLabel("DOCSENDTRANSREFERENCEBLKKEYVALUE: Key Value").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_REV_TITLE").setDbName("DOC_TITLE").setLabel("DOCSENDTRANSREFERENCEBLKREVTITLE: Rev Title").setFieldHyperlink("../docmaw/DocIssue.page", "ITEM1_PAGE_URL","ITEM1_DOC_CLASS DOC_CLASS,ITEM1_DOC_NO DOC_NO,ITEM1_DOC_SHEET DOC_SHEET,ITEM1_DOC_REV DOC_REV");
      Pending_doc_reference_object_blk.addField("ITEM1_DOC_CODE").setDbName("DOC_CODE").setLabel("DOCSENDTRANSREFERENCEBLKDOCCODE: Doc Code");
      Pending_doc_reference_object_blk.addField("ITEM1_SUB_CLASS").setDbName("SUB_CLASS").setLabel("DOCSENDTRANSREFERENCEBLKSUBCLASS: Sub Class");
      Pending_doc_reference_object_blk.addField("ITEM1_PAGE_URL").setFunction("nvl(DOC_CLASS_API.Get_Page_Url(:ITEM1_DOC_CLASS), DOC_SUB_CLASS_API.Get_Page_Url(:ITEM1_DOC_CLASS,:ITEM1_SUB_CLASS))").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_IS_ELE_DOC").
                                       setFunction("EDM_FILE_API.Have_Edm_File(:ITEM1_DOC_CLASS,:ITEM1_DOC_NO,:ITEM1_DOC_SHEET,:ITEM1_DOC_REV)").
                                       setHidden().
                                       setLabel("DOCSENDTRANSREFERENCEBLKISELEDOC: Is Ele Doc").
                                       setSize(5);
      
      Pending_doc_reference_object_blk.setView("DOC_REFERENCE_OBJECT");
      Pending_doc_reference_object_blk.setMasterBlock(headblk);
      Pending_doc_reference_object_set = Pending_doc_reference_object_blk.getASPRowSet();
      Pending_doc_reference_object_bar = mgr.newASPCommandBar(Pending_doc_reference_object_blk);
      Pending_doc_reference_object_bar.defineCommand(Pending_doc_reference_object_bar.OKFIND, "okFindITEM11");
      Pending_doc_reference_object_tbl = mgr.newASPTable(Pending_doc_reference_object_blk);
      Pending_doc_reference_object_tbl.enableRowSelect();
      Pending_doc_reference_object_tbl.setWrap();
      Pending_doc_reference_object_lay = Pending_doc_reference_object_blk.getASPBlockLayout();
      Pending_doc_reference_object_lay.setDefaultLayoutMode(Pending_doc_reference_object_lay.MULTIROW_LAYOUT);
      

      tabs = newASPTabContainer("TAB1");
//      tabs.setDirtyFlagEnabled(false);
      tabs.addTab("QUANLITYSTANDARDLINESUBPROJECTTAB: Sub Project ","javascript:commandSet('MAIN.activateSubProject','')");
      tabs.addTab("QUANLITYSTANDARDLINEQUALITYQLANLINE: Quality Qlan Line ","javascript:commandSet('MAIN.activateQualityQlanLine','')");
      tabs.setContainerSpace(0);
      tabs.setLeftTabSpace(0);
      tabs.setTabWidth(150);
//      tabs.setTableVisibility(false);      
      
      item_tabs = newASPTabContainer("TAB2");
      item_tabs.addTab("QUASTANDARDLINEPENDDOC: Qua Standard Line Pend Doc","javascript:commandSet('MAIN.activateITEM11','')");

      headbar.removeCustomCommand("activateSubProject");
      headbar.removeCustomCommand("activateQualityQlanLine");
      itembar.removeCustomCommand("activateITEM11");

   }



   public void  adjust()
   {
      // fill function body
      ASPManager mgr = getASPManager();
      
      if ((tabs.getActiveTab() == 1) && (itemset.countRows() == 0))
      {
         itembar.disableCommand(itembar.EDITROW);
        
      }      
//      quality_standard_line_bar.disableCommand("quality_standard_line_bar.DELETE");
//      quality_standard_line_bar.disableCommand("quality_standard_line_bar.EDITION");
//      quality_standard_line_bar.disableCommand("quality_standard_line_bar.NEWROW");
      
   }

   
   public String tabsInit()
   {
      return tabs.showTabsInit();
   }
   
   public String tabsFinish()
   {
      return tabs.showTabsFinish();      
   }

   public String itemtabsInit()
   {
      return(item_tabs.showTabsInit());
   }

   public String itemtabsFinish()
   {
      return(item_tabs.showTabsFinish());
   } 
   
   public void  activateSubProject()
   {
      tabs.setActiveTab(1);
         okFindITEM0();
   }   
   public void  activateQualityQlanLine()
   {
      tabs.setActiveTab(2);
      okFindQuery1();
   }
   public void activateITEM11() {
      item_tabs.setActiveTab(1);  
      okFindITEM11();
  }   
   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return null;
   }


   protected String getTitle()
   {
      return null;
   }


//   protected void printContents() throws FndException
//   {
//      ASPManager mgr = getASPManager();
//      if (headlay.isVisible())
//          appendToHTML(headlay.show());
//
//   }
   protected String getImageFieldTag(ASPField imageField, ASPRowSet rowset, int rowNum) throws FndException
   {
      ASPManager mgr = getASPManager();
      String imgSrc = mgr.getASPConfig().getImagesLocation();
      if (rowset.countRows() > 0)
      {
         if(("ITEM1_VIEW_FILE").equals(imageField.getName()))
         {
            if ("TRUE".equals(rowset.getValueAt(rowNum, "ITEM1_IS_ELE_DOC")))
            {
               imgSrc += "folder.gif";
               return "<img src=\""+imgSrc+"\" height=\"16\" width=\"16\" border=\"0\">";
            }
            else
            {
               return "";
            }
        }   
    }
     return "" ;        
  }
 //Modify method getContents()
   protected AutoString getContents() throws FndException{
      ASPManager mgr = getASPManager();
      AutoString out = getOutputStream();
      out.clear();  
      out.append("<html>\n");
      out.append("<head>\n");
      out.append(mgr.generateHeadTag(""));
      out.append("</head>\n");
      out.append("<body ");
      out.append(mgr.generateBodyTag());
      out.append(">\n");
      out.append("<form ");
      out.append(mgr.generateFormTag());
      out.append(">\n");
      out.append("\n");
      
      appendToHTML(tabsInit());

      if (tabs.getActiveTab() == 1){
         appendToHTML(itemlay.show());
         appendToHTML(itemtabsInit());
         if (  (itemlay.isSingleLayout() || itemlay.isCustomLayout())) {  
//            appendToHTML(itemlay.show());
            if (item_tabs.getActiveTab() == 1  ) 
            {
               appendToHTML(Pending_doc_reference_object_lay.show());
            }
//            else if (item_tabs.getActiveTab() == 2  ) 
//               appendToHTML(Conference_doc_reference_object_lay.show());
            appendToHTML(itemtabsFinish());
         }
      }
      else if (tabs.getActiveTab() == 2)
         appendToHTML(quality_standard_line_lay.show());
                  
      appendToHTML(tabsFinish());       
      
      appendDirtyJavaScript("// =====================================================================================================================================\n");
      appendDirtyJavaScript("// ==================================================  CLIENT FUNCTIONS  ===============================================================\n");
      appendDirtyJavaScript("// =====================================================================================================================================\n");

      appendDirtyJavaScript("function refreshTree(index_value)\n");
      appendDirtyJavaScript("{\n");
      appendDirtyJavaScript("   parent_url = this.parent.location.href;\n");
      appendDirtyJavaScript("   if (parent_url.indexOf(\"ChildFrame.page\")!=-1) // if not unlocked\n");
      appendDirtyJavaScript("   {\n");
      appendDirtyJavaScript("     if (index_value==0)\n");
      appendDirtyJavaScript("     {\n");
      appendDirtyJavaScript("        url_str = this.parent.frames[\"contents\"].location.href;\n");
      appendDirtyJavaScript("        if ( url_str.indexOf(\"RELOAD_TAB\") == -1 )\n");
      appendDirtyJavaScript("           url_str += \"&RELOAD_TAB=FALSE\";   // Add this to identify this call from the navigator.\n");
      appendDirtyJavaScript("        this.parent.frames[\"contents\"].location.href = url_str;\n");
      appendDirtyJavaScript("     }\n");
      appendDirtyJavaScript("     else\n");
      appendDirtyJavaScript("     {\n");
      appendDirtyJavaScript("     }\n");
      appendDirtyJavaScript("   }\n");
      appendDirtyJavaScript("}\n");
 
      if ((bRefreshTree)&&(!mgr.isEmpty(list_index)))
      {
         appendDirtyJavaScript("this.parent.frames[\"contents\"].refresh('FALSE');\n");
         bRefreshTree = false;
      }
      else if ((bRefreshParent)&&(!mgr.isEmpty(parent_index)))
      {
         appendDirtyJavaScript("   refreshTree(");
         // XSS_Safe DINHLK 20070808
         appendDirtyJavaScript(mgr.encodeStringForJavascript(parent_index));
         appendDirtyJavaScript(");\n");
         bRefreshTree = false;
      }
      
      appendDirtyJavaScript("function refreshParent()\n");
      appendDirtyJavaScript("{\n");
      appendDirtyJavaScript(" document.form.REFRESH_PARENT.value=\"TRUE\"\n");
      appendDirtyJavaScript(" submit() \n");
      appendDirtyJavaScript("}\n");    
     
      out.append(mgr.endPresentation());
      out.append("</form>\n");
      out.append("</body>\n");
      out.append("</html>");
      return out;
 }
 /*  protected AutoString getContentsF() throws FndException
   {
      AutoString out = getOutputStream();
      out.clear();
      ASPManager mgr = getASPManager();
      ASPForm frm = mgr.getASPForm();
      ASPHTMLFormatter fmt = mgr.newASPHTMLFormatter();
      out.append("<html>\n");
      out.append("<head>\n");
      out.append(mgr.generateHeadTag("QUANLITYSTANDARDTBLITEM: Quanlity Standards Library Item"));
      out.append("</head>\n");
      out.append("<body ");
      out.append(customBodyTag);
      out.append(">\n");
      out.append("<form ");
      out.append(mgr.generateFormTag());
      out.append(">\n");
      
      if (itemlay.isVisible()  )
      {
         out.append(tabsInit());
      }     
      
      if (tabs.getActiveTab()==1)
      {
         out.append(itemlay.show());
         out.append(item_tabs.showTabsInit());
         out.append(Pending_doc_reference_object_lay.show());
         out.append(item_tabs.showTabsFinish());
      }      
      if (itemlay.isVisible() )
      {
         out.append(tabs.showTabsFinish());
      }
      appendDirtyJavaScript("// =====================================================================================================================================\n");
      appendDirtyJavaScript("// ==================================================  CLIENT FUNCTIONS  ===============================================================\n");
      appendDirtyJavaScript("// =====================================================================================================================================\n");

      appendDirtyJavaScript("function refreshTree(index_value)\n");
      appendDirtyJavaScript("{\n");
      appendDirtyJavaScript("   parent_url = this.parent.location.href;\n");
      appendDirtyJavaScript("   if (parent_url.indexOf(\"ChildFrame.page\")!=-1) // if not unlocked\n");
      appendDirtyJavaScript("   {\n");
      appendDirtyJavaScript("     if (index_value==0)\n");
      appendDirtyJavaScript("     {\n");
      appendDirtyJavaScript("        url_str = this.parent.frames[\"contents\"].location.href;\n");
      appendDirtyJavaScript("        if ( url_str.indexOf(\"RELOAD_TAB\") == -1 )\n");
      appendDirtyJavaScript("           url_str += \"&RELOAD_TAB=FALSE\";   // Add this to identify this call from the navigator.\n");
      appendDirtyJavaScript("        this.parent.frames[\"contents\"].location.href = url_str;\n");
      appendDirtyJavaScript("     }\n");
      appendDirtyJavaScript("     else\n");
      appendDirtyJavaScript("     {\n");
      appendDirtyJavaScript("     }\n");
      appendDirtyJavaScript("   }\n");
      appendDirtyJavaScript("}\n");
      
      if ((bRefreshTree)&&(!mgr.isEmpty(list_index)))
      {
         appendDirtyJavaScript("this.parent.frames[\"contents\"].refresh('FALSE');\n");
         bRefreshTree = false;
      }
      else if ((bRefreshParent)&&(!mgr.isEmpty(parent_index)))
      {
         appendDirtyJavaScript("   refreshTree(");
         // XSS_Safe DINHLK 20070808
         appendDirtyJavaScript(mgr.encodeStringForJavascript(parent_index));
         appendDirtyJavaScript(");\n");
         bRefreshTree = false;
      }
//      else if (bRefreshTreeOnly)
//      {
//         appendDirtyJavaScript("this.parent.frames[\"contents\"].refresh('FALSE');\n");
//         bRefreshTreeOnly = false;
//      }      
      
      out.append(mgr.endPresentation());
      out.append("</form>\n");
      out.append("</body>\n");
      out.append("</html>");
      
      appendDirtyJavaScript("function refreshParent()\n");
      appendDirtyJavaScript("{\n");
      appendDirtyJavaScript(" document.form.REFRESH_PARENT.value=\"TRUE\"\n");
      appendDirtyJavaScript(" submit() \n");
      appendDirtyJavaScript("}\n");      
      
      return out;      
   }*/
   
   
   
}
