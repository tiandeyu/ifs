/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.quamaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

 
//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class QuamanBaseData extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.quamaw.QuamanBaseData");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock ProjectTypeblk;
   private ASPRowSet ProjectTypeset;
   private ASPCommandBar ProjectTypebar;
   private ASPTable ProjectTypetbl;
   private ASPBlockLayout ProjectTypelay;
   
   private ASPBlock QuaCriterionblk;
   private ASPRowSet QuaCriterionset;
   private ASPCommandBar QuaCriterionbar;
   private ASPTable QuaCriteriontbl;
   private ASPBlockLayout QuaCriterionlay;   
   
   private ASPBlock QuaSpecialtyblk;
   private ASPRowSet QuaSpecialtyset;
   private ASPCommandBar QuaSpecialtybar;
   private ASPTable QuaSpecialtytbl;
   private ASPBlockLayout QuaSpecialtylay;      
   
   private ASPBlock QuaProjectClassblk;
   private ASPRowSet QuaProjectClassset;
   private ASPCommandBar QuaProjectClassbar;
   private ASPTable QuaProjectClasstbl;
   private ASPBlockLayout QuaProjectClasslay;   
   
   private ASPBlock QualityGradeblk;
   private ASPRowSet QualityGradeset;
   private ASPCommandBar QualityGradebar;
   private ASPTable QualityGradetbl;
   private ASPBlockLayout QualityGradelay;     

   private ASPBlock QuaControlModeblk;
   private ASPRowSet QuaControlModeset;
   private ASPCommandBar QuaControlModebar;
   private ASPTable QuaControlModetbl;
   private ASPBlockLayout QuaControlModelay;      
   
   private ASPTabContainer tabs;
   private ASPTabContainer item_tabs;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  QuamanBaseData (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else
         okFind();      
//      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
//         okFind();
      adjust();
      //±Í«©“≥
      
      tabs.saveActiveTab(); 
      item_tabs.saveActiveTab(); 
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(ProjectTypeblk);
      q = trans.addQuery(ProjectTypeblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,ProjectTypeblk);
      if (  ProjectTypeset.countRows() == 0 )
      {
         mgr.showAlert("QUABASEDATANODATA: No data found.");
         ProjectTypeset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(ProjectTypeblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      ProjectTypelay.setCountValue(toInt(ProjectTypeset.getValue("N")));
      ProjectTypeset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("ITEM1","PROJECT_TYPE_API.New__",ProjectTypeblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      ProjectTypeset.addRow(data);
   }
   
   
   public void okFindITEM11()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      if (ProjectTypeset.countRows() == 0) return;
      q = trans.addQuery(QuaCriterionblk);
      q.addWhereCondition("PROJECT_TYPE_NO = ?");
      q.addParameter("PROJECT_TYPE_NO", ProjectTypeset.getValue("PROJECT_TYPE_NO"));
      q.includeMeta("ALL");
      headrowno = ProjectTypeset.getCurrentRowNo();
      mgr.querySubmit(trans,QuaCriterionblk);
      ProjectTypeset.goTo(headrowno);
   }
   public void newRowITEM11()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM11","QUA_CRITERION_API.New__",QuaCriterionblk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM11_PROJECT_TYPE_NO", ProjectTypeset.getValue("PROJECT_TYPE_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM11/DATA");
      QuaCriterionset.addRow(data);
   }   

   public void countFindITEM11()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(QuaCriterionblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      QuaCriterionlay.setCountValue(toInt(QuaCriterionset.getValue("N")));
      QuaCriterionset.clear();
   }      
   
   public void okFindITEM111()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      if (ProjectTypeset.countRows() == 0) return;
      if (QuaCriterionset.countRows() == 0) return;
      
      q = trans.addQuery(QuaSpecialtyblk);
      q.addWhereCondition("PROJECT_TYPE_NO = ? AND CRITERION_NO = ?");
      q.addParameter("PROJECT_TYPE_NO", QuaCriterionset.getValue("PROJECT_TYPE_NO"));
      q.addParameter("CRITERION_NO", QuaCriterionset.getValue("CRITERION_NO"));
      
      q.includeMeta("ALL");
      headrowno = QuaCriterionset.getCurrentRowNo();
      mgr.querySubmit(trans,QuaSpecialtyblk);
      QuaCriterionset.goTo(headrowno);
   }
   public void newRowITEM111()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM111","QUA_SPECIALTY_API.New__",QuaSpecialtyblk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM111_PROJECT_TYPE_NO", QuaCriterionset.getValue("PROJECT_TYPE_NO"));
      cmd.setParameter("ITEM111_CRITERION_NO", QuaCriterionset.getValue("CRITERION_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM111/DATA");
      QuaSpecialtyset.addRow(data);
   }   

   public void countFindITEM111()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(QuaSpecialtyblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      QuaSpecialtylay.setCountValue(toInt(QuaSpecialtyset.getValue("N")));
      QuaSpecialtyset.clear();
   }         
   
   public void okFindITEM12()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      if (ProjectTypeset.countRows() == 0) return;
      q = trans.addQuery(QuaProjectClassblk);
      q.addWhereCondition("PROJECT_TYPE_NO = ?");
      q.addParameter("PROJECT_TYPE_NO", ProjectTypeset.getValue("PROJECT_TYPE_NO"));
      q.includeMeta("ALL");
      headrowno = ProjectTypeset.getCurrentRowNo();
      mgr.querySubmit(trans,QuaProjectClassblk);
      ProjectTypeset.goTo(headrowno);
   }
   public void newRowITEM12()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM12","QUA_PROJECT_CLASS_API.New__",QuaProjectClassblk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM12_PROJECT_TYPE_NO", ProjectTypeset.getValue("PROJECT_TYPE_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM12/DATA");
      QuaProjectClassset.addRow(data);
   }   

   public void countFindITEM12()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(QuaProjectClassblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      QuaProjectClasslay.setCountValue(toInt(QuaProjectClassset.getValue("N")));
      QuaProjectClassset.clear();
   }         
   
   public void okFindITEM13()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      if (ProjectTypeset.countRows() == 0) return;
      q = trans.addQuery(QualityGradeblk);
      q.addWhereCondition("PROJECT_TYPE_NO = ?");
      q.addParameter("PROJECT_TYPE_NO", ProjectTypeset.getValue("PROJECT_TYPE_NO"));
      q.includeMeta("ALL");
      headrowno = ProjectTypeset.getCurrentRowNo();
      mgr.querySubmit(trans,QualityGradeblk);
      ProjectTypeset.goTo(headrowno);
   }
   public void newRowITEM13()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM13","QUALITY_GRADE_API.New__",QuaProjectClassblk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM12_PROJECT_TYPE_NO", ProjectTypeset.getValue("PROJECT_TYPE_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM13/DATA");
      QualityGradeset.addRow(data);
   }   

   public void countFindITEM13()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(QualityGradeblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      QualityGradelay.setCountValue(toInt(QualityGradeset.getValue("N")));
      QualityGradeset.clear();
   }         
      
   
   public void okFindITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      
      mgr.createSearchURL(QuaControlModeblk);
      q = trans.addQuery(QuaControlModeblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,QuaControlModeblk);
      if (  QuaControlModeset.countRows() == 0 )
      {
         mgr.showAlert("QUABASEDATANODATA: No data found.");
         QuaControlModeset.clear();
      }      
      
   }
   public void newRowITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("ITEM2","QUA_CONTROL_MODE_API.New__",QuaControlModeblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM2/DATA");
      QuaControlModeset.addRow(data);
   }   
   
   public void countFindITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(QuaControlModeblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      QuaControlModelay.setCountValue(toInt(QuaControlModeset.getValue("N")));
      QuaControlModeset.clear();
   }   

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      ProjectTypeblk = mgr.newASPBlock("MAIN");
      ProjectTypeblk.addField("OBJID").
              setHidden();
      ProjectTypeblk.addField("OBJVERSION").
              setHidden();
      ProjectTypeblk.addField("PROJECT_TYPE_NO").
              setMandatory().
              setInsertable().
              setLabel("PROJECTTYPEPROJECTTYPENO: Project Type No").
              setSize(15);
      ProjectTypeblk.addField("PROJECT_TYPE_NAME").
              setInsertable().
              setLabel("PROJECTTYPEPROJECTTYPENAME: Project Type Name").
              setSize(30);
      ProjectTypeblk.setView("PROJECT_TYPE");
      ProjectTypeblk.defineCommand("PROJECT_TYPE_API","New__,Modify__,Remove__");
      ProjectTypeset = ProjectTypeblk.getASPRowSet();
      ProjectTypebar = mgr.newASPCommandBar(ProjectTypeblk);
      ProjectTypetbl = mgr.newASPTable(ProjectTypeblk);
      ProjectTypetbl.setTitle("PROJECTTYPETBLHEAD: Project Types");
      ProjectTypetbl.enableRowSelect();
      ProjectTypetbl.setWrap();
      ProjectTypelay = ProjectTypeblk.getASPBlockLayout();
      ProjectTypelay.setDefaultLayoutMode(ProjectTypelay.MULTIROW_LAYOUT);
      ProjectTypebar.addCustomCommand("activateITEM1",mgr.translate("QUABASEDATAITEM1: Project Type"));
      ProjectTypebar.addCustomCommand("activateITEM2",mgr.translate("QUABASEDATAITEM2: Quality Control Mode"));
      ProjectTypebar.addCustomCommand("activateITEM11",mgr.translate("QUABASEDATAITEM11: Quality Criterion"));
      ProjectTypebar.addCustomCommand("activateITEM12",mgr.translate("QUABASEDATAITEM12: Quality Project Class"));
      ProjectTypebar.addCustomCommand("activateITEM13",mgr.translate("QUABASEDATAITEM13: Quality Grade"));
 		//œÓƒø¿‡–Õ◊”±Ì  —È ’πÊ∑∂±‡¬Î
      QuaCriterionblk = mgr.newASPBlock("ITEM11");
      QuaCriterionblk.addField("ITEM11_OBJID").
              setDbName("OBJID").
              setHidden();
      QuaCriterionblk.addField("ITEM11_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      QuaCriterionblk.addField("ITEM11_PROJECT_TYPE_NO").
              setDbName("PROJECT_TYPE_NO").
              setHidden().
              setMandatory().
              setInsertable().
              setDynamicLOV("PROJECT_TYPE",600,450).
              setLabel("QUACRITERIONPROJECTTYPENO: Project Type No").
              setSize(20);
      QuaCriterionblk.addField("CRITERION_NO").
              setMandatory().
              setInsertable().
              setLabel("QUACRITERIONCRITERIONNO: Criterion No").
              setSize(50);
      QuaCriterionblk.addField("ITEM11_DESCRIPTION").
              setDbName("DESCRIPTION").
              setInsertable().
              setLabel("QUACRITERIONDESCRIPTION: Description").
              setSize(50).
              setMaxLength(100);
      QuaCriterionblk.setView("QUA_CRITERION");
      QuaCriterionblk.defineCommand("QUA_CRITERION_API","New__,Modify__,Remove__");
      QuaCriterionblk.setMasterBlock(ProjectTypeblk);
      QuaCriterionset = QuaCriterionblk.getASPRowSet();
      QuaCriterionbar = mgr.newASPCommandBar(QuaCriterionblk);
      QuaCriterionbar.defineCommand(QuaCriterionbar.OKFIND, "okFindITEM11");
      QuaCriterionbar.defineCommand(QuaCriterionbar.NEWROW, "newRowITEM11");
      QuaCriterionbar.defineCommand(QuaCriterionbar.COUNTFIND,"countFindITEM11");
      QuaCriteriontbl = mgr.newASPTable(QuaCriterionblk);
      QuaCriteriontbl.setTitle("QUACRITERIONTBLHEAD: Quatity Criterions");
      QuaCriteriontbl.enableRowSelect();
      QuaCriteriontbl.setWrap();
      QuaCriterionlay = QuaCriterionblk.getASPBlockLayout();
      QuaCriterionlay.setDefaultLayoutMode(QuaCriterionlay.MULTIROW_LAYOUT);  
      //◊®“µ
      QuaSpecialtyblk = mgr.newASPBlock("ITEM111");
      QuaSpecialtyblk.addField("ITEM111_OBJID").
              setDbName("OBJID").
              setHidden();
      QuaSpecialtyblk.addField("ITEM111_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      QuaSpecialtyblk.addField("ITEM111_PROJECT_TYPE_NO").
              setDbName("PROJECT_TYPE_NO").
              setHidden().
              setMandatory().
              setInsertable().
              setLabel("QUASPECIALTYPROJECTTYPENO: Project Type No").
              setDynamicLOV("PROJECT_TYPE",600,450).
              setSize(20);
      QuaSpecialtyblk.addField("ITEM111_CRITERION_NO").
              setDbName("CRITERION_NO").
              setHidden().
              setMandatory().
              setInsertable().
              setLabel("QUASPECIALTYCRITERIONNO: Criterion No").
              setDynamicLOV("QUA_CRITERION","PROJECT_TYPE_NO",600,450).
              setSize(50);
      QuaSpecialtyblk.addField("SPECIALTY_NO").
              setMandatory().
              setInsertable().
              setLabel("QUASPECIALTYSPECIALTYNO: Specialty No").
              setSize(50);
      QuaSpecialtyblk.addField("ITEM111_DESCRIPTION").
              setDbName("DESCRIPTION").
              setInsertable().
              setLabel("QUASPECIALTYDESCRIPTION: Description").
              setSize(50).
              setMaxLength(100);
      QuaSpecialtyblk.addField("ITEM111_NOTE").
              setDbName("NOTE").
              setInsertable().
              setLabel("QUASPECIALTYNOTE: Note").
              setSize(50).
              setMaxLength(500).
              setHeight(3);;
      QuaSpecialtyblk.setView("QUA_SPECIALTY");
      QuaSpecialtyblk.defineCommand("QUA_SPECIALTY_API","New__,Modify__,Remove__");
      QuaSpecialtyblk.setMasterBlock(QuaCriterionblk);
      QuaSpecialtyset = QuaSpecialtyblk.getASPRowSet();
      QuaSpecialtybar = mgr.newASPCommandBar(QuaSpecialtyblk);
      QuaSpecialtybar.defineCommand(QuaSpecialtybar.OKFIND, "okFindITEM111");
      QuaSpecialtybar.defineCommand(QuaSpecialtybar.NEWROW, "newRowITEM111");
      QuaSpecialtybar.defineCommand(QuaSpecialtybar.COUNTFIND,"countFindITEM111");      
      QuaSpecialtytbl = mgr.newASPTable(QuaSpecialtyblk);
      QuaSpecialtytbl.setTitle("QUASPECIALTYTBLHEAD: Quatity Specialtys");
      QuaSpecialtytbl.enableRowSelect();
      QuaSpecialtytbl.setWrap();
      QuaSpecialtylay = QuaSpecialtyblk.getASPBlockLayout();
      QuaSpecialtylay.setDefaultLayoutMode(QuaSpecialtylay.MULTIROW_LAYOUT);      
      
      //π§≥Ã±‡∫≈ªÆ∑÷
      QuaProjectClassblk = mgr.newASPBlock("ITEM12");
      QuaProjectClassblk.addField("ITEM12_OBJID").
              setDbName("OBJID").
              setHidden();
      QuaProjectClassblk.addField("ITEM12_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      QuaProjectClassblk.addField("ITEM12_PROJECT_TYPE_NO").
              setDbName("PROJECT_TYPE_NO").
              setHidden().
              setMandatory().
              setInsertable().
              setDynamicLOV("PROJECT_TYPE",600,450).
              setLabel("QUAPROJECTCLASSPROJECTTYPENO: Project Type No").
              setSize(20);
      QuaProjectClassblk.addField("CLASS_NO").
              setMandatory().
              setInsertable().
              setLabel("QUAPROJECTCLASSCLASSNO: Class No").
              setSize(50);
      QuaProjectClassblk.addField("ITEM12_DESCRIPTION").
              setDbName("DESCRIPTION").
              setInsertable().
              setLabel("QUAPROJECTCLASSDESCRIPTION: Description").
              setSize(50).
              setMaxLength(100);
      QuaProjectClassblk.addField("ITEM12_NOTE").
              setDbName("NOTE").
              setInsertable().
              setLabel("QUAPROJECTCLASSNOTE: Note").
              setSize(50).
              setMaxLength(500).
              setHeight(3);
      QuaProjectClassblk.setView("QUA_PROJECT_CLASS");
      QuaProjectClassblk.defineCommand("QUA_PROJECT_CLASS_API","New__,Modify__,Remove__");
      QuaProjectClassblk.setMasterBlock(ProjectTypeblk);
      QuaProjectClassset = QuaProjectClassblk.getASPRowSet();
      QuaProjectClassbar = mgr.newASPCommandBar(QuaProjectClassblk);
      QuaProjectClassbar.defineCommand(QuaProjectClassbar.OKFIND, "okFindITEM12");
      QuaProjectClassbar.defineCommand(QuaProjectClassbar.NEWROW, "newRowITEM12");
      QuaProjectClassbar.defineCommand(QuaProjectClassbar.COUNTFIND,"countFindITEM12");      
      QuaProjectClasstbl = mgr.newASPTable(QuaProjectClassblk);
      QuaProjectClasstbl.setTitle("QUAPROJECTCLASSTBLHEAD: Qua Porject Classs");
      QuaProjectClasstbl.enableRowSelect();
      QuaProjectClasstbl.setWrap();
      QuaProjectClasslay = QuaProjectClassblk.getASPBlockLayout();
      QuaProjectClasslay.setDefaultLayoutMode(QuaProjectClasslay.MULTIROW_LAYOUT);   
      
      /// ¬π µ»º∂
      QualityGradeblk = mgr.newASPBlock("ITEM13");
      QualityGradeblk.addField("ITEM13_OBJID").
              setDbName("OBJID").
              setHidden();
      QualityGradeblk.addField("ITEM13_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      QualityGradeblk.addField("ITEM13_PROJECT_TYPE_NO").
              setDbName("PROJECT_TYPE_NO").
              setHidden().
              setMandatory().
              setInsertable().
              setDynamicLOV("PROJECT_TYPE",600,450).
              setLabel("QUALITYGRADEPROJECTTYPENO: Project Type No").
              setSize(20);
      QualityGradeblk.addField("GRADE_NO").
              setMandatory().
              setInsertable().
              setLabel("QUALITYGRADEGRADENO: Grade No").
              setSize(50);
      QualityGradeblk.addField("ITEM13_DESCRIPTION").
              setDbName("DESCRIPTION").
              setInsertable().
              setLabel("QUALITYGRADEDESCRIPTION: Description").
              setSize(50).
              setMaxLength(100);
      QualityGradeblk.addField("ITEM13_NOTE").
              setDbName("NOTE").
              setInsertable().
              setLabel("QUALITYGRADENOTE: Note").
              setSize(50).
              setMaxLength(500).
              setHeight(3);
      QualityGradeblk.setView("QUALITY_GRADE");
      QualityGradeblk.defineCommand("QUALITY_GRADE_API","New__,Modify__,Remove__");
      QualityGradeblk.setMasterBlock(ProjectTypeblk);
      QualityGradeset = QualityGradeblk.getASPRowSet();
      QualityGradebar = mgr.newASPCommandBar(QualityGradeblk);
      QualityGradebar.defineCommand(QualityGradebar.OKFIND, "okFindITEM13");
      QualityGradebar.defineCommand(QualityGradebar.NEWROW, "newRowITEM13");
      QualityGradebar.defineCommand(QualityGradebar.COUNTFIND,"countFindITEM13");        
      QualityGradetbl = mgr.newASPTable(QualityGradeblk);
      QualityGradetbl.setTitle("setTitle: Quality Grades");
      QualityGradetbl.enableRowSelect();
      QualityGradetbl.setWrap();
      QualityGradelay = QualityGradeblk.getASPBlockLayout();
      QualityGradelay.setDefaultLayoutMode(QualityGradelay.MULTIROW_LAYOUT);      
      
      //±Í«©“≥‘ˆº”
      //÷ ¡øøÿ÷∆ƒ£ Ω
      QuaControlModeblk = mgr.newASPBlock("BLK2");
      QuaControlModeblk.addField("ITEM2_OBJID").
              setDbName("OBJID").
              setHidden();
      QuaControlModeblk.addField("ITEM2_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      QuaControlModeblk.addField("MODE_NO").
              setMandatory().
              setInsertable().
              setLabel("QUACONTROLMODEMODENO: Mode No").
              setSize(50);
      QuaControlModeblk.addField("DESCRIPTION").
              setInsertable().
              setLabel("QUACONTROLMODEDESCRIPTION: Description").
              setSize(50).
              setMaxLength(100);
      QuaControlModeblk.addField("NOTE").
              setInsertable().
              setLabel("QUACONTROLMODENOTE: Note").
              setSize(50).
              setMaxLength(500).
              setHeight(3);
      QuaControlModeblk.setView("QUA_CONTROL_MODE");
      QuaControlModeblk.defineCommand("QUA_CONTROL_MODE_API","New__,Modify__,Remove__");
      QuaControlModeset = QuaControlModeblk.getASPRowSet();
      QuaControlModebar = mgr.newASPCommandBar(QuaControlModeblk);
      QuaControlModebar.defineCommand(QuaControlModebar.OKFIND, "okFindITEM2");
      QuaControlModebar.defineCommand(QuaControlModebar.NEWROW, "newRowITEM2");
      QuaControlModebar.defineCommand(QuaControlModebar.COUNTFIND,"countFindITEM2");
      QuaControlModetbl = mgr.newASPTable(QuaControlModeblk);
      QuaControlModetbl.setTitle("QUACONTROLMODETBLHEAD: Quatity Control Modes");
      QuaControlModetbl.enableRowSelect();
      QuaControlModetbl.setWrap();
      QuaControlModelay = QuaControlModeblk.getASPBlockLayout();
      QuaControlModelay.setDefaultLayoutMode(QuaControlModelay.MULTIROW_LAYOUT);


      //±Í«©“≥‘ˆº”
      tabs = newASPTabContainer("TAB1");
      
      tabs.addTab("QUABASEDATAITEM1: Project Type","javascript:commandSet('MAIN.activateITEM1','')");
      tabs.addTab("QUABASEDATAITEM2: Quality Control Mode","javascript:commandSet('MAIN.activateITEM2','')");
      tabs.setContainerSpace(0);
      tabs.setLeftTabSpace(0);
      tabs.setTabWidth(68);
      tabs.setTableVisibility(false);        
      item_tabs = newASPTabContainer("TAB2");
      item_tabs.addTab("QUABASEDATAITEM11: Project Criterion","javascript:commandSet('MAIN.activateITEM11','')");
      item_tabs.addTab("QUABASEDATAITEM12: Quality Project Class","javascript:commandSet('MAIN.activateITEM12','')");
      item_tabs.addTab("QUABASEDATAITEM13: Quality Grade","javascript:commandSet('MAIN.activateITEM13','')");
  
      ProjectTypebar.removeCustomCommand("activateITEM1");
      ProjectTypebar.removeCustomCommand("activateITEM2");
      ProjectTypebar.removeCustomCommand("activateITEM11");
      ProjectTypebar.removeCustomCommand("activateITEM12");
      ProjectTypebar.removeCustomCommand("activateITEM13");
   }



   public void  adjust()
   {
      // fill function body
      ProjectTypebar.disableCommand(ProjectTypebar.DELETE);
      ProjectTypebar.disableCommand(ProjectTypebar.EDITROW);
      ProjectTypebar.disableCommand(ProjectTypebar.NEWROW);
   }
   
   //±Í«©“≥œ‡πÿ∑Ω∑®
   public String tabsInit()
   {
      return(tabs.showTabsInit());
   }

   public String tabsFinish()
   {
      return(tabs.showTabsFinish());
   }
   
   public String itemtabsInit()
   {
      return(item_tabs.showTabsInit());
   }

   public String itemtabsFinish()
   {
      return(item_tabs.showTabsFinish());
   }   

   
   // ±Í«©“≥≤È—Ø
   public void activateITEM1() {
       tabs.setActiveTab(1);  
       okFind();
       activateITEM11();
   }
   
   public void activateITEM11() {
      item_tabs.setActiveTab(1);  
      okFindITEM11();
      okFindITEM111();
  }   
   
   public void activateITEM12() {
      item_tabs.setActiveTab(2);  
      okFindITEM12();
  }
   
   public void activateITEM13() {
      item_tabs.setActiveTab(3);  
      okFindITEM13();
  }   

   public void activateITEM2() {
       tabs.setActiveTab(2); 
       okFindITEM2();
   }      

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "QUABASEDATADESC: Quality Base Data";
   }


   protected String getTitle()
   {
      return "QUABASEDATATITLE: Quality Base Data";
   }


   protected void printContents() throws FndException
   {
          appendToHTML(tabsInit());

          if (tabs.getActiveTab() == 1){
             appendToHTML(ProjectTypelay.show());
             if (  (ProjectTypelay.isSingleLayout() || ProjectTypelay.isCustomLayout())) {  
                appendToHTML(itemtabsInit());
                if (item_tabs.getActiveTab() == 1  ) 
                {
                   appendToHTML(QuaCriterionlay.show());
                   if (  (QuaCriterionlay.isSingleLayout() || QuaCriterionlay.isCustomLayout())) 
                      appendToHTML(QuaSpecialtylay.show());
                }
                else if (item_tabs.getActiveTab() == 2  ) 
                   appendToHTML(QuaProjectClasslay.show());
                else if (item_tabs.getActiveTab() == 3  ) 
                   appendToHTML(QualityGradelay.show());
                appendToHTML(itemtabsFinish());
             }
          }
          else if (tabs.getActiveTab() == 2)
             appendToHTML(QuaControlModelay.show());
                
          appendToHTML(tabsFinish());

   }      

}
