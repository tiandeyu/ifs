/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.quamaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class QuanlityCheckSumLine extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.quamaw.QuanlityCheckSumLine");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------   


   private ASPTransactionBuffer trans;
   private ASPQuery q;
   protected String sMessage;
   private ASPTabContainer tabs;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  QuanlityCheckSumLine (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      trans  = mgr.newASPTransactionBuffer();      

      if( mgr.commandBarActivated() ) {        
         eval(mgr.commandBarFunction()); 
      }
      else if(mgr.dataTransfered())
         okFind();
      else if ((!mgr.isEmpty(mgr.getQueryStringValue("STANDARD_PRE")) && (!mgr.isEmpty(mgr.getQueryStringValue("SUB_PROJ_NO")))  && (!mgr.isEmpty(mgr.getQueryStringValue("PROJ_NO")))) )
         okFind();        
      else
         okFind();
      tabs.saveActiveTab();
      adjust();
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

/*   public void  searchSubProj()
   {
      ASPManager mgr = getASPManager();

      planno_     = mgr.readValue("PLAN_NO");
      project_no_    = mgr.readValue("PROJ_NO");
      subprojno_  = mgr.readValue("SUB_PROJ_NO");
      aSubProject = true;

      trans.clear();
      if (mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      mgr.querySubmit(trans,headblk);

      if (  headset.countRows() == 0 )
      {
         mgr.showAlert(mgr.translate("PROJWPROJECTINFONODATA: No data found."));
         headset.clear();
      }
      okFindITEM1();
   }*/


   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }

   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFind()
   {
      ASPManager mgr = getASPManager();
      String projNo;
      String subProjNo;
      String standardPre;               
      
      projNo = mgr.getQueryStringValue("PROJ_NO");
      subProjNo = mgr.getQueryStringValue("SUB_PROJ_NO");
      standardPre = mgr.getQueryStringValue("STANDARD_PRE");
      
      trans.clear();
      if("".equals(subProjNo)||subProjNo == null){
         mgr.createSearchURL(headblk);
         headset.addRow(null);
      }
       else{
          q = trans.addEmptyQuery(headblk);
          q.addWhereCondition("PROJ_NO = ? AND SUB_PROJ_NO = ? AND STANDARD_PRE = ?");
          q.addParameter("PROJ_NO", projNo);
          q.addParameter("SUB_PROJ_NO", subProjNo);
          q.addParameter("STANDARD_PRE", standardPre);
          q.includeMeta("ALL");
          mgr.submit(trans);        
      }

   }
   
   public void  performHEAD( String command)
   {
      int currow;
      
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      

      currow = headset.getCurrentRowNo();
      if(headlay.isMultirowLayout())
         headset.storeSelections();
      else
         headset.selectRow();
      headset.markSelectedRows( command );
      mgr.submit(trans);
      headset.goTo(currow);
   }

   
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("PROJ_NO").
            setReadOnly().
            setInsertable().
            setLabel("QUANLITYPLANLINEPROJNO: Proj No").
            setSize(50); 
      headblk.addField("SUB_PROJ_NO").
            setReadOnly().
            setLabel("QUANLITYPLANLINESUBPROJNO: Sub Proj No").
            setSize(50); 
      headblk.addField("SUB_PROJ_NAME").
            setReadOnly().
            setInsertable().
            setLabel("QUANLITYPLANLINESUBPROJNAME: Sub Proj Name").
            setSize(50); 
      headblk.addField("SHOULD_CHECK_NUM","Number").
            setReadOnly().
            setInsertable().
            setLabel("QUANLITYPLANLINECHECKNUM: Check Num").
            setSize(50);
      headblk.addField("STANDARD_PRE").
            setReadOnly().
            setInsertable().
            setLabel("QUANLITYPLANLINESTANDARDPRE: Standard Pre").
            setSize(50);
     
      headblk.setView("QUANLITY_PLAN_LINE_DIST");
      headblk.defineCommand("QUANLITY_PLAN_API","");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.disableCommand(headbar.OKFIND);
      headbar.disableCommand(headbar.FIND);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("QUANLITYPLANTBLHEAD: Quanlity Plans");
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setDialogColumns(2);


      tabs = newASPTabContainer("TAB1");
      tabs.setDirtyFlagEnabled(false);

      tabs.addTab("QUANLITYSTANDARDLINESUBPROJECTTAB: SubProject","javascript:commandSet('MAIN.activateSubProject','')");

      tabs.setContainerSpace(0);
      tabs.setLeftTabSpace(0);
      tabs.setTabWidth(68);
      tabs.setTableVisibility(false); 
   
   }



   public void  adjust()
   {
   
   }

   public void  activateSubProject()
   {
      tabs.setActiveTab(1);
   }
   
   protected String getDescription()
   {
      return "QUANLITYPLANDESC: Quanlity Plan";
   }


   protected String getTitle()
   {
      return "QUANLITYPLANTITLE: Quanlity Plan";
   }


   /*protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      appendToHTML(tabs.showTabsInit());
      if (tabs.getActiveTab() == 1)
          appendToHTML(headlay.show());
      if (quanlity_plan_line_lay.isVisible())
          appendToHTML(quanlity_plan_line_lay.show());
      appendToHTML(tabs.showTabsFinish());
   }*/
   protected AutoString getContents() throws FndException
   {
      AutoString out = getOutputStream();
      out.clear();
      ASPManager mgr = getASPManager();
      ASPForm frm = mgr.getASPForm();
      ASPHTMLFormatter fmt = mgr.newASPHTMLFormatter();
      out.append("<html>\n");
      out.append("<head>\n");
      out.append(mgr.generateHeadTag(""));
      out.append("</head>\n");
      out.append("<body ");
      out.append(">\n");
      out.append("<form ");
      out.append(mgr.generateFormTag());
      out.append(">\n");
      
      if (headlay.isVisible()  )
      {
         out.append(tabs.showTabsInit());
      }
      
      if (tabs.getActiveTab()==1)
      {
         out.append(headlay.show());
      }      
      if (headlay.isVisible() )
      {
         out.append(tabs.showTabsFinish());
      } 
      
      out.append(mgr.endPresentation());
      out.append("</form>\n");
      out.append("</body>\n");
      out.append("</html>");   
      
      return out;      
   }
}
