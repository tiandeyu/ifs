/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.schmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.genbaw.GenbawConstants;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class SchPlanCheckWbsLine extends ASPPageProvider
{
  
   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.schmaw.SchPlanWbsLine");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
 
   private boolean bRefreshTree;
   private String comnd;
   private ASPContext ctx;  
   
   
   private ASPBlock schplanworkblk;
   private ASPRowSet schplanworkset;
   private ASPCommandBar schplanworkbar;
   private ASPTable schplanworktbl;
   private ASPBlockLayout schplanworklay;
   private ASPContext schplanworkctx;
   
   
   private ASPBlock sch_logical_relation_blk;
   private ASPRowSet sch_logical_relation_set;
   private ASPCommandBar sch_logical_relation_bar;
   private ASPTable sch_logical_relation_tbl;
   private ASPBlockLayout sch_logical_relation_lay;

   private ASPBlock sch_work_resource_blk;
   private ASPRowSet sch_work_resource_set;
   private ASPCommandBar sch_work_resource_bar;
   private ASPTable sch_work_resource_tbl;
   private ASPBlockLayout sch_work_resource_lay;
   
   
   
   private ASPTabContainer tabs;
   private ASPTabContainer tabs2;
   private int activetab;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  SchPlanCheckWbsLine (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      String project_type_id =  mgr.readValue("PROJ_NO");
      String temp_no = mgr.readValue("ID");  
      String wbs_no =  mgr.readValue("WBS_NO");
      ctx = mgr.getASPContext();  
      if( mgr.commandBarActivated() ){
//         comnd = mgr.readValue("__COMMAND");
         eval(mgr.commandBarFunction());
      }
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")) )
         validate();
      else if( !mgr.isEmpty(project_type_id) || !mgr.isEmpty(temp_no) || !mgr.isEmpty(wbs_no)){
         ctx.setGlobal("PROJ_NO", project_type_id);
         ctx.setGlobal("ID", temp_no);  
         ctx.setGlobal("WBS_NO", wbs_no);
         okFind();  
      }     
      else
         okFind();
      tabs.saveActiveTab();
      tabs2.saveActiveTab();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      String project_type_id = mgr.readValue("PROJ_NO");
      String temp_no = mgr.readValue("ID");
      String wbs_no = mgr.readValue("WBS_NO");
      
      ASPQuery q;    
      mgr.createSearchURL(headblk);    
      q = trans.addQuery(headblk);
      if (!mgr.isEmpty(project_type_id) ){
          q.addWhereCondition("PROJ_NO = ?");
          q.addParameter("PROJ_NO",project_type_id); 
      } 
      if (!mgr.isEmpty(temp_no) ){
          q.addWhereCondition("ID = ? " );
          q.addParameter("ID",temp_no);
      }
      if (!mgr.isEmpty(wbs_no) && !("null".equals(wbs_no))){
          q.addWhereCondition("WBS_NO = ? ");
          q.addParameter("WBS_NO" , wbs_no);  
      }else{
         q.addWhereCondition("PARENT_ID = '001'");
      }  
      q.setOrderByClause("WBS_NO");
      q.includeMeta("ALL");      
      if(mgr.dataTransfered())
          q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if(headset.countRows()>0)   
      ctx.setGlobal("WBS_NO", headset.getValue("WBS_NO")); 
      if (  headset.countRows() == 0 )
      {      
         mgr.showAlert("SCHPLANWBSLINENODATA: No data found.");
         headset.clear();
      }
   }

   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }
   
   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPContext ctx =  mgr.getASPContext();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;
      
      cmd = trans1.addCustomFunction("GETGENERALPROJECTPROJDESC",
            "GENERAL_PROJECT_API.GET_PROJ_DESC","GENERAL_PROJECT_PROJ_DESC");
      cmd.addParameter("PROJ_NO",ctx.findGlobal("PROJ_NO"));
      trans1 = mgr.validate(trans1); 
      
      String GENERAL_PROJECT_PROJ_DESC = trans1.getValue("GETGENERALPROJECTPROJDESC/DATA/GENERAL_PROJECT_PROJ_DESC");
      
      cmd = trans.addEmptyCommand("HEAD","SCH_PLAN_WBS_API.New__",headblk);
      cmd.setParameter("PROJ_NO", ctx.findGlobal("PROJ_NO"));
      cmd.setParameter("GENERAL_PROJECT_PROJ_DESC", GENERAL_PROJECT_PROJ_DESC);
      cmd.setParameter("PARENT_ID", ctx.findGlobal("WBS_NO"));
      cmd.setParameter("ID", ctx.findGlobal("ID"));
      cmd.setParameter("REV", "A");
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }

   //------------------------------ITEM0-----------------------------
   
   public void okFindItem0()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      schplanworkctx = mgr.getASPContext();  
      
      String project_type_id = schplanworkctx.findGlobal("PROJ_NO")==null?"":schplanworkctx.findGlobal("PROJ_NO");
      String wbs_no = schplanworkctx.findGlobal("WBS_NO")==null?"":schplanworkctx.findGlobal("WBS_NO");
      String temp_no = ctx.findGlobal("ID")==null?"":ctx.findGlobal("ID");

      mgr.createSearchURL(schplanworkblk);
      q = trans.addQuery(schplanworkblk);
      
      if (!mgr.isEmpty(project_type_id) ){
         q.addWhereCondition("PROJ_NO = ?");
         q.addParameter("PROJ_NO",project_type_id); 
      } 
      if (!mgr.isEmpty(wbs_no)){
         q.addWhereCondition("WBS_NO = ? ");
         q.addParameter("WBS_NO" , wbs_no);  
      }
      if (!mgr.isEmpty(temp_no) ){
         q.addWhereCondition("ID = ? " );
         q.addParameter("ID",temp_no);
     }
      q.setOrderByClause("WBS_NO");
      
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,schplanworkblk);
      if (  schplanworkset.countRows() == 0 )
      {
         mgr.showAlert("SCHPLANWORKNODATA: No data found.");
         schplanworkset.clear();
      }
   }
   
   public void countFindItem0()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(schplanworkblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      schplanworklay.setCountValue(toInt(schplanworkset.getValue("N")));
      schplanworkset.clear();
   }

   public void newRowItem0()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;
      
      cmd = trans1.addCustomFunction("GETGENERALPROJECTPROJDESC",
            "GENERAL_PROJECT_API.GET_PROJ_DESC","ITEM0_PROJECT_DESC");
      cmd.addParameter("ITEM0_PROJ_NO",ctx.findGlobal("PROJ_NO"));
      trans1 = mgr.validate(trans1); 
      
      String ITEM0_PROJECT_DESC = trans1.getValue("GETGENERALPROJECTPROJDESC/DATA/ITEM0_PROJECT_DESC");

      cmd = trans.addEmptyCommand("ITEM0","SCH_PLAN_WORK_API.New__",schplanworkblk);
      cmd.setParameter("ITEM0_PROJ_NO", ctx.findGlobal("PROJ_NO"));
      cmd.setParameter("ITEM0_PROJECT_DESC", ITEM0_PROJECT_DESC);
      cmd.setParameter("ITEM0_WBS_NO", ctx.findGlobal("WBS_NO"));
      cmd.setParameter("ITEM0_ID", ctx.findGlobal("ID"));
      cmd.setParameter("ITEM0_REV", "A");
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM0/DATA");
      schplanworkset.addRow(data);
   }
   
   public void okFindItem1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(sch_logical_relation_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ? AND REV = ? AND WBS_NO = ? AND WORK_NO = ?");
      q.addParameter("PROJ_NO", schplanworkset.getValue("PROJ_NO"));
      q.addParameter("ID", schplanworkset.getValue("ID"));
      q.addParameter("REV", schplanworkset.getValue("REV"));
      q.addParameter("WBS_NO", schplanworkset.getValue("WBS_NO"));
      q.addParameter("WORK_NO", schplanworkset.getValue("WORK_NO"));
      q.includeMeta("ALL");
      headrowno = sch_logical_relation_set.getCurrentRowNo();
      mgr.querySubmit(trans,sch_logical_relation_blk);
      sch_logical_relation_set.goTo(headrowno);
   }
   
   public void newRowItem1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","SCH_LOGICAL_RELATION_API.New__",sch_logical_relation_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM1_PROJ_NO", schplanworkset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM1_ID", schplanworkset.getValue("ID"));
      cmd.setParameter("ITEM1_REV", schplanworkset.getValue("REV"));
      cmd.setParameter("ITEM1_WBS_NO", schplanworkset.getValue("WBS_NO"));
      cmd.setParameter("ITEM1_WORK_NO", schplanworkset.getValue("WORK_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      sch_logical_relation_set.addRow(data);
   }
   
   public void okFindItem2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(sch_work_resource_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ? AND REV = ? AND WBS_NO = ? AND WORK_NO = ?");
      q.addParameter("PROJ_NO", schplanworkset.getValue("PROJ_NO"));
      q.addParameter("ID", schplanworkset.getValue("ID"));
      q.addParameter("REV", schplanworkset.getValue("REV"));
      q.addParameter("WBS_NO", schplanworkset.getValue("WBS_NO"));
      q.addParameter("WORK_NO", schplanworkset.getValue("WORK_NO"));
      q.includeMeta("ALL");
      headrowno = sch_work_resource_set.getCurrentRowNo();
      mgr.querySubmit(trans,sch_work_resource_blk);
      sch_work_resource_set.goTo(headrowno);
   }
   
   public void newRowItem2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM2","SCH_WORK_RESOURCE_API.New__",sch_work_resource_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM2_PROJ_NO", schplanworkset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM2_ID", schplanworkset.getValue("ID"));
      cmd.setParameter("ITEM2_REV", schplanworkset.getValue("REV"));
      cmd.setParameter("ITEM2_WBS_NO", schplanworkset.getValue("WBS_NO"));
      cmd.setParameter("ITEM2_WORK_NO", schplanworkset.getValue("WORK_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM2/DATA");
      sch_work_resource_set.addRow(data);
   }
   
   
   
   public void validate() {
      // TODO Auto-generated method stub
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
      ASPCommand cmd1;
      String val = mgr.readValue("VALIDATE");
      String txt = "";
      String RESOURCENAME = "";
      String RESOURCECLASSID = "";
      String UNITCODE = "";
      String PRICE = "";
      String QTY = "";
      String WORKNAME = "";
      String STATUS = "";
      String SCHEDULE1 = "";
      String SCHEDULE2 = "";
      String ACTUALSCHEDULE1 = "";
      String ACTUALSCHEDULE2 = "";
      String WBSNO2 = "";
      String ITEM0_CREATE_PERSON_NAME = "";
      float  TOTALPRICE;
      
      if ("RESOURCE_LINE_NO".equals(val)) {
         cmd = trans.addCustomFunction("GETRESOURCENAME", 
               "SCH_RESOURCE_LINE_API.Get_Resource_Line_Name", "RESOURCE_NAME");
         cmd.addParameter("ITEM2_PROJ_NO,RESOURCE_NO,RESOURCE_LINE_NO");
         
         cmd = trans.addCustomFunction("GETRESOURCECLASSID", 
                 "SCH_RESOURCE_LINE_API.Get_Class_Id", "RESOURCE_CLASS_ID");
         cmd.addParameter("ITEM2_PROJ_NO,RESOURCE_NO,RESOURCE_LINE_NO");
         
         cmd = trans.addCustomFunction("GETUNITCODE", 
               "SCH_RESOURCE_LINE_API.Get_Unit_Code", "UNIT_CODE");
         cmd.addParameter("ITEM2_PROJ_NO,RESOURCE_NO,RESOURCE_LINE_NO");
         
         cmd = trans.addCustomFunction("GETPRICE", 
               "SCH_RESOURCE_LINE_API.Get_Price", "PRICE");
         cmd.addParameter("ITEM2_PROJ_NO,RESOURCE_NO,RESOURCE_LINE_NO");
         
         cmd = trans.addCustomFunction("GETQTY", 
               "SCH_RESOURCE_LINE_API.Get_Qty", "QTY");
         cmd.addParameter("ITEM2_PROJ_NO,RESOURCE_NO,RESOURCE_LINE_NO");
         
         trans = mgr.validate(trans);
         
         RESOURCENAME = trans.getValue("GETRESOURCENAME/DATA/RESOURCE_NAME");
         RESOURCECLASSID = trans.getValue("GETRESOURCECLASSID/DATA/RESOURCE_CLASS_ID");
         UNITCODE = trans.getValue("GETUNITCODE/DATA/UNIT_CODE");
         PRICE = trans.getValue("GETPRICE/DATA/PRICE");
         QTY = trans.getValue("GETQTY/DATA/QTY");

         txt = ((mgr.isEmpty(RESOURCENAME)) ? "" : RESOURCENAME ) + "^" 
             + ((mgr.isEmpty(RESOURCECLASSID)) ? "" : RESOURCECLASSID ) + "^"
             + ((mgr.isEmpty(UNITCODE)) ? "" : UNITCODE ) + "^"
             + ((mgr.isEmpty(PRICE)) ? "" : PRICE ) + "^"
             + ((mgr.isEmpty(QTY)) ? "" : QTY ) + "^";
         
         mgr.responseWrite(txt);
      }
      else if ("RELATION_WORK_NO".equals(val)) {
         
         cmd =trans.addCustomFunction("GETWBSNO2", 
               "SCH_PLAN_WORK_API.Get_Wbs_No", "ITEM1_WBS_NO2"); 
         cmd.addParameter("RELATION_WORK_NO");
         
         trans = mgr.validate(trans);
         
         WBSNO2 = trans.getValue("GETWBSNO2/DATA/ITEM1_WBS_NO2");
         
         cmd1 = trans1.addCustomFunction("GETWORKNAME", 
               "SCH_PLAN_WORK_API.Get_Work_Name", "ITEM1_WORK_NAME");
         cmd1.addParameter("ITEM1_PROJ_NO");
         cmd1.addParameter("ITEM1_ID");
         cmd1.addParameter("ITEM1_REV");
         cmd1.addParameter("ITEM1_WBS_NO2",WBSNO2);
         cmd1.addParameter("RELATION_WORK_NO");
         
         cmd1 = trans1.addCustomFunction("GETSTATUS", 
               "SCH_PLAN_WORK_API.Get_Sch_Work_Status", "STATUS");
         cmd1.addParameter("ITEM1_PROJ_NO");
         cmd1.addParameter("ITEM1_ID");
         cmd1.addParameter("ITEM1_REV");
         cmd1.addParameter("ITEM1_WBS_NO2",WBSNO2);
         cmd1.addParameter("RELATION_WORK_NO");

         trans1 = mgr.validate(trans1);   
                
         WORKNAME = trans1.getValue("GETWORKNAME/DATA/ITEM1_WORK_NAME");
         STATUS = trans1.getValue("GETSTATUS/DATA/STATUS"); 

         txt = ((mgr.isEmpty(WORKNAME)) ? "" : WORKNAME ) + "^" 
               + ((mgr.isEmpty(STATUS)) ? "" : STATUS ) + "^";
         
         mgr.responseWrite(txt);
      }
      else if("PLAN_START_TIME".equals(val)){
         cmd = trans.addCustomFunction("GETSCHEDULE1",
               "SCH_PLAN_WORK_API.Get_Time_Result","SCHEDULE");
         cmd.addParameter("PLAN_START_TIME,PLAN_END_TIME");
         trans = mgr.validate(trans);   
         
         SCHEDULE1 = trans.getValue("GETSCHEDULE1/DATA/SCHEDULE");
         txt = ((mgr.isEmpty(SCHEDULE1)) ? "" : SCHEDULE1 ) + "^";
         mgr.responseWrite(txt);
      }
      else if("PLAN_END_TIME".equals(val)){
         cmd = trans.addCustomFunction("GETSCHEDULE2",
               "SCH_PLAN_WORK_API.Get_Time_Result","SCHEDULE");
         cmd.addParameter("PLAN_START_TIME,PLAN_END_TIME");
         trans = mgr.validate(trans);   
         
         SCHEDULE2 = trans.getValue("GETSCHEDULE2/DATA/SCHEDULE");
         txt = ((mgr.isEmpty(SCHEDULE2)) ? "" : SCHEDULE2 ) + "^";
         mgr.responseWrite(txt);
      }
      else if("ACTUAL_START_TIME".equals(val)){
         cmd = trans.addCustomFunction("GETACTUALSCHEDULE1",
               "SCH_PLAN_WORK_API.Get_Time_Result","ACTUAL_SCHEDULE");
         cmd.addParameter("ACTUAL_START_TIME,ACTUAL_END_TIME");
         trans = mgr.validate(trans);   
         
         ACTUALSCHEDULE1 = trans.getValue("GETACTUALSCHEDULE1/DATA/ACTUAL_SCHEDULE");
         txt = ((mgr.isEmpty(ACTUALSCHEDULE1)) ? "" : ACTUALSCHEDULE1 ) + "^";
         mgr.responseWrite(txt);
      }
      else if("ACTUAL_END_TIME".equals(val)){
         cmd = trans.addCustomFunction("GETACTUALSCHEDULE2",
               "SCH_PLAN_WORK_API.Get_Time_Result","ACTUAL_SCHEDULE");
         cmd.addParameter("ACTUAL_START_TIME,ACTUAL_END_TIME");
         trans = mgr.validate(trans);   
         
         ACTUALSCHEDULE2 = trans.getValue("GETACTUALSCHEDULE2/DATA/ACTUAL_SCHEDULE");
         txt = ((mgr.isEmpty(ACTUALSCHEDULE2)) ? "" : ACTUALSCHEDULE2 ) + "^";
         mgr.responseWrite(txt);
      }
      else if("PLAN_QTY".equals(val)){
         TOTALPRICE = ((mgr.readValue("PLAN_QTY") == null)?0:Float.parseFloat(mgr.readValue("PLAN_QTY")))*((mgr.readValue("PRICE") == null)?0:Float.parseFloat(mgr.readValue("PRICE")));
         
         mgr.responseWrite(String.valueOf(TOTALPRICE)+"^");
      }
      else if("ITEM0_CREATE_PERSON".equals(val)){
         cmd = trans.addCustomFunction("GETITEM0CREATEPERSONNAME",
               "PERSON_INFO_API.Get_Name","ITEM0_CREATE_PERSON_NAME");
         cmd.addParameter("ITEM0_CREATE_PERSON");
         trans = mgr.validate(trans);   
         
         ITEM0_CREATE_PERSON_NAME = trans.getValue("GETITEM0CREATEPERSONNAME/DATA/ITEM0_CREATE_PERSON_NAME");
         txt = ((mgr.isEmpty(ITEM0_CREATE_PERSON_NAME)) ? "" : ITEM0_CREATE_PERSON_NAME ) + "^";
         mgr.responseWrite(txt);
      }
      
      
      mgr.endResponse();
   }
   

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();
      ctx = mgr.getASPContext();      
      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      
      headblk.addField("PROJ_NO").
              setMandatory().
              setReadOnly().
              setLabel("SCHPLANWBSPROJNO: Proj No").
              setSize(20);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("SCHPLANCHECKWBSLINEGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(20).
              setReadOnly();
      
      headblk.addField("WBS_NO").
              setMandatory().
              setInsertable().
              setLabel("SCHPLANWBSWBSNO: Wbs No").
              setSize(20);
      
      headblk.addField("WBS_NAME").
              setInsertable().
              setLabel("SCHPLANWBSWBSNAME: Wbs Name").
              setSize(20);
      
      headblk.addField("ID").
              setReadOnly().
              setLabel("SCHPLANWBSID: Eps No").
              setSize(20);
      
      headblk.addField("PARENT_ID").
              setInsertable().
              setDynamicLOV("SCH_PLAN_WBS","PROJ_NO,ID,REV").
              setLOVProperty("TREE_PARE_FIELD", "PARENT_ID").
              setLOVProperty("TREE_DISP_FIELD", "WBS_NO,WBS_NAME,PARENT_ID").              
              setLabel("SCHPLANWBSPARENTID: Parent Id").
              setSize(20);
      
      headblk.addField("CREATE_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("SCHPLANWBSCREATEPERSON: Create Person").
              setSize(20);      
      headblk.addField("CREATE_PERSON_NAME").
              setFunction("PERSON_INFO_API.Get_Name(:CREATE_PERSON)").
              setLabel("PROJECTBUDGETCREATEPERSONNAME: Create Person Name").
              setSize(20).
              setReadOnly();
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
      
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setLabel("SCHPLANWBSCREATETIME: Create Time").
              setSize(20);
      headblk.addField("REV").
              setMandatory().
              setLabel("SCHPLANWBSREV: Rev").
              setSize(20).
              setReadOnly(); 
     
      headblk.addField("LEVE").
              setInsertable().
              setLabel("SCHPLANWBSLEVE: Leve").
              setSize(20).
              setHidden();
      headblk.addField("IS_LEAF").
              setInsertable().
              setLabel("SCHPLANWBSISLEAF: Is Leaf").
              setSize(20).
              setHidden();  
      headblk.setView("SCH_PLAN_WBS");
      headblk.defineCommand("SCH_PLAN_WBS_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      
      headbar.addCustomCommand("activateSchPlanWbs", "Sch Plan Wbs...");
      headbar.addCustomCommand("activateSchPlanWork", "Sch Plan Work...");
      headbar.addCustomCommand("activateSchLogicalRelation","Sch Logical Relation...");
      headbar.addCustomCommand("activateSchWorkResource","Sch Work Resource...");
      
      
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("SCHPLANWBSTBLHEAD: Sch Plan Wbs");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");   
      headlay.setSimple("CREATE_PERSON_NAME"); 
      
      
      //------------------------------SCH_PLAN_WORK  ITEM-------------------------
      schplanworkblk = mgr.newASPBlock("ITEM0");
      schplanworkblk.addField("ITEM0_OBJID").
              setDbName("OBJID").
              setHidden();
      schplanworkblk.addField("ITEM0_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      schplanworkblk.addField("OBJSTATE").
              setHidden();
      schplanworkblk.addField("OBJEVENTS").
              setHidden();
      schplanworkblk.addField("ITEM0_PROJ_NO").
              setDbName("PROJ_NO").
              setMandatory().
              setReadOnly().
              setLabel("SCHPLANWORKPROJNO: Proj No").
              setSize(20);
      schplanworkblk.addField("ITEM0_PROJECT_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :ITEM0_PROJ_NO)").
              setLabel("SCHPLANWORKITEM0GENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(20).
              setReadOnly();
      schplanworkblk.addField("ITEM0_ID").
              setDbName("ID").
              setMandatory().
              setReadOnly().
              setLabel("SCHPLANWORKID: Id").
              setSize(20);
      schplanworkblk.addField("ITEM0_REV").
              setDbName("REV").
              setMandatory().
              setReadOnly().
              setLabel("SCHPLANWORKREV: Rev").
              setSize(20);
      schplanworkblk.addField("ITEM0_WBS_NO").
              setDbName("WBS_NO").
              setMandatory().
              setReadOnly().
              setLabel("SCHPLANWORKWBSNO: Wbs No").
              setSize(20);
      schplanworkblk.addField("WORK_NO").
              setMandatory().
              setInsertable().
              setLabel("SCHPLANWORKWORKNO: Work No").
              setSize(20);
      schplanworkblk.addField("WORK_NAME").
              setInsertable().
              setLabel("SCHPLANWORKWORKNAME: Work Name").
              setSize(20);
      
      schplanworkblk.addField("PLAN_START_TIME","Date").
              setInsertable().
              setCustomValidation("PLAN_START_TIME,PLAN_END_TIME", "SCHEDULE").
              setLabel("SCHPLANWORKPLANSTARTTIME: Plan Start Time").
              setSize(20);
      schplanworkblk.addField("PLAN_END_TIME","Date").
              setInsertable().
              setCustomValidation("PLAN_START_TIME,PLAN_END_TIME", "SCHEDULE").
              setLabel("SCHPLANWORKPLANENDTIME: Plan End Time").
              setSize(20);
      
      schplanworkblk.addField("ACTUAL_START_TIME","Date").
              setInsertable().
              setCustomValidation("ACTUAL_START_TIME,ACTUAL_END_TIME", "ACTUAL_SCHEDULE").
              setLabel("SCHPLANWORKACTUALSTARTTIME: Actual Start Time").
              setSize(20);
      schplanworkblk.addField("ACTUAL_END_TIME","Date").
              setInsertable().
              setCustomValidation("ACTUAL_START_TIME,ACTUAL_END_TIME", "ACTUAL_SCHEDULE").
              setLabel("SCHPLANWORKACTUALENDTIME: Actual End Time").
              setSize(20);
      
      schplanworkblk.addField("SCHEDULE").
              setInsertable().
              setFunction("SCH_PLAN_WORK_API.Get_Time_Result (:PLAN_START_TIME,:PLAN_END_TIME)").
              setLabel("SCHPLANWORKSCHEDULE: Schedule").
              setSize(20);
      
      schplanworkblk.addField("ACTUAL_SCHEDULE").
              setInsertable().
              setFunction("SCH_PLAN_WORK_API.Get_Time_Result (:ACTUAL_START_TIME,:ACTUAL_END_TIME)").
              setLabel("SCHPLANWORKACTUALSCHEDULE: Actual Schedule").
              setSize(20);
      
      schplanworkblk.addField("REQUIRED_TIME","Number").
              setInsertable().
              setLabel("SCHPLANWORKREQUIREDTIME: Required Time").
              setSize(20);
      schplanworkblk.addField("COMPLETE_RATE").
              setInsertable().
              setLabel("SCHPLANWORKCOMPLETERATE: Complete Rate").
              setSize(20);
      schplanworkblk.addField("NOTE").
              setInsertable().
              setLabel("SCHPLANWORKNOTE: Note").
              setSize(20);
      schplanworkblk.addField("ITEM0_CREATE_TIME","Date").
              setDbName("CREATE_TIME").
              setInsertable().
              setLabel("SCHPLANWORKCREATETIME: Create Time").
              setSize(20);
      
      schplanworkblk.addField("WORK_CLASS_ID").
              setInsertable().
              setDynamicLOV("SCH_WORK_CLASS").
              setLabel("SCHPLANWORKWORKCLASSID: Work Class Id").
              setSize(20);
      schplanworkblk.addField("WORK_CLASS_DESC").
              setReadOnly().
              setFunction("SCH_WORK_CLASS_API.Get_Work_Class_Name (:WORK_CLASS_ID)").
              setLabel("SCHPLANWORKWORKCLASSDESC: Work Class Desc").
              setSize(20);
      mgr.getASPField("WORK_CLASS_ID").setValidation("WORK_CLASS_DESC");
      
      schplanworkblk.addField("ITEM0_CREATE_PERSON").
              setDbName("CREATE_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setCustomValidation("ITEM0_CREATE_PERSON", "ITEM0_CREATE_PERSON_NAME").
              setLabel("SCHPLANWORKCREATEPERSON: Create Person").
              setSize(20);
      schplanworkblk.addField("ITEM0_CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:ITEM0_CREATE_PERSON)").
              setLabel("SCHPLANWORKWBSLINECREATEPERSONNAME: Create Person Name").
              setSize(20);
//      mgr.getASPField("ITEM0_CREATE_PERSON").setValidation("ITEM0_CREATE_PERSON_NAME");
      
      schplanworkblk.addField("SCH_WORK_STATUS").
              enumerateValues("SCH_WORK_STATUS_API").
              setSelectBox().
              setMandatory().
              setLabel("SCHPLANWORKSTATESCHWORKSTATUS: Status").
              setSize(20);
      schplanworkblk.addField("STATE").
              setReadOnly().
              setLabel("SCHPLANWORKSTATE: State").
              setSize(20);
      schplanworkblk.setView("SCH_PLAN_WORK");
      schplanworkblk.defineCommand("SCH_PLAN_WORK_API","New__,Modify__,Remove__,Release__,Complete__");
      schplanworkset = schplanworkblk.getASPRowSet();
      schplanworkbar = mgr.newASPCommandBar(schplanworkblk);
      schplanworkbar.addCustomCommand("Release","SCHPLANWORKRELEASE: Release Sch Plan Work");
      schplanworkbar.addCustomCommand("Complete","SCHPLANWORKCOMPLETE: Complete Sch Plan Work");
      
//      schplanworkbar.addCustomCommand("activateSchLogicalRelation","Sch Logical Relation...");
//      schplanworkbar.addCustomCommand("activateSchWorkResource","Sch Work Resource...");

      schplanworktbl = mgr.newASPTable(schplanworkblk);
      schplanworkbar.defineCommand(schplanworkbar.OKFIND,"okFindItem0");
      schplanworkbar.defineCommand(schplanworkbar.NEWROW,"newRowItem0");
      schplanworkbar.defineCommand(schplanworkbar.COUNTFIND,"countFindItem0");
      
      schplanworktbl.setTitle("SCHPLANWORKTBLHEAD: Sch Plan Work");
      schplanworktbl.enableRowSelect();
      schplanworktbl.setWrap();
      schplanworklay = schplanworkblk.getASPBlockLayout();
      schplanworklay.setSimple("ITEM0_CREATE_PERSON_NAME");
      schplanworklay.setDefaultLayoutMode(schplanworklay.MULTIROW_LAYOUT);
      schplanworklay.setSimple("WORK_CLASS_DESC");
      schplanworklay.setSimple("ITEM0_CREATE_PERSON_NAME");
      schplanworklay.setSimple("ITEM0_PROJECT_DESC");
      
      
      //------------------------------SCH_LOGICAL_RELATION  ITEM-------------------------
      sch_logical_relation_blk = mgr.newASPBlock("ITEM1");
      sch_logical_relation_blk.addField("ITEM1_OBJID").
                               setHidden().
                               setDbName("OBJID");
      sch_logical_relation_blk.addField("ITEM1_OBJVERSION").
                               setHidden().
                               setDbName("OBJVERSION");
      sch_logical_relation_blk.addField("ITEM1_PROJ_NO").
                               setDbName("PROJ_NO").
                               setHidden().
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0PROJNO: Proj No").
                               setSize(20);
      sch_logical_relation_blk.addField("ITEM1_ID").
                               setDbName("ID").
                               setHidden().
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0ID: Id").
                               setSize(20);
      sch_logical_relation_blk.addField("ITEM1_REV").
                               setDbName("REV").
                               setHidden().
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0REV: Rev").
                               setSize(20);
      sch_logical_relation_blk.addField("ITEM1_WBS_NO").
                               setDbName("WBS_NO").
                               setHidden().
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0WBSNO: Wbs No").
                               setSize(20);
      sch_logical_relation_blk.addField("ITEM1_WORK_NO").
                               setDbName("WORK_NO").
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0WORKNO: Work No").
                               setSize(20).
                               setHidden();
      
      sch_logical_relation_blk.addField("RELATION_WORK_NO").
                               setInsertable().
                               setDynamicLOV("SCH_PLAN_WORK","ITEM1_PROJ_NO,ITEM1_ID").
                               setLabel("SCHLOGICALRELATIONRELATIONWORKNO: Relation Work No").
                               setSize(20).
                               setCustomValidation("RELATION_WORK_NO,ITEM1_PROJ_NO,ITEM1_ID,ITEM1_REV", "ITEM1_WORK_NAME,STATUS"); 
      
      sch_logical_relation_blk.addField("ITEM1_WBS_NO2").
                               setFunction("SCH_PLAN_WORK_API.Get_Wbs_No (:RELATION_WORK_NO)").
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0WBSNO2: Wbs No2").
                               setHidden().
                               setSize(20);
      
      sch_logical_relation_blk.addField("ITEM1_WORK_NAME").
                               setFunction("SCH_PLAN_WORK_API.Get_Work_Name (:ITEM1_PROJ_NO,:ITEM1_ID,:ITEM1_REV,:ITEM1_WBS_NO,:ITEM1_WORK_NO)").
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0WORKNAME: Work Name").
                               setSize(20);
      
      sch_logical_relation_blk.addField("LOGICAL_ID").
                               setMandatory().
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONLOGICALID: Logical Id").
                               setSize(20);
      sch_logical_relation_blk.addField("DELAY").
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONDELAY: Delay").
                               setSize(20);
      
      sch_logical_relation_blk.addField("ITEM1_CREATE_TIME","Date").
                               setDbName("CREATE_TIME").
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0CREATETIME: Create Time").
                               setSize(20);
      
      sch_logical_relation_blk.addField("SCH_RELATION_CLASS").
                               enumerateValues("Sch_Relation_Class_API").
                               setSelectBox().
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONSCHRELATIONCLASS: Sch Relation Class").
                               setSize(20);
      
      sch_logical_relation_blk.addField("ITEM1_CREATE_PERSON").
                               setDbName("CREATE_PERSON").
                               setInsertable().
                               setHidden().
                               setLabel("SCHLOGICALRELATIONITEM0CREATEPERSON: Create Person").
                               setSize(20);
      
    sch_logical_relation_blk.addField("STATUS").
                               setReadOnly().
                               setFunction("SCH_PLAN_WORK_API.Get_Row_State (:ITEM1_PROJ_NO,:ITEM1_ID,:ITEM1_REV,:ITEM1_WBS_NO,:ITEM1_WORK_NO)").
                               setLabel("SCHLOGICALRELATIONITEM0STATUS: Status").
                               setSize(20);
      sch_logical_relation_blk.setView("SCH_LOGICAL_RELATION");
      sch_logical_relation_blk.defineCommand("SCH_LOGICAL_RELATION_API","New__,Modify__,Remove__");
      sch_logical_relation_blk.setMasterBlock(schplanworkblk);
      sch_logical_relation_set = sch_logical_relation_blk.getASPRowSet();
      sch_logical_relation_bar = mgr.newASPCommandBar(sch_logical_relation_blk);
      sch_logical_relation_bar.defineCommand(sch_logical_relation_bar.OKFIND, "okFindItem1");
      sch_logical_relation_bar.defineCommand(sch_logical_relation_bar.NEWROW, "newRowItem1");
      
      sch_logical_relation_tbl = mgr.newASPTable(sch_logical_relation_blk);
      sch_logical_relation_tbl.setTitle("SCHLOGICALRELATIONITEMHEAD1: SchLogicalRelation");
      sch_logical_relation_tbl.enableRowSelect();
      sch_logical_relation_tbl.setWrap();
      sch_logical_relation_lay = sch_logical_relation_blk.getASPBlockLayout();
      sch_logical_relation_lay.setDefaultLayoutMode(sch_logical_relation_lay.MULTIROW_LAYOUT);

      
    //------------------------------SCH_WORK_RESOURCE  ITEM-------------------------
      sch_work_resource_blk = mgr.newASPBlock("ITEM2");
      sch_work_resource_blk.addField("ITEM2_OBJID").
                            setHidden().
                            setDbName("OBJID");
      sch_work_resource_blk.addField("ITEM2_OBJVERSION").
                            setHidden().
                            setDbName("OBJVERSION");
      sch_work_resource_blk.addField("ITEM2_PROJ_NO").
                            setDbName("PROJ_NO").
                            setHidden().
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1PROJNO: Proj No").
                            setSize(20);
      sch_work_resource_blk.addField("ITEM2_ID").
                            setDbName("ID").
                            setHidden().
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1ID: Id").
                            setSize(20);
      sch_work_resource_blk.addField("ITEM2_REV").
                            setDbName("REV").
                            setHidden().
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1REV: Rev").
                            setSize(20);
      sch_work_resource_blk.addField("ITEM2_WBS_NO").
                            setDbName("WBS_NO").
                            setHidden().
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1WBSNO: Wbs No").
                            setSize(20);
      sch_work_resource_blk.addField("ITEM2_WORK_NO").
                            setDbName("WORK_NO").
                            setHidden().
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1WORKNO: Work No").
                            setSize(20);
      
      sch_work_resource_blk.addField("RESOURCE_NO").
                            setMandatory().
                            setDynamicLOV("SCH_RESOURCE","ITEM2_PROJ_NO PROJ_NO").
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1SOURCENO: Resource No").
                            setSize(20);
      
      sch_work_resource_blk.addField("RESOURCE_LINE_NO").
                            setMandatory().
                            setInsertable().
                            setDynamicLOV("SCH_RESOURCE_LINE","RESOURCE_NO").
                            setCustomValidation("ITEM2_PROJ_NO,RESOURCE_NO,RESOURCE_LINE_NO", "RESOURCE_NAME,RESOURCE_CLASS_ID,UNIT_CODE,PRICE,QTY").
                            setLabel("SCHWORKRESOURCEITEM1RESOURCELINENO: Resource Line No").
                            setSize(20);
      
      sch_work_resource_blk.addField("RESOURCE_NAME").                           
                            setReadOnly().
                            setFunction("SCH_RESOURCE_LINE_API.Get_Resource_Line_Name (:ITEM2_PROJ_NO,:RESOURCE_NO,:RESOURCE_LINE_NO)").
                            setLabel("SCHWORKRESOURCEITEM1RESOURCENAME: Resource Name").
                            setSize(20);

      sch_work_resource_blk.addField("RESOURCE_CLASS_ID").                           
                            setReadOnly().
                            setFunction("SCH_RESOURCE_LINE_API.Get_Class_Id (:ITEM2_PROJ_NO,:RESOURCE_NO,:RESOURCE_LINE_NO)").
                            setLabel("SCHWORKRESOURCEITEM1RESOURCECLASSID: Resource Class Id").
                            setSize(20);

      sch_work_resource_blk.addField("UNIT_CODE").                           
                            setReadOnly().
                            setFunction("SCH_RESOURCE_LINE_API.Get_Unit_Code (:ITEM2_PROJ_NO,:RESOURCE_NO,:RESOURCE_LINE_NO)").
                            setLabel("SCHWORKRESOURCEITEM1UNITCODE: Unit Code").
                            setSize(20);

      sch_work_resource_blk.addField("PRICE").                           
                            setInsertable().
                            setFunction("SCH_RESOURCE_LINE_API.Get_Price (:ITEM2_PROJ_NO,:RESOURCE_NO,:RESOURCE_LINE_NO)").
                            setLabel("SCHWORKRESOURCEITEM1PRICE: Price").
                            setSize(20);

      sch_work_resource_blk.addField("QTY").                           
                            setInsertable().
                            setFunction("SCH_RESOURCE_LINE_API.Get_Qty (:ITEM2_PROJ_NO,:RESOURCE_NO,:RESOURCE_LINE_NO)").
                            setLabel("SCHWORKRESOURCEITEM1QTY: Qty").
                            setSize(20);
      
      sch_work_resource_blk.addField("PLAN_QTY").
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1PLANQTY: Plan Qty").
                            setSize(20).
                            setCustomValidation("PLAN_QTY,PRICE", "TOTAL_PRICE");
      
      sch_work_resource_blk.addField("TOTAL_PRICE").
                            setReadOnly().
                            setFunction("''").
                            setLabel("SCHWORKRESOURCEITEM1PLANQTY: Total Price").
                            setSize(20);
      
      sch_work_resource_blk.addField("ITEM2_CREATE_TIME","Date").
                            setDbName("CREATE_TIME").
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1CREATETIME: Create Time").
                            setSize(20);
      
      sch_work_resource_blk.addField("ITEM2_CREATE_PERSON").
                            setDbName("CREATE_PERSON").
                            setInsertable().
                            setHidden().
                            setLabel("SCHWORKRESOURCEITEM1CREATEPERSON: Create Person").
                            setSize(20);
      
      sch_work_resource_blk.addField("ITEM2_NOTE").
                            setDbName("NOTE").
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1NOTE: Note").
                            setSize(130).
                            setHeight(5);
      sch_work_resource_blk.setView("SCH_WORK_RESOURCE");
      sch_work_resource_blk.defineCommand("SCH_WORK_RESOURCE_API","New__,Modify__,Remove__");
      sch_work_resource_blk.setMasterBlock(schplanworkblk);
      sch_work_resource_set = sch_work_resource_blk.getASPRowSet();
      sch_work_resource_bar = mgr.newASPCommandBar(sch_work_resource_blk);
      sch_work_resource_bar.defineCommand(sch_work_resource_bar.OKFIND, "okFindItem2");
      sch_work_resource_bar.defineCommand(sch_work_resource_bar.NEWROW, "newRowItem2");
      sch_work_resource_tbl = mgr.newASPTable(sch_work_resource_blk);
      sch_work_resource_tbl.setTitle("SCHWORKRESOURCEITEMHEAD2: SchWorkResource");
      sch_work_resource_tbl.enableRowSelect();
      sch_work_resource_tbl.setWrap();
      sch_work_resource_lay = sch_work_resource_blk.getASPBlockLayout();
      sch_work_resource_lay.setDefaultLayoutMode(sch_work_resource_lay.MULTIROW_LAYOUT);
      sch_work_resource_lay.setDataSpan("ITEM2_NOTE", 5);
      
      
      
      //-------------------------Tabs-------------------------
      tabs = newASPTabContainer("TAB1");
      tabs.setDirtyFlagEnabled(false);
      tabs.addTab(mgr.translate("SCHPLANWBS: Sch Plan Wbs"), "javascript:commandSet('MAIN.activateSchPlanWbs','')");
      tabs.addTab(mgr.translate("SCHPLANWORK: Sch Plan Work"), "javascript:commandSet('MAIN.activateSchPlanWork','')");
      tabs.setContainerWidth(700);
      tabs.setLeftTabSpace(1);
      tabs.setContainerSpace(5);
      tabs.setTabWidth(400);
      tabs.setTableVisibility(false);
      
      tabs2 = newASPTabContainer("TAB2");
      tabs2.setDirtyFlagEnabled(false);
      tabs2.addTab(mgr.translate("SCHLOGICALRELATION: Sch Logical Relation"), "javascript:commandSet('MAIN.activateSchLogicalRelation','')");
      tabs2.addTab(mgr.translate("SCHWORKRESOURCE: Sch Work Resource"), "javascript:commandSet('MAIN.activateSchWorkResource','')");
      tabs2.setContainerWidth(700);
      tabs2.setLeftTabSpace(1);
      tabs2.setContainerSpace(5);
      tabs2.setTabWidth(400);
      
   }
   
   public void activateSchPlanWbs()
   {   
      tabs.setActiveTab(1);
      okFind();
   }
   
   public void activateSchPlanWork()
   {   
      tabs.setActiveTab(2);
      okFindItem0();  
   }
   
   public void activateSchLogicalRelation()
   {
       tabs2.setActiveTab(1);
       okFindItem1(); 
   }
   
   public void activateSchWorkResource()
   {
       tabs2.setActiveTab(2);
       okFindItem2();
   }
   
   
   public void  adjust()
   {
      headbar.removeCustomCommand("activateSchPlanWbs");
      headbar.removeCustomCommand("activateSchPlanWork");
      headbar.removeCustomCommand("activateSchLogicalRelation");
      headbar.removeCustomCommand("activateSchWorkResource");
   }

   
   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "SCHPLANWBSDESC: Sch Plan Wbs Line";
   }


   protected String getTitle()
   {
      return getDescription();
   }
   
   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      
      appendToHTML(tabs.showTabsInit());
      if (tabs.getActiveTab() == 1 )
         appendToHTML(headlay.show());
      else if (tabs.getActiveTab() == 2 )
      {
         appendToHTML(schplanworklay.show());
         if (schplanworklay.isSingleLayout())
         {
            appendToHTML(tabs2.showTabsInit());
            if (tabs2.getActiveTab()== 1)
            {
               appendToHTML(sch_logical_relation_lay.show());
            }else if(tabs2.getActiveTab()== 2){
               appendToHTML(sch_work_resource_lay.show());
            }   
            appendToHTML(tabs2.showTabsFinish());
         } 
      }
      appendToHTML(tabs.showTabsFinish());
      
   }
   
}        
