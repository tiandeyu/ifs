/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.schmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.genbaw.GenbawConstants;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class SchPlanWbsLine extends ASPPageProvider
{
  
   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.schmaw.SchPlanWbsLine");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
 
   private boolean bRefreshTree;
   private String comnd;
//   private ASPTabContainer tabs;
   private ASPContext ctx;  

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  SchPlanWbsLine (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      String project_type_id =  mgr.readValue("PROJ_NO");
      String temp_no = mgr.readValue("ID");  
      String wbs_no =  mgr.readValue("WBS_NO");
//      String wbs_name =  mgr.readValue("WBS_NAME");
//      String rev =  mgr.readValue("REV");
      ctx = mgr.getASPContext();  
      bRefreshTree      = false;  
      if( mgr.commandBarActivated() ){
         comnd = mgr.readValue("__COMMAND");
//         if (( "MAIN.SaveReturn".equals(comnd) ))
//         {
//            bRefreshTree = true;
//         }
//         else if ( "MAIN.SaveNew".equals(comnd) )
//         {
//            bRefreshTree = true;  
//         }
         eval(mgr.commandBarFunction());
         
      }
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(project_type_id) || !mgr.isEmpty(temp_no) || !mgr.isEmpty(wbs_no)){
         ctx.setGlobal("PROJ_NO", project_type_id);
         ctx.setGlobal("ID", temp_no);  
         ctx.setGlobal("WBS_NO", wbs_no);
//         ctx.setGlobal("REV", rev);
//         ctx.setGlobal("WBS_NAME", wbs_name);
         okFind();  
      }      
      else
         okFind();
         
//      tabs.saveActiveTab();   
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      String project_type_id = ctx.findGlobal("PROJ_NO")==null?"":ctx.findGlobal("PROJ_NO");
      String temp_no = ctx.findGlobal("ID")==null?"":ctx.findGlobal("ID");
      String wbs_no = ctx.findGlobal("WBS_NO")==null?"":ctx.findGlobal("WBS_NO");
//      String wbs_name = ctx.findGlobal("WBS_NAME")==null?"":ctx.findGlobal("WBS_NAME");
//      String rev = ctx.findGlobal("REV")==null?"":ctx.findGlobal("REV");
      ASPQuery q;    
      mgr.createSearchURL(headblk);    
      q = trans.addEmptyQuery(headblk);
      if (!mgr.isEmpty(project_type_id) ){
          q.addWhereCondition("PROJ_NO = ?");
          q.addParameter("PROJ_NO",project_type_id); 
      } 
      if (!mgr.isEmpty(temp_no) ){
          q.addWhereCondition("ID = ? " );
          q.addParameter("ID",temp_no);
      }
      if (!mgr.isEmpty(wbs_no)){
          q.addWhereCondition("WBS_NO = ? ");
          q.addParameter("WBS_NO" , wbs_no);  
      }
//      if (!mgr.isEmpty(rev)){
//         q.addWhereCondition("WBS_NO = ? ");
//         q.addParameter("REV" , rev);  
//     }
//      if (!mgr.isEmpty(wbs_name)){
//         q.addWhereCondition("WBS_NAME = ? ");
//         q.addParameter("WBS_NAME" , wbs_name);  
//     }
      else{
         q.addWhereCondition("PARENT_ID = ?");
         q.addParameter("PARENT_ID" , "001");
      }  
      q.setOrderByClause("WBS_NO");
      q.includeMeta("ALL");      
      if(mgr.dataTransfered())
          q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if(headset.countRows()>0)   
      ctx.setGlobal("WBS_NO", headset.getValue("WBS_NO")); 
      if (  headset.countRows() == 0 )
      {      
         mgr.showAlert("SCHPLANWBSLINENODATA: No data found.");
         headset.clear();
      }
   }

   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }
   
   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPContext ctx =  mgr.getASPContext();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;
      
      cmd = trans1.addCustomFunction("GET_PROJ_DESC","GENERAL_PROJECT_API.GET_PROJ_DESC","PROJ_DESC");
      cmd.addParameter("PROJ_NO",ctx.findGlobal("PROJ_NO"));

      trans1 = mgr.validate(trans1);
      String PROJ_DESC= trans1.getValue("GET_PROJ_DESC/DATA/PROJ_DESC");

      cmd = trans.addEmptyCommand("HEAD","SCH_PLAN_WBS_API.New__",headblk);
      cmd.setParameter("PROJ_NO", ctx.findGlobal("PROJ_NO"));
      cmd.setParameter("PROJ_DESC", PROJ_DESC);
      cmd.setParameter("PARENT_ID", ctx.findGlobal("WBS_NO"));
      cmd.setParameter("ID", ctx.findGlobal("ID"));
      cmd.setParameter("REV", "A");
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }

   

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();
      ctx = mgr.getASPContext();      
      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setLabel("SCHPLANWBSLINEPROJNO: Proj No").
              setSize(20);
      
      headblk.addField("PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.Get_Proj_Desc(:PROJ_NO)").
              setReadOnly().   
              setLabel("SCHPLANWBSLINEPROJDESC: Proj Desc").
              setSize(20);
      
      headblk.addField("WBS_NO").
              setMandatory().
              setInsertable().
              setLabel("SCHPLANWBSLINEWBSNO: Wbs No").
              setSize(20);
      
      headblk.addField("WBS_NAME").
              setInsertable().
              setLabel("SCHPLANWBSLINEWBSNAME: Wbs Name").
              setSize(20);
      
      headblk.addField("ID").
              setReadOnly().
              setLabel("SCHPLANWBSLINEID: Eps No").
              setSize(20);
      
      headblk.addField("RESPONSE_ORG").
              setInsertable().
              setFunction("SCH_EPS_API.Get_Response_Org (:PROJ_NO,:ID,:REV)").
              setLabel("SCHPLANWBSLINERESPONSEORG: Response Org").
              setSize(20).
              setHidden();
      
      headblk.addField("PARENT_ID").
              setReadOnly().
              setLabel("SCHPLANWBSLINEPARENTID: Parent Id").
              setSize(20);
      
      headblk.addField("CREATE_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("SCHPLANWBSLINECREATEPERSON: Create Person").
              setSize(10);
      
      headblk.addField("CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:CREATE_PERSON)").
              setLabel("SCHPLANWBSLINECREATEPERSONNAME: Create Person Name").
              setSize(22);
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
      
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setLabel("SCHPLANWBSLINECREATETIME: Create Time").
              setSize(20);
      headblk.addField("REV").
              setMandatory().
              setInsertable().
              setHidden().
              setLabel("SCHPLANWBSLINEREV: Rev").
              setSize(20);      
     
      headblk.addField("LEVE").
              setInsertable().
              setHidden().
              setLabel("SCHPLANWBSLINELEVE: Leve").
              setSize(20);
      headblk.addField("IS_LEAF").
              setInsertable().
              setLabel("SCHPLANWBSLINEISLEAF: Is Leaf").
              setSize(20).
              setHidden();      
      headblk.setView("SCH_PLAN_WBS");
      headblk.defineCommand("SCH_PLAN_WBS_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("SCHPLANWBSLINETBLHEAD: Sch Plan Wbss");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.SINGLE_LAYOUT);
      headlay.setSimple("PROJ_DESC");
      headlay.setSimple("CREATE_PERSON_NAME");   
   
   }
   

   public void  adjust()
   {
      // fill function body
      ASPManager mgr = getASPManager();
//      headbar.removeCustomCommand("activateBudgetProject");
     
   }

//   public void activateBudgetProject()
//   {   
//      tabs.setActiveTab(1);
//      okFind(); 
//   }

   
   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "SCHPLANWBSLINEDESC: Sch Plan Wbs Line";
   }


   protected String getTitle()
   {
      return getDescription();
   }
   
   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      

   }
  
   
}        
