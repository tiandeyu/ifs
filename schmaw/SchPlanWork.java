/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.schmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class SchPlanWork extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.schmaw.SchPlanWork");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   protected ASPTabContainer tabs;
   private ASPContext ctx;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock sch_logical_relation_blk;
   private ASPRowSet sch_logical_relation_set;
   private ASPCommandBar sch_logical_relation_bar;
   private ASPTable sch_logical_relation_tbl;
   private ASPBlockLayout sch_logical_relation_lay;

   private ASPBlock sch_work_resource_blk;
   private ASPRowSet sch_work_resource_set;
   private ASPCommandBar sch_work_resource_bar;
   private ASPTable sch_work_resource_tbl;
   private ASPBlockLayout sch_work_resource_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  SchPlanWork (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      ctx = mgr.getASPContext();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();        
      else if( !mgr.isEmpty(mgr.getQueryStringValue("WBS_NO")) ){
         ctx.setGlobal("WBS_NO", mgr.getQueryStringValue("WBS_NO"));
         ctx.setGlobal("PROJ_NO", mgr.getQueryStringValue("PROJ_NO"));
         ctx.setGlobal("ID", mgr.getQueryStringValue("ID"));
         ctx.setGlobal("WORK_NO", mgr.getQueryStringValue("WORK_NO"));
         ctx.setGlobal("IS_LEAF", mgr.getQueryStringValue("IS_LEAF"));
         okFind();
      }
      else if( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")) )
         validate();
      else
         okFind();
         
         
//      else if(!mgr.isEmapty(mgr.getQueryString()))
//      okFind();
      
      tabs.saveActiveTab();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      String project_no = ctx.findGlobal("PROJ_NO")==null?"":ctx.findGlobal("PROJ_NO");
      String temp_no = ctx.findGlobal("ID")==null?"":ctx.findGlobal("ID");
      String wbs_no = ctx.findGlobal("WBS_NO")==null?"":ctx.findGlobal("WBS_NO");
      String work_no = ctx.findGlobal("WORK_NO")==null?"":ctx.findGlobal("WORK_NO");
      String is_leaf = ctx.findGlobal("IS_LEAF")==null?"":ctx.findGlobal("IS_LEAF");
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      if("1".equals(is_leaf)){
         if (!mgr.isEmpty(project_no) ){
            q.addWhereCondition("PROJ_NO = ?");
            q.addParameter("PROJ_NO",project_no); 
        } 
        if (!mgr.isEmpty(temp_no) ){
            q.addWhereCondition("ID = ? " );
            q.addParameter("ID",temp_no);
        }
        if (!mgr.isEmpty(wbs_no)){
            q.addWhereCondition("WBS_NO = ? ");
            q.addParameter("WBS_NO" , wbs_no);  
        }
        if (!("".equals(work_no))){
           q.addWhereCondition("WORK_NO = ? ");
           q.addParameter("WORK_NO" , work_no);  
       }
        q.setOrderByClause("WBS_NO");
      }
      
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("SCHPLANWORKNODATA: No data found.");
         headset.clear();
      }
      eval( sch_logical_relation_set.syncItemSets() );
      eval( sch_work_resource_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPContext ctx =  mgr.getASPContext();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","SCH_PLAN_WORK_API.New__",headblk);
      cmd.setParameter("PROJ_NO", ctx.findGlobal("PROJ_NO"));
      cmd.setParameter("WBS_NO", ctx.findGlobal("WBS_NO"));
      cmd.setParameter("ID", ctx.findGlobal("ID"));
      cmd.setParameter("REV", "A");
      cmd.setParameter("IS_LEAF", "1");
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(sch_logical_relation_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ? AND REV = ? AND WBS_NO = ? AND WORK_NO = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.addParameter("REV", headset.getValue("REV"));
      q.addParameter("WBS_NO", headset.getValue("WBS_NO"));
      q.addParameter("WORK_NO", headset.getValue("WORK_NO"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,sch_logical_relation_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      trans.clear();
      ASPCommand cmd;
      ASPBuffer data;
      cmd = trans.addEmptyCommand("ITEM1","SCH_LOGICAL_RELATION_API.New__",sch_logical_relation_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_ID", headset.getValue("ID"));
      cmd.setParameter("ITEM0_REV", headset.getValue("REV"));
      cmd.setParameter("ITEM0_WBS_NO", headset.getValue("WBS_NO"));
      cmd.setParameter("ITEM0_WORK_NO", headset.getValue("WORK_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      sch_logical_relation_set.addRow(data);
   }
   public void okFindITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(sch_work_resource_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ? AND REV = ? AND WBS_NO = ? AND WORK_NO = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.addParameter("REV", headset.getValue("REV"));
      q.addParameter("WBS_NO", headset.getValue("WBS_NO"));
      q.addParameter("WORK_NO", headset.getValue("WORK_NO"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,sch_work_resource_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM2","SCH_WORK_RESOURCE_API.New__",sch_work_resource_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM1_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM1_ID", headset.getValue("ID"));
      cmd.setParameter("ITEM1_REV", headset.getValue("REV"));
      cmd.setParameter("ITEM1_WBS_NO", headset.getValue("WBS_NO"));
      cmd.setParameter("ITEM1_WORK_NO", headset.getValue("WORK_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM2/DATA");
      sch_work_resource_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Perform Header and Item functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void  performHEAD( String command)
   {
      int currow;
      
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      

      currow = headset.getCurrentRowNo();
      if(headlay.isMultirowLayout())
         headset.storeSelections();
      else
         headset.selectRow();
      headset.markSelectedRows( command );
      mgr.submit(trans);
      headset.goTo(currow);
   }
   public void  release()
   {

      performHEAD( "Release__" );
   }
   public void  complete()
   {

      performHEAD( "Complete__" );
   }
   
   public void validate() {
      // TODO Auto-generated method stub
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
//      trans.clear();  
      ASPCommand cmd;
      ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
      ASPCommand cmd1;
      String val = mgr.readValue("VALIDATE");
      String txt = "";
      String RESOURCENAME = "";
      String RESOURCECLASSID = "";
      String UNITCODE = "";
      String PRICE = "";
      String QTY = "";
      String WORKNAME = "";
      String STATUS = "";
      String SCHEDULE1 = "";
      String SCHEDULE2 = "";
      String ACTUALSCHEDULE1 = "";
      String ACTUALSCHEDULE2 = "";
      String WBSNO2 = "";
      float  TOTALPRICE;
      
      if ("RESOURCE_LINE_NO".equals(val)) {
         cmd = trans.addCustomFunction("GETRESOURCENAME", 
               "SCH_RESOURCE_LINE_API.Get_Resource_Line_Name", "RESOURCE_NAME");
         cmd.addParameter("ITEM1_PROJ_NO,RESOURCE_NO,RESOURCE_LINE_NO");
         
         cmd = trans.addCustomFunction("GETRESOURCECLASSID", 
                 "SCH_RESOURCE_LINE_API.Get_Class_Id", "RESOURCE_CLASS_ID");
         cmd.addParameter("ITEM1_PROJ_NO,RESOURCE_NO,RESOURCE_LINE_NO");
         
         cmd = trans.addCustomFunction("GETUNITCODE", 
               "SCH_RESOURCE_LINE_API.Get_Unit_Code", "UNIT_CODE");
         cmd.addParameter("ITEM1_PROJ_NO,RESOURCE_NO,RESOURCE_LINE_NO");
         
         cmd = trans.addCustomFunction("GETPRICE", 
               "SCH_RESOURCE_LINE_API.Get_Price", "PRICE");
         cmd.addParameter("ITEM1_PROJ_NO,RESOURCE_NO,RESOURCE_LINE_NO");
         
         cmd = trans.addCustomFunction("GETQTY", 
               "SCH_RESOURCE_LINE_API.Get_Qty", "QTY");
         cmd.addParameter("ITEM1_PROJ_NO,RESOURCE_NO,RESOURCE_LINE_NO");
         
         trans = mgr.validate(trans);
         
         RESOURCENAME = trans.getValue("GETRESOURCENAME/DATA/RESOURCE_NAME");
         RESOURCECLASSID = trans.getValue("GETRESOURCECLASSID/DATA/RESOURCE_CLASS_ID");
         UNITCODE = trans.getValue("GETUNITCODE/DATA/UNIT_CODE");
         PRICE = trans.getValue("GETPRICE/DATA/PRICE");
         QTY = trans.getValue("GETQTY/DATA/QTY");

         txt = ((mgr.isEmpty(RESOURCENAME)) ? "" : RESOURCENAME ) + "^" 
             + ((mgr.isEmpty(RESOURCECLASSID)) ? "" : RESOURCECLASSID ) + "^"
             + ((mgr.isEmpty(UNITCODE)) ? "" : UNITCODE ) + "^"
             + ((mgr.isEmpty(PRICE)) ? "" : PRICE ) + "^"
             + ((mgr.isEmpty(QTY)) ? "" : QTY ) + "^";
         
         mgr.responseWrite(txt);
      }
      else if ("RELATION_WORK_NO".equals(val)) {
         

         cmd =trans.addCustomFunction("GETWBSNO2", 
               "SCH_PLAN_WORK_API.Get_Wbs_No", "ITEM0_WBS_NO2"); 
         cmd.addParameter("RELATION_WORK_NO");
         
         trans = mgr.validate(trans);
         
         WBSNO2 = trans.getValue("GETWBSNO2/DATA/ITEM0_WBS_NO2");
         
         cmd1 = trans1.addCustomFunction("GETWORKNAME", 
               "SCH_PLAN_WORK_API.Get_Work_Name", "ITEM0_WORK_NAME");
         cmd1.addParameter("ITEM0_PROJ_NO");
         cmd1.addParameter("ITEM0_ID");
         cmd1.addParameter("ITEM0_REV");
         cmd1.addParameter("ITEM0_WBS_NO2",WBSNO2);
         cmd1.addParameter("RELATION_WORK_NO");
         
         cmd1 = trans1.addCustomFunction("GETSTATUS", 
               "SCH_PLAN_WORK_API.Get_Sch_Work_Status", "STATUS");
         cmd1.addParameter("ITEM0_PROJ_NO");
         cmd1.addParameter("ITEM0_ID");
         cmd1.addParameter("ITEM0_REV");
         cmd1.addParameter("ITEM0_WBS_NO2",WBSNO2);
         cmd1.addParameter("RELATION_WORK_NO");

         trans1 = mgr.validate(trans1);   
                
         WORKNAME = trans1.getValue("GETWORKNAME/DATA/ITEM0_WORK_NAME");
         STATUS = trans1.getValue("GETSTATUS/DATA/STATUS"); 

         txt = ((mgr.isEmpty(WORKNAME)) ? "" : WORKNAME ) + "^" 
               + ((mgr.isEmpty(STATUS)) ? "" : STATUS ) + "^";
         
         mgr.responseWrite(txt);
      }
      else if("PLAN_START_TIME".equals(val)){
         cmd = trans.addCustomFunction("GETSCHEDULE1",
               "SCH_PLAN_WORK_API.Get_Time_Result","SCHEDULE");
         cmd.addParameter("PLAN_START_TIME,PLAN_END_TIME");
         trans = mgr.validate(trans);   
         
         SCHEDULE1 = trans.getValue("GETSCHEDULE1/DATA/SCHEDULE");
         txt = ((mgr.isEmpty(SCHEDULE1)) ? "" : SCHEDULE1 ) + "^";
         mgr.responseWrite(txt);
      }
      else if("PLAN_END_TIME".equals(val)){
         cmd = trans.addCustomFunction("GETSCHEDULE2",
               "SCH_PLAN_WORK_API.Get_Time_Result","SCHEDULE");
         cmd.addParameter("PLAN_START_TIME,PLAN_END_TIME");
         trans = mgr.validate(trans);   
         
         SCHEDULE2 = trans.getValue("GETSCHEDULE2/DATA/SCHEDULE");
         txt = ((mgr.isEmpty(SCHEDULE2)) ? "" : SCHEDULE2 ) + "^";
         mgr.responseWrite(txt);
      }
      else if("ACTUAL_START_TIME".equals(val)){
         
         cmd = trans.addCustomFunction("GETACTUALSCHEDULE1",
               "SCH_PLAN_WORK_API.Get_Time_Result","ACTUAL_SCHEDULE");
         cmd.addParameter("ACTUAL_START_TIME,ACTUAL_END_TIME");
         trans = mgr.validate(trans);   
         
         ACTUALSCHEDULE1 = trans.getValue("GETACTUALSCHEDULE1/DATA/ACTUAL_SCHEDULE");
         txt = ((mgr.isEmpty(ACTUALSCHEDULE1)) ? "" : ACTUALSCHEDULE1 ) + "^";
         mgr.responseWrite(txt);
      }
      else if("ACTUAL_END_TIME".equals(val)){
         cmd = trans.addCustomFunction("GETACTUALSCHEDULE2",
               "SCH_PLAN_WORK_API.Get_Time_Result","ACTUAL_SCHEDULE");
         cmd.addParameter("ACTUAL_START_TIME,ACTUAL_END_TIME");
         trans = mgr.validate(trans);   
         
         ACTUALSCHEDULE2 = trans.getValue("GETACTUALSCHEDULE2/DATA/ACTUAL_SCHEDULE");
         txt = ((mgr.isEmpty(ACTUALSCHEDULE2)) ? "" : ACTUALSCHEDULE2 ) + "^";
         mgr.responseWrite(txt);
      }
      else if("PLAN_QTY".equals(val)){
         TOTALPRICE = ((mgr.readValue("PLAN_QTY") == null)?0:Float.parseFloat(mgr.readValue("PLAN_QTY")))*((mgr.readValue("PRICE") == null)?0:Float.parseFloat(mgr.readValue("PRICE")));
         
         mgr.responseWrite(String.valueOf(TOTALPRICE)+"^");
      }
     mgr.endResponse();
      
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("OBJSTATE").
              setHidden();
      headblk.addField("OBJEVENTS").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setReadOnly().
              setLabel("SCHPLANWORKPROJNO: Proj No").
              setSize(20);
      headblk.addField("ID").
              setReadOnly().
              setLabel("SCHPLANWORKID: Eps No").
              setSize(20);
      headblk.addField("REV").
              setHidden().
              setInsertable().
              setLabel("SCHPLANWORKREV: Rev").
              setSize(20);
      headblk.addField("WBS_NO").
              setReadOnly().
              setLabel("SCHPLANWORKWBSNO: Wbs No").
              setSize(20);
      headblk.addField("WORK_NO").
              setMandatory().
              setInsertable().
              setLabel("SCHPLANWORKWORKNO: Work No").
              setSize(20);
      headblk.addField("WORK_NAME").
              setInsertable().
              setLabel("SCHPLANWORKWORKNAME: Work Name").
              setSize(20);
      
      headblk.addField("PLAN_START_TIME","Date").
              setInsertable().
              setCustomValidation("PLAN_START_TIME,PLAN_END_TIME", "SCHEDULE").
              setLabel("SCHPLANWORKPLANSTARTTIME: Plan Start Time").
              setSize(20);
      
      headblk.addField("PLAN_END_TIME","Date").
              setInsertable().
              setCustomValidation("PLAN_START_TIME,PLAN_END_TIME", "SCHEDULE").
              setLabel("SCHPLANWORKPLANENDTIME: Plan End Time").
              setSize(20);
      
      headblk.addField("ACTUAL_START_TIME","Date").
              setInsertable().
              setCustomValidation("ACTUAL_START_TIME,ACTUAL_END_TIME", "ACTUAL_SCHEDULE").
              setLabel("SCHPLANWORKACTUALSTARTTIME: Actual Start Time").
              setSize(20);
      
      headblk.addField("ACTUAL_END_TIME","Date").
              setInsertable().
              setCustomValidation("ACTUAL_START_TIME,ACTUAL_END_TIME", "ACTUAL_SCHEDULE").
              setLabel("SCHPLANWORKACTUALENDTIME: Actual End Time").
              setSize(20);
      
      headblk.addField("SCHEDULE").
              setInsertable().
              setFunction("SCH_PLAN_WORK_API.Get_Time_Result (:PLAN_START_TIME,:PLAN_END_TIME)").
              setLabel("SCHPLANWORKSCHEDULE: Schedule").
              setSize(20);
      
      headblk.addField("ACTUAL_SCHEDULE").
              setInsertable().
              setFunction("SCH_PLAN_WORK_API.Get_Time_Result (:ACTUAL_START_TIME,:ACTUAL_END_TIME)").
              setLabel("SCHPLANWORKACTUALSCHEDULE: Actual Schedule").
              setSize(20);
      
      headblk.addField("REQUIRED_TIME","Number").
              setInsertable().
              setLabel("SCHPLANWORKREQUIREDTIME: Required Time").
              setSize(20);
      
      headblk.addField("COMPLETE_RATE").
              setInsertable().
              setLabel("SCHPLANWORKCOMPLETERATE: Complete Rate").
              setSize(20);
      
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setLabel("SCHPLANWORKCREATETIME: Create Time").
              setSize(20);
      
      headblk.addField("WORK_CLASS_ID").
              setInsertable().
              setDynamicLOV("SCH_WORK_CLASS").
              setLabel("SCHPLANWORKWORKCLASSID: Work Class Id").
              setSize(20);
      
      headblk.addField("WORK_CLASS_DESC").
              setReadOnly().
              setFunction("SCH_WORK_CLASS_API.Get_Work_Class_Name (:WORK_CLASS_ID)").
              setLabel("SCHPLANWORKWORKCLASSDESC: Work Class Desc").
              setSize(20);
      mgr.getASPField("WORK_CLASS_ID").setValidation("WORK_CLASS_DESC");
      
      headblk.addField("CREATE_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("SCHPLANWBSCREATEPERSON: Create Person").
              setSize(20);

      headblk.addField("CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:CREATE_PERSON)").
              setLabel("PROJECTBUDGETCREATEPERSONNAME: Create Person Name").
              setSize(20);
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
      
      headblk.addField("SCH_WORK_STATUS").
              enumerateValues("SCH_WORK_STATUS_API").
              setSelectBox().
              setLabel("SCHPLANWORKSTATESCHWORKSTATUS: Status").
              setSize(20);
      
      headblk.addField("STATE").
              setLabel("SCHPLANWORKSTATE: State").
              setHidden().
              setSize(20);
      
      headblk.addField("IS_LEAF").
              setLabel("SCHPLANWORKISLEAF: Is Leaf").
              setHidden().
              setSize(20);
      
      headblk.addField("NOTE").
              setInsertable().
              setLabel("SCHPLANWORKNOTE: Note").
              setHeight(5).
              setSize(130);
      headblk.setView("SCH_PLAN_WORK");
      headblk.defineCommand("SCH_PLAN_WORK_API","New__,Modify__,Remove__,Release__,Complete__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("Release","SCHPLANWORKRELEASE: Release Sch Plan Work");
      headbar.addCustomCommand("Complete","SCHPLANWORKCOMPLETE: Complete Sch Plan Work");
      
      headbar.addCustomCommand("activateSchLogicalRelation","Sch Logical Relation");
      headbar.addCustomCommand("activateSchWorkResource","Sch Work Resource");

      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("SCHPLANWORKTBLHEAD: Sch Plan Works");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setDataSpan("NOTE", 5);
      headlay.setDataSpan("SCH_WORK_STATUS", 5);
      headlay.setSimple("CREATE_PERSON_NAME");
      headlay.setSimple("WORK_CLASS_DESC");
 


      sch_logical_relation_blk = mgr.newASPBlock("ITEM1");
      sch_logical_relation_blk.addField("ITEM0_OBJID").
                               setHidden().
                               setDbName("OBJID");
      sch_logical_relation_blk.addField("ITEM0_OBJVERSION").
                               setHidden().
                               setDbName("OBJVERSION");
      sch_logical_relation_blk.addField("ITEM0_PROJ_NO").
                               setDbName("PROJ_NO").
                               setHidden().
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0PROJNO: Proj No").
                               setSize(50);
      sch_logical_relation_blk.addField("ITEM0_ID").
                               setDbName("ID").
                               setHidden().
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0ID: Id").
                               setSize(20);
      sch_logical_relation_blk.addField("ITEM0_REV").
                               setDbName("REV").
                               setHidden().
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0REV: Rev").
                               setSize(20);
      sch_logical_relation_blk.addField("ITEM0_WBS_NO").
                               setDbName("WBS_NO").
                               setHidden().
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0WBSNO: Wbs No").
                               setSize(20);
      sch_logical_relation_blk.addField("ITEM0_WORK_NO").
                               setDbName("WORK_NO").
                               setInsertable().
                               setHidden().
                               setLabel("SCHLOGICALRELATIONITEM0WORKNO: Work No").
                               setSize(20);
      
      sch_logical_relation_blk.addField("RELATION_WORK_NO").
                               setInsertable().
                               setDynamicLOV("SCH_PLAN_WORK","ITEM0_PROJ_NO,ITEM0_ID").
                               setLabel("SCHLOGICALRELATIONRELATIONWORKNO: Relation Work No").
                               setSize(20).
                               setCustomValidation("RELATION_WORK_NO,ITEM0_PROJ_NO,ITEM0_ID,ITEM0_REV", "ITEM0_WORK_NAME,STATUS"); 
     
      sch_logical_relation_blk.addField("ITEM0_WBS_NO2").
                               setFunction("SCH_PLAN_WORK_API.Get_Wbs_No (:RELATION_WORK_NO)").
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0WBSNO2: Wbs No2").
                               setHidden().
                               setSize(20);
      
      sch_logical_relation_blk.addField("ITEM0_WORK_NAME").
                               setFunction("SCH_PLAN_WORK_API.Get_Work_Name (:ITEM0_PROJ_NO,:ITEM0_ID,:ITEM0_REV,SCH_PLAN_WORK_API.Get_Wbs_No (:RELATION_WORK_NO),:RELATION_WORK_NO)").
                               setReadOnly().
                               setLabel("SCHLOGICALRELATIONITEM0WORKNAME: Work Name").
                               setSize(20);
      
      sch_logical_relation_blk.addField("LOGICAL_ID").
                               setMandatory().
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONLOGICALID: Logical Id").
                               setSize(20);
      sch_logical_relation_blk.addField("DELAY").
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONDELAY: Delay").
                               setSize(20);
      
      sch_logical_relation_blk.addField("ITEM0_CREATE_TIME","Date").
                               setDbName("CREATE_TIME").
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONITEM0CREATETIME: Create Time").
                               setSize(20);
      
      sch_logical_relation_blk.addField("SCH_RELATION_CLASS").
                               enumerateValues("Sch_Relation_Class_API").
                               setSelectBox().
                               setInsertable().
                               setLabel("SCHLOGICALRELATIONSCHRELATIONCLASS: Sch Relation Class").
                               setSize(20);
      
      sch_logical_relation_blk.addField("ITEM0_CREATE_PERSON").
                               setDbName("CREATE_PERSON").
                               setInsertable().
                               setHidden().
                               setLabel("SCHLOGICALRELATIONITEM0CREATEPERSON: Create Person").
                               setSize(20);
      
    sch_logical_relation_blk.addField("STATUS").
                             setReadOnly().
                             setFunction("SCH_PLAN_WORK_API.Get_Sch_Work_Status (:ITEM0_PROJ_NO,:ITEM0_ID,:ITEM0_REV,SCH_PLAN_WORK_API.Get_Wbs_No (:RELATION_WORK_NO),:RELATION_WORK_NO)").
                             setLabel("SCHLOGICALRELATIONITEM0STATUS: Status").
                             setSize(20);
      sch_logical_relation_blk.setView("SCH_LOGICAL_RELATION");
      sch_logical_relation_blk.defineCommand("SCH_LOGICAL_RELATION_API","New__,Modify__,Remove__");
      sch_logical_relation_blk.setMasterBlock(headblk);
      sch_logical_relation_set = sch_logical_relation_blk.getASPRowSet();
      sch_logical_relation_bar = mgr.newASPCommandBar(sch_logical_relation_blk);
      sch_logical_relation_bar.defineCommand(sch_logical_relation_bar.OKFIND, "okFindITEM1");
      sch_logical_relation_bar.defineCommand(sch_logical_relation_bar.NEWROW, "newRowITEM1");
      sch_logical_relation_tbl = mgr.newASPTable(sch_logical_relation_blk);
      sch_logical_relation_tbl.setTitle("SCHLOGICALRELATIONITEMHEAD1: SchLogicalRelation");
      sch_logical_relation_tbl.enableRowSelect();
      sch_logical_relation_tbl.setWrap();
      sch_logical_relation_lay = sch_logical_relation_blk.getASPBlockLayout();
      sch_logical_relation_lay.setSimple("ITEM0_WORK_NAME");
      sch_logical_relation_lay.setDefaultLayoutMode(sch_logical_relation_lay.MULTIROW_LAYOUT);

      sch_work_resource_blk = mgr.newASPBlock("ITEM2");
      sch_work_resource_blk.addField("ITEM1_OBJID").
                            setHidden().
                            setDbName("OBJID");
      sch_work_resource_blk.addField("ITEM1_OBJVERSION").
                            setHidden().
                            setDbName("OBJVERSION");
      sch_work_resource_blk.addField("ITEM1_PROJ_NO").
                            setDbName("PROJ_NO").
                            setInsertable().  
                            setLabel("SCHWORKRESOURCEITEM1PROJNO: Proj No").
                            setSize(20);
      sch_work_resource_blk.addField("ITEM1_ID").
                            setDbName("ID").
                            setHidden().
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1ID: Id").
                            setSize(20);
      sch_work_resource_blk.addField("ITEM1_REV").
                            setDbName("REV").
                            setHidden().
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1REV: Rev").
                            setSize(20);
      sch_work_resource_blk.addField("ITEM1_WBS_NO").
                            setDbName("WBS_NO").
                            setHidden().
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1WBSNO: Wbs No").
                            setSize(20);
      sch_work_resource_blk.addField("ITEM1_WORK_NO").
                            setDbName("WORK_NO").
                            setHidden().
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1WORKNO: Work No").
                            setSize(20);
      
      sch_work_resource_blk.addField("RESOURCE_NO").
                            setMandatory().
                            setDynamicLOV("SCH_RESOURCE","ITEM1_PROJ_NO PROJ_NO").  
                            setInsertable().
                            setLabel("SCHWORKRESOURCERESOURCENO: Resource No").
                            setSize(20);
      
      sch_work_resource_blk.addField("RESOURCE_LINE_NO").
                            setMandatory().
                            setInsertable().
                            setDynamicLOV("SCH_RESOURCE_LINE","ITEM1_PROJ_NO PROJ_NO,RESOURCE_NO").
                            setCustomValidation("ITEM1_PROJ_NO,RESOURCE_NO,RESOURCE_LINE_NO", "RESOURCE_NAME,RESOURCE_CLASS_ID,UNIT_CODE,PRICE,QTY").
                            setLabel("SCHWORKRESOURCERESOURCELINENO: Resource Line No").
                            setSize(20);
      
      sch_work_resource_blk.addField("RESOURCE_NAME").                           
                            setReadOnly().
                            setFunction("SCH_RESOURCE_LINE_API.Get_Resource_Line_Name (:ITEM0_PROJ_NO,:RESOURCE_NO,:RESOURCE_LINE_NO)").
                            setLabel("SCHWORKRESOURCERESOURCENAME: Resource Name").
                            setSize(20);

      sch_work_resource_blk.addField("RESOURCE_CLASS_ID").                           
                            setReadOnly().
                            setFunction("SCH_RESOURCE_LINE_API.Get_Class_Id (:ITEM0_PROJ_NO,:RESOURCE_NO,:RESOURCE_LINE_NO)").
                            setLabel("SCHWORKRESOURCERESOURCECLASSID: Resource Class Id").
                            setSize(20);

      sch_work_resource_blk.addField("UNIT_CODE").                           
                            setReadOnly().
                            setFunction("SCH_RESOURCE_LINE_API.Get_Unit_Code (:ITEM0_PROJ_NO,:RESOURCE_NO,:RESOURCE_LINE_NO)").
                            setLabel("SCHWORKRESOURCEUNITCODE: Unit Code").
                            setSize(20);

      sch_work_resource_blk.addField("PRICE").                           
                            setReadOnly().
                            setFunction("SCH_RESOURCE_LINE_API.Get_Price (:ITEM0_PROJ_NO,:RESOURCE_NO,:RESOURCE_LINE_NO)").
                            setLabel("SCHWORKRESOURCEPRICE: Price").
                            setSize(20);

      sch_work_resource_blk.addField("QTY").                           
                            setReadOnly(). 
                            setFunction("SCH_RESOURCE_LINE_API.Get_Qty (:ITEM0_PROJ_NO,:RESOURCE_NO,:RESOURCE_LINE_NO)").
                            setLabel("SCHWORKRESOURCEQTY: Qty").
                            setSize(20);
      
      sch_work_resource_blk.addField("PLAN_QTY").
                            setInsertable().
                            setLabel("SCHWORKRESOURCEPLANQTY: Plan Qty").
                            setSize(20).
                            setCustomValidation("PLAN_QTY,PRICE", "TOTAL_PRICE");
      
      sch_work_resource_blk.addField("TOTAL_PRICE").
                            setReadOnly().
                            setFunction("''").
                            setLabel("SCHWORKRESOURCETOTALPRICE: Total Price").
                            setSize(20);
      
      sch_work_resource_blk.addField("ITEM1_CREATE_TIME","Date").
                            setDbName("CREATE_TIME").
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1CREATETIME: Create Time").
                            setSize(20);
      
      sch_work_resource_blk.addField("ITEM1_CREATE_PERSON").
                            setDbName("CREATE_PERSON").
                            setInsertable().
                            setHidden().
                            setLabel("SCHWORKRESOURCEITEM1CREATEPERSON: Create Person").
                            setSize(20);
      
      sch_work_resource_blk.addField("ITEM1_NOTE").
                            setDbName("NOTE").
                            setInsertable().
                            setLabel("SCHWORKRESOURCEITEM1NOTE: Note").
                            setSize(130).
                            setHeight(5);
      sch_work_resource_blk.setView("SCH_WORK_RESOURCE");
      sch_work_resource_blk.defineCommand("SCH_WORK_RESOURCE_API","New__,Modify__,Remove__");
      sch_work_resource_blk.setMasterBlock(headblk);
      sch_work_resource_set = sch_work_resource_blk.getASPRowSet();
      sch_work_resource_bar = mgr.newASPCommandBar(sch_work_resource_blk);
      sch_work_resource_bar.defineCommand(sch_work_resource_bar.OKFIND, "okFindITEM2");
      sch_work_resource_bar.defineCommand(sch_work_resource_bar.NEWROW, "newRowITEM2");
      sch_work_resource_tbl = mgr.newASPTable(sch_work_resource_blk);
      sch_work_resource_tbl.setTitle("SCHWORKRESOURCEITEMHEAD2: SchWorkResource");
      sch_work_resource_tbl.enableRowSelect();
      sch_work_resource_tbl.setWrap();
      sch_work_resource_lay = sch_work_resource_blk.getASPBlockLayout();
      sch_work_resource_lay.setDefaultLayoutMode(sch_work_resource_lay.MULTIROW_LAYOUT);
      sch_work_resource_lay.setDataSpan("ITEM1_NOTE", 5);
      sch_work_resource_lay.setDataSpan("ITEM1_CREATE_TIME", 5);
      
      tabs = mgr.newASPTabContainer();
      tabs.addTab(mgr.translate("SCHLOGICALRELATION: Sch Logical Relation"), "javascript:commandSet('MAIN.activateSchLogicalRelation','')");
      tabs.addTab(mgr.translate("SCHWORKRESOURCE: Sch Work Resource"), "javascript:commandSet('MAIN.activateSchWorkResource','')");
      



   }



   public void  adjust()
   {
      // fill function body
      ASPManager mgr = getASPManager();
      headbar.removeCustomCommand("activateSchLogicalRelation");
      headbar.removeCustomCommand("activateSchWorkResource");
      if("1".equals(ctx.findGlobalObject("IS_LEAF"))&&!mgr.isEmpty(ctx.findGlobal("WORK_NO"))){
         headlay.setDefaultLayoutMode(headlay.SINGLE_LAYOUT);
         headbar.disableCommand(headbar.NEWROW);
      }
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------
   
   
   
   public void activateSchLogicalRelation()
   {
       tabs.setActiveTab(1);
       okFindITEM1(); 
   }
   
   public void activateSchWorkResource()
   {
       tabs.setActiveTab(2);
       okFindITEM2();
   }

   protected String getDescription()
   {
      return "SCHPLANWORKDESC: Sch Plan Work";
   }


   protected String getTitle()
   {
      return "SCHPLANWORKTITLE: Sch Plan Work";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      if (headset.countRows()>0)
      {
         if (headlay.isSingleLayout()||headlay.isCustomLayout() ||headlay.isEditLayout())
         {
            appendToHTML(tabs.showTabsInit());
            if (tabs.getActiveTab()== 1)
            {
               appendToHTML(sch_logical_relation_lay.show());
            }else if(tabs.getActiveTab()== 2){
               appendToHTML(sch_work_resource_lay.show());
            }   
            appendToHTML(tabs.showTabsFinish());
            
          } 
      }

   }
}
