/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.matmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class MatStDeliveryReqBill extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.matmaw.MatStDeliveryReqBill");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock mat_st_delivery_req_line_blk;
   private ASPRowSet mat_st_delivery_req_line_set;
   private ASPCommandBar mat_st_delivery_req_line_bar;
   private ASPTable mat_st_delivery_req_line_tbl;
   private ASPBlockLayout mat_st_delivery_req_line_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  MatStDeliveryReqBill (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      String comnd = "";
      boolean flag = true;
      if( mgr.commandBarActivated() ){
         comnd = mgr.readValue("__COMMAND");
         if ( "ITEM1.Delete".equals(comnd)||"ITEM1.EditRow".equals(comnd))
         {
            flag = checkDeleteOrModify();
         }
         if(flag){
           eval(mgr.commandBarFunction());
         }
      }
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("DELIVERY_ID")) )
         okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else 
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      q.addWhereCondition("MAT_DELEVERAY_TYPE = 'Delivery'");
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("MATSTDELIVERYREQNODATA: No data found.");
         headset.clear();
      }
      eval( mat_st_delivery_req_line_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","MAT_ST_DELIVERY_REQ_API.New__",headblk);
      cmd.setParameter("MAT_DELEVERAY_TYPE", "Delivery");
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(mat_st_delivery_req_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND DELIVERY_ID = ?");
//      q.addWhereCondition("req_qty <= (SELECT storage_qty FROM mat_storage WHERE mat_storage.storage_id = mat_st_delivery_req_line.storage_id)");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("DELIVERY_ID", headset.getValue("DELIVERY_ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,mat_st_delivery_req_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","MAT_ST_DELIVERY_REQ_LINE_API.New__",mat_st_delivery_req_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_DELIVERY_ID", headset.getValue("DELIVERY_ID"));
      cmd.setParameter("ITEM0_DELIVERY_REQ_ID", headset.getValue("DELIVERY_REQ_ID"));
//      cmd.setParameter("ITEM0_CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      cmd.setParameter("NEW_ITEM", "TRUE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      mat_st_delivery_req_line_set.addRow(data);
   }

   public void validate()
   {
      
       ASPManager mgr = getASPManager();
       mgr.showAlert("MATDELIVERYREQBILLWARN3: The delivery_qty_total plus delivery_qty can not be larger than req_qty!");
       ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
       ASPCommand cmd;
       String val = mgr.readValue("VALIDATE"); 
       String txt = "";
       String matNo = "";
       String matUnit = "";
       String matName = "";
       String prodModel = "";
       String storageId = "";
       String storageQty = "";
       String reqQty = "";
       String deliveryQtyTotal = "";
       
       if ("DELIVERY_REQ_LINE_ID".equals(val)) {   
          cmd = trans.addCustomFunction("MATNO", 
                "MAT_ST_DELIVERY_REQ_LINE_API.Get_Mat_No", "MAT_NO");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("ITEM0_DELIVERY_REQ_ID");
          cmd.addParameter("DELIVERY_REQ_LINE_ID");          
          cmd = trans.addCustomFunction("STORAGEID", 
                "MAT_ST_DELIVERY_REQ_LINE_API.Get_Storage_Id", "STORAGE_ID");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("ITEM0_DELIVERY_REQ_ID");
          cmd.addParameter("DELIVERY_REQ_LINE_ID");     
          cmd = trans.addCustomFunction("CONTRACT_ID", 
                "MAT_ST_DELIVERY_REQ_API.Get_Contract_Id", "CONTRACT_ID");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("ITEM0_DELIVERY_REQ_ID");
          trans = mgr.validate(trans);
          matNo = trans.getValue("MATNO/DATA/MAT_NO");
          storageId = trans.getValue("STORAGEID/DATA/STORAGE_ID");
          String contractId = trans.getValue("CONTRACT_ID/DATA/CONTRACT_ID");
          
          trans.clear();
          cmd.clear();
          cmd = trans.addCustomFunction("MATNAME", 
                "MAT_CODE_API.Get_Mat_Name", "MAT_NAME");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("MAT_NO", matNo);
          cmd = trans.addCustomFunction("UNITNO", 
                "MAT_CODE_API.Get_Mat_Unit", "UNIT_NO");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("MAT_NO", matNo);
          cmd = trans.addCustomFunction("PRODMODEL", 
                "MAT_CODE_API.Get_Prod_Model", "PROD_MODEL");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("MAT_NO", matNo);
          trans = mgr.validate(trans);
          matName = trans.getValue("MATNAME/DATA/MAT_NAME");
          matUnit = trans.getValue("UNITNO/DATA/UNIT_NO");
          prodModel = trans.getValue("PRODMODEL/DATA/PROD_MODEL");
          
          trans.clear();
          cmd.clear();          
          cmd = trans.addCustomFunction("STORAGEQTY", 
                "Mat_Storage_Api.Get_Storage_Qty", "STORAGE_QTY");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("MAT_NO",matNo);
          cmd.addParameter("STORAGE_ID",storageId);
          cmd.addParameter("CONTRACT_ID",contractId);
          trans = mgr.validate(trans);          
          storageQty = trans.getValue("STORAGEQTY/DATA/STORAGE_QTY");
          
          trans.clear();
          cmd.clear();          
          cmd = trans.addCustomFunction("REQQTY", 
                "MAT_ST_DELIVERY_REQ_LINE_API.Get_Req_Qty", "REQ_QTY");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("ITEM0_DELIVERY_REQ_ID");
          cmd.addParameter("DELIVERY_REQ_LINE_ID"); 
          cmd = trans.addCustomFunction("DELIVERYQTYTOTAL", 
                "MAT_ST_DELIVERY_REQ_LINE_API.Get_Delivery_Qty_Total", "DELIVERY_QTY_TOTAL");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("ITEM0_DELIVERY_REQ_ID");
          cmd.addParameter("DELIVERY_REQ_LINE_ID"); 
          trans = mgr.validate(trans);          
          reqQty = trans.getValue("REQQTY/DATA/REQ_QTY");
          deliveryQtyTotal = trans.getValue("DELIVERYQTYTOTAL/DATA/DELIVERY_QTY_TOTAL");
          
          txt = ((mgr.isEmpty(matNo)) ? "" : matNo) + "^" + ((mgr.isEmpty(matName)) ? "" : matName) + "^";
          txt = txt + ((mgr.isEmpty(matUnit)) ? "" : matUnit) + "^" + ((mgr.isEmpty(prodModel)) ? "" : prodModel) + "^";
          txt = txt + ((mgr.isEmpty(storageId)) ? "" : storageId )+ "^" + ((mgr.isEmpty(storageQty)) ? "0" : storageQty )+ "^";
          txt = txt + ((mgr.isEmpty(reqQty)) ? "0" : reqQty )+ "^" + ((mgr.isEmpty(deliveryQtyTotal)) ? "0" : deliveryQtyTotal )+ "^";
          mgr.responseWrite(txt);
          
       }
       if("DELIVERY_QTY".equals(val)){
          int tempValue = ((mgr.readValue("DELIVERY_QTY_TOTAL")==null)?0:Integer.parseInt(mgr.readValue("DELIVERY_QTY_TOTAL"))) + ((mgr.readValue("DELIVERY_QTY")==null)?0:Integer.parseInt(mgr.readValue("DELIVERY_QTY")));
          int reqQtyInfo = (mgr.readValue("REQ_QTY")==null)?0:Integer.parseInt(mgr.readValue("REQ_QTY"));
          if(tempValue > reqQtyInfo){
             tempValue = reqQtyInfo - ((mgr.readValue("DELIVERY_QTY_TOTAL")==null)?0:Integer.parseInt(mgr.readValue("DELIVERY_QTY_TOTAL")));
             mgr.responseWrite(String.valueOf(tempValue)+"^"); 
          }else{
             tempValue = ((mgr.readValue("DELIVERY_QTY")==null)?0:Integer.parseInt(mgr.readValue("DELIVERY_QTY")));
             mgr.responseWrite(String.valueOf(tempValue)+"^"); 
          }
       }
       mgr.endResponse();
   }
   
  
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("DELIVERY_ID").
              setMandatory().
              setReadOnly().
              setLabel("MATSTDELIVERYREQBILLDELIVERYID: Delivery Id").
              setSize(50);
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setDynamicLOV("GENERAL_PROJECT",600,445).
              setLabel("MATSTDELIVERYREQPROJNO: Proj No").
              setSize(50);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("MATSTDELIVERYREQBILLGENERALPROJECTPROJDESC: General Project Proj Desc").
              setReadOnly().
              setSize(30);
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      //Dec4th add Contract_Id and Contract_desc by @natic
      headblk.addField("CONTRACT_ID").
              setInsertable().
              setHidden().
              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
              setLabel("MATSTDELIVERYREQBILLCONTRACTID: Contract Id").
              setSize(20);
//      headblk.addField("CONTRACT_DESC").  
//              setReadOnly().
//              setHidden().
//              setLabel("MATSTDELIVERYREQBILLCONTRACTDESC: Contract Desc").
//              setFunction("PROJECT_CONTRACT_API.GET_CONTRACT_DESC(:PROJ_NO,:CONTRACT_ID)").
//              setSize(20);
//      mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_DESC");
      //end 
//      headblk.addField("INVOICE_NO").
//              setInsertable().
//              setLabel("MATSTDELIVERYREQBILLINVOICENO: Invoice No").
//              setSize(50);
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setLabel("MATSTDELIVERYREQBILLCREATETIME: Create Time").
              setSize(30);
      headblk.addField("MAT_DELEVERAY_TYPE").
              setHidden().
              enumerateValues("Mat_Deleveray_Type_API").
              setSelectBox().
              setReadOnly().
              setLabel("MATSTDELIVERYREQBILLMATDELEVERAYTYPE: Mat Deleveray Type").
              setSize(50);
//      headblk.addField("MAT_TYPE_ID").
//              setInsertable().
//              setDynamicLOV("MAT_TYPE").
//              setLabel("MATSTDELIVERYREQBILLMATTYPEID: Mat Type Id").
//              setSize(50);
//      headblk.addField("MAT_TYPE_NAME").
//              setReadOnly().
//              setFunction("MAT_TYPE_API.Get_Mat_Type_Name ( :MAT_TYPE_ID)").
//              setLabel("MATSTDELIVERYREQBILLMATTYPENAME: Mat Type Name").
//              setSize(30);
//      mgr.getASPField("MAT_TYPE_ID").setValidation("MAT_TYPE_NAME");
      headblk.addField("DELIVERY_REQ_ID").
              setInsertable().
              setMandatory().
              setDynamicLOV("MAT_ST_DELIVERY_REQ", "PROJ_NO").
              setLOVProperty("WHERE", "STATUS = '2'").
              setLabel("MATSTDELIVERYREQBILLDELIVERYREQID: Delivery Req Id").
              setSize(50);
      headblk.addField("CREATE_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("MATSTDELIVERYREQBILLCREATEPERSON: Create Person").
              setSize(20);
      headblk.addField("CREATE_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
              setLabel("MATSTDELIVERYREQBILLPERSONINFONAME: Create Person Name").
              setReadOnly().
              setSize(30);
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");

      headblk.setView("MAT_ST_DELIVERY_REQ");
      headblk.defineCommand("MAT_ST_DELIVERY_REQ_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("deliveryAccept",mgr.translate("MATSTDELIVERYBILLACCEPT: Delivery Accept"));
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("MATSTDELIVERYREQBILLTBLHEAD: Mat St Delivery Reqs");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headbar.addCustomCommand("printReport", "MATSTDELIVERYREQBILLRINTREPORT: Print Report...");
      headbar.addCustomCommand("printReport2", "MATSTDELIVERYREQBILLRINTREPORT2: Print Report2...");
      
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
//      headlay.setSimple("MAT_TYPE_NAME");
      headlay.setSimple("CREATE_PERSON_NAME");
//      headlay.setSimple("CONTRACT_DESC");

      mat_st_delivery_req_line_blk = mgr.newASPBlock("ITEM1");
      mat_st_delivery_req_line_blk.addField("ITEM0_OBJID").
                                   setHidden().
                                   setDbName("OBJID");
      mat_st_delivery_req_line_blk.addField("ITEM0_OBJVERSION").
                                   setHidden().
                                   setDbName("OBJVERSION");
      mat_st_delivery_req_line_blk.addField("ITEM0_PROJ_NO").
                                   setDbName("PROJ_NO").
                                   setHidden().
                                   setLabel("MATSTDELIVERYREQBILLITEM0PROJNO: Proj No").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("ITEM0_DELIVERY_ID").
                                   setDbName("DELIVERY_ID").
                                   setHidden().
                                   setLabel("MATSTDELIVERYREQBILLITEM0DELIVERYID: Delivery Id").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("ITEM0_DELIVERY_REQ_ID").
                                   setFunction("MAT_ST_DELIVERY_REQ_API.Get_Delivery_Req_Id (:ITEM0_PROJ_NO, :ITEM0_DELIVERY_ID)").
                                   setHidden().
                                   setLabel("MATSTDELIVERYREQBILLITEM0DELIVERYREQID: Delivery Req Id").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("DELIVERY_LINE_NO").
                                   setHidden().
                                   setLabel("MATSTDELIVERYREQBILLDELIVERYLINENO: Delivery Line No").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("NEW_ITEM").
                                   setReadOnly().
                                   setCheckBox("FALSE,TRUE").
                                   setLabel("MATSTDELIVERYREQBILLNEWITEM: New Item").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("DELIVERY_REQ_LINE_ID").
                                   setMandatory().
                                   setDynamicLOV("MAT_ST_DELIVERY_REQ_LINE", "ITEM0_PROJ_NO PROJ_NO,ITEM0_DELIVERY_REQ_ID DELIVERY_ID").   
                                   setLabel("MATSTDELIVERYREQBILLDELIVERYREQLINEID: Delivery Line Req ID").
                                   setCustomValidation("ITEM0_PROJ_NO, ITEM0_DELIVERY_REQ_ID, DELIVERY_REQ_LINE_ID", "MAT_NO,MAT_NAME,UNIT_NO,PROD_MODEL,STORAGE_ID,STORAGE_QTY,REQ_QTY,DELIVERY_QTY_TOTAL").
                                   setSize(50);
//      mat_st_delivery_req_line_blk.addField("ITEM0_CONTRACT_ID").
//                                   setDbName("CONTRACT_ID").
//                                   setHidden().
//                                   setLabel("MATSTDELIVERYREQBILLITEM0CONTRACTID: Contract Id").
//                                   setSize(20);
      mat_st_delivery_req_line_blk.addField("MAT_NO").
                                   setReadOnly().
//                                   setDynamicLOV("MAT_STORAGE","PROJ_NO,CONTRACT_ID").
//                                   setLOVProperty("FORCE_KEY", "MAT_NO").
                                   setLabel("MATSTDELIVERYREQBILLMATNO: Mat No").
                                   setFunction("MAT_ST_DELIVERY_REQ_LINE_API.Get_Mat_No (:ITEM0_PROJ_NO,MAT_ST_DELIVERY_REQ_API.Get_Delivery_Req_Id(:ITEM0_PROJ_NO, :ITEM0_DELIVERY_ID),:DELIVERY_REQ_LINE_ID)").
                                   setSize(20);
      mat_st_delivery_req_line_blk.addField("MAT_NAME").
                                   setReadOnly().
                                   setFunction("MAT_CODE_API.Get_Mat_Name (:ITEM0_PROJ_NO, MAT_ST_DELIVERY_REQ_LINE_API.Get_Mat_No (:ITEM0_PROJ_NO,MAT_ST_DELIVERY_REQ_API.Get_Delivery_Req_Id(:ITEM0_PROJ_NO, :ITEM0_DELIVERY_ID),:DELIVERY_REQ_LINE_ID))").
                                   setLabel("MATSTDELIVERYREQBILLMATNAME: Mat Name").
                                   setSize(30);
      mat_st_delivery_req_line_blk.addField("UNIT_NO").
                                   setReadOnly().
                                   setLabel("MATSTDELIVERYREQBILLUNITNO: Unit No").
                                   setFunction("MAT_CODE_API.Get_Mat_Unit (:ITEM0_PROJ_NO, MAT_ST_DELIVERY_REQ_LINE_API.Get_Mat_No (:ITEM0_PROJ_NO,MAT_ST_DELIVERY_REQ_API.Get_Delivery_Req_Id(:ITEM0_PROJ_NO, :ITEM0_DELIVERY_ID),:DELIVERY_REQ_LINE_ID))").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("PROD_MODEL").
                                   setReadOnly().
                                   setLabel("MATSTDELIVERYREQBILLPRODMODEL: PROD MODEL").
                                   setFunction("MAT_CODE_API.Get_Prod_Model (:ITEM0_PROJ_NO, MAT_ST_DELIVERY_REQ_LINE_API.Get_Mat_No (:ITEM0_PROJ_NO,MAT_ST_DELIVERY_REQ_API.Get_Delivery_Req_Id(:ITEM0_PROJ_NO, :ITEM0_DELIVERY_ID),:DELIVERY_REQ_LINE_ID))").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("STORAGE_ID").
                                   setReadOnly().
                                   setLabel("MATSTDELIVERYREQBILLSTORAGEID: Storage Id").
                                   setFunction("MAT_ST_DELIVERY_REQ_LINE_API.Get_Storage_Id(:ITEM0_PROJ_NO,MAT_ST_DELIVERY_REQ_API.Get_Delivery_Req_Id(:ITEM0_PROJ_NO, :ITEM0_DELIVERY_ID),:DELIVERY_REQ_LINE_ID)").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("STORAGE_QTY").
                                   setReadOnly().
                                   setFunction("Mat_Storage_Api.Get_Storage_Qty (:ITEM0_PROJ_NO, MAT_ST_DELIVERY_REQ_LINE_API.Get_Mat_No (:ITEM0_PROJ_NO,MAT_ST_DELIVERY_REQ_API.Get_Delivery_Req_Id(:ITEM0_PROJ_NO, :ITEM0_DELIVERY_ID),:DELIVERY_REQ_LINE_ID), MAT_ST_DELIVERY_REQ_LINE_API.Get_Storage_Id(:ITEM0_PROJ_NO,MAT_ST_DELIVERY_REQ_API.Get_Delivery_Req_Id(:ITEM0_PROJ_NO, :ITEM0_DELIVERY_ID),:DELIVERY_REQ_LINE_ID),MAT_ST_DELIVERY_REQ_API.Get_Contract_Id(:ITEM0_PROJ_NO, MAT_ST_DELIVERY_REQ_API.Get_Delivery_Req_Id(:ITEM0_PROJ_NO, :ITEM0_DELIVERY_ID)))").
                                   setLabel("MATSTDELIVERYREQBILLSTORAGEQTY: Storage Qty").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("REQ_QTY").
                                   setReadOnly().
                                   setLabel("MATSTDELIVERYREQBILLREQQTY: Req Qty").
                                   setFunction("MAT_ST_DELIVERY_REQ_LINE_API.Get_Req_Qty (:ITEM0_PROJ_NO,MAT_ST_DELIVERY_REQ_API.Get_Delivery_Req_Id(:ITEM0_PROJ_NO, :ITEM0_DELIVERY_ID),:DELIVERY_REQ_LINE_ID)").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("DELIVERY_QTY","Number").
                                   setInsertable().
//                                   setCustomValidation("REQ_QTY,DELIVERY_QTY_TOTAL,DELIVERY_QTY", "DELIVERY_QTY").
                                   setLabel("MATSTDELIVERYREQBILLDELIVERYQTY: Delivery Qty").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("DELIVERY_QTY_TOTAL").
                                   setReadOnly().
                                   setLabel("MATSTDELIVERYREQBILLDELIVERYQTYTOTAL: Delivery Qty Total").
                                   setFunction("MAT_ST_DELIVERY_REQ_LINE_API.Get_Delivery_Qty_Total (:ITEM0_PROJ_NO,MAT_ST_DELIVERY_REQ_API.Get_Delivery_Req_Id(:ITEM0_PROJ_NO, :ITEM0_DELIVERY_ID),:DELIVERY_REQ_LINE_ID)").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("ITEM0_CREATE_TIME","Date").
                                   setDbName("CREATE_TIME").
                                   setInsertable().
                                   setLabel("MATSTDELIVERYREQBILLITEM0CREATETIME: Create Time").
                                   setSize(50);
      mat_st_delivery_req_line_blk.addField("ITEM0_CREATE_PERSON").
                                   setDbName("CREATE_PERSON").
                                   setInsertable().
                                   setDynamicLOV("PERSON_INFO").
                                   setLabel("MATSTDELIVERYREQBILLITEM0CREATEPERSON: Create Person").
                                   setSize(20);
      mat_st_delivery_req_line_blk.addField("ITEM0_CREATE_PERSON_NAME").
                                   setFunction("PERSON_INFO_API.GET_NAME ( :ITEM0_CREATE_PERSON)").
                                   setLabel("MATSTDELIVERYREQBILLITEM0PERSONINFONAME: Create Person Name").
                                   setReadOnly().
                                   setSize(30);
      mgr.getASPField("ITEM0_CREATE_PERSON").setValidation("ITEM0_CREATE_PERSON_NAME");

      mat_st_delivery_req_line_blk.setView("MAT_ST_DELIVERY_REQ_LINE");
      mat_st_delivery_req_line_blk.defineCommand("MAT_ST_DELIVERY_REQ_LINE_API","New__,Modify__,Remove__");
      mat_st_delivery_req_line_blk.setMasterBlock(headblk);
      mat_st_delivery_req_line_set = mat_st_delivery_req_line_blk.getASPRowSet();
      mat_st_delivery_req_line_bar = mgr.newASPCommandBar(mat_st_delivery_req_line_blk);
      mat_st_delivery_req_line_bar.defineCommand(mat_st_delivery_req_line_bar.OKFIND, "okFindITEM1");
      mat_st_delivery_req_line_bar.defineCommand(mat_st_delivery_req_line_bar.NEWROW, "newRowITEM1");
      mat_st_delivery_req_line_tbl = mgr.newASPTable(mat_st_delivery_req_line_blk);
      mat_st_delivery_req_line_tbl.setTitle("MATSTDELIVERYREQBILLITEMHEAD1: MatStDeliveryReqBillLine");
      mat_st_delivery_req_line_tbl.enableRowSelect();
      mat_st_delivery_req_line_tbl.setWrap();
      mat_st_delivery_req_line_lay = mat_st_delivery_req_line_blk.getASPBlockLayout();
      mat_st_delivery_req_line_lay.setDefaultLayoutMode(mat_st_delivery_req_line_lay.MULTIROW_LAYOUT);
      mat_st_delivery_req_line_lay.setSimple("ITEM0_CREATE_PERSON_NAME");
      mat_st_delivery_req_line_lay.setSimple("MAT_NAME");

   }

   public void deliveryAccept() throws FndException{
      ASPManager mgr = getASPManager();
      ASPCommand cmdBuf; 
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      String deliveryInfo = "";
      int selectCount = 0;
      mat_st_delivery_req_line_set.storeSelections();  
      ASPBuffer aspbuf = mat_st_delivery_req_line_set.getSelectedRows();
      if(aspbuf.countItems() == 0){
         mgr.showAlert("MATDELIVERYREQBILLWARN1: There is no delivery bill selected!");
      }else{
         for(int i=0;i< aspbuf.countItems() ;i++ ){     
            if("TRUE".equals(aspbuf.getBufferAt(i).getValue("NEW_ITEM"))){
               deliveryInfo = deliveryInfo + aspbuf.getBufferAt(i).getValue("DELIVERY_LINE_NO") + "^";
            }
         }
         if(!"".equals(deliveryInfo)){                        
            cmdBuf = trans.addCustomCommand("DELIVERYACCEPT", "MAT_ST_DELIVERY_REQ_API.Update_Status_And_Storage__");
            cmdBuf.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
            cmdBuf.addParameter("DELIVERY_ID", headset.getValue("DELIVERY_ID"));     
            cmdBuf.addParameter("OBJID", deliveryInfo);
            mgr.perform(trans);
            okFindITEM1();
         }else{         
            mgr.showAlert("MATDELIVERYREQBILLWARN2: All the borrow bills those were choosen were already done.");
         }
      }
   }

   public boolean checkDeleteOrModify(){
      ASPManager mgr = getASPManager();
      ASPCommand cmdBuf; 
      int selectCount = 0;
      mat_st_delivery_req_line_set.storeSelections();  
      if (mat_st_delivery_req_line_lay.isSingleLayout())
         mat_st_delivery_req_line_set.selectRow();
      ASPBuffer aspbuf = mat_st_delivery_req_line_set.getSelectedRows();
      for(int i=0;i< aspbuf.countItems() ;i++ ){     
         if("FALSE".equals(aspbuf.getBufferAt(i).getValue("NEW_ITEM"))){
            mgr.showAlert("MATDELIVERYREQBILLWARN3: The selected bills were already done,can not delete.");
            return false;
         }
      }
      return true;
   }
   public void  adjust()
   {
   }
   

   public void  printReport() throws FndException, UnsupportedEncodingException
  {
   ASPManager mgr = getASPManager();
   ASPConfig cfg = getASPConfig();
   String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
   if (headlay.isMultirowLayout())
      headset.goTo(headset.getRowSelected());
   if (headset.countRows()>0 )
         {   
            String proj_no = headset.getValue("PROJ_NO");
            String accept_id = headset.getValue("DELIVERY_ID");
             appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=MatStDeliveryReqBill.raq&projNo="+proj_no+"&deliveryId="+accept_id
               + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
        }
  }  
   
   public void  printReport2() throws FndException, UnsupportedEncodingException
  {
   ASPManager mgr = getASPManager();
   ASPConfig cfg = getASPConfig();
   String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
   if (headlay.isMultirowLayout())
      headset.goTo(headset.getRowSelected());
   if (headset.countRows()>0 )
         {   
            String proj_no = headset.getValue("PROJ_NO");
            String accept_id = headset.getValue("DELIVERY_ID");
             appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=MatStDeliveryReqBill2.raq&projNo="+proj_no+"&deliveryId="+accept_id
               + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
        }
  }   

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "MATSTDELIVERYREQBILLDESC: Mat St Delivery Req Bill";
   }


   protected String getTitle()
   {
      return "MATSTDELIVERYREQBILLTITLE: Mat St Delivery Req Bill";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
      if (mat_st_delivery_req_line_lay.isVisible())
          appendToHTML(mat_st_delivery_req_line_lay.show());

   }
}
