/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.matmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class MatEntryListToContract extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.matmaw.MatEntryListToContract");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   

   private ASPBlock mat_st_entry_line_blk;
   private ASPRowSet mat_st_entry_line_set;
   private ASPCommandBar mat_st_entry_line_bar;
   private ASPTable mat_st_entry_line_tbl;
   private ASPBlockLayout mat_st_entry_line_lay;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  MatEntryListToContract (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if ("TRUE".equals(mgr.readValue("REFRESH_PARENT")))
      {
         headset.refreshRow();
         okFindITEM1();
      }
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("LIST_TO_CON_ID")) )
         okFind();
      else 
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("MATENTRYLISTTOCONTRACTNODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","MAT_ENTRY_LIST_TO_CONTRACT_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }

   
   
   

   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(mat_st_entry_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND CONTRACT_ID = ? AND ITEM_NO = ? AND¡¡(PROJ_NO,ENTRY_ID) IN " +
            "(SELECT PROJ_NO,ENTRY_ID FROM MAT_ST_ENTRY WHERE MAT_ENTRY_TYPE_DB = 'LIST' AND STATUS = 'ÒÑÈë¿â')");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      q.addParameter("ITEM_NO", headset.getValue("ITEM_NO"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,mat_st_entry_line_blk);
      headset.goTo(headrowno);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("LIST_TO_CON_ID").
//              setMandatory().
//              setInsertable().
              setLabel("MATENTRYLISTTOCONTRACTLISTTOCONID: List To Con Id").
              setReadOnly().
//              setHidden().
              setSize(20);
      headblk.addField("PROJ_NO").
              setInsertable().
              setDynamicLOV("GENERAL_PROJECT").
              setMandatory().
              setLabel("MATENTRYLISTTOCONTRACTPROJNO: Proj No").
              setSize(20);

      headblk.addField("PROJ_DESC").
               setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
               setLabel("MATENTRYLISTTOCONTRACTPROJDESC: Proj Desc").
               setReadOnly().
               setSize(30);
      mgr.getASPField("PROJ_NO").setValidation("PROJ_DESC");
      headblk.addField("CONTRACT_ID").
              setInsertable().
              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
              setLOVProperty("WHERE", "CLASS_NO IN ('SB','WZ')").
              setMandatory().
              setLabel("MATENTRYLISTTOCONTRACTCONTRACTID: Contract Id").
              setSize(20);

      headblk.addField("CONTRACT_DESC").
              setFunction("PROJECT_CONTRACT_API.GET_CONTRACT_DESC ( :PROJ_NO,:CONTRACT_ID)").
              setLabel("MATENTRYLISTTOCONTRACTCONTRACTDESC: Contract Desc").
              setReadOnly().
              setSize(30);
      mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_DESC");
      headblk.addField("ITEM_NO").
              setInsertable().
              setDynamicLOV("PROJECT_CONTRACT_ITEM","PROJ_NO,CONTRACT_ID").
              setMandatory().
              setLabel("MATENTRYLISTTOCONTRACTITEMNO: Item No").
              setSize(20);

      headblk.addField("ITEM_DESC").
              setFunction("PROJECT_CONTRACT_ITEM_API.GET_ITEM_DESC ( :PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
              setLabel("MATENTRYLISTTOCONTRACTITEMDESC: Item Desc").
              setReadOnly().
              setSize(30);
      mgr.getASPField("ITEM_NO").setValidation("ITEM_DESC");
      headblk.addField("IS_CON_ENTRY").
//              setInsertable().
              setReadOnly().
              setCheckBox("FALSE,TRUE").
              setLabel("MATENTRYLISTTOCONTRACTISCONENTRY: Is Con Entry").
              setSize(20);
      headblk.addField("STATUS").
              setReadOnly().
              setHidden().
              setLabel("MATENTRYLISTTOCONTRACTSTATUS: Status").
              setSize(20);
      headblk.addField("PERSON_ID").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("MATENTRYLISTTOCONTRACTPERSONID: Person Id").
              setSize(20);

      headblk.addField("PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME (:PERSON_ID)").
              setLabel("MATENTRYLISTTOCONTRACTPERSONNAME: Person Name").
              setReadOnly().
              setSize(30);
      mgr.getASPField("PERSON_ID").setValidation("PERSON_NAME");
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setLabel("MATENTRYLISTTOCONTRACTCREATETIME: Create Time").
              setSize(20);
      headblk.setView("MAT_ENTRY_LIST_TO_CONTRACT");
      headblk.defineCommand("MAT_ENTRY_LIST_TO_CONTRACT_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("MATENTRYLISTTOCONTRACTTBLHEAD: Mat Entry List To Contracts");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headbar.disableCommand(headbar.OVERVIEWEDIT);
      headbar.addSecureCustomCommand("CreateFile", "MATENTRYLISTTOCONTRACTCREATEFILE: Create File...", "MAT_ST_ENTRY_LINE_API.CREATE_FILE3");
      headbar.addCommandValidConditions("CreateFile", "IS_CON_ENTRY", "Disable", "TRUE");
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);

      headlay.setSimple("PROJ_DESC");
      headlay.setSimple("CONTRACT_DESC");
      headlay.setSimple("ITEM_DESC");
      headlay.setSimple("PERSON_NAME");
      headlay.setDataSpan("IS_CON_ENTRY", 5);
 

      mat_st_entry_line_blk = mgr.newASPBlock("ITEM1");
      mat_st_entry_line_blk.addField("ITEM0_OBJID").
                            setHidden().
                            setDbName("OBJID");
      mat_st_entry_line_blk.addField("ITEM0_OBJVERSION").
                            setHidden().
                            setDbName("OBJVERSION");

      mat_st_entry_line_blk.addField("IS_TO_CON").
                            setInsertable().
                            setCheckBox("FALSE,TRUE").
                            setLabel("MATARRIVELINEISTOCON: Is To Con").
                            setSize(20);
      mat_st_entry_line_blk.addField("ITEM0_PROJ_NO").
                            setDbName("PROJ_NO").
                            setMandatory().
                            setReadOnly().
//                            setInsertable().
                            setHidden().
                            setLabel("MATSTENTRYLINEITEM0PROJNO: Proj No").
                            setSize(50);
      mat_st_entry_line_blk.addField("ENTRY_ID").
//                            setHidden().
                            setMandatory().
                            setReadOnly().
//                            setInsertable().
                            setLabel("MATSTENTRYLINEITEM0ENTRYID: Entry Id").
                            setSize(50);
      mat_st_entry_line_blk.addField("ENTRY_LINE_NO").
//                            setMandatory().
                            setReadOnly().
//                            setInsertable().
                            setLabel("MATSTENTRYLINEENTRYLINENO: Entry Line No").
                            setSize(20);
      mat_st_entry_line_blk.addField("ACCEPT_ID").
//                            setInsertable().
                            setReadOnly().
                            setDynamicLOV("MAT_ACCEPT","PROJ_NO").
                            setLabel("MATSTENTRYLINEACCEPTID: Accept Id").
                            setSize(20);
      mat_st_entry_line_blk.addField("LINE_NO").
//                            setInsertable().
                            setReadOnly().
                            setDynamicLOV("MAT_ACCEPT_LINE_LEFT","PROJ_NO,ACCEPT_ID").
                            setLOVProperty("WHERE", "accept_qty > entry_qty").
                            setLabel("MATSTENTRYLINELINENO: Line No").
                            setCustomValidation("PROJ_NO,ACCEPT_ID,LINE_NO", "MAT_NO,MAT_NAME,ACCEPT_QTY,ENTRY_QTY,UNIT_NO").
                            setSize(20);

      mat_st_entry_line_blk.addField("MAT_NO").
                            setReadOnly().
                            setLabel("MATARRIVELINEMATNO: Mat No").
                            setFunction("MAT_ACCEPT_LINE_API.GET_MAT_NO ( :PROJ_NO,:ACCEPT_ID,:LINE_NO)").
                            setSize(20);
      mat_st_entry_line_blk.addField("MAT_NAME").  
                            setReadOnly().
                            setLabel("MATARRIVELINEMATNAME: Mat Name").
                            setFunction("MAT_CODE_API.GET_MAT_NAME(:PROJ_NO,MAT_ACCEPT_LINE_API.GET_MAT_NO ( :PROJ_NO,:ACCEPT_ID,:LINE_NO))").
                            setSize(20);
      mat_st_entry_line_blk.addField("ACCEPT_QTY","Number").
                            setReadOnly().
                            setLabel("MATACCEPTLINEACCEPTQTY: Accept Qty").
                            setFunction("MAT_ACCEPT_LINE_API.GET_ACCEPT_QTY ( :PROJ_NO,:ACCEPT_ID,:LINE_NO)").
                            setSize(20);
      mat_st_entry_line_blk.addField("ENTRY_QTY","Number").
//                            setInsertable().
                            setReadOnly().
                            setLabel("MATSTENTRYLINEENTRYQTY: Entry Qty").
                            setSize(20);
//      mat_st_entry_line_blk.addField("NO_TAX_PRICE","Number").
//                            setInsertable().
//                            setLabel("MATSTENTRYLINENOTAXPRICE: No Tax Price").
//                            setSize(30);
//      mat_st_entry_line_blk.addField("ENTRY_PRICE","Number").
//                            setInsertable().
//                            setLabel("MATSTENTRYLINEENTRYPRICE: Entry Price").
//                            setSize(30);
//      mat_st_entry_line_blk.addField("TAX_RATE","Number").
//                            setInsertable().
//                            setLabel("MATSTENTRYLINETAXRATE: Tax Rate").
//                            setSize(30);
      mat_st_entry_line_blk.addField("UNIT_NO").
//                            setInsertable().
                            setReadOnly().
                            setDynamicLOV("ISO_UNIT").
                            setLabel("MATSTENTRYLINEUNITNO: Unit No").
                            setSize(20);
      mat_st_entry_line_blk.setView("MAT_ST_ENTRY_LINE");
      mat_st_entry_line_blk.defineCommand("MAT_ST_ENTRY_LINE_API","New__,Modify__,Remove__");
      mat_st_entry_line_blk.setMasterBlock(headblk);
      mat_st_entry_line_set = mat_st_entry_line_blk.getASPRowSet();
      mat_st_entry_line_bar = mgr.newASPCommandBar(mat_st_entry_line_blk);
      mat_st_entry_line_bar.disableCommand(mat_st_entry_line_bar.NEWROW);
      mat_st_entry_line_bar.defineCommand(mat_st_entry_line_bar.OKFIND, "okFindITEM1");
      mat_st_entry_line_bar.defineCommand(mat_st_entry_line_bar.DELETE,"deleteITEM1");
      mat_st_entry_line_tbl = mgr.newASPTable(mat_st_entry_line_blk);
      mat_st_entry_line_tbl.setTitle("MATSTENTRYLINEITEMHEAD1: MatStEntryLine");
      mat_st_entry_line_tbl.enableRowSelect();
      mat_st_entry_line_tbl.setWrap();
      mat_st_entry_line_lay = mat_st_entry_line_blk.getASPBlockLayout();
      mat_st_entry_line_lay.setDefaultLayoutMode(mat_st_entry_line_lay.MULTIROW_LAYOUT);





   }

   

   private void callNewWindow(String transfer_page, ASPBuffer buff) throws FndException 
   {
      ASPManager mgr = getASPManager();
      String serialized_data = mgr.pack(buff);
      String url = transfer_page + "?" + "__TRANSFER=" + serialized_data;
      appendDirtyJavaScript("showNewBrowser_('"+ url + "', 550, 550, 'YES'); \n");
   }
   public void createFile() throws FndException
   {
      // store selections
      ASPManager mgr = getASPManager();
      ASPContext ctx = mgr.getASPContext();
      headset.store();
      
      ASPBuffer selected_fields = headset.getSelectedRows("PROJ_NO,CONTRACT_ID,ITEM_NO");

      callNewWindow("MatEntryListToContractLineDlg.page", selected_fields);
   }
   public void deleteITEM1(){
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      cmd = trans.addCustomCommand("PROJ_NO,ENTRY_ID,ENTRY_LINE_NO","MAT_ST_ENTRY_LINE_API.deleteToCon__");
      cmd.setParameter("PROJ_NO", mat_st_entry_line_set.getValue("PROJ_NO"));
      cmd.setParameter("ENTRY_ID", mat_st_entry_line_set.getValue("ENTRY_ID"));
      cmd.setParameter("ENTRY_LINE_NO", mat_st_entry_line_set.getValue("ENTRY_LINE_NO"));
      trans = mgr.perform(trans);
      cmd.clear();
//      okFind();
      headset.refreshRow();
      okFindITEM1();
   }

   public void  adjust()
   {
      // fill function body
      if(headset.countRows() > 0&&headlay.isSingleLayout()&&"TRUE".equals(headset.getValue("IS_CON_ENTRY"))){
         headbar.disableCommand(headbar.EDITROW);
         mat_st_entry_line_bar.disableCommand(mat_st_entry_line_bar.EDITROW);
         mat_st_entry_line_bar.disableCommand(mat_st_entry_line_bar.DELETE);
      }
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "MATENTRYLISTTOCONTRACTDESC: Mat Entry List To Contract";
   }


   protected String getTitle()
   {
      return "MATENTRYLISTTOCONTRACTTITLE: Mat Entry List To Contract";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
      if (mat_st_entry_line_lay.isVisible())
         appendToHTML(mat_st_entry_line_lay.show());

      appendDirtyJavaScript("function refreshParent()\n");
      appendDirtyJavaScript("{\n");
      appendDirtyJavaScript(" document.form.REFRESH_PARENT.value=\"TRUE\"\n");
      appendDirtyJavaScript(" submit() \n");
      appendDirtyJavaScript("}\n");
   }
}
