/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.matmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class SupException extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.matmaw.SupException");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  SupException (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if ( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")) )
         validate();     
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("EXCEPTION_NO")) )
         okFind();
      else 
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("SUPEXCEPTIONNODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","SUP_EXCEPTION_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }

   
   public void validate()
   {
      ASPManager mgr=getASPManager();
      ASPTransactionBuffer trans=mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPTransactionBuffer trans1=mgr.newASPTransactionBuffer();
      ASPCommand cmd1;
      String str=mgr.readValue("VALIDATE");
    
      if ("SUP_IMP_NO".equals(str)) {
         cmd = trans.addCustomFunction("SUP_PROJ_NO","MAT_SUP_IMP_API.GET_SUP_PROJ_NO","SUP_PROJ_NO");
         cmd.addParameter("SUP_IMP_NO");

         trans = mgr.validate(trans);
         String SUP_PROJ_NO     = trans.getValue("SUP_PROJ_NO/DATA/SUP_PROJ_NO");

         cmd1 = trans1.addCustomFunction("SUP_PROJ_NAME","MAT_SUP_PROJECT_API.GET_SUP_PROJ_NAME","SUP_PROJ_NAME");
         cmd1.addParameter("SUP_IMP_NO",SUP_PROJ_NO);
         cmd1 = trans1.addCustomFunction("UNIT_MODEL","MAT_SUP_PROJECT_API.GET_UNIT_MODEL","UNIT_MODEL");
         cmd1.addParameter("SUP_PROJ_NO",SUP_PROJ_NO);
         cmd1 = trans1.addCustomFunction("UNIT_SIZE","MAT_SUP_PROJECT_API.GET_UNIT_SIZE","UNIT_SIZE");
         cmd1.addParameter("SUP_PROJ_NO",SUP_PROJ_NO);
         cmd1 = trans1.addCustomFunction("UNIT_NUMBER","MAT_SUP_PROJECT_API.GET_UNIT_NUMBER","UNIT_NUMBER");
         cmd1.addParameter("SUP_PROJ_NO",SUP_PROJ_NO);
         
         trans1 = mgr.validate(trans1);
         String SUP_PROJ_NAME     = trans1.getValue("SUP_PROJ_NAME/DATA/SUP_PROJ_NAME");
         String UNIT_MODEL     = trans1.getValue("UNIT_MODEL/DATA/UNIT_MODEL");
         String UNIT_SIZE     = trans1.getValue("UNIT_SIZE/DATA/UNIT_SIZE");
         String UNIT_NUMBER     = trans1.getValue("UNIT_NUMBER/DATA/UNIT_NUMBER");
         
         mgr.responseWrite(SUP_PROJ_NO + "^" + SUP_PROJ_NAME + "^" + UNIT_MODEL + "^" + UNIT_SIZE + "^" + UNIT_NUMBER + "^" );
      }
      
      mgr.endResponse();
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("EXCEPTION_NO").
              setMandatory().
              setInsertable().
              setLabel("SUPEXCEPTIONEXCEPTIONNO: Exception No").
              setSize(20);

      headblk.addField("SUP_IMP_NO").
              setInsertable().
              setDynamicLOV("MAT_SUP_IMP").
              setCustomValidation("SUP_IMP_NO", "SUP_PROJ_NO,SUP_PROJ_NAME,UNIT_MODEL,UNIT_SIZE,UNIT_NUMBER").
              setLabel("SUPEXCEPTIONSUPIMPNO: Sup Imp No").
              setSize(20);

      headblk.addField("SUP_PROJ_NO").
              setReadOnly().
              setFunction("MAT_SUP_IMP_API.GET_SUP_PROJ_NO(:SUP_IMP_NO)").
              setLabel("SUPEXCEPTIONSUPPROJNO: Sup Proj No").
              setSize(20);
      headblk.addField("SUP_PROJ_NAME").
              setReadOnly().
              setFunction("MAT_SUP_PROJECT_API.GET_SUP_PROJ_NAME (MAT_SUP_IMP_API.GET_SUP_PROJ_NO(:SUP_IMP_NO))").
              setLabel("SUPEXCEPTIONSUPPROJNAME: Sup Proj Name").
              setSize(30);
      headblk.addField("UNIT_MODEL").
              setReadOnly().
              setFunction("MAT_SUP_PROJECT_API.GET_UNIT_MODEL (MAT_SUP_IMP_API.GET_SUP_PROJ_NO(:SUP_IMP_NO))").
              setLabel("SUPEXCEPTIONUNITMODEL: Unit Model").
              setSize(20);
      headblk.addField("UNIT_SIZE").
              setReadOnly().
              setFunction("MAT_SUP_PROJECT_API.GET_UNIT_SIZE (MAT_SUP_IMP_API.GET_SUP_PROJ_NO(:SUP_IMP_NO))").
              setLabel("SUPEXCEPTIONUNITSIZE: Unit Size").
              setSize(20);
      headblk.addField("UNIT_NUMBER").
              setReadOnly().
              setFunction("MAT_SUP_PROJECT_API.GET_UNIT_NUMBER (MAT_SUP_IMP_API.GET_SUP_PROJ_NO(:SUP_IMP_NO))").
              setLabel("SUPEXCEPTIONUNITNUMBER: Unit Number").
              setSize(20);
      
      headblk.addField("EQUIP_CODE").
              setInsertable().
              setLabel("SUPEXCEPTIONEQUIPCODE: Equip Code").
              setSize(20);
      headblk.addField("COMPONENT_NO").
              setInsertable().
              setLabel("SUPEXCEPTIONCOMPONENTNO: Component No").
              setSize(20);
      headblk.addField("COMPONENT_NAME").
              setInsertable().
              setLabel("SUPEXCEPTIONCOMPONENTNAME: Component Name").
              setSize(20);
      headblk.addField("CONTRACTION").
              setInsertable().
              setLabel("SUPEXCEPTIONCONTRACTION: Contraction").
              setSize(20);
      headblk.addField("QUA_REQ_LEVEL").
              enumerateValues("Qua_Req_Level_API").
              setSelectBox().
              setInsertable().
              setLabel("SUPEXCEPTIONQUAREQLEVEL: Qua Req Level").
              setSize(20);
      headblk.addField("QUA_REQ_CLASS").
              enumerateValues("Qua_Req_Class_API").
              setSelectBox().
              setInsertable().
              setLabel("SUPEXCEPTIONQUAREQCLASS: Qua Req Class").
              setSize(20);
      headblk.addField("REASON_CLASS").
              enumerateValues("Reason_Class_API").
              setSelectBox().
              setInsertable().
              setLabel("SUPEXCEPTIONREASONCLASS: Reason Class").
              setSize(20);
      headblk.addField("OCCUR_TIME","Date").
              setInsertable().
              setLabel("SUPEXCEPTIONOCCURTIME: Occur Time").
              setSize(20);
      headblk.addField("FINISH_TIME","Date").
              setInsertable().
              setLabel("SUPEXCEPTIONFINISHTIME: Finish Time").
              setSize(20);
      headblk.addField("THE_POINT").
              setInsertable().
              setLabel("SUPEXCEPTIONTHEPOINT: The Point").
              setHeight(3).
              setSize(100);
      headblk.addField("REASON").
              setInsertable().
              setLabel("SUPEXCEPTIONREASON: Reason").
              setHeight(3).
              setSize(100);
      headblk.addField("SUP_MSG").
              setInsertable().
              setLabel("SUPEXCEPTIONSUPMSG: Sup Msg").
              setHeight(3).
              setSize(100);
      headblk.addField("RESULT").
              setInsertable().
              setLabel("SUPEXCEPTIONRESULT: Result").
              setHeight(3).
              setSize(100);

//      headblk.addField("CREATE_PERSON").
//              setInsertable().
//              setLabel("SUPEXCEPTIONCREATEPERSON: Create Person").
//              setSize(20);
      headblk.addField("PERSON_ID").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("SUPEXCEPTIONPERSONID: Person Id").
              setSize(20);
      headblk.addField("PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME (:PERSON_ID)").
              setLabel("SUPEXCEPTIONPERSONNAME: Person Name").
              setReadOnly().
              setSize(30);
      mgr.getASPField("PERSON_ID").setValidation("PERSON_NAME");
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setLabel("SUPEXCEPTIONCREATETIME: Create Time").
              setSize(20);
//      headblk.addField("MAT_SUP_IMP_SUP_PROJ_NO").
//              setFunction("MAT_SUP_IMP_API.GET_SUP_PROJ_NO ( SUP_IMP_NO)").
//              setLabel("SUPEXCEPTIONMATSUPIMPSUPPROJNO: Mat Sup Imp Sup Proj No").
//              setSize(30);
//      headblk.addField("MAT_SUP_IMP_LIST_NO").
//              setFunction("MAT_SUP_IMP_API.GET_LIST_NO ( SUP_IMP_NO)").
//              setLabel("SUPEXCEPTIONMATSUPIMPLISTNO: Mat Sup Imp List No").
//              setSize(30);
      headblk.setView("SUP_EXCEPTION");
      headblk.defineCommand("SUP_EXCEPTION_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("SUPEXCEPTIONTBLHEAD: Sup Exceptions");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);

      headlay.setSimple("SUP_PROJ_NAME");
      headlay.setSimple("PERSON_NAME");
      headlay.setDataSpan("REASON_CLASS", 5);
      headlay.setDataSpan("THE_POINT", 5);
      headlay.setDataSpan("REASON", 5);
      headlay.setDataSpan("SUP_MSG", 5);
      headlay.setDataSpan("RESULT", 5);
 



   }



   public void  adjust()
   {
      // fill function body
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "SUPEXCEPTIONDESC: Sup Exception";
   }


   protected String getTitle()
   {
      return "SUPEXCEPTIONTITLE: Sup Exception";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());

   }
}
