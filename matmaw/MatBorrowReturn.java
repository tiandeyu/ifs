/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.matmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;
import java.util.Date;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class MatBorrowReturn extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.matmaw.MatBorrowReturn");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock mat_borrow_line_blk;
   private ASPRowSet mat_borrow_line_set;
   private ASPCommandBar mat_borrow_line_bar;
   private ASPTable mat_borrow_line_tbl;
   private ASPBlockLayout mat_borrow_line_lay;

   private ASPBlock mat_return_line_blk;
   private ASPRowSet mat_return_line_set;
   private ASPCommandBar mat_return_line_bar;
   private ASPTable mat_return_line_tbl;
   private ASPBlockLayout mat_return_line_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  MatBorrowReturn (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("BORROW_ID")) )
         okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else 
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.addWhereCondition("STATUS_BORROW IN ('11','12')");
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("MATBORROWNODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(mat_borrow_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND BORROW_ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("BORROW_ID", headset.getValue("BORROW_ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,mat_borrow_line_blk);
      headset.goTo(headrowno);
   }
   public void okFindITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      int headrowno2;

      q = trans.addQuery(mat_return_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND BORROW_ID = ? AND BORROW_LINE_NO = ?");
      q.addParameter("PROJ_NO", mat_borrow_line_set.getValue("PROJ_NO"));
      q.addParameter("BORROW_ID", mat_borrow_line_set.getValue("BORROW_ID"));
      q.addParameter("BORROW_LINE_NO", mat_borrow_line_set.getValue("BORROW_LINE_NO"));
      q.includeMeta("ALL");
      headrowno = mat_borrow_line_set.getCurrentRowNo();
      headrowno2 = headset.getCurrentRowNo();
      mgr.querySubmit(trans,mat_return_line_blk);
      mat_borrow_line_set.goTo(headrowno);
      headset.goTo(headrowno2);
   }
   public void newRowITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      //获取物资编码数据
      String matNo;
      String matName;
      String matUnit;
      String prodModel;
      cmd = trans.addCustomFunction("MATNO", 
            "MAT_BORROW_LINE_API.Get_Mat_No", "MAT_NO");
      cmd.addParameter("PROJ_NO",headset.getValue("PROJ_NO"));
      cmd.addParameter("BORROW_ID",headset.getValue("BORROW_ID"));
      cmd.addParameter("BORROW_LINE_NO",mat_borrow_line_set.getValue("BORROW_LINE_NO"));
      
      trans = mgr.validate(trans);
      matNo = trans.getValue("MATNO/DATA/MAT_NO");
      
      trans.clear();
      cmd.clear();
      cmd = trans.addCustomFunction("MATNAME", 
            "MAT_CODE_API.Get_Mat_Name", "MAT_NAME");
      cmd.addParameter("PROJ_NO",headset.getValue("PROJ_NO"));
      cmd.addParameter("MAT_NO", matNo);
      
      cmd = trans.addCustomFunction("UNITNO", 
            "MAT_CODE_API.Get_Mat_Unit", "UNIT_NO");
      cmd.addParameter("PROJ_NO",headset.getValue("PROJ_NO"));
      cmd.addParameter("MAT_NO", matNo);
      
      cmd = trans.addCustomFunction("PRODMODEL", 
            "MAT_CODE_API.Get_Prod_Model", "PROD_MODEL");
      cmd.addParameter("PROJ_NO",headset.getValue("PROJ_NO"));
      cmd.addParameter("MAT_NO", matNo);

      trans = mgr.validate(trans);
      matName = trans.getValue("MATNAME/DATA/MAT_NAME");
      matUnit = trans.getValue("UNITNO/DATA/UNIT_NO");
      prodModel = trans.getValue("PRODMODEL/DATA/PROD_MODEL");
    
      trans.clear();
      cmd.clear();
      cmd = trans.addEmptyCommand("ITEM2","MAT_RETURN_LINE_API.New__",mat_return_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM1_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM1_BORROW_ID", headset.getValue("BORROW_ID"));
      cmd.setParameter("ITEM1_BORROW_LINE_NO", mat_borrow_line_set.getValue("BORROW_LINE_NO"));
      //给物资相关信息赋值
      cmd.setParameter("ITEM1_MAT_NO", matNo);
      cmd.setParameter("ITEM1_MAT_NAME", matName);
      cmd.setParameter("ITEM1_UNIT_NO", matUnit);
      cmd.setParameter("ITEM1_PROD_MODEL", prodModel);
      
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM2/DATA");
      mat_return_line_set.addRow(data);
   }

   public void validate()
   {
       ASPManager mgr = getASPManager();
       ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
       ASPCommand cmd;
       String val = mgr.readValue("VALIDATE"); 
       String txt = "";
       String returnPersonName = "";
       String returnOrg = "";
       String matNo = "";
       String matUnit = "";
       String matName = "";
       String prodModel = "";
     
       if ("RETURN_PERSON".equals(val)) {
          cmd = trans.addCustomFunction("RETURNPERSONNAME", 
                "PERSON_INFO_API.GET_NAME", "RETURN_PERSON_NAME");
          cmd.addParameter("RETURN_PERSON");
          
          cmd = trans.addCustomFunction("RETURNORG", 
                  "PERSON_ZONE_API.Get_User_Def_Zone", "RETURN_ORG");
          cmd.addParameter("RETURN_PERSON");
          
          trans = mgr.validate(trans);
          
          returnPersonName = trans.getValue("RETURNPERSONNAME/DATA/RETURN_PERSON_NAME");
          returnOrg = trans.getValue("RETURNORG/DATA/RETURN_ORG");

          txt = ((mgr.isEmpty(returnPersonName)) ? "" : returnPersonName )+ "^" + ((mgr.isEmpty(returnOrg)) ? "" : returnOrg )+ "^";
          
          mgr.responseWrite(txt);
       }
       
       mgr.endResponse();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
             setHidden();
      headblk.addField("OBJVERSION").
             setHidden();
      headblk.addField("PROJ_NO").
            setReadOnly().
            setDynamicLOV("GENERAL_PROJECT",600,445).
            setLabel("MATBORROWRETURNPROJNO: Proj No").
            setSize(50);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
            setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
            setLabel("MATBORROWRETURNGENERALPROJECTPROJDESC: General Project Proj Desc").
            setReadOnly().
            setSize(30);
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      //Dec4th add Contract_Id and Contract_desc by @natic
      headblk.addField("CONTRACT_ID").
              setInsertable().
              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
              setLOVProperty("WHERE", "CLASS_NO IN ('SB','WZ')").
              setLabel("MATBORROWRETURNCONTRACTID: Contract Id").
              setSize(20);
      headblk.addField("CONTRACT_DESC").  
              setReadOnly().
              setLabel("MATBORROWRETURNCONTRACTDESC: Contract Desc").
              setFunction("PROJECT_CONTRACT_API.GET_CONTRACT_DESC(:PROJ_NO,:CONTRACT_ID)").
              setSize(20);
      mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_DESC");
      //end 
      headblk.addField("BORROW_ID").
            setReadOnly().
            setLabel("MATBORMATBORROWRETURNRETURNID: Borrow Id").
            setSize(50);
//      headblk.addField("STOWAGE_ID").
//            setDbName("STORAGE_ID").
//            setInsertable().
//            setMandatory().
//            setDynamicLOV("MAT_STOWAGE","PROJ_NO").
//            setLabel("MATBORROWRETURNSTOWAGEID: Stowage Id").
//            setSize(20);
//      headblk.addField("STORAGE_DESC").
//            setFunction("MAT_STOWAGE_API.GET_STORAGE_DESC ( :PROJ_NO,:STOWAGE_ID)").
//            setLabel("MATBORROWRETURNSTORAGEDESC: Storage Desc").
//            setReadOnly().
//            setSize(30);
//      mgr.getASPField("STOWAGE_ID").setValidation("STORAGE_DESC");
//      headblk.addField("BORROW_ORG").
//            setReadOnly().
//            setLabel("MATBORROWRETURNBORROWORG: Borrow Org").
//            setFunction("PERSON_ZONE_API.Get_User_Zones (:BORROW_PERSON)").
//            setSize(50);
      headblk.addField("BORROW_PERSON").
            setReadOnly().
            setDynamicLOV("PERSON_INFO").
            setLabel("MATBORROWRETURNBORROWPERSON: Borrow Person").
            setSize(20);
      headblk.addField("BORROW_PERSON_NAME").
            setFunction("PERSON_INFO_API.GET_NAME ( :BORROW_PERSON)").
            setLabel("MATBORROWRETURNPERSONINFONAME: Borrow Person Name").
            setReadOnly().
            setSize(30);
      mgr.getASPField("BORROW_PERSON_NAME").setValidation("BORROW_PERSON_NAME"); 

      headblk.addField("BORROW_ORG").
              setInsertable().
              setLabel("MATBORROWBORROWORG: Borrow Org").
              setDynamicLOV("PERSON_ZONE", "BORROW_PERSON PERSON_ID").
//              setFunction("PERSON_ZONE_API.Get_User_Zones (:BORROW_PERSON)").
              setSize(30);

      headblk.addField("BORROW_ORG_NAME").
              setFunction("general_zone_api.Get_Zone_Desc ( :BORROW_ORG)").
              setLabel("MATBORROWBORROWORGNAME: Borrow Org Name").
              setReadOnly().
              setSize(30);
      mgr.getASPField("BORROW_ORG").setValidation("BORROW_ORG_NAME");
      headblk.addField("BORROW_TIME","Date").
            setReadOnly().
            setLabel("MATBORROWRETURNBORROWTIME: Borrow Time").
            setSize(30);
      headblk.addField("PLAN_RETURN_TIME","Date").
            setReadOnly().
            setLabel("MATBORROWRETURNPLANRETURNTIME: Plan Return Time").
            setSize(30);
      headblk.addField("CREATE_TIME","Date").
            setReadOnly().
            setLabel("MATBORROWRETURNCREATETIME: Create Time").
            setSize(30);
      headblk.addField("CREATE_PERSON").
            setReadOnly().
            setDynamicLOV("PERSON_INFO").
            setLabel("MATBORROWRETURNCREATEPERSON: Create Person").
            setSize(20);
      headblk.addField("CREATE_PERSON_NAME").
            setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
            setLabel("MATBORROWRETURNCREATEPERSONINFONAME: Create Person Name").
            setReadOnly().
            setSize(30);
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME"); 
      headblk.addField("STATUS_BORROW").
              setReadOnly().
              setHidden().
              setLabel("MATBORROWRETURNSTATUSBORROW: Status Borrow").
              setSize(20);

      headblk.addField("STATUS_DESC").
              setReadOnly().
              setFunction("FLOW_STATUS_API.Get_Status_Desc (:STATUS_BORROW)").
              setLabel("MATBORROWRETURNSTATUSBORROW: Status Borrow").
              setSize(30);
      
      headblk.addField("USAGE").
           setReadOnly().
           setLabel("MATBORROWRETURNUSAGE: Usage").
           setSize(150);
      headblk.addField("BORROW_REASON").
           setReadOnly().
           setLabel("MATBORROWRETURNBORROWREASON: Borrow Reason").
           setHeight(4).
           setSize(150);
      headblk.addField("NOTE").
           setReadOnly().
           setLabel("MATBORROWRETURNNOTE: Note").
           setHeight(4).
           setSize(150);
      headblk.setView("MAT_BORROW");
      headblk.defineCommand("MAT_BORROW_API","");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("returnAccept",mgr.translate("MATRETURNACCEPT: Return Accept"));
      headbar.addCommandValidConditions("returnAccept", "STATUS_BORROW", "Enable", "11");
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("MATBORROWRETURNRETURNTBLHEAD: Mat Borrow Return");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);  
      headbar.addCustomCommand("printReport", "MATBORROWRETURNPRINTREPORT: Print Report...");
      headlay.setSimple("BORROW_PERSON_NAME");
      headlay.setSimple("CREATE_PERSON_NAME");
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("BORROW_ORG_NAME");
//      headlay.setDataSpan("STATUS_BORROW", 5);
      headlay.setDataSpan("STATUS_DESC", 5);
      headlay.setDataSpan("USAGE", 5);
      headlay.setDataSpan("BORROW_REASON", 5);
      headlay.setDataSpan("NOTE", 5);
      headlay.setSimple("CONTRACT_DESC");
      
      mat_borrow_line_blk = mgr.newASPBlock("ITEM1");
      mat_borrow_line_blk.addField("ITEM0_OBJID").
                        setHidden().
                        setDbName("OBJID");
      mat_borrow_line_blk.addField("ITEM0_OBJVERSION").
                        setHidden().
                        setDbName("OBJVERSION");
      mat_borrow_line_blk.addField("ITEM0_PROJ_NO").
                        setDbName("PROJ_NO").
                        setHidden().
                        setLabel("MATBORROWRETURNLINEITEM0PROJNO: Proj No").
                        setSize(50);
      mat_borrow_line_blk.addField("ITEM0_BORROW_ID").
                        setDbName("BORROW_ID").
                        setHidden().
                        setLabel("MATBORROWRETURNLINEITEM0BORROWID: Borrow Id").
                        setSize(50);
      mat_borrow_line_blk.addField("BORROW_LINE_NO").
                        setHidden().
                        setLabel("MATBORROWRETURNLINEBORROWLINENO: Borrow Line No").
                        setSize(50);
      mat_borrow_line_blk.addField("ITEM0_CONTRACT_ID").
                          setDbName("CONTRACT_ID").
                          setHidden().
                          setLabel("MATBORROWITEM0CONTRACTID: Contract Id").
                          setSize(20);
      mat_borrow_line_blk.addField("BORROW_QTY","Number").
                        setReadOnly().
                        setLabel("MATBORROWRETURNLINEBORROWQTY: Borrow Qty").
                        setSize(30);
      mat_borrow_line_blk.addField("ITEM0_CREATE_TIME","Date").
                        setDbName("CREATE_TIME").
                        setReadOnly().
                        setLabel("MATBORROWRETURNLINEITEM0CREATETIME: Create Time").
                        setSize(30);
      mat_borrow_line_blk.addField("MAT_NO").
                        setReadOnly().
                        setLabel("MATBORROWRETURNLINEMATNO: Mat No").
//                        setCustomValidation("ITEM0_PROJ_NO, MAT_NO", "MAT_NAME,UNIT_NO,PROD_MODEL").
                        setSize(20);
      mat_borrow_line_blk.addField("MAT_NAME").
                        setReadOnly().
                        setFunction("MAT_CODE_API.Get_Mat_Name (:ITEM0_PROJ_NO, :MAT_NO)").
                        setLabel("MATBORROWRETURNLINEEMATNAME: Mat Name").
                        setSize(30);
      mat_borrow_line_blk.addField("UNIT_NO").
                        setReadOnly().
                        setLabel("MATBORROWRETURNLINEUNITNO: Unit No").
                        setFunction("MAT_CODE_API.Get_Mat_Unit (:ITEM0_PROJ_NO, :MAT_NO)").
                        setSize(50);
      mat_borrow_line_blk.addField("PROD_MODEL").
                        setReadOnly().
                        setLabel("MATBORROWRETURNLINEPRODMODEL: PROD MODEL").
                        setFunction("MAT_CODE_API.Get_Prod_Model (:ITEM0_PROJ_NO, :MAT_NO)").
                        setSize(50);
      mat_borrow_line_blk.addField("STORAGE_ID").
                        setReadOnly().
                        setDynamicLOV("MAT_STORAGE_LOV","PROJ_NO,MAT_NO").
                        setLabel("MATBORROWRETURNLINESTORAGEID: Storage Id").
                        setSize(50);
      mat_borrow_line_blk.addField("STORAGE_DESC").
                          setReadOnly().
                          setFunction("MAT_STOWAGE_API.Get_Storage_Desc(:ITEM0_PROJ_NO,:STORAGE_ID)").
                          setLabel("MATBORROWRETURNLINESTORAGEDESC: Storage Desc").
                          setSize(20);
      mgr.getASPField("STORAGE_ID").setValidation("STORAGE_DESC");
      mat_borrow_line_blk.addField("STORAGE_QTY").
                        setReadOnly().
                        setFunction("Mat_Storage_Api.Get_Storage_Qty (:ITEM0_PROJ_NO, :MAT_NO, :STORAGE_ID,:ITEM0_CONTRACT_ID)").
                        setLabel("MATBORROWRETURNLINESTORAGEQTY: Storage Qty").
                        setSize(50);
      mgr.getASPField("STORAGE_ID").setValidation("STORAGE_QTY");
      
      mat_borrow_line_blk.setView("MAT_BORROW_LINE");
      mat_borrow_line_blk.defineCommand("MAT_BORROW_LINE_API","");
      mat_borrow_line_blk.setMasterBlock(headblk);
      mat_borrow_line_set = mat_borrow_line_blk.getASPRowSet();
      mat_borrow_line_bar = mgr.newASPCommandBar(mat_borrow_line_blk);
      mat_borrow_line_bar.defineCommand(mat_borrow_line_bar.OKFIND, "okFindITEM1");
      mat_borrow_line_bar.defineCommand(mat_borrow_line_bar.NEWROW, "newRowITEM1");
      mat_borrow_line_tbl = mgr.newASPTable(mat_borrow_line_blk);
      mat_borrow_line_tbl.setTitle("MATBORROWRETURNLINERETURNITEMHEAD1: MatBorrowLineReturn");
      mat_borrow_line_tbl.enableRowSelect();
      mat_borrow_line_tbl.setWrap();
      mat_borrow_line_lay = mat_borrow_line_blk.getASPBlockLayout();
      mat_borrow_line_lay.setDefaultLayoutMode(mat_borrow_line_lay.MULTIROW_LAYOUT);
      mat_borrow_line_lay.setSimple("MAT_NAME");
      mat_borrow_line_lay.setSimple("STORAGE_DESC");

      mat_return_line_blk = mgr.newASPBlock("ITEM2");
      mat_return_line_blk.addField("ITEM1_OBJID").
                          setHidden().
                          setDbName("OBJID");
      mat_return_line_blk.addField("ITEM1_OBJVERSION").
                          setHidden().
                          setDbName("OBJVERSION");
      mat_return_line_blk.addField("ITEM1_PROJ_NO").
                          setDbName("PROJ_NO").
                          setHidden().
                          setLabel("MATRETURNLINEITEM1PROJNO: Proj No").
                          setSize(50);
      mat_return_line_blk.addField("ITEM1_BORROW_ID").
                          setDbName("BORROW_ID").
                          setHidden().
                          setLabel("MATRETURNLINEITEM1BORROWID: Borrow Id").
                          setSize(50);
      mat_return_line_blk.addField("ITEM1_BORROW_LINE_NO").
                          setDbName("BORROW_LINE_NO").
                          setHidden().
                          setLabel("MATRETURNLINEITEM1BORROWLINENO: Borrow Line No").
//                          setCustomValidation("ITEM1_PROJ_NO,ITEM1_BORROW_ID,ITEM1_BORROW_LINE_NO", "ITEM1_MAT_NO,ITEM1_MAT_NAME,ITEM1_UNIT_NO,ITEM1_PROD_MODEL").
                          setSize(50);
      mat_return_line_blk.addField("RETURN_NO").
                          setHidden().
                          setLabel("MATRETURNLINERETURNNO: Return No").
                          setSize(50);
            
      mat_return_line_blk.addField("ITEM1_MAT_NO").
                        setReadOnly().
                        setLabel("MATBORROWRETURNLINEITEM1MATNO: Mat No").
                        setFunction("MAT_BORROW_LINE_API.Get_Mat_No (:ITEM1_PROJ_NO, :ITEM1_BORROW_ID, :ITEM1_BORROW_LINE_NO)").
                        setSize(20);
      mat_return_line_blk.addField("ITEM1_MAT_NAME").
                        setReadOnly().
                        setFunction("MAT_CODE_API.Get_Mat_Name (:ITEM1_PROJ_NO, MAT_BORROW_LINE_API.Get_Mat_No(:ITEM1_PROJ_NO,:ITEM1_BORROW_ID,:ITEM1_BORROW_LINE_NO))").
                        setLabel("MATBORROWRETURNLINEITEM1MATNAME: Mat Name").
                        setSize(30);
      mat_return_line_blk.addField("ITEM1_UNIT_NO").
                        setReadOnly().
                        setLabel("MATBORROWRETURNLINEITEM1UNITNO: Unit No").
                        setFunction("MAT_CODE_API.Get_Mat_Unit (:ITEM1_PROJ_NO, MAT_BORROW_LINE_API.Get_Mat_No(:ITEM1_PROJ_NO,:ITEM1_BORROW_ID,:ITEM1_BORROW_LINE_NO))").
                        setSize(50);
      mat_return_line_blk.addField("ITEM1_PROD_MODEL").
                        setReadOnly().
                        setLabel("MATBORROWRETURNLINEITEM1PRODMODEL: Prod Model").
                        setFunction("MAT_CODE_API.Get_Prod_Model (:ITEM1_PROJ_NO, MAT_BORROW_LINE_API.Get_Mat_No(:ITEM1_PROJ_NO,:ITEM1_BORROW_ID,:ITEM1_BORROW_LINE_NO))").
                        setSize(50);
      
      mat_return_line_blk.addField("RETURN_QTY","Number").
                          setInsertable().
                          setLabel("MATRETURNLINERETURNQTY: Return Qty").
                          setSize(30);
      
      mat_return_line_blk.addField("RETURN_PERSON").
                          setInsertable().
                          setDynamicLOV("PERSON_INFO").
                          setLabel("MATRETURNLINERETURNPERSON: Return Person").
                          setCustomValidation("RETURN_PERSON", "RETURN_PERSON_NAME,RETURN_ORG").
                          setSize(20);
      mat_return_line_blk.addField("RETURN_PERSON_NAME").
                          setFunction("PERSON_INFO_API.GET_NAME ( :RETURN_PERSON)").
                          setLabel("MATRETURNLINERETURNPERSONINFONAME: Return Person Name").
                          setReadOnly().
                          setSize(30);
      mat_return_line_blk.addField("RETURN_ORG").
                          setInsertable().
                          setFunction("PERSON_ZONE_API.Get_User_Def_Zone (:RETURN_PERSON)").
                          setLabel("MATRETURNLINERETURNORG: Return Org").
                          setSize(50);
                  
      mat_return_line_blk.addField("RETURN_TIME","Date").
                          setInsertable().
                          setLabel("MATRETURNLINERETURNTIME: Return Time").
                          setSize(30);
      mat_return_line_blk.addField("ITEM1_CREATE_TIME","Date").
                          setDbName("CREATE_TIME").
                          setReadOnly().
                          setLabel("MATRETURNLINECREATETIME: Create Time").
                          setSize(30);
      mat_return_line_blk.addField("ITEM1_CREATE_PERSON").
                          setDbName("CREATE_PERSON").
                          setReadOnly().
                          setLabel("MATRETURNLINECREATEPERSON: Create Person").
                          setSize(20);
      mat_return_line_blk.setView("MAT_RETURN_LINE");
      mat_return_line_blk.defineCommand("MAT_RETURN_LINE_API","New__,Modify__,Remove__");
      mat_return_line_blk.setMasterBlock(mat_borrow_line_blk);
      mat_return_line_set = mat_return_line_blk.getASPRowSet();
      mat_return_line_bar = mgr.newASPCommandBar(mat_return_line_blk);
      mat_return_line_bar.defineCommand(mat_return_line_bar.OKFIND, "okFindITEM2");
      mat_return_line_bar.defineCommand(mat_return_line_bar.NEWROW, "newRowITEM2");
      mat_return_line_tbl = mgr.newASPTable(mat_return_line_blk);
      mat_return_line_tbl.setTitle("MATRETURNLINEITEMHEAD2: MatReturnLine");
      mat_return_line_tbl.enableRowSelect();
      mat_return_line_tbl.setWrap();
      mat_return_line_lay = mat_return_line_blk.getASPBlockLayout();
      mat_return_line_lay.setDefaultLayoutMode(mat_return_line_lay.MULTIROW_LAYOUT);
      mat_return_line_lay.setSimple("ITEM1_MAT_NAME");
      mat_return_line_lay.setSimple("RETURN_PERSON_NAME");

   }

   public void returnAccept() throws FndException{
      ASPManager mgr = getASPManager();
      ASPCommand cmdBuf; 
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      String sql = "";
      int returnCount = 0;
      int count = 0;
      //校验归还的数量是否等于借出的数量
      sql = "select sum(nvl(return_qty,0)) return_count from mat_return_line ";
      sql = sql + "where proj_no = '"+headset.getValue("PROJ_NO")+"' and borrow_id = '"+headset.getValue("BORROW_ID")+"'";
      trans.clear();
      trans.addQuery("ITEMS",sql);
      trans = mgr.perform(trans);
      count =(int)trans.getNumberValue("ITEMS/DATA/RETURN_COUNT");
      
      //获取总共应还数量
      String bor_qty="";
      for(int i = 0;i< mat_borrow_line_set.countRows();i++){
         bor_qty=mat_borrow_line_set.getValueAt(i, "BORROW_QTY");
         returnCount = returnCount + Integer.parseInt(mgr.isEmpty(bor_qty)?"0":bor_qty);
      }
      if(count == 0){
         mgr.showAlert("MATBORROWRETURNZERO: There are no mats have returned!");
      }else if(count != returnCount){
         mgr.showAlert("MATBORROWRETURNFAIL: The returned number is not equal to the borrowed number!");
      }else{
         trans.clear();
         if("".equals(headset.getValue("STATUS_BORROW"))||headset.getValue("STATUS_BORROW") == null){                        
            mgr.showAlert("MATBORROWRETURNREFUSE: The borrowed mats have not been borrowed!");
         }else if("11".equals(headset.getValue("STATUS_BORROW"))){
            cmdBuf = trans.addCustomCommand("RETURNACCEPT", "MAT_BORROW_API.Update_Status_And_Storage__");
            cmdBuf.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
            cmdBuf.addParameter("BORROW_ID", headset.getValue("BORROW_ID"));     
            cmdBuf.addParameter("OBJID", "ReturnAccept");
            mgr.perform(trans);
            okFind();
            okFindITEM1();
         }else{
            mgr.showAlert("MATBORROWSTATUS: The borrow bill was already done.");
         }
      }    
   }
   

   public void  adjust()
   {
      if(headset.countRows()>0){
         if("12".equals(headset.getValue("STATUS_BORROW"))){               
            mat_return_line_bar.disableCommand(mat_return_line_bar.DELETE);
            mat_return_line_bar.disableCommand(mat_return_line_bar.EDITROW);
            mat_return_line_bar.disableCommand(mat_return_line_bar.NEWROW);
         }
      }
   }
   

   public void  printReport() throws FndException, UnsupportedEncodingException
  {
   ASPManager mgr = getASPManager();
   ASPConfig cfg = getASPConfig();
   String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
   if (headlay.isMultirowLayout())
      headset.goTo(headset.getRowSelected());
   if (headset.countRows()>0 )
         {   
            String proj_no = headset.getValue("PROJ_NO");
            String accept_id = headset.getValue("BORROW_ID");
             appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=MatBorrowReturn.raq&projNo="+proj_no+"&borrowId="+accept_id
               + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
        }
  }   

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "MATBORROWRETURNDESC: Mat Borrow Return";
   }


   protected String getTitle()
   {
      return "MATBORROWRETURNTITLE: Mat Borrow Return";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
      if (mat_borrow_line_lay.isVisible())
          appendToHTML(mat_borrow_line_lay.show());
      if (mat_return_line_lay.isVisible())
          appendToHTML(mat_return_line_lay.show());

   }
}
