/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.matmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class MatBorrow extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.matmaw.MatBorrow");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock mat_borrow_line_blk;
   private ASPRowSet mat_borrow_line_set;
   private ASPCommandBar mat_borrow_line_bar;
   private ASPTable mat_borrow_line_tbl;
   private ASPBlockLayout mat_borrow_line_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  MatBorrow (ASPManager mgr, String page_path)
   {
      super(mgr, page_path);
   }

   public void run() throws FndException
   {
      super.run();

      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("BORROW_ID")) )
         okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else 
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("MATBORROWNODATA: No data found.");
         headset.clear();
      }else okFindITEM1();
//      eval( mat_borrow_line_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","MAT_BORROW_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(mat_borrow_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND BORROW_ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("BORROW_ID", headset.getValue("BORROW_ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,mat_borrow_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","MAT_BORROW_LINE_API.New__",mat_borrow_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_BORROW_ID", headset.getValue("BORROW_ID"));
      cmd.setParameter("ITEM0_CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      mat_borrow_line_set.addRow(data);
   }

   public void validate()
   {
       ASPManager mgr = getASPManager();
       ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
       ASPCommand cmd;
       String val = mgr.readValue("VALIDATE"); 
       String txt = "";
       String matUnit = "";
       String matName = "";
       String prodModel = "";
       String borrowPersonName = "";
       String borrowOrg = "";
       String borrowOrgName = "";
       
       if ("MAT_NO".equals(val)) {   
          cmd = trans.addCustomFunction("MATNAME", 
                "MAT_CODE_API.Get_Mat_Name", "MAT_NAME");
          cmd.addParameter("ITEM0_PROJ_NO, MAT_NO");
          
          cmd = trans.addCustomFunction("UNITNO", 
                "MAT_CODE_API.Get_Mat_Unit", "UNIT_NO");
          cmd.addParameter("ITEM0_PROJ_NO, MAT_NO");
          
          cmd = trans.addCustomFunction("PRODMODEL", 
                "MAT_CODE_API.Get_Prod_Model", "PROD_MODEL");
          cmd.addParameter("ITEM0_PROJ_NO, MAT_NO");
   
          trans = mgr.validate(trans);
          matName = trans.getValue("MATNAME/DATA/MAT_NAME");
          matUnit = trans.getValue("UNITNO/DATA/UNIT_NO");
          prodModel = trans.getValue("PRODMODEL/DATA/PROD_MODEL");
          txt = ((mgr.isEmpty(matName)) ? "" : matName )+ "^" + ((mgr.isEmpty(matUnit)) ? "" : matUnit )+ "^";
          txt = txt + ((mgr.isEmpty(prodModel)) ? "" : prodModel) + "^";
          mgr.responseWrite(txt);
       }
       if ("BORROW_PERSON".equals(val)) {
          cmd = trans.addCustomFunction("BORROWPERSONNAME", 
                "PERSON_INFO_API.GET_NAME", "BORROW_PERSON_NAME");
          cmd.addParameter("BORROW_PERSON");
          
          cmd = trans.addCustomFunction("BORROWORG", 
                  "PERSON_ZONE_API.Get_Person_Def_Zone", "BORROW_ORG");
          cmd.addParameter("BORROW_PERSON");
          
          trans = mgr.validate(trans);
          
          borrowPersonName = trans.getValue("BORROWPERSONNAME/DATA/BORROW_PERSON_NAME");
          borrowOrg = trans.getValue("BORROWORG/DATA/BORROW_ORG");
          
          trans.clear();
          cmd = trans.addCustomFunction("BORROWORGNAME", 
                "general_zone_api.Get_Zone_Desc", "BORROW_ORG_NAME");
          cmd.addParameter("BORROW_ORG",borrowOrg);

          trans = mgr.validate(trans);

          borrowOrgName = trans.getValue("BORROWORGNAME/DATA/BORROW_ORG_NAME");


          txt = ((mgr.isEmpty(borrowPersonName)) ? "" : borrowPersonName) + "^" + ((mgr.isEmpty(borrowOrg)) ? "" : borrowOrg )+ "^"+ ((mgr.isEmpty(borrowOrgName)) ? "" : borrowOrgName )+ "^";
          
          mgr.responseWrite(txt);
       }
       mgr.endResponse();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setDefaultNotVisible().
//              setWfProperties().
              setInsertable().
              setDynamicLOV("GENERAL_PROJECT",600,445).
              setLabel("MATBORROWPROJNO: Proj No").
              setSize(50);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("MATBORROWGENERALPROJECTPROJDESC: General Project Proj Desc").
              setReadOnly().
              setSize(30);
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      //Dec4th add Contract_Id and Contract_desc by @natic
      headblk.addField("CONTRACT_ID").
              setInsertable().
              setDefaultNotVisible().
              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
              setLOVProperty("WHERE", "CLASS_NO IN ('SB','WZ')").
              setLabel("MATBORROWCONTRACTID: Contract Id").
              setSize(20);
      headblk.addField("CONTRACT_DESC").  
              setReadOnly().
              setLabel("MATBORROWCONTRACTDESC: Contract Desc").
              setFunction("PROJECT_CONTRACT_API.GET_CONTRACT_DESC(:PROJ_NO,:CONTRACT_ID)").
              setSize(20);
      mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_DESC");
      //end 
      headblk.addField("BORROW_ID").
//              setReadOnly().
              setInsertable().
//              setWfProperties().
              setLabel("MATBORROWBORROWID: Borrow Id").
              setSize(20);
//      headblk.addField("STOWAGE_ID").
//              setDbName("STORAGE_ID").
//              setInsertable().
//              setMandatory().
//              setDynamicLOV("MAT_STOWAGE","PROJ_NO").
//              setLabel("MATBORROWSTOWAGEID: Stowage Id").
//              setSize(20);
//      headblk.addField("STORAGE_DESC").
//              setFunction("MAT_STOWAGE_API.GET_STORAGE_DESC ( :PROJ_NO,:STOWAGE_ID)").
//              setLabel("MATBORROWSTORAGEDESC: Storage Desc").
//              setReadOnly().
//              setSize(30);
//      mgr.getASPField("STOWAGE_ID").setValidation("STORAGE_DESC");
      headblk.addField("BORROW_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("MATBORROWBORROWPERSON: Borrow Person").
              setCustomValidation("BORROW_PERSON", "BORROW_PERSON_NAME,BORROW_ORG,BORROW_ORG_NAME").
              setSize(20);
      headblk.addField("BORROW_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :BORROW_PERSON)").
              setLabel("MATBORROWPERSONINFONAME: Borrow Person Name").
              setReadOnly().
              setSize(30);
      headblk.addField("BORROW_ORG").
              setInsertable().
              setDefaultNotVisible().
              setLabel("MATBORROWBORROWORG: Borrow Org").
              setDynamicLOV("PERSON_ZONE", "BORROW_PERSON PERSON_ID").
//              setFunction("PERSON_ZONE_API.Get_User_Zones (:BORROW_PERSON)").
              setSize(30);

      headblk.addField("BORROW_ORG_NAME").
              setFunction("general_zone_api.Get_Zone_Desc ( :BORROW_ORG)").
              setLabel("MATBORROWBORROWORGNAME: Borrow Org Name").
              setReadOnly().
              setDefaultNotVisible().
              setSize(30);
      mgr.getASPField("BORROW_ORG").setValidation("BORROW_ORG_NAME");
      headblk.addField("BORROW_TIME","Date").
              setInsertable().
              setLabel("MATBORROWBORROWTIME: Borrow Time").
              setSize(30);
      headblk.addField("PLAN_RETURN_TIME","Date").
              setInsertable().
              setLabel("MATBORROWPLANRETURNTIME: Plan Return Time").
              setSize(30);
      headblk.addField("CREATE_TIME","Date").
              setReadOnly().
              setLabel("MATBORROWCREATETIME: Create Time").
              setSize(30);
      headblk.addField("CREATE_PERSON").
              setInsertable().
              setHidden().
              setDynamicLOV("PERSON_INFO").
              setLabel("MATBORROWCREATEPERSON: Create Person").
              setSize(30);
      headblk.addField("CREATE_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
              setLabel("MATBORROWCREATEPERSONINFONAME: Create Person Name").
              setReadOnly().
              setHidden().
              setSize(30);
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
      headblk.addField("STATUS_BORROW").
              setReadOnly().
              setHidden().
              setLabel("MATBORROWSTATUSBORROW: Status Borrow").
              setSize(20);
      headblk.addField("STATUS_DESC").
              setReadOnly().
              setFunction("FLOW_STATUS_API.Get_Status_Desc (:STATUS_BORROW)").
              setLabel("MATBORROWSTATUSBORROW: Status Borrow").
              setSize(30);
      
      headblk.addField("USAGE").
             setInsertable().
             setLabel("MATBORROWUSAGE: Usage").
             setSize(150);
      headblk.addField("BORROW_REASON").
             setInsertable().
             setLabel("MATBORROWBORROWREASON: Borrow Reason").
             setHeight(4).
             setSize(150);
      headblk.addField("NOTE").
             setInsertable().
             setDefaultNotVisible().
             setLabel("MATBORROWNOTE: Note").
             setHeight(4).
             setSize(150);
      
      headblk.addField("FLOW_TITLE").
      setWfProperties().
      setReadOnly().
      setHidden().
      setFunction("BORROW_ID").
      setLabel("FLOWTITLE: Flow Title").
      setSize(30);
     
      headblk.setView("MAT_BORROW");
      headblk.defineCommand("MAT_BORROW_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("borrowAccept",mgr.translate("MATBORROWACCEPT: Borrow Accept"));
      headbar.addCommandValidConditions("borrowAccept", "STATUS_BORROW", "Enable", "2");
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("MATBORROWTBLHEAD: Mat Borrows");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);  
      headbar.addCustomCommand("printReport", "MATBORROWPRINTREPORT: Print Report...");
      headlay.setSimple("BORROW_PERSON_NAME");
//      headlay.setSimple("CREATE_PERSON_NAME");
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("BORROW_ORG_NAME");
//      headlay.setSimple("STORAGE_DESC");
      headlay.setDataSpan("STATUS_DESC", 5);
      headlay.setDataSpan("USAGE", 5);
      headlay.setDataSpan("BORROW_REASON", 5);
      headlay.setDataSpan("NOTE", 5);
//      headlay.setDataSpan("STATUS_BORROW", 5);
      headlay.setSimple("CONTRACT_DESC");

      mat_borrow_line_blk = mgr.newASPBlock("ITEM1");
      mat_borrow_line_blk.addField("ITEM0_OBJID").
                          setHidden().
                          setDbName("OBJID");
      mat_borrow_line_blk.addField("ITEM0_OBJVERSION").
                          setHidden().
                          setDbName("OBJVERSION");
      mat_borrow_line_blk.addField("ITEM0_PROJ_NO").
                          setDbName("PROJ_NO").
                          setHidden().
                          setLabel("MATBORROWLINEITEM0PROJNO: Proj No").
                          setSize(50);
      mat_borrow_line_blk.addField("ITEM0_BORROW_ID").
                          setDbName("BORROW_ID").
                          setHidden().
                          setLabel("MATBORROWLINEITEM0BORROWID: Borrow Id").
                          setSize(50);
      mat_borrow_line_blk.addField("BORROW_LINE_NO").
                          setHidden().
                          setLabel("MATBORROWLINEBORROWLINENO: Borrow Line No").
                          setSize(50);
      mat_borrow_line_blk.addField("ITEM0_CONTRACT_ID").
                          setDbName("CONTRACT_ID").
                          setInsertable().
                          setHidden().
                          setLabel("MATBORROWITEM0CONTRACTID: Contract Id").
                          setSize(20);

      mat_borrow_line_blk.addField("STORAGE_ID").
                          setInsertable().
//                          setDynamicLOV("MAT_STORAGE","PROJ_NO,MAT_NO,CONTRACT_ID").
//                          setLOVProperty("FORCE_KEY", "STORAGE_ID").
                          setDynamicLOV("MAT_STOWAGE","PROJ_NO").
                          setLabel("MATBORROWLINESTORAGEID: Storage Id").
                          setSize(20);
      mat_borrow_line_blk.addField("STORAGE_DESC").
                          setReadOnly().
                          setFunction("MAT_STOWAGE_API.Get_Storage_Desc(:ITEM0_PROJ_NO,:STORAGE_ID)").
                          setLabel("MATBORROWLINESTORAGEDESC: Storage Desc").
                          setSize(20);
      mgr.getASPField("STORAGE_ID").setValidation("STORAGE_DESC");
      mat_borrow_line_blk.addField("MAT_NO").
                          setInsertable().
//                          setDynamicLOV("MAT_STORAGE","PROJ_NO,CONTRACT_ID").
//                          setLOVProperty("FORCE_KEY", "MAT_NO").
                          setDynamicLOV("MAT_STORAGE_LOV","PROJ_NO,STORAGE_ID,CONTRACT_ID").
                          setLabel("MATBORROWLINEMATNO: Mat No").
                          setCustomValidation("ITEM0_PROJ_NO, MAT_NO", "MAT_NAME,UNIT_NO,PROD_MODEL").
                          setSize(20);
      mat_borrow_line_blk.addField("MAT_NAME").
                          setReadOnly().
                          setFunction("MAT_CODE_API.Get_Mat_Name (:ITEM0_PROJ_NO, :MAT_NO)").
                          setLabel("MATBORROWLINEEMATNAME: Mat Name").
                          setSize(30);
      mat_borrow_line_blk.addField("UNIT_NO").
                          setReadOnly().
                          setLabel("MATBORROWLINEUNITNO: Unit No").
                          setFunction("MAT_CODE_API.Get_Mat_Unit (:ITEM0_PROJ_NO, :MAT_NO)").
                          setSize(50);
      mat_borrow_line_blk.addField("PROD_MODEL").
                          setReadOnly().
                          setLabel("MATBORROWLINEPRODMODEL: Prod Model").
                          setFunction("MAT_CODE_API.Get_Prod_Model (:ITEM0_PROJ_NO, :MAT_NO)").
                          setSize(50);
      mat_borrow_line_blk.addField("STORAGE_QTY").
                          setReadOnly().
                          setFunction("Mat_Storage_Api.Get_Storage_Qty (:ITEM0_PROJ_NO, :MAT_NO, :STORAGE_ID, :ITEM0_CONTRACT_ID)").
                          setLabel("MATBORROWLINESTORAGEQTY: Storage Qty").
                          setSize(50);
      mgr.getASPField("MAT_NO").setValidation("STORAGE_QTY");
      mat_borrow_line_blk.addField("BORROW_QTY","Number").
                          setInsertable().
                          setLabel("MATBORROWLINEBORROWQTY: Borrow Qty").
                          setSize(30);
      mat_borrow_line_blk.addField("ITEM0_CREATE_TIME","Date").
                          setDbName("CREATE_TIME").
                          setReadOnly().
                          setLabel("MATBORROWLINEITEM0CREATETIME: Create Time").
                          setSize(30);
      
      mat_borrow_line_blk.setView("MAT_BORROW_LINE");
      mat_borrow_line_blk.defineCommand("MAT_BORROW_LINE_API","New__,Modify__,Remove__");
      mat_borrow_line_blk.setMasterBlock(headblk);
      mat_borrow_line_set = mat_borrow_line_blk.getASPRowSet();
      mat_borrow_line_bar = mgr.newASPCommandBar(mat_borrow_line_blk);
      mat_borrow_line_bar.defineCommand(mat_borrow_line_bar.OKFIND, "okFindITEM1");
      mat_borrow_line_bar.defineCommand(mat_borrow_line_bar.NEWROW, "newRowITEM1");
      mat_borrow_line_tbl = mgr.newASPTable(mat_borrow_line_blk);
      mat_borrow_line_tbl.setTitle("MATBORROWLINEITEMHEAD1: MatBorrowLine");
      mat_borrow_line_tbl.enableRowSelect();
      mat_borrow_line_tbl.setWrap();
      mat_borrow_line_lay = mat_borrow_line_blk.getASPBlockLayout();
      mat_borrow_line_lay.setDefaultLayoutMode(mat_borrow_line_lay.MULTIROW_LAYOUT);
      mat_borrow_line_lay.setSimple("MAT_NAME");
      mat_borrow_line_lay.setSimple("STORAGE_DESC");
      
   }

   
   public void borrowAccept() throws FndException{
      ASPManager mgr = getASPManager();
      ASPCommand cmdBuf; 
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      if("2".equals(headset.getValue("STATUS_BORROW"))){                        
         cmdBuf = trans.addCustomCommand("BORROWACCEPT", "MAT_BORROW_API.Update_Status_And_Storage__");
         cmdBuf.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
         cmdBuf.addParameter("BORROW_ID", headset.getValue("BORROW_ID"));     
         cmdBuf.addParameter("OBJID", "BorrowAccept");
         mgr.perform(trans);
         okFind();
         okFindITEM1();
      }else{
         mgr.showAlert("MATBORROWSTATUS: The borrow bill was already done.");
      }
   }
   

   public void adjust()
   {
      try {
         super.adjust();
         /*
         if(headset.countRows()>0){
            if("".equals(headset.getValue("STATUS_BORROW"))||headset.getValue("STATUS_BORROW") == null){               
            }
            else{
               headbar.disableCommand(headbar.EDITROW);
               headbar.disableCommand(headbar.DELETE);
               mat_borrow_line_bar.disableCommand(mat_borrow_line_bar.DELETE);
               mat_borrow_line_bar.disableCommand(mat_borrow_line_bar.EDITROW);
               mat_borrow_line_bar.disableCommand(mat_borrow_line_bar.NEWROW);
//               mat_borrow_line_bar.disableCustomCommand("mat_borrow_line_bar.borrowAccept");
            }
         }
         */
      } catch (FndException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
      }
   }
   

   public void  printReport() throws FndException, UnsupportedEncodingException
  {
   ASPManager mgr = getASPManager();
   ASPConfig cfg = getASPConfig();
   String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
   if (headlay.isMultirowLayout())
      headset.goTo(headset.getRowSelected());
   if (headset.countRows()>0 )
         {   
            String proj_no = headset.getValue("PROJ_NO");
            String accept_id = headset.getValue("BORROW_ID");
             appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=MatBorrow.raq&projNo="+proj_no+"&borrowId="+accept_id
               + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
        }
  }   

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "MATBORROWDESC: Mat Borrow";
   }


   protected String getTitle()
   {
      return "MATBORROWTITLE: Mat Borrow";
   }


   protected void printContents() throws FndException
   {
      super.printContents();

      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
      if (mat_borrow_line_lay.isVisible())
          appendToHTML(mat_borrow_line_lay.show());
   }
   //--------------------------  Added in new template  --------------------------
   //--------------  Return blk connected with workflow functions  ---------------
   //-----------------------------------------------------------------------------

   protected ASPBlock getBizWfBlock()
   {
      return headblk;
   }
}
