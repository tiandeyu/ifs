/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.matmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class MatStConEntry extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.matmaw.MatStEntry");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock mat_st_entry_line_blk;
   private ASPRowSet mat_st_entry_line_set;
   private ASPCommandBar mat_st_entry_line_bar;
   private ASPTable mat_st_entry_line_tbl;
   private ASPBlockLayout mat_st_entry_line_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  MatStConEntry (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      super.run();
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if ( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")) )
         validate();   
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ENTRY_ID")) )
         okFind();
      else 
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.addWhereCondition("MAT_ENTRY_TYPE = 'Contract'");
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("MATSTENTRYNODATA: No data found.");
         headset.clear();
      }
      eval( mat_st_entry_line_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","MAT_ST_ENTRY_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("STATUS", "ÒÑ´´½¨");
      cmd.setParameter("MAT_ENTRY_TYPE", "Contract");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(mat_st_entry_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ENTRY_ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ENTRY_ID", headset.getValue("ENTRY_ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,mat_st_entry_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","MAT_ST_ENTRY_LINE_API.New__",mat_st_entry_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_ENTRY_ID", headset.getValue("ENTRY_ID"));
      cmd.setParameter("ITEM0_CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      mat_st_entry_line_set.addRow(data);
   }

   
   
   

   public void validate()
  {
     ASPManager mgr=getASPManager();
     ASPTransactionBuffer trans0=mgr.newASPTransactionBuffer();
     ASPCommand cmd0;
     String str=mgr.readValue("VALIDATE");
   
     if ("ITEM_NO".equals(str)) {

        cmd0 = trans0.addCustomFunction("ITEM_DESC","PROJECT_CONTRACT_ITEM_API.GET_ITEM_DESC","ITEM_DESC");
        cmd0.addParameter("PROJ_NO");
        cmd0.addParameter("CONTRACT_ID");
        cmd0.addParameter("ITEM_NO");
        cmd0 = trans0.addCustomFunction("MAT_NO","PROJECT_CONTRACT_ITEM_API.GET_MAT_NO","MAT_NO");
        cmd0.addParameter("PROJ_NO");
        cmd0.addParameter("CONTRACT_ID");
        cmd0.addParameter("ITEM_NO");
        cmd0 = trans0.addCustomFunction("MAT_NAME","PROJECT_CONTRACT_ITEM_API.GET_MAT_NAME","MAT_NAME");
        cmd0.addParameter("PROJ_NO");
        cmd0.addParameter("CONTRACT_ID");
        cmd0.addParameter("ITEM_NO");
        cmd0 = trans0.addCustomFunction("ORIGINAL_QTY","PROJECT_CONTRACT_ITEM_API.GET_CHANGED_QTY","ORIGINAL_QTY");
        cmd0.addParameter("PROJ_NO");
        cmd0.addParameter("CONTRACT_ID");
        cmd0.addParameter("ITEM_NO");
        cmd0 = trans0.addCustomFunction("UNIT_NO","PROJECT_CONTRACT_ITEM_API.GET_ITEM_UNIT","UNIT_NO");
        cmd0.addParameter("PROJ_NO");
        cmd0.addParameter("CONTRACT_ID");
        cmd0.addParameter("ITEM_NO");
//        cmd0 = trans0.addCustomFunction("UNIT_NO","PROJECT_CONTRACT_ITEM_API.GET_PRICE_CODE","UNIT_NO");
//        cmd0.addParameter("PROJ_NO");
//        cmd0.addParameter("CONTRACT_ID");
//        cmd0.addParameter("ITEM_NO");
        cmd0 = trans0.addCustomFunction("ENTRY_PRICE","PROJECT_CONTRACT_ITEM_API.GET_PRICE","ENTRY_PRICE");
        cmd0.addParameter("PROJ_NO");
        cmd0.addParameter("CONTRACT_ID");
        cmd0.addParameter("ITEM_NO");
        cmd0 = trans0.addCustomFunction("TAX_RATE","PROJECT_CONTRACT_ITEM_API.GET_EXCHANGE_RATE","TAX_RATE");
        cmd0.addParameter("PROJ_NO");
        cmd0.addParameter("CONTRACT_ID");
        cmd0.addParameter("ITEM_NO");
        cmd0 = trans0.addCustomFunction("TOTLE_PRICE","PROJECT_CONTRACT_ITEM_API.Get_Changed_Total","TOTLE_PRICE");
        cmd0.addParameter("PROJ_NO");
        cmd0.addParameter("CONTRACT_ID");
        cmd0.addParameter("ITEM_NO");

        trans0 = mgr.validate(trans0);

        String ITEM_DESC     = trans0.getValue("ITEM_DESC/DATA/ITEM_DESC");
        String MAT_NO     = trans0.getValue("MAT_NO/DATA/MAT_NO");
        String MAT_NAME     = trans0.getValue("MAT_NAME/DATA/MAT_NAME");
        String ORIGINAL_QTY     = trans0.getValue("ORIGINAL_QTY/DATA/ORIGINAL_QTY");
        String UNIT_NO     = trans0.getValue("UNIT_NO/DATA/UNIT_NO");
        String ENTRY_PRICE     = trans0.getValue("ENTRY_PRICE/DATA/ENTRY_PRICE");
        String TAX_RATE     = trans0.getValue("TAX_RATE/DATA/TAX_RATE");
        String TOTLE_PRICE     = trans0.getValue("TOTLE_PRICE/DATA/TOTLE_PRICE");

        ITEM_DESC     = mgr.isEmpty(ITEM_DESC)? ""  : ITEM_DESC    ;
        MAT_NO     = mgr.isEmpty(MAT_NO    )? ""  : MAT_NO    ;
        MAT_NAME     = mgr.isEmpty(MAT_NAME    )? ""  : MAT_NAME    ;
        ORIGINAL_QTY     = mgr.isEmpty(ORIGINAL_QTY    )? "0"  : ORIGINAL_QTY    ;
        UNIT_NO     = mgr.isEmpty(UNIT_NO    )? ""  : UNIT_NO    ;
        ENTRY_PRICE     = mgr.isEmpty(ENTRY_PRICE    )? "0"  : ENTRY_PRICE    ;
        TAX_RATE     = mgr.isEmpty(TAX_RATE    )? "0"  : TAX_RATE    ;
        TOTLE_PRICE     = mgr.isEmpty(TOTLE_PRICE    )? "0"  : TOTLE_PRICE    ;
        
        mgr.responseWrite(ITEM_DESC + "^"+MAT_NO + "^"+ MAT_NAME + "^"+ ORIGINAL_QTY + "^"+ ORIGINAL_QTY + "^"+ UNIT_NO + "^"+ ENTRY_PRICE + "^"+ TAX_RATE + "^"+ (Double.valueOf(ENTRY_PRICE)*(1-Double.valueOf(TAX_RATE))) + "^"+TOTLE_PRICE + "^");
     }
     
     mgr.endResponse();
  }
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("ENTRY_ID").
//              setMandatory().
//              setInsertable().
              setReadOnly().
              setWfProperties().
              setLabel("MATSTENTRYENTRYID: Entry Id").
              setSize(20);
      headblk.addField("PROJ_NO").
              setMandatory().
              setDynamicLOV("GENERAL_PROJECT").
              setInsertable().
              setWfProperties().
              setLabel("MATSTENTRYPROJNO: Proj No").
              setSize(20);
      headblk.addField("PROJ_DESC").
               setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
               setLabel("MATSTENTRYPROJDESC: Proj Desc").
               setReadOnly().
               setSize(30);
      mgr.getASPField("PROJ_NO").setValidation("PROJ_DESC");
      headblk.addField("MAT_ENTRY_TYPE").
              enumerateValues("Mat_Entry_Type_API").
              setSelectBox().
              setInsertable().
              setHidden().
              setLabel("MATSTENTRYMATENTRYTYPE: Mat Entry Type").
              setSize(20);

      headblk.addField("CONTRACT_ID").
              setInsertable().
              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
              setLOVProperty("WHERE", "CLASS_NO IN ('SB','WZ')").
              setLabel("MATSTENTRYCONTRACTID: Contract Id").
              setSize(20);
      headblk.addField("CONTRACT_DESC").
              setFunction("PROJECT_CONTRACT_API.GET_CONTRACT_DESC ( :PROJ_NO,:CONTRACT_ID)").
              setLabel("MATSTENTRYCONTRACTDESC: Contract Desc").
              setReadOnly().
              setSize(30);
      mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_DESC");
      headblk.addField("INVOICE_NO").
              setInsertable().
              setLabel("MATSTENTRYINVOICENO: Invoice No").
              setSize(20);

      headblk.addField("TRANS_FEE").
              setInsertable().
              setLabel("MATSTENTRYTRANSFEE: Trans Fee").
              setSize(20);

      headblk.addField("TECH_FEE").
              setInsertable().
              setLabel("MATSTENTRYTECHFEE: Tech Fee").
              setSize(20);
//      headblk.addField("STORAGE_ID").
//              setInsertable().
//              setLabel("MATSTENTRYSTORAGEID: Storage Id").
//              setSize(50);
//      headblk.addField("MAT_TYPE_ID").
//              setInsertable().
//              setLabel("MATSTENTRYMATTYPEID: Mat Type Id").
//              setSize(50);

      headblk.addField("STATUS").
//              setInsertable().
              setReadOnly().
              setLabel("MATSTENTRYSTATUS: Status").
              setSize(10);
      
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setLabel("MATSTENTRYCREATETIME: Create Time").
              setSize(20);

      headblk.addField("CREATE_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("MATARRIVECREATEPERSON: Create Person").
              setSize(20);
      headblk.addField("PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME (:CREATE_PERSON)").
              setLabel("MATARRIVEPERSONINFONAME: Person Name").
              setReadOnly().
              setSize(30);
      mgr.getASPField("CREATE_PERSON").setValidation("PERSON_NAME");
      headblk.setView("MAT_ST_ENTRY");
      headblk.defineCommand("MAT_ST_ENTRY_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("MATSTENTRYTBLHEAD: Mat St Con Entrys");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headbar.addCustomCommand("printReport", "MATSTCONENTRYPRINTREPORT: Print Report...");

      headbar.addCustomCommand("matEntry", "È·ÈÏÈë¿â","MAT_ST_ENTRY_API.Mat_St_Entry___");
      headbar.addCommandValidConditions("matEntry", "STATUS", "Disable", "ÒÑÈë¿â");
      
      headlay.setSimple("PROJ_DESC");
      headlay.setSimple("CONTRACT_DESC");
      headlay.setSimple("PERSON_NAME");
      headlay.setDataSpan("STATUS", 5);
 


      mat_st_entry_line_blk = mgr.newASPBlock("ITEM1");
      mat_st_entry_line_blk.addField("ITEM0_OBJID").
                            setHidden().
                            setDbName("OBJID");
      mat_st_entry_line_blk.addField("ITEM0_OBJVERSION").
                            setHidden().
                            setDbName("OBJVERSION");
      mat_st_entry_line_blk.addField("ITEM0_PROJ_NO").
                            setDbName("PROJ_NO").
                            setMandatory().
                            setInsertable().
                            setHidden().
                            setLabel("MATSTENTRYLINEITEM0PROJNO: Proj No").
                            setSize(50);
      mat_st_entry_line_blk.addField("ITEM0_ENTRY_ID").
                            setDbName("ENTRY_ID").
                            setMandatory().
                            setInsertable().
                            setHidden().
                            setLabel("MATSTENTRYLINEITEM0ENTRYID: Entry Id").
                            setSize(50);
      mat_st_entry_line_blk.addField("ITEM0_CONTRACT_ID").
                            setDbName("CONTRACT_ID").
                            setInsertable().
                            setHidden().
                            setLabel("MATSTENTRYLINEITEM0CONTRACTID: Contract Id").
                            setSize(50);
      mat_st_entry_line_blk.addField("ENTRY_LINE_NO").
//                            setMandatory().
                            setReadOnly().
//                            setInsertable().
                            setLabel("MATSTENTRYLINEENTRYLINENO: Entry Line No").
                            setSize(20);
      mat_st_entry_line_blk.addField("ITEM_NO").
                            setInsertable().
                            setDynamicLOV("PROJECT_CONTRACT_ITEM","PROJ_NO,CONTRACT_ID").
                            setLOVProperty("WHERE", "ORIGINAL_QTY>NVL(MAT_ST_ENTRY_LINE_API.Get_Sum_Con_Entry_qty(PROJ_NO,CONTRACT_ID,ITEM_NO),0)").
                            setLabel("MATSTENTRYLINEITEMNO: Item No").
                            setCustomValidation("PROJ_NO,CONTRACT_ID,ITEM_NO", "ITEM_DESC,MAT_NO,MAT_NAME,ORIGINAL_QTY,ENTRY_QTY,UNIT_NO,ENTRY_PRICE,TAX_RATE,NO_TAX_PRICE,TOTLE_PRICE").
                            setSize(20);
      mat_st_entry_line_blk.addField("ITEM_DESC").
                            setFunction("PROJECT_CONTRACT_ITEM_API.GET_ITEM_DESC ( :PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                            setLabel("MATARRIVELINEITEMDESC: Item Desc").
                            setReadOnly().
                            setSize(30);
//      mgr.getASPField("ITEM_NO").setValidation("ITEM_DESC");

      mat_st_entry_line_blk.addField("MAT_NO").
                            setReadOnly().
                            setLabel("MATARRIVELINEMATNO: Mat No").
                            setFunction("PROJECT_CONTRACT_ITEM_API.GET_MAT_NO ( :PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                            setSize(20);
      mat_st_entry_line_blk.addField("MAT_NAME").
                            setReadOnly().
                            setLabel("MATARRIVELINEMATNAME: Mat Name").
                            setFunction("PROJECT_CONTRACT_ITEM_API.GET_MAT_NAME ( :PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                            setSize(20);
      mat_st_entry_line_blk.addField("ORIGINAL_QTY","Number").
                            setReadOnly().
                            setFunction("PROJECT_CONTRACT_ITEM_API.GET_CHANGED_QTY ( :PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                            setLabel("MATSTENTRYLINEORIGINALQTY: Original Qty").
                            setSize(20);
      mat_st_entry_line_blk.addField("ENTRY_QTY","Number").
                            setInsertable().
                            setLabel("MATSTENTRYLINEENTRYQTY: Entry Qty").
                            setSize(20);
      mat_st_entry_line_blk.addField("UNIT_NO").
                            setInsertable().
                            setDynamicLOV("ISO_UNIT").
                            setLabel("MATSTENTRYLINEUNITNO: Unit No").
                            setSize(20);

      mat_st_entry_line_blk.addField("ENTRY_PRICE","Number").
                            setInsertable().
                            setLabel("MATSTENTRYLINEENTRYPRICE: Entry Price").
                            setSize(20);
      mat_st_entry_line_blk.addField("TAX_RATE","Number").
                            setInsertable().
                            setLabel("MATSTENTRYLINETAXRATE: Tax Rate").
                            setSize(20);
      mat_st_entry_line_blk.addField("NO_TAX_PRICE","Number").
                            setInsertable().
                            setLabel("MATSTENTRYLINENOTAXPRICE: No Tax Price").
                            setSize(20);

      mat_st_entry_line_blk.addField("TOTLE_PRICE","Number").
                            setInsertable().
                            setLabel("MATSTENTRYLINETOTLEPRICE: Totle Price").
                            setSize(20);
//      mat_st_entry_line_blk.addField("STOCK").
//                            setInsertable().
//                            setLabel("MATSTENTRYLINESTOCK: Stock").
//                            setSize(100);
      mat_st_entry_line_blk.addField("ITEM0_CREATE_TIME","Date").
                            setDbName("CREATE_TIME").
                            setInsertable().
                            setLabel("MATSTENTRYLINEITEM0CREATETIME: Create Time").
                            setSize(30);
//      mat_st_entry_line_blk.addField("ACCEPT_ID").
//                            setInsertable().
//                            setLabel("MATSTENTRYLINEACCEPTID: Accept Id").
//                            setSize(50);
//      mat_st_entry_line_blk.addField("LINE_NO").
//                            setInsertable().
//                            setLabel("MATSTENTRYLINELINENO: Line No").
//                            setSize(50);
      mat_st_entry_line_blk.addField("ITEM0_CREATE_PERSON").
                            setInsertable().
                            setDbName("CREATE_PERSON").
                            setDynamicLOV("PERSON_INFO").
                            setLabel("MATSTENTRYLINECREATEPERSON: Create Person").
                            setSize(20);
      mat_st_entry_line_blk.addField("ITEM0_PERSON_NAME").
                            setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
                            setLabel("MATACCEPTLINEITEM0PERSONNAME: Person Name").
                            setReadOnly().
                            setSize(30);
      mgr.getASPField("CREATE_PERSON").setValidation("ITEM0_PERSON_NAME");
      mat_st_entry_line_blk.setView("MAT_ST_ENTRY_LINE");
      mat_st_entry_line_blk.defineCommand("MAT_ST_ENTRY_LINE_API","New__,Modify__,Remove__");
      mat_st_entry_line_blk.setMasterBlock(headblk);
      mat_st_entry_line_set = mat_st_entry_line_blk.getASPRowSet();
      mat_st_entry_line_bar = mgr.newASPCommandBar(mat_st_entry_line_blk);
      mat_st_entry_line_bar.defineCommand(mat_st_entry_line_bar.OKFIND, "okFindITEM1");
      mat_st_entry_line_bar.defineCommand(mat_st_entry_line_bar.NEWROW, "newRowITEM1");
      mat_st_entry_line_tbl = mgr.newASPTable(mat_st_entry_line_blk);
      mat_st_entry_line_tbl.setTitle("MATSTENTRYLINEITEMHEAD1: MatStEntryLine");
      mat_st_entry_line_tbl.enableRowSelect();
      mat_st_entry_line_tbl.setWrap();
      mat_st_entry_line_lay = mat_st_entry_line_blk.getASPBlockLayout();
      mat_st_entry_line_lay.setDefaultLayoutMode(mat_st_entry_line_lay.MULTIROW_LAYOUT);

//      mat_st_entry_line_lay.setDataSpan("STOCK", 5);

      mat_st_entry_line_lay.setSimple("MAT_NAME");
      mat_st_entry_line_lay.setSimple("ITEM0_PERSON_NAME");
      mat_st_entry_line_lay.setSimple("ITEM_DESC");



   }


   public void matEntry(){
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      cmd = trans.addCustomCommand("PROJ_NO,ENTRY_ID","MAT_ST_ENTRY_API.Mat_St_Entry___");
      cmd.setParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ENTRY_ID", headset.getValue("ENTRY_ID"));
      trans = mgr.perform(trans);
      cmd.clear();
      okFind();
   }

   public void  adjust() throws FndException
   {
      super.adjust();
      // fill function body
      if(headset.countRows() > 0&&headlay.isSingleLayout()&&"ÒÑÈë¿â".equals(headset.getValue("STATUS"))){
         headbar.disableCommand(headbar.EDITROW);
         mat_st_entry_line_bar.disableCommand(mat_st_entry_line_bar.NEWROW);
         mat_st_entry_line_bar.disableCommand(mat_st_entry_line_bar.EDITROW);
         mat_st_entry_line_bar.disableCommand(mat_st_entry_line_bar.DELETE);
      }
   }
   

   public void  printReport() throws FndException, UnsupportedEncodingException
  {
   ASPManager mgr = getASPManager();
   ASPConfig cfg = getASPConfig();
   String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
   if (headlay.isMultirowLayout())
      headset.goTo(headset.getRowSelected());
   if (headset.countRows()>0 )
         {   
            String proj_no = headset.getValue("PROJ_NO");
            String entry_id = headset.getValue("ENTRY_ID");
             appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=MatStConEntry.raq&proj_no="+proj_no+"&entry_id="+entry_id
               + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
        }
  }   

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "MATSTCONENTRYDESC: Mat St Con Entry";
   }


   protected String getTitle()
   {
      return "MATSTCONENTRYTITLE: Mat St Con Entry";
   }


   protected void printContents() throws FndException
   {
      super.printContents();
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
      if (mat_st_entry_line_lay.isVisible())
          appendToHTML(mat_st_entry_line_lay.show());

   }

   @Override
   protected ASPBlock getBizWfBlock() {
      // TODO Auto-generated method stub
      return headblk;
   }
}
