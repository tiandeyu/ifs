/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.matmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class MatStCancel extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.matmaw.MatStCancel");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock mat_st_cancel_line_blk;
   private ASPRowSet mat_st_cancel_line_set;
   private ASPCommandBar mat_st_cancel_line_bar;
   private ASPTable mat_st_cancel_line_tbl;
   private ASPBlockLayout mat_st_cancel_line_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  MatStCancel (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("CANCEL_ID")) )
         okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else 
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("MATSTCANCELNODATA: No data found.");
         headset.clear();
      }
      eval( mat_st_cancel_line_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","MAT_ST_CANCEL_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(mat_st_cancel_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND CANCEL_ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("CANCEL_ID", headset.getValue("CANCEL_ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,mat_st_cancel_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","MAT_ST_CANCEL_LINE_API.New__",mat_st_cancel_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_CANCEL_ID", headset.getValue("CANCEL_ID"));
      cmd.setParameter("ITEM0_DELIVERY_ID", headset.getValue("DELIVERY_ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      mat_st_cancel_line_set.addRow(data);
   }

   
   public void validate()
   {
       ASPManager mgr = getASPManager();
       ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
       ASPCommand cmd;
       String val = mgr.readValue("VALIDATE"); 
       String txt = "";
       String matNo = "";
       String deliveryQtyTotal = "";
       String matUnit = "";
       String matName = "";
       String prodModel = "";
       String cancelPersonName = "";
       String cancelOrg = "";
       String cancelOrgName = "";
       
       if ("DELIVERY_LINE_NO".equals(val)) {   
          cmd = trans.addCustomFunction("MATNO", 
                "MAT_ST_DELIVERY_REQ_LINE_API.Get_Mat_No", "MAT_NO");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("ITEM0_DELIVERY_ID");
          cmd.addParameter("DELIVERY_LINE_NO");
          
          cmd = trans.addCustomFunction("DELIVERYQTY", 
                "MAT_ST_DELIVERY_REQ_LINE_API.GET_DELIVERY_QTY", "DELIVERY_QTY");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("ITEM0_DELIVERY_ID");
          cmd.addParameter("DELIVERY_LINE_NO");
          trans = mgr.validate(trans);
          matNo = trans.getValue("MATNO/DATA/MAT_NO");
          deliveryQtyTotal = trans.getValue("DELIVERYQTY/DATA/DELIVERY_QTY");
          
          trans.clear();
          cmd.clear();
          cmd = trans.addCustomFunction("MATNAME", 
                "MAT_CODE_API.Get_Mat_Name", "MAT_NAME");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("MAT_NO", matNo);
          
          cmd = trans.addCustomFunction("UNITNO", 
                "MAT_CODE_API.Get_Mat_Unit", "UNIT_NO");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("MAT_NO", matNo);
          
          cmd = trans.addCustomFunction("PRODMODEL", 
                "MAT_CODE_API.Get_Prod_Model", "PROD_MODEL");
          cmd.addParameter("ITEM0_PROJ_NO");
          cmd.addParameter("MAT_NO", matNo);
   
          trans = mgr.validate(trans);
          matName = trans.getValue("MATNAME/DATA/MAT_NAME");
          matUnit = trans.getValue("UNITNO/DATA/UNIT_NO");
          prodModel = trans.getValue("PRODMODEL/DATA/PROD_MODEL");
          
          txt = ((mgr.isEmpty(matNo)) ? "" : matNo) + "^";
          txt = txt + ((mgr.isEmpty(matName)) ? "" : matName )+ "^" + ((mgr.isEmpty(matUnit)) ? "" : matUnit )+ "^";
          txt = txt + ((mgr.isEmpty(prodModel)) ? "" : prodModel )+ "^"  + ((mgr.isEmpty(deliveryQtyTotal)) ? "0" : deliveryQtyTotal) + "^";
          mgr.responseWrite(txt);
       }
       if ("CANCEL_PERSON".equals(val)) {
          cmd = trans.addCustomFunction("CANCELPERSONNAME", 
                "PERSON_INFO_API.GET_NAME", "CANCEL_PERSON_NAME");
          cmd.addParameter("CANCEL_PERSON");
          
          cmd = trans.addCustomFunction("CANCELORG", 
                  "PERSON_ZONE_API.Get_Person_Def_Zone", "CANCEL_ORG");
          cmd.addParameter("CANCEL_PERSON");
          
          trans = mgr.validate(trans);
          
          cancelPersonName = trans.getValue("CANCELPERSONNAME/DATA/CANCEL_PERSON_NAME");
          cancelOrg = trans.getValue("CANCELORG/DATA/CANCEL_ORG");

          trans.clear();
          cmd = trans.addCustomFunction("CANCELORGNAME", 
                "general_zone_api.Get_Zone_Desc", "CANCEL_ORG");
          cmd.addParameter("CANCEL_ORG",cancelOrg);

          trans = mgr.validate(trans);

          cancelOrgName = trans.getValue("CANCELORGNAME/DATA/CANCEL_ORG");

          txt = ((mgr.isEmpty(cancelPersonName)) ? "" : cancelPersonName )+ "^" + ((mgr.isEmpty(cancelOrgName)) ? "" : cancelOrgName )+ "^";
          
          mgr.responseWrite(txt);
       }
       mgr.endResponse();
   }
   
   public void accept() throws FndException{
      ASPManager mgr = getASPManager();
      ASPCommand cmdBuf; 
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      if("".equals(headset.getValue("STATUS"))||headset.getValue("STATUS") == null){
         cmdBuf = trans.addCustomCommand("ACCEPT", "MAT_ST_CANCEL_API.Update_Status_And_Storage__");
         cmdBuf.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
         cmdBuf.addParameter("CANCEL_ID", headset.getValue("CANCEL_ID"));     
         cmdBuf.addParameter("OBJID", "Accept");  
         mgr.perform(trans);
         okFind();
      }else{
         mgr.showAlert("MATSTCANCELSTATUS: The cancel bill was already done.");
      }
   }
         
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden(); 
      headblk.addField("CANCEL_ID").
              setReadOnly().
              setLabel("MATSTCANCELCANCELID: Cancel Id").
              setSize(50);
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setDynamicLOV("GENERAL_PROJECT",600,445).
              setLabel("MATSTCANCELPROJNO: Proj No").
              setSize(50);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("MATSTCANCELGENERALPROJECTPROJDESC: General Project Proj Desc").
              setReadOnly().
              setSize(30);
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      //Dec4th add Contract_Id and Contract_desc by @natic
//      headblk.addField("CONTRACT_ID").
//              setInsertable().
//              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
//              setLabel("MATSTCANCELCONTRACTID: Contract Id").
//              setSize(20);
//      headblk.addField("CONTRACT_DESC").  
//              setReadOnly().
//              setLabel("MATSTCANCELCONTRACTDESC: Contract Desc").
//              setFunction("PROJECT_CONTRACT_API.GET_CONTRACT_DESC(:PROJ_NO,:CONTRACT_ID)").
//              setSize(20);
//      mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_DESC");
      //end 
      headblk.addField("DELIVERY_ID").
              setMandatory().
              setInsertable().
              setLabel("MATSTCANCELDELIVERYID: Delivery Id").
              setDynamicLOV("MAT_ST_DELIVERY_REQ", "PROJ_NO").
              setLOVProperty("WHERE", "MAT_DELEVERAY_TYPE = 'Delivery'").
              setSize(50);
      headblk.addField("STATUS").
              setReadOnly().
              setLabel("MATSTCANCELSTATUS: Status").
              setSize(50);
      headblk.addField("CANCEL_TIME","Date").
              setInsertable().
              setLabel("MATSTCANCELCANCELTIME: Cancel Time").
              setSize(50);
      headblk.addField("CANCEL_PERSON").
              setInsertable().
              setLabel("MATSTCANCELCANCELPERSON: Cancel Person").
              setDynamicLOV("PERSON_INFO").
              setCustomValidation("CANCEL_PERSON", "CANCEL_PERSON_NAME,CANCEL_ORG").
              setSize(50);
      headblk.addField("CANCEL_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :CANCEL_PERSON)").
              setLabel("MATSTCANCELPERSONINFONAME: Cancle Person Name").
              setReadOnly().
              setSize(30);
      headblk.addField("CANCEL_ORG").
              setReadOnly().
              setLabel("MATSTCANCELCANCELORG: Cancel Org").
              setFunction("general_zone_api.Get_Zone_Desc(PERSON_ZONE_API.Get_Person_Def_Zone (:CANCEL_PERSON))").
              setSize(50);
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setLabel("MATSTCANCELCREATETIME: Create Time").
              setSize(30);
      headblk.addField("CREATE_PERSON").
              setInsertable().
              setLabel("MATSTCANCELCREATEPERSON: Create Person").
              setDynamicLOV("PERSON_INFO").
              setSize(50);
      headblk.addField("CREATE_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
              setLabel("MATSTCANCELCREATEPERSONINFONAME: Create Person Name").
              setReadOnly().
              setSize(30);
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");      
      headblk.addField("CANCEL_REASON").
              setInsertable().
              setLabel("MATSTCANCELCANCELREASON: Cancel Reason").
              setSize(150).
              setHeight(4);
      headblk.setView("MAT_ST_CANCEL");
      headblk.defineCommand("MAT_ST_CANCEL_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("accept",mgr.translate("MATCANCELACCEPT: Accept"));
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("MATSTCANCELTBLHEAD: Mat St Cancels");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("CANCEL_PERSON_NAME");
      headlay.setSimple("CREATE_PERSON_NAME");
      headlay.setDataSpan("CANCEL_REASON", 5);
      headlay.setDataSpan("CREATE_PERSON", 5);
      headlay.setDataSpan("CANCEL_ID", 5);
//      headlay.setSimple("CONTRACT_DESC");
 


      mat_st_cancel_line_blk = mgr.newASPBlock("ITEM1");
      mat_st_cancel_line_blk.addField("ITEM0_OBJID").
                             setHidden().
                             setDbName("OBJID");
      mat_st_cancel_line_blk.addField("ITEM0_OBJVERSION").
                             setHidden().
                             setDbName("OBJVERSION");
      mat_st_cancel_line_blk.addField("ITEM0_PROJ_NO").
                             setDbName("PROJ_NO").
                             setHidden().
                             setLabel("MATSTCANCELLINEITEM0PROJNO: Proj No").
                             setSize(50);
      mat_st_cancel_line_blk.addField("ITEM0_CANCEL_ID").
                             setDbName("CANCEL_ID").
                             setHidden().
                             setLabel("MATSTCANCELLINEITEM0CANCELID: Cancel Id").
                             setSize(50);
      mat_st_cancel_line_blk.addField("CANCEL_LINE_NO").
                             setHidden().
                             setLabel("MATSTCANCELLINECANCELLINENO: Cancel Line No").
                             setSize(50);
      mat_st_cancel_line_blk.addField("ITEM0_DELIVERY_ID").
                              setDbName("DELIVERY_ID").
                              setHidden().
                              setLabel("MATSTCANCELLINEITEM0DELIVERYID: Delivery Id").
                              setSize(50);
      mat_st_cancel_line_blk.addField("DELIVERY_LINE_NO").
                           setInsertable().
                           setDynamicLOV("MAT_ST_DELIVERY_REQ_LINE", "ITEM0_PROJ_NO PROJ_NO, ITEM0_DELIVERY_ID DELIVERY_ID").
                           setCustomValidation("ITEM0_PROJ_NO,ITEM0_DELIVERY_ID, DELIVERY_LINE_NO", "MAT_NO,MAT_NAME,UNIT_NO,PROD_MODEL,DELIVERY_QTY").
                           setLabel("MATSTCANCELLINEDELIVERYLINENO: Delivery Line No").
                           setSize(50);
      mat_st_cancel_line_blk.addField("MAT_NO").
                           setReadOnly().
                           setLabel("MATSTCANCELMATNO: Mat No").
                           setFunction("MAT_ST_DELIVERY_REQ_LINE_API.Get_Mat_No (:ITEM0_PROJ_NO,:ITEM0_DELIVERY_ID, :DELIVERY_LINE_NO)").
                           setSize(10);
      mat_st_cancel_line_blk.addField("MAT_NAME").
                           setReadOnly().
                           setFunction("MAT_CODE_API.Get_Mat_Name (:ITEM0_PROJ_NO, MAT_ST_DELIVERY_REQ_LINE_API.Get_Mat_No (:ITEM0_PROJ_NO,:ITEM0_DELIVERY_ID, :DELIVERY_LINE_NO))").
                           setLabel("MATSTCANCELMATNAME: Mat Name").
                           setSize(50);
      mat_st_cancel_line_blk.addField("UNIT_NO").
                           setReadOnly().
                           setLabel("MATSTCANCELUNITNO: Unit No").
                           setFunction("MAT_CODE_API.Get_Mat_Unit (:ITEM0_PROJ_NO, MAT_ST_DELIVERY_REQ_LINE_API.Get_Mat_No (:ITEM0_PROJ_NO,:ITEM0_DELIVERY_ID, :DELIVERY_LINE_NO))").
                           setSize(50);
      mat_st_cancel_line_blk.addField("PROD_MODEL").
                           setReadOnly().
                           setLabel("MATSTCANCELPRODMODEL: Prod Model").
                           setFunction("MAT_CODE_API.Get_Prod_Model (:ITEM0_PROJ_NO, MAT_ST_DELIVERY_REQ_LINE_API.Get_Mat_No (:ITEM0_PROJ_NO,:ITEM0_DELIVERY_ID, :DELIVERY_LINE_NO))").
                           setSize(50);
      mat_st_cancel_line_blk.addField("DELIVERY_QTY").
                             setReadOnly().
                             setLabel("MATSTCANCELDELIVERYQTY: Delivery Qty").
                             setFunction("MAT_ST_DELIVERY_REQ_LINE_API.Get_Delivery_Qty (:ITEM0_PROJ_NO,:ITEM0_DELIVERY_ID,:DELIVERY_LINE_NO)").
                             setSize(50);
      mat_st_cancel_line_blk.addField("CANCEL_QTY","Number").
                             setInsertable().
                             setLabel("MATSTCANCELLINECANCELQTY: Cancel Qty").
                             setSize(50);
      mat_st_cancel_line_blk.addField("ITEM0_CANCEL_TIME","Date").
                             setDbName("CANCEL_TIME").
                             setInsertable().
                             setLabel("MATSTCANCELLINEITEM0CANCELTIME: Cancel Time").
                             setSize(50);
      mat_st_cancel_line_blk.addField("ITEM0_CREATE_PERSON").
                             setDbName("CREATE_PERSON").
                             setInsertable().
                             setDynamicLOV("PERSON_INFO").
                             setLabel("MATSTCANCELLINEITEM0CREATEPERSON: Create Person").
                             setSize(20);
      mat_st_cancel_line_blk.addField("ITEM0_CREATE_PERSON_NAME").
                             setFunction("PERSON_INFO_API.GET_NAME ( :ITEM0_CREATE_PERSON)").
                             setLabel("MATSTCANCELLINEITEM0PERSONINFONAME: Create Person Name").
                             setReadOnly().
                             setSize(30);
      mgr.getASPField("ITEM0_CREATE_PERSON").setValidation("ITEM0_CREATE_PERSON_NAME");
      mat_st_cancel_line_blk.addField("NOTE").
                             setInsertable().
                             setLabel("MATSTCANCELLINENOTE: Note").
                             setSize(150).
                             setHeight(4);
      
      mat_st_cancel_line_blk.setView("MAT_ST_CANCEL_LINE");
      mat_st_cancel_line_blk.defineCommand("MAT_ST_CANCEL_LINE_API","New__,Modify__,Remove__");
      mat_st_cancel_line_blk.setMasterBlock(headblk);
      mat_st_cancel_line_set = mat_st_cancel_line_blk.getASPRowSet();
      mat_st_cancel_line_bar = mgr.newASPCommandBar(mat_st_cancel_line_blk);
      mat_st_cancel_line_bar.defineCommand(mat_st_cancel_line_bar.OKFIND, "okFindITEM1");
      mat_st_cancel_line_bar.defineCommand(mat_st_cancel_line_bar.NEWROW, "newRowITEM1");
      mat_st_cancel_line_tbl = mgr.newASPTable(mat_st_cancel_line_blk);
      mat_st_cancel_line_tbl.setTitle("MATSTCANCELLINEITEMHEAD1: MatStCancelLine");
      mat_st_cancel_line_tbl.enableRowSelect();
      mat_st_cancel_line_tbl.setWrap();
      mat_st_cancel_line_lay = mat_st_cancel_line_blk.getASPBlockLayout();
      mat_st_cancel_line_lay.setDefaultLayoutMode(mat_st_cancel_line_lay.MULTIROW_LAYOUT);
      mat_st_cancel_line_lay.setSimple("ITEM0_CREATE_PERSON_NAME");
      mat_st_cancel_line_lay.setSimple("MAT_NAME");
      mat_st_cancel_line_lay.setDataSpan("NOTE", 5);

   }



   public void  adjust()
   {
      if(headset.countRows()>0){
         if("".equals(headset.getValue("STATUS"))||headset.getValue("STATUS") == null){               
         }
         else{
            headbar.disableCommand(headbar.EDITROW);
            headbar.disableCommand(headbar.DELETE);
            mat_st_cancel_line_bar.disableCommand(mat_st_cancel_line_bar.DELETE);
            mat_st_cancel_line_bar.disableCommand(mat_st_cancel_line_bar.EDITROW);
            mat_st_cancel_line_bar.disableCommand(mat_st_cancel_line_bar.NEWROW);
         }
      }
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "MATSTCANCELDESC: Mat St Cancel";
   }


   protected String getTitle()
   {
      return "MATSTCANCELTITLE: Mat St Cancel";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
      if (mat_st_cancel_line_lay.isVisible())
          appendToHTML(mat_st_cancel_line_lay.show());

   }
}
