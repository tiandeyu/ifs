/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.matmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class MatStConOutLineDlg extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.standw.NeceCondLineFind");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   private ASPManager mgr;
   private String id;
   private String proj_type_no;
   private String plan_no;
   private ASPQuery q;
   private ASPContext ctx;
   private String type;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  MatStConOutLineDlg (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      if (mgr.dataTransfered())
         storeParamters();
      
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if (mgr.buttonPressed("SUBMIT")) 
         submitCondition();
      else 
         okFind();
      adjust();
   }
   
   public void storeParamters() 
   {
      ASPManager mgr = getASPManager();

      if (mgr.dataTransfered())
      {
         ASPContext ctx = mgr.getASPContext();
         ASPBuffer buf = mgr.getTransferedData();
         String proj_no = buf.getValue("DATA/PROJ_NO");
         String entry_id = buf.getValue("DATA/OUT_ID");
         String contract_id = buf.getValue("DATA/CONTRACT_ID");
         if (!mgr.isEmpty(proj_no))
            ctx.setGlobal("PROJ_NO", proj_no);
         if (!mgr.isEmpty(entry_id))
            ctx.setGlobal("OUT_ID", entry_id);
         if (!mgr.isEmpty(entry_id))
            ctx.setGlobal("CONTRACT_ID", contract_id);
      }
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      ASPContext ctx = mgr.getASPContext();
      
      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.addWhereCondition("PROJ_NO = '"+ctx.findGlobal("PROJ_NO")+"'");
      q.addWhereCondition("CONTRACT_ID = '"+ctx.findGlobal("CONTRACT_ID")+"' AND OUT_ID IS NULL AND¡¡(PROJ_NO,ENTRY_ID) IN (SELECT PROJ_NO,ENTRY_ID FROM MAT_ST_ENTRY WHERE MAT_ENTRY_TYPE_DB = 'CONTRACT')");
      q.includeMeta("ALL");
//      if(mgr.dataTransfered())
//         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("NECECONDLINENODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   } 



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","MAT_ACCEPT_LINE_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();

      headblk.addField("OUT_ID").
                            setHidden().
                            setLabel("MATSTENTRYLINEITEM0PROJNO: Proj No").
                            setSize(50);
      headblk.addField("PROJ_NO").
                            setMandatory().
                            setInsertable().
                            setHidden().
                            setLabel("MATSTENTRYLINEITEM0PROJNO: Proj No").
                            setSize(50);
      headblk.addField("ENTRY_ID").
                            setMandatory().
                            setInsertable().
                            setHidden().
                            setLabel("MATSTENTRYLINEITEM0ENTRYID: Entry Id").
                            setSize(50);
      headblk.addField("CONTRACT_ID").
                            setInsertable().
                            setHidden().
                            setLabel("MATSTENTRYLINEITEM0CONTRACTID: Contract Id").
                            setSize(50);
      headblk.addField("ENTRY_LINE_NO").
//                            setMandatory().
                            setReadOnly().
//                            setInsertable().
                            setLabel("MATSTENTRYLINEENTRYLINENO: Entry Line No").
                            setSize(20);
      headblk.addField("ITEM_NO").
                            setInsertable().
                            setDynamicLOV("PROJECT_CONTRACT_ITEM","PROJ_NO,CONTRACT_ID").
                            setLabel("MATSTENTRYLINEITEMNO: Item No").
                            setCustomValidation("PROJ_NO,CONTRACT_ID,ITEM_NO", "MAT_NO,MAT_NAME,ORIGINAL_QTY,ENTRY_QTY,UNIT_NO,ENTRY_PRICE,TAX_RATE,NO_TAX_PRICE").
                            setSize(20);
//      headblk.addField("ITEM_DESC").
//                            setFunction("PROJECT_CONTRACT_ITEM_API.GET_ITEM_DESC ( :PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
//                            setLabel("MATARRIVELINEITEMDESC: Item Desc").
//                            setReadOnly().
//                            setSize(30);
//      mgr.getASPField("ITEM_NO").setValidation("ITEM_DESC");

      headblk.addField("MAT_NO").
                            setReadOnly().
                            setLabel("MATARRIVELINEMATNO: Mat No").
                            setFunction("PROJECT_CONTRACT_ITEM_API.GET_MAT_NO ( :PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                            setSize(20);
      headblk.addField("MAT_NAME").
                            setReadOnly().
                            setLabel("MATARRIVELINEMATNAME: Mat Name").
                            setFunction("PROJECT_CONTRACT_ITEM_API.GET_MAT_NAME ( :PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                            setSize(20);
      headblk.addField("ORIGINAL_QTY","Number").
                            setReadOnly().
                            setFunction("PROJECT_CONTRACT_ITEM_API.GET_ORIGINAL_QTY ( :PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                            setLabel("MATSTENTRYLINEORIGINALQTY: Original Qty").
                            setSize(20);
      headblk.addField("ENTRY_QTY","Number").
                            setInsertable().
                            setLabel("MATSTENTRYLINEENTRYQTY: Entry Qty").
                            setSize(20);
      headblk.addField("UNIT_NO").
                            setInsertable().
                            setDynamicLOV("ISO_UNIT").
                            setLabel("MATSTENTRYLINEUNITNO: Unit No").
                            setSize(20);

      headblk.addField("ENTRY_PRICE","Number").
                            setInsertable().
                            setLabel("MATSTENTRYLINEENTRYPRICE: Entry Price").
                            setSize(20);
      headblk.addField("TAX_RATE","Number").
                            setInsertable().
                            setLabel("MATSTENTRYLINETAXRATE: Tax Rate").
                            setSize(20);
      headblk.addField("NO_TAX_PRICE","Number").
                            setInsertable().
                            setLabel("MATSTENTRYLINENOTAXPRICE: No Tax Price").
                            setSize(20);
//      headblk.addField("STOCK").
//                            setInsertable().
//                            setLabel("MATSTENTRYLINESTOCK: Stock").
//                            setSize(100);
      headblk.addField("CREATE_TIME","Date").
                            setInsertable().
                            setLabel("MATSTENTRYLINEITEM0CREATETIME: Create Time").
                            setSize(30);
//      headblk.addField("ACCEPT_ID").
//                            setInsertable().
//                            setLabel("MATSTENTRYLINEACCEPTID: Accept Id").
//                            setSize(50);
//      headblk.addField("LINE_NO").
//                            setInsertable().
//                            setLabel("MATSTENTRYLINELINENO: Line No").
//                            setSize(50);
      headblk.addField("CREATE_PERSON").
                            setInsertable().
                            setDynamicLOV("PERSON_INFO").
                            setLabel("MATSTENTRYLINECREATEPERSON: Create Person").
                            setSize(20);
      headblk.addField("ITEM0_PERSON_NAME").
                            setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
                            setLabel("MATACCEPTLINEITEM0PERSONNAME: Person Name").
                            setReadOnly().
                            setSize(30);
      mgr.getASPField("CREATE_PERSON").setValidation("ITEM0_PERSON_NAME");
      headblk.setView("MAT_ST_ENTRY_LINE");
      headblk.defineCommand("MAT_ST_ENTRY_LINE_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("MATSTENTRYLINEITEMHEAD1: MatStEntryLine");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);

      headlay.setSimple("ITEM0_PERSON_NAME");
 
   }

   public void submitCondition(){
      
      mgr = getASPManager();
      ASPCommand cmdBuf; 
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ctx   = mgr.getASPContext();
     
      trans.clear();
      String standard_info = "";
      headset.storeSelections();  
      if (headlay.isSingleLayout())
         headset.selectRow();
      ASPBuffer selected_fields=headset.getSelectedRows("PROJ_NO,ENTRY_ID,ENTRY_LINE_NO");
      for(int i=0;i<selected_fields.countItems();i++){         
          ASPBuffer subBuff = selected_fields.getBufferAt(i);
          standard_info=standard_info + subBuff.getValueAt(0) + "^";    
         cmdBuf = trans.addCustomCommand("CREATECONDITION"+i, "MAT_ST_ENTRY_LINE_API.Create_File2");    
         cmdBuf.addParameter("PROJ_NO", subBuff.getValueAt(0));
         cmdBuf.addParameter("ENTRY_ID", subBuff.getValueAt(1));
         cmdBuf.addParameter("ENTRY_LINE_NO", subBuff.getValueAt(2));
         cmdBuf.addParameter("OUT_ID", ctx.findGlobal("OUT_ID"));
      }
      mgr.perform(trans);
   }

   public void  adjust()
   {
      // fill function body
      headbar.disableCommand(headbar.DELETE);
      headbar.disableCommand(headbar.EDITROW);
      headbar.disableCommand(headbar.NEWROW);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "MATACCEPTLINEITEMHEAD1: Mat St Con Entry Line";
   }


   protected String getTitle()
   {
      return "MATACCEPTLINEITEMHEAD1: Mat St Con Entry Line";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      
      if (!headlay.isFindLayout() && headset.countRows() > 0)
      {
         beginDataPresentation();
         printSubmitButton("SUBMIT", mgr.translate("DOCCTWDOCISSUEDISTFILESDLGCREATE: Submit"), "OnClick='Close()'");
         printSpaces(1);
         printSubmitButton("CANCEL", mgr.translate("DOCCTWDOCISSUEDISTFILESDLGCANCEL: Cancle"), "OnClick='javascript:window.close();'");
         endDataPresentation();
      }
    appendDirtyJavaScript("function Close()\n");
    appendDirtyJavaScript("{\n");
    appendDirtyJavaScript("   try\n");
    appendDirtyJavaScript("   {\n");
    appendDirtyJavaScript("      eval(\"opener.refreshParent()\");\n");
    appendDirtyJavaScript("   }\n");
    appendDirtyJavaScript("   catch(err){}\n");
    appendDirtyJavaScript("   try\n");
    appendDirtyJavaScript("   {\n");
    appendDirtyJavaScript("      window.close();\n");
    appendDirtyJavaScript("   }\n");
    appendDirtyJavaScript("   catch(err){}\n");
    appendDirtyJavaScript("}\n");
 }
   }

