/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.matmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.genbaw.GenbawConstants;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class MatCode extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.matmaw.MatCode");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   private ASPContext ctx;


   
   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  MatCode (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      ctx = mgr.getASPContext();
      ctx.setGlobal("PROJ_NO", mgr.readValue("PROJ_NO"));
      ctx.setGlobal("MAT_TYPE_ID", mgr.readValue("MAT_TYPE_ID"));
      ctx.setGlobal("MAT_NO", mgr.readValue("MAT_NO"));
      if(!mgr.isEmpty(mgr.readValue("PROJ_NO"))&&!mgr.isEmpty(mgr.readValue("MAT_TYPE_ID"))&&mgr.isEmpty(mgr.readValue("MAT_NO")))
         ctx.removeGlobal("MAT_NO");
      
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("MAT_NO")) )
         okFind();
      else 
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

  
   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("MATCODENODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
//      ASPContext ctx =  mgr.getASPContext();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;
      
      cmd = trans1.addCustomFunction("MAT_TYPE_NAME","MAT_TYPE_API.GET_MAT_TYPE_NAME","MAT_TYPE_NAME");
      cmd.addParameter("MAT_TYPE_ID",ctx.findGlobal("MAT_TYPE_ID"));
      cmd = trans1.addCustomFunction("GENERAL_PROJECT_PROJ_DESC","GENERAL_PROJECT_API.GET_PROJ_DESC","GENERAL_PROJECT_PROJ_DESC");
      cmd.addParameter("PROJ_NO",ctx.findGlobal("PROJ_NO"));
      cmd = trans1.addCustomFunction("PERSON_INFO_NAME","PERSON_INFO_API.GET_NAME","PERSON_INFO_NAME");
      cmd.addParameter("PERSON_ID",mgr.getUserId());
      trans1 = mgr.validate(trans1);
      String MAT_TYPE_NAME= trans1.getValue("MAT_TYPE_NAME/DATA/MAT_TYPE_NAME");
      String PROJ_NAME= trans1.getValue("GENERAL_PROJECT_PROJ_DESC/DATA/GENERAL_PROJECT_PROJ_DESC");
      String PERSON_INFO_NAME= trans1.getValue("PERSON_INFO_NAME/DATA/PERSON_INFO_NAME");
      
      cmd = trans.addEmptyCommand("HEAD","MAT_CODE_API.New__",headblk);
//      cmd.setParameter("PROJ_NO", mgr.readValue("PROJ_NO"));
//      cmd.setParameter("STATUS", "1");  
//      cmd.setParameter("NOTE", "222");
//      cmd.setParameter("NOTE1", "333");
      cmd.setParameter("PROJ_NO", ctx.findGlobal("PROJ_NO"));
      cmd.setParameter("GENERAL_PROJECT_PROJ_DESC", PROJ_NAME);
      cmd.setParameter("PARENT_NO", ctx.findGlobal("MAT_NO"));
      cmd.setParameter("MAT_TYPE_ID", ctx.findGlobal("MAT_TYPE_ID"));
      cmd.setParameter("MAT_TYPE_NAME", MAT_TYPE_NAME);
      cmd.setParameter("PERSON_INFO_NAME", PERSON_INFO_NAME);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }
   

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setLabel("MATCODEPROJNO: Proj No").
              setSize(30).
              setDynamicLOV("GENERAL_PROJECT");
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("MATCODEGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(25).
              setReadOnly();
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");

      headblk.addField("IS_LEAF").
//              setMandatory().
              setInsertable().
              setReadOnly().
              setCheckBox("FALSE,TRUE").
              setLabel("MATCODEISLEAF: Is Leaf").
              setSize(30);
      headblk.addField("MAT_NO").
//              setMandatory().
//              setInsertable().
              setReadOnly().
              setLabel("MATCODEMATNO: Mat No").
              setSize(30);
      headblk.addField("MAT_NAME").
              setInsertable().
              setLabel("MATCODEMATNAME: Mat Name").
              setSize(30);
      headblk.addField("PARENT_NO").
              setInsertable().
              setLabel("MATCODEPARENTNO: Parent No").
              setSize(30).
              setDynamicLOV("MAT_CODE");

//      headblk.addField("CONTRACT_ID").
//              setInsertable().
//              setHidden().
//              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
//              setLabel("MATCODECONTRACTID: Contract Id").
//              setSize(20);
//      headblk.addField("CONTRACT_DESC").
//              setFunction("PROJECT_CONTRACT_API.GET_CONTRACT_DESC ( :PROJ_NO,:CONTRACT_ID)").
//              setHidden().
//              setLabel("MATCODECONTRACTDESC: Contract Desc").
//              setReadOnly().
//              setSize(30);
//      mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_DESC");

//      headblk.addField("ITEM_NO").
//                          setInsertable().
//                          setHidden().
//                          setLabel("MATCODEITEMNO: Item No").
//                          setDynamicLOV("PROJECT_CONTRACT_ITEM","PROJ_NO,CONTRACT_ID").
//                          setCustomValidation("PROJ_NO,CONTRACT_ID,ITEM_NO", "ITEM_DESC,MAT_NO,UNIT_CODE").
//                          setSize(20);
//
//      headblk.addField("ITEM_DESC").
//                          setFunction("PROJECT_CONTRACT_ITEM_API.GET_ITEM_DESC ( :PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
//                          setHidden().
//                          setLabel("MATCODEITEMDESC: Item Desc").
//                          setReadOnly().
//                          setSize(30);
//      mgr.getASPField("ITEM_NO").setValidation("ITEM_DESC");
//      headblk.addField("PARENT_NAME").
//              setFunction("MAT_CODE_API.GET_MAT_NAME ( :PROJ_NO,:MAT_NO)").
//              setLabel("MATCODEPARENTNAME: Parent Name").
//              setReadOnly().
//              setSize(30);
//      mgr.getASPField("PROJ_NO").setValidation("PARENT_NAME");
//      mgr.getASPField("PARENT_NO").setValidation("PARENT_NAME");
      headblk.addField("PROD_MODEL").
              setInsertable().
              setLabel("MATCODEPRODMODEL: Prod Model").
              setSize(30);
      headblk.addField("MAT_TYPE_ID").
              setInsertable().
              setLabel("MATCODEMATTYPEID: Mat Type Id").
              setSize(30).setDynamicLOV("MAT_TYPE");
      headblk.addField("MAT_TYPE_NAME").
              setFunction("MAT_TYPE_API.GET_MAT_TYPE_NAME ( :MAT_TYPE_ID)").
              setLabel("MATCODEMATTYPEMATTYPENAME: Mat Type Mat Type Name").
              setSize(25).
              setReadOnly();
      mgr.getASPField("MAT_TYPE_ID").setValidation("MAT_TYPE_NAME");
      //headblk.addField("BUDGET_NO").
      //        setInsertable().
      //        setLabel("MATCODEBUDGETNO: Budget No").
      //        setSize(50);
//      headblk.addField("BUDGET_LINE_NO").
//              setInsertable().
//              setHidden().
//              setLabel("MATCODEBUDGETLINENO: Budget Line No").
//              setSize(30).
//              setDynamicLOV("PROJECT_BUDGET_LINE");
//      headblk.addField("BUDGET_NAME").
//              setFunction("PROJECT_BUDGET_LINE_API.GET_BUDGET_NAME ( :PROJ_NO,:BUDGET_LINE_NO)").
//              setLabel("MATCODEBUDGETNAME: Budget Name").
//              setHidden().
//              setSize(25).
//              setReadOnly();
//      mgr.getASPField("BUDGET_LINE_NO").setValidation("BUDGET_NAME");
      headblk.addField("MAT_UNIT").
              setInsertable().
              setLabel("MATCODEMATUNIT: Mat Unit").
              setSize(30).
              setDynamicLOV("ISO_UNIT");
      headblk.addField("PERSON_ID").
              setDbName("CREATE_PERSON").
              setInsertable().
              setLabel("MATCODECREATEPERSON: Create Person").
              setSize(30).
              setDynamicLOV("PERSON_INFO");
      headblk.addField("PERSON_INFO_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :PERSON_ID)").
              setLabel("MATCODEPERSONINFONAME: Person Info Name").
              setSize(25).
              setReadOnly();
      mgr.getASPField("PERSON_ID").setValidation("PERSON_INFO_NAME");
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setLabel("MATCODECREATETIME: Create Time").
              setSize(30);
      headblk.addField("MANUFACTORY").
              setInsertable().
              setLabel("MATCODEMANUFACTORY: Manufactory").
              setSize(112);
      headblk.addField("NOTE").
              setInsertable().
              setLabel("MATCODENOTE: Note").
              setSize(112).
              setHeight(5);
      headblk.setView("MAT_CODE");
      headblk.defineCommand("MAT_CODE_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("MATCODETBLHEAD: Mat Codes");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setDataSpan("MANUFACTORY", 5);
      headlay.setDataSpan("NOTE", 5);
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
//      headlay.setSimple("BUDGET_NAME");
      headlay.setSimple("MAT_TYPE_NAME");
      headlay.setSimple("PERSON_INFO_NAME");
//      headlay.setSimple("CONTRACT_DESC");
//      headlay.setSimple("ITEM_DESC");



   }



   public void  adjust()
   {
      // fill function body
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "MATCODEDESC: Mat Code";
   }


   protected String getTitle()
   {
      return "MATCODETITLE: Mat Code";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());

   }
}
