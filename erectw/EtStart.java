/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.erectw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class EtStart extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.erectw.EtStart");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------
   private ASPTabContainer tab;
   
   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   protected ASPBuffer  keys;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock et_st_eliminate_line_blk;
   private ASPRowSet et_st_eliminate_line_set;
   private ASPCommandBar et_st_eliminate_line_bar;
   private ASPTable et_st_eliminate_line_tbl;
   private ASPBlockLayout et_st_eliminate_line_lay;

   private ASPBlock et_st_equ_status_line_blk;
   private ASPRowSet et_st_equ_status_line_set;
   private ASPCommandBar et_st_equ_status_line_bar;
   private ASPTable et_st_equ_status_line_tbl;
   private ASPBlockLayout et_st_equ_status_line_lay;

   private ASPBlock et_st_plan_line_blk;
   private ASPRowSet et_st_plan_line_set;
   private ASPCommandBar et_st_plan_line_bar;
   private ASPTable et_st_plan_line_tbl;
   private ASPBlockLayout et_st_plan_line_lay;

   private ASPBlock et_st_record_line_blk;
   private ASPRowSet et_st_record_line_set;
   private ASPCommandBar et_st_record_line_bar;
   private ASPTable et_st_record_line_tbl;
   private ASPBlockLayout et_st_record_line_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  EtStart (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      ASPManager mgr = getASPManager();
      super.run();
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else
         okFind();
      adjust();
      tab.saveActiveTab();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("ETSTARTNODATA: No data found.");
         headset.clear();
      }
      eval( et_st_eliminate_line_set.syncItemSets() );
      eval( et_st_equ_status_line_set.syncItemSets() );
      eval( et_st_plan_line_set.syncItemSets() );
      eval( et_st_record_line_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","ET_START_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(et_st_eliminate_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,et_st_eliminate_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;
      
      cmd = trans.addEmptyCommand("ITEM1","ET_ST_ELIMINATE_LINE_API.New__",et_st_eliminate_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_ID", headset.getValue("ID"));

      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      et_st_eliminate_line_set.addRow(data);
   }

   public void okFindITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
   
      q = trans.addQuery(et_st_equ_status_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,et_st_equ_status_line_blk);
      headset.goTo(headrowno);
   }

   public void newRowITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM2","ET_ST_EQU_STATUS_LINE_API.New__",et_st_equ_status_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM1_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM1_ID", headset.getValue("ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM2/DATA");
      et_st_equ_status_line_set.addRow(data);
   }
   public void okFindITEM3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(et_st_plan_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,et_st_plan_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM3","ET_ST_PLAN_LINE_API.New__",et_st_plan_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM2_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM2_ID", headset.getValue("ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM3/DATA");
      et_st_plan_line_set.addRow(data);
   }
   public void okFindITEM4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(et_st_record_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,et_st_record_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM4","ET_ST_RECORD_LINE_API.New__",et_st_record_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM3_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM3_ID", headset.getValue("ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM4/DATA");
      et_st_record_line_set.addRow(data);
   }
   public void activateEtPlan(){
      tab.setActiveTab(1);
      // okFindITEM3();
   }  
   
   public void activateEquStatus(){
      tab.setActiveTab(2);
     // okFindITEM2();
      
   }
   public void activateEliminate(){
      tab.setActiveTab(3);
      okFindITEM1();
   }
   public void activateEtRecord(){
      tab.setActiveTab(4);
   }
   
   public void validate()
   {
       ASPManager mgr = getASPManager();
       ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
       ASPCommand cmd;
       String val = mgr.readValue("VALIDATE"); 
       String txt = "";
       String projDesc = "";
       String projType = "";
       String projTypeDesc = "";
       
       if("PROJ_NO".equals(val)) {
          cmd = trans.addCustomFunction("PROJDESC", 
                "GENERAL_PROJECT_API.GET_PROJ_DESC", "PROJ_NAME");
          cmd.addParameter("PROJ_NO");
          
          cmd = trans.addCustomFunction("PROJTYPE", 
                "GENERAL_PROJECT_API.Get_Project_Type_Id", "PROJECT_TYPE_NO");
          cmd.addParameter("PROJ_NO");         
          
          trans = mgr.validate(trans);
          projDesc = trans.getValue("PROJDESC/DATA/PROJ_NAME");
          projType = trans.getValue("PROJTYPE/DATA/PROJECT_TYPE_NO");
          
          trans.clear();
          cmd.clear();         
          cmd = trans.addCustomFunction("PROJTYPEDESC", "PROJECT_TYPE_API.Get_Project_Type_Name", "PROJECT_TYPE_NAME");          
          cmd.addParameter("PROJECT_TYPE_NO",projType);
          
          trans = mgr.validate(trans);         
          projTypeDesc = trans.getValue("PROJTYPEDESC/DATA/PROJECT_TYPE_NAME");
          
          txt = ((mgr.isEmpty(projDesc)) ? "" : projDesc) + "^" + ((mgr.isEmpty(projType)) ? "" : projType) + "^";
          txt = txt + ((mgr.isEmpty(projTypeDesc)) ? "" : projTypeDesc) + "^";
          mgr.responseWrite(txt);
       }
       mgr.endResponse();
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setReadOnly().
              setCustomValidation("PROJ_NO", "PROJ_NAME,PROJECT_TYPE_NO,PROJECT_TYPE_NAME").
              setDynamicLOV("GENERAL_PROJECT").
              setLabel("ETSTARTPROJNO: Proj No").
              setSize(15);
      headblk.addField("PROJ_NAME").
              setReadOnly().
              setFunction("GENERAL_PROJECT_API.Get_Proj_Desc(:PROJ_NO)").
              setLabel("ETSTARTPROJNAME: Project Type Name").
              setSize(30);
//      mgr.getASPField("PROJ_NO").setValidation("PROJ_NAME");
      headblk.addField("PROJECT_TYPE_NO").
              setInsertable().
              setHidden().
              setLabel("ETSTARTPROJECTTYPENO: Project Type No").
              setSize(15);
      headblk.addField("PROJECT_TYPE_NAME").
              setReadOnly().
              setFunction("PROJECT_TYPE_API.Get_Project_Type_Name(GENERAL_PROJECT_API.Get_Project_Type_Id ( :PROJ_NO))").
              setLabel("ETSTARTPROJECTTYPENAME: Project Type Name").
              setSize(20);
//      mgr.getASPField("PROJECT_TYPE_NO").setValidation("PROJECT_TYPE_NAME");
      headblk.addField("ID").
              setMandatory().
              setHidden().
              setLabel("ETSTARTID: Id").
              setSize(20);
      headblk.addField("OUTLINE_NO").
              setInsertable().
              setDynamicLOV("ET_OUTLINE","PROJECT_TYPE_NO").
              setLabel("ETSTARTOUTLINENO: Outline No").
              setSize(20);
      headblk.addField("OUTLINE_CONTENT").
             setReadOnly().
             setFunction("ET_OUTLINE_API.Get_Outline_Content(:OUTLINE_NO)").
             setLabel("ETSTARTOUTLINECONTENT: Outline Content").
             setSize(20);
      mgr.getASPField("OUTLINE_NO").setValidation("OUTLINE_CONTENT");
      headblk.addField("TARGET_NO").
              setInsertable().
              setDynamicLOV("ET_TARGET","PROJECT_TYPE_NO").
              setLabel("ETSTARTTARGETNO: Target No").
              setSize(20);
      headblk.addField("TARGET_CONTENT").
              setReadOnly().
              setFunction("ET_TARGET_API.Get_Targer_Desc(:OUTLINE_NO)").
              setLabel("ETSTARTTARGETCOMTTENT: Target Content").
              setSize(20);
      mgr.getASPField("TARGET_NO").setValidation("TARGET_CONTENT");
      headblk.addField("STAGE_NO").
              setInsertable().
              setWfProperties().
              setDynamicLOV("ET_STAGE","PROJECT_TYPE_NO").
              setLabel("ETSTARTSTAGENO: Stage No").
              setSize(20);
      headblk.addField("STAGE_DESC").
              setReadOnly().
              setWfProperties().
              setFunction("ET_STAGE_API.Get_Stage_Desc(:STAGE_NO)").
              setLabel("ETSTARTSTAGEDESC: Stage Desc").
              setSize(20);
      mgr.getASPField("STAGE_NO").setValidation("STAGE_DESC");
      headblk.addField("ET_ORG").
              setInsertable().
              setDynamicLOV("PERSON_ZONE").
              setLabel("ETSTARTETORG: Et Org").
              setSize(20);
      headblk.addField("ET_ORG_NAME").
              setReadOnly().
              setLabel("ETSTARTETORGNAME: Et Org Name").
              setFunction("GENERAL_ZONE_API.Get_Zone_Desc (:ET_ORG)").
              setSize(20);
      mgr.getASPField("ET_ORG").setValidation("ET_ORG_NAME");
      headblk.addField("RESPONSE_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("ETSTARTRESPONSEPERSON: Response Person").
              setSize(20);
      headblk.addField("RESPONSE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:RESPONSE_PERSON)").
              setLabel("ETSTARTRESPONSEPERSONNAME: Response Person Name").
              setSize(20);
      mgr.getASPField("RESPONSE_PERSON").setValidation("RESPONSE_PERSON_NAME");
      headblk.addField("CENTRA_DEPT").
              setInsertable().
              setDynamicLOV("PERSON_ZONE").
              setLabel("ETSTARTCENTRADEPT: Centra Dept").
              setSize(20);
      headblk.addField("CENTRA_DEPT_NAME").
              setReadOnly().
              setLabel("ETSTARTCENTRADEPTNAME: Centra Dept Name").
              setFunction("GENERAL_ZONE_API.Get_Zone_Desc (:CENTRA_DEPT)").
              setSize(20);
      mgr.getASPField("CENTRA_DEPT").setValidation("CENTRA_DEPT_NAME");
      headblk.addField("SUPERVISOR").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("ETSTARTSUPERVISOR: Supervisor").
              setSize(20);
      headblk.addField("SUPERVISOR_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:SUPERVISOR)").
              setLabel("ETSTARTSUPERVISORNAMES: Supervisor Name").
              setSize(20);
      mgr.getASPField("SUPERVISOR").setValidation("SUPERVISOR_NAME");  
      headblk.addField("BUILD_ORG").
              setInsertable().
              setLabel("ETSTARTBUILDORG: Build Org").
              setSize(50);
      headblk.addField("BRANCH_LEADER").
              setInsertable().
              setDynamicLOV("PERSON_INFO_USER").
              setLabel("ETSTARTBRANCHLEADER: Branch Leader").
              setSize(20);
      headblk.addField("BRANCH_LEADER_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:BRANCH_LEADER)").
              setLabel("ETSTARTREBRANCHLEADERNNAME: Branch Leader Name").
              setSize(20);
      mgr.getASPField("BRANCH_LEADER").setValidation("BRANCH_LEADER_NAME");
      headblk.addField("NOTE").
              setInsertable().
              setHeight(5).
              setMaxLength(500).
              setLabel("ETSTARTNOTE: Note").
              setSize(50);
      headblk.setView("ET_START");
      headblk.defineCommand("ET_START_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("ETSTARTTBLHEAD: Et Starts");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("PROJ_NAME");
      headlay.setSimple("OUTLINE_CONTENT");
      headlay.setSimple("TARGET_CONTENT");
      headlay.setSimple("STAGE_DESC");
      headlay.setSimple("CENTRA_DEPT_NAME");
      headlay.setSimple("ET_ORG_NAME");
      headlay.setSimple("SUPERVISOR_NAME");
      headlay.setSimple("RESPONSE_PERSON_NAME");
      headlay.setSimple("BRANCH_LEADER_NAME");
//      headlay.setSimple("PROJECT_TYPE_NAME");
      headlay.setDataSpan("NOTE", 5);
      headbar.addCustomCommand("activateEliminate",mgr.translate("ETSTARTELIMINATE: Eliminate Line"));
      headbar.addCustomCommand("activateEquStatus",mgr.translate("ETSTARTEQUSTATUS: Equ Status"));
      headbar.addCustomCommand("activateEtPlan",mgr.translate("ETSTARTPLAN: Plan Line"));
      headbar.addCustomCommand("activateEtRecord",mgr.translate("ETSTARTRECORD: Record Line"));

      et_st_eliminate_line_blk = mgr.newASPBlock("ITEM1");
      et_st_eliminate_line_blk.addField("ITEM0_OBJID").
                               setHidden().
                               setDbName("OBJID");
      et_st_eliminate_line_blk.addField("ITEM0_OBJVERSION").
                               setHidden().
                               setDbName("OBJVERSION");
      et_st_eliminate_line_blk.addField("ITEM0_PROJ_NO").
                               setDbName("PROJ_NO").
                               setHidden().
                               setMandatory().
                               setReadOnly().
                               setLabel("ETSTELIMINATELINEITEM0PROJNO: Proj No").
                               setSize(50);
      et_st_eliminate_line_blk.addField("ITEM0_ID").
                               setDbName("ID").
                               setHidden().
                               setMandatory().
                               setReadOnly().
                               setLabel("ETSTELIMINATELINEITEM0ID: Id").
                               setSize(50);
      et_st_eliminate_line_blk.addField("ITEM0_LINE_NO").
                               setMandatory().
                               setReadOnly().
                               setDbName("LINE_NO").
                               setLabel("ETSTELIMINATELINELINENO: Line No").
                               setSize(20);
      et_st_eliminate_line_blk.addField("ITEM0_DEFECT_CONTENT").
                               setInsertable().
                               setHeight(4).
                               setDbName("DEFECT_CONTENT").
                               setLabel("ETSTELIMINATELINEDEFECTCONTENT: Defect Content").
                               setSize(150);
      et_st_eliminate_line_blk.addField("ITEM0_NOTE").
                               setDbName("NOTE").
                               setInsertable().
                               setLabel("ETSTELIMINATELINEITEM0NOTE: Note").
                               setHeight(4).
                               setSize(150);
      
      et_st_eliminate_line_blk.addField("ITEM0_REG_DEPT").
                               setInsertable().
                               setDynamicLOV("PERSON_ZONE").
                               setDbName("REG_DEPT").
                               setLabel("ETSTELIMINATELINEREGDEPT: Reg Dept").
                               setSize(20);
      et_st_eliminate_line_blk.addField("ITEM0_REG_DEPT_NAME").
                               setReadOnly().
                               setLabel("ETSTELIMINATELINEREGDEPTNAME: Reg Dept Name").
                               setFunction("GENERAL_ZONE_API.Get_Zone_Desc (:ITEM0_REG_DEPT)").
                               setSize(20);
      mgr.getASPField("ITEM0_REG_DEPT").setValidation("ITEM0_REG_DEPT_NAME");
      et_st_eliminate_line_blk.addField("ITEM0_ELIMINATE_DEPT").
                               setInsertable().
                               setDynamicLOV("PERSON_ZONE").
                               setDbName("ELIMINATE_DEPT").
                               setLabel("ETSTELIMINATELINEELIMINATEDEPT: Eliminate Dept").
                               setSize(20);
      et_st_eliminate_line_blk.addField("ITEM0_ELIMINATE_DEPT_NAME").
                               setReadOnly().
                               setLabel("ETSTELIMINATELINEELIMINATEDEPTNAME: Eliminate Dept Name").
                               setFunction("GENERAL_ZONE_API.Get_Zone_Desc (:ITEM0_ELIMINATE_DEPT)").
                               setSize(20);
      mgr.getASPField("ITEM0_ELIMINATE_DEPT").setValidation("ITEM0_ELIMINATE_DEPT_NAME");
      et_st_eliminate_line_blk.addField("ITEM0_REG_PERSON").
                               setInsertable().
                               setDbName("REG_PERSON").
                               setDynamicLOV("PERSON_INFO_USER").
                               setLabel("ETSTELIMINATELINEREGPERSON: Reg Person").
                               setSize(20);
      et_st_eliminate_line_blk.addField("ITEM0_REG_PERSON_NAME").
                               setReadOnly().
                               setFunction("PERSON_INFO_API.Get_Name(:ITEM0_REG_PERSON)").
                               setLabel("ETSTELIMINATELINEREGPERSONNAME: Reg Person Name").
                               setSize(20);
      mgr.getASPField("ITEM0_REG_PERSON").setValidation("ITEM0_REG_PERSON_NAME");
      et_st_eliminate_line_blk.addField("ITEM0_RESPON_PERSON").
                               setDbName("RESPON_PERSON").
                               setDynamicLOV("PERSON_INFO_USER").
                               setLabel("ETSTELIMINATELINERESPONPERSON: Respon Person").
                               setSize(20);
      et_st_eliminate_line_blk.addField("ITEM0_RESPON_PERSON_NAME").
                               setReadOnly().
                               setFunction("PERSON_INFO_API.Get_Name(:ITEM0_RESPON_PERSON)").
                               setLabel("ETSTELIMINATELINERESPONPERSONNAME: Respon Person Name").
                               setSize(20);
      mgr.getASPField("ITEM0_RESPON_PERSON").setValidation("ITEM0_RESPON_PERSON_NAME");      
      et_st_eliminate_line_blk.addField("ITEM0_REG_TIME","Date").
                               setReadOnly().
                               setDbName("REG_TIME").
                               setLabel("ETSTELIMINATELINEREGTIME: Reg Time").
                               setSize(30);
      et_st_eliminate_line_blk.setView("ET_ST_ELIMINATE_LINE");
      et_st_eliminate_line_blk.defineCommand("ET_ST_ELIMINATE_LINE_API","New__,Modify__,Remove__");
      et_st_eliminate_line_blk.setMasterBlock(headblk);
      et_st_eliminate_line_set = et_st_eliminate_line_blk.getASPRowSet();
      et_st_eliminate_line_bar = mgr.newASPCommandBar(et_st_eliminate_line_blk);
      et_st_eliminate_line_bar.defineCommand(et_st_eliminate_line_bar.OKFIND, "okFindITEM1");
      et_st_eliminate_line_bar.defineCommand(et_st_eliminate_line_bar.NEWROW, "newRowITEM1");
      et_st_eliminate_line_tbl = mgr.newASPTable(et_st_eliminate_line_blk);
      et_st_eliminate_line_tbl.setTitle("ETSTELIMINATELINEITEMHEAD1: EtStEliminateLine");
      et_st_eliminate_line_tbl.enableRowSelect();
      et_st_eliminate_line_tbl.setWrap();
      et_st_eliminate_line_lay = et_st_eliminate_line_blk.getASPBlockLayout();
      et_st_eliminate_line_lay.setDefaultLayoutMode(et_st_eliminate_line_lay.MULTIROW_LAYOUT);
      et_st_eliminate_line_lay.setSimple("ITEM0_REG_PERSON_NAME");
      et_st_eliminate_line_lay.setSimple("ITEM0_RESPON_PERSON_NAME");
      et_st_eliminate_line_lay.setSimple("ITEM0_REG_DEPT_NAME");
      et_st_eliminate_line_lay.setSimple("ITEM0_ELIMINATE_DEPT_NAME");
      et_st_eliminate_line_lay.setDataSpan("ITEM0_LINE_NO", 5);
      et_st_eliminate_line_lay.setDataSpan("ITEM0_DEFECT_CONTENT", 5);
      et_st_eliminate_line_lay.setDataSpan("ITEM0_RESPON_PERSON", 5);
      et_st_eliminate_line_lay.setDataSpan("ITEM0_NOTE", 5);
      
      et_st_equ_status_line_blk = mgr.newASPBlock("ITEM2");
      et_st_equ_status_line_blk.addField("ITEM1_OBJID").
                                setHidden().
                                setDbName("OBJID");
      et_st_equ_status_line_blk.addField("ITEM1_OBJVERSION").
                                setHidden().
                                setDbName("OBJVERSION");
      et_st_equ_status_line_blk.addField("ITEM1_PROJ_NO").
                                setDbName("PROJ_NO").
                                setMandatory().
                                setHidden().
                                setReadOnly().
                                setLabel("ETSTEQUSTATUSLINEITEM1PROJNO: Proj No").
                                setSize(50);
      et_st_equ_status_line_blk.addField("ITEM1_ID").
                                setDbName("ID").
                                setHidden().
                                setMandatory().
                                setReadOnly().
                                setLabel("ETSTEQUSTATUSLINEITEM1ID: Id").
                                setSize(50);
      et_st_equ_status_line_blk.addField("ITEM1_LINE_NO").
                                setDbName("LINE_NO").
                                setReadOnly().
                                setMandatory().
                                setLabel("ETSTEQUSTATUSLINEITEM1LINENO: Line No").
                                setSize(50);
      et_st_equ_status_line_blk.addField("EQU_NO").
                                setInsertable().
                                setDynamicLOV("MAT_CODE").
                                setLabel("ETSTEQUSTATUSLINEEQUNO: Equ No").
                                setSize(20);
      et_st_equ_status_line_blk.addField("EQU_NAME").
                                setReadOnly().
                                setFunction("MAT_CODE_API.Get_Mat_Name(:ITEM1_PROJ_NO,:EQU_NO)").
                                setLabel("ETSTEQUSTATUSLINEEQUNAME: Equ Name").
                                setSize(20);
      mgr.getASPField("EQU_NO").setValidation("EQU_NAME");
      et_st_equ_status_line_blk.addField("STATUS_DESC").
                                setInsertable().
                                setHeight(4).
                                setLabel("ETSTEQUSTATUSLINESTATUSDESC: Status Desc").
                                setSize(150);
      et_st_equ_status_line_blk.addField("CENTRA_PROFESSION").
                                setInsertable().
                                setHidden().
                                setLabel("ETSTEQUSTATUSLINECENTRAPROFESSIONS: Centra Profession").
                                setSize(50);
      et_st_equ_status_line_blk.addField("ITEM1_NOTE").
                                setDbName("NOTE").
                                setInsertable().
                                setHeight(4).
                                setLabel("ETSTEQUSTATUSLINEITEM1NOTE: Note").
                                setSize(150);
      et_st_equ_status_line_blk.addField("ITEM1_PROFESSION_NO").
                                setDbName("PROFESSION_NO").
                                setInsertable().
                                setDynamicLOV("ET_PROFESSION_TYPE").
                                setLabel("ETSTEQUSTATUSLINEITEM1PROFESSIONNO: Profession No").
                                setSize(20);
      et_st_equ_status_line_blk.addField("ITEM1_PROFESSION_DESC").
                                setReadOnly().
                                setFunction("ET_PROFESSION_TYPE_API.Get_Profession_Desc(:ITEM1_PROFESSION_NO)").
                                setLabel("ETSTEQUSTATUSLINEITEM1PROFESSIONDESC: Profession Description").
                                setSize(20);
      mgr.getASPField("ITEM1_PROFESSION_NO").setValidation("ITEM1_PROFESSION_DESC");
      et_st_equ_status_line_blk.addField("ITEM1_RESPON_PERSON").
                                setDynamicLOV("PERSON_INFO_USER").
                                setInsertable().
                                setDbName("RESPON_PERSON").
                                setLabel("ETSTEQUSTATUSLINEITEM1RESPONPERSON: Respon Person").
                                setSize(20);
      et_st_equ_status_line_blk.addField("ITEM1_RESPON_PERSON_NAME").
                                setReadOnly().
                                setFunction("PERSON_INFO_API.Get_Name(:ITEM1_RESPON_PERSON)").
                                setLabel("ETSTEQUSTATUSLINEITEM1RESPONPERSONNAME: Respon Person NAME").
                                setSize(20);
      mgr.getASPField("ITEM1_RESPON_PERSON").setValidation("ITEM1_RESPON_PERSON_NAME");
           
      et_st_equ_status_line_blk.setView("ET_ST_EQU_STATUS_LINE");
      et_st_equ_status_line_blk.defineCommand("ET_ST_EQU_STATUS_LINE_API","New__,Modify__,Remove__");
      et_st_equ_status_line_blk.setMasterBlock(headblk);
      et_st_equ_status_line_set = et_st_equ_status_line_blk.getASPRowSet();
      et_st_equ_status_line_bar = mgr.newASPCommandBar(et_st_equ_status_line_blk);
      et_st_equ_status_line_bar.defineCommand(et_st_equ_status_line_bar.OKFIND, "okFindITEM2");
      et_st_equ_status_line_bar.defineCommand(et_st_equ_status_line_bar.NEWROW, "newRowITEM2");
      et_st_equ_status_line_tbl = mgr.newASPTable(et_st_equ_status_line_blk);
      et_st_equ_status_line_tbl.setTitle("ETSTEQUSTATUSLINEITEMHEAD2: EtStEquStatusLine");
      et_st_equ_status_line_tbl.enableRowSelect();
      et_st_equ_status_line_tbl.setWrap();
      et_st_equ_status_line_lay = et_st_equ_status_line_blk.getASPBlockLayout();
      et_st_equ_status_line_lay.setDefaultLayoutMode(et_st_equ_status_line_lay.MULTIROW_LAYOUT);
      et_st_equ_status_line_lay.setSimple("ITEM1_RESPON_PERSON_NAME");
      et_st_equ_status_line_lay.setSimple("ITEM1_PROFESSION_DESC");
      et_st_equ_status_line_lay.setSimple("EQU_NAME");
      et_st_equ_status_line_lay.setDataSpan("STATUS_DESC",5);
      et_st_equ_status_line_lay.setDataSpan("ITEM1_NOTE",5);
      
      
      
      et_st_plan_line_blk = mgr.newASPBlock("ITEM3");
      et_st_plan_line_blk.addField("ITEM2_OBJID").
                          setHidden().
                          setDbName("OBJID");
      et_st_plan_line_blk.addField("ITEM2_OBJVERSION").
                          setHidden().
                          setDbName("OBJVERSION");
      et_st_plan_line_blk.addField("ITEM2_PROJ_NO").
                          setDbName("PROJ_NO").
                          setHidden().
                          setMandatory().
                          setReadOnly().
                          setLabel("ETSTPLANLINEITEM2PROJNO: Proj No").
                          setSize(50);
      et_st_plan_line_blk.addField("ITEM2_ID").
                          setDbName("ID").
                          setHidden().
                          setMandatory().
                          setReadOnly().
                          setLabel("ETSTPLANLINEITEM2ID: Id").
                          setSize(50);
      et_st_plan_line_blk.addField("ITEM2_LINE_NO").
                          setDbName("LINE_NO").
                          setMandatory().
                          setReadOnly().
                          setLabel("ETSTPLANLINEITEM2LINENO: Line No").
                          setSize(50);
      et_st_plan_line_blk.addField("PLAN_CREATE_TIME","Date").
                          setReadOnly().
                          setLabel("ETSTPLANLINEPLANCREATETIME: Plan Create Time").
                          setSize(30);      
      et_st_plan_line_blk.addField("PLAN_CREATE_PERSON").
                          setInsertable().
                          setReadOnly().
                          setDynamicLOV("PERSON_INFO_USER").
                          setLabel("ETSTPLANLINEPLANCREATEPERSON: Plan Create Person").
                          setSize(20);
      et_st_plan_line_blk.addField("PLAN_CREATE_PERSON_NAME").
                          setReadOnly().
                          setFunction("PERSON_INFO_API.Get_Name(:PLAN_CREATE_PERSON)").
                          setLabel("ETSTPLANLINEPLANCREATEPERSONNAME: Plan Create Person Name").
                          setSize(20);
      mgr.getASPField("PLAN_CREATE_PERSON").setValidation("PLAN_CREATE_PERSON_NAME");
      et_st_plan_line_blk.addField("PLAN_CHECK_PERSON").
                          setInsertable().
                          setDynamicLOV("PERSON_INFO_USER").
                          setLabel("ETSTPLANLINEPLANCHECKPERSON: Plan Check Person").
                          setSize(20);
      et_st_plan_line_blk.addField("PLAN_CHECK_PERSON_NAME").
                          setReadOnly().
                          setFunction("PERSON_INFO_API.Get_Name(:PLAN_CHECK_PERSON)").
                          setLabel("ETSTPLANLINEPLANCHECKPERSONNAME: Plan Check Person Name").
                          setSize(20);
      mgr.getASPField("PLAN_CHECK_PERSON").setValidation("PLAN_CHECK_PERSON_NAME");
      et_st_plan_line_blk.addField("PLAN_CONTENT").
                          setInsertable().
                          setHeight(4).
                          setLabel("ETSTPLANLINEPLANCONTENT: Plan Content").
                          setSize(150);
      et_st_plan_line_blk.addField("ITEM2_NOTE").
                          setDbName("NOTE").
                          setInsertable().
                          setHeight(4).
                          setLabel("ETSTPLANLINEITEM2NOTE: Note").
                          setSize(150);
      et_st_plan_line_blk.setView("ET_ST_PLAN_LINE");
      et_st_plan_line_blk.defineCommand("ET_ST_PLAN_LINE_API","New__,Modify__,Remove__");
      et_st_plan_line_blk.setMasterBlock(headblk);
      et_st_plan_line_set = et_st_plan_line_blk.getASPRowSet();
      et_st_plan_line_bar = mgr.newASPCommandBar(et_st_plan_line_blk);
      et_st_plan_line_bar.defineCommand(et_st_plan_line_bar.OKFIND, "okFindITEM3");
      et_st_plan_line_bar.defineCommand(et_st_plan_line_bar.NEWROW, "newRowITEM3");
      et_st_plan_line_tbl = mgr.newASPTable(et_st_plan_line_blk);
      et_st_plan_line_tbl.setTitle("ETSTPLANLINEITEMHEAD3: EtStPlanLine");
      et_st_plan_line_tbl.enableRowSelect();
      et_st_plan_line_tbl.setWrap();
      et_st_plan_line_lay = et_st_plan_line_blk.getASPBlockLayout();
      et_st_plan_line_lay.setDefaultLayoutMode(et_st_plan_line_lay.MULTIROW_LAYOUT);
      et_st_plan_line_lay.setSimple("PLAN_CREATE_PERSON_NAME");
      et_st_plan_line_lay.setSimple("PLAN_CHECK_PERSON_NAME");
      et_st_plan_line_lay.setDataSpan("PLAN_CONTENT", 5);
      et_st_plan_line_lay.setDataSpan("ITEM2_NOTE", 5);
      
      
      et_st_record_line_blk = mgr.newASPBlock("ITEM4");
      et_st_record_line_blk.addField("ITEM3_OBJID").
                            setHidden().
                            setDbName("OBJID");
      et_st_record_line_blk.addField("ITEM3_OBJVERSION").
                            setHidden().
                            setDbName("OBJVERSION");
      et_st_record_line_blk.addField("ITEM3_PROJ_NO").
                            setDbName("PROJ_NO").
                            setMandatory().
                            setHidden().
                            setReadOnly().
                            setLabel("ETSTRECORDLINEITEM3PROJNO: Proj No").
                            setSize(50);
      et_st_record_line_blk.addField("ITEM3_ID").
                            setDbName("ID").
                            setMandatory().
                            setHidden().
                            setReadOnly().
                            setLabel("ETSTRECORDLINEITEM3ID: Id").
                            setSize(50);
      et_st_record_line_blk.addField("ITEM3_LINE_NO").
                            setDbName("LINE_NO").
                            setMandatory().
                            setReadOnly().
                            //setInsertable().
                            setLabel("ETSTRECORDLINEITEM3LINENO: Line No").
                            setSize(50);
      et_st_record_line_blk.addField("ORG").
                            setInsertable().
                            setDynamicLOV("PERSON_ZONE").
                            setLabel("ETSTRECORDLINEORG: Org").
                            setSize(20);
      et_st_record_line_blk.addField("ORG_NAME").
                            setReadOnly().
                            setLabel("ETSTRECORDLINEORGNAME: Org Name").
                            setFunction("GENERAL_ZONE_API.Get_Zone_Desc (:ORG)").
                            setSize(20);  
      mgr.getASPField("ORG").setValidation("ORG_NAME");
      et_st_record_line_blk.addField("RECORD_CONTENT").
                            setInsertable().
                            setHeight(4).
                            setLabel("ETSTRECORDLINERECORDCONTENT: Record Content").
                            setSize(150);
      et_st_record_line_blk.addField("ITEM3_NOTE").
                            setDbName("NOTE").
                            setInsertable().
                            setHeight(4).
                            setLabel("ETSTRECORDLINEITEM3NOTE: Note").
                            setSize(150);
      et_st_record_line_blk.addField("RECORD_PERSON").
                            setInsertable().
                            setDynamicLOV("PERSON_INFO_USER").
                            setLabel("ETSTRECORDLINERECORDPERSON: Record Person").
                            setSize(20);
      et_st_record_line_blk.addField("RECORD_PERSON_NAME").
                            setReadOnly().
                            setFunction("PERSON_INFO_API.Get_Name(:RECORD_PERSON)").
                            setLabel("ETSTRECORDLINERECORDPERSONNAME: Record Person Name").
                            setSize(20);
      mgr.getASPField("RECORD_PERSON").setValidation("RECORD_PERSON_NAME");

      et_st_record_line_blk.addField("RECORD_TIME","Date").
                            setReadOnly().
                            setLabel("ETSTRECORDLINERECORDTIME: Record Time").
                            setSize(30);
     

      et_st_record_line_blk.setView("ET_ST_RECORD_LINE");
      et_st_record_line_blk.defineCommand("ET_ST_RECORD_LINE_API","New__,Modify__,Remove__");
      et_st_record_line_blk.setMasterBlock(headblk);
      et_st_record_line_set = et_st_record_line_blk.getASPRowSet();
      et_st_record_line_bar = mgr.newASPCommandBar(et_st_record_line_blk);
      et_st_record_line_bar.defineCommand(et_st_record_line_bar.OKFIND, "okFindITEM4");
      et_st_record_line_bar.defineCommand(et_st_record_line_bar.NEWROW, "newRowITEM4");
      et_st_record_line_tbl = mgr.newASPTable(et_st_record_line_blk);
      et_st_record_line_tbl.setTitle("ETSTRECORDLINEITEMHEAD4: EtStRecordLine");
      et_st_record_line_tbl.enableRowSelect();
      et_st_record_line_tbl.setWrap();
      et_st_record_line_lay = et_st_record_line_blk.getASPBlockLayout();
      et_st_record_line_lay.setDefaultLayoutMode(et_st_record_line_lay.MULTIROW_LAYOUT);
      et_st_record_line_lay.setSimple("ORG_NAME");
      et_st_record_line_lay.setSimple("RECORD_PERSON_NAME");
      et_st_plan_line_lay.setDataSpan("RECORD_CONTENT", 5);
      et_st_plan_line_lay.setDataSpan("ITEM3_NOTE", 5);
      
      tab = newASPTabContainer();
      tab.setDirtyFlagEnabled(false);
      
      tab.addTab("ERCETTESTSPLAN: Plan Line","javascript:commandSet('MAIN.activateEtPlan','')");
      tab.addTab("ERCETTESTSEQUSTATUS: Equ Status","javascript:commandSet('MAIN.activateEquStatus','')");
      tab.addTab("ERCETTESTSELIMINATE: Eliminate Line","javascript:commandSet('MAIN.activateEliminate','')");
      tab.addTab("ERCETTESTSRECORD: Record Line","javascript:commandSet('MAIN.activateEtRecord','')");
         
      tab.setContainerWidth(1000);
      tab.setContainerHeight(400);
      tab.setLeftTabSpace(3);    
      tab.setContainerSpace(6);
      tab.setTabWidth(100);

      headbar.removeCustomCommand("activateEliminate");
      headbar.removeCustomCommand("activateEquStatus");
      headbar.removeCustomCommand("activateEtPlan");
      headbar.removeCustomCommand("activateEtRecord");
   }



   public void  adjust()
   {
      // fill function body
      try {
         super.adjust();
      } catch (FndException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
      }
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "ETSTARTDESC: Et Start";
   }


   protected String getTitle()
   {
      return "ETSTARTTITLE: Et Start";
   }

   public void  transferToDocInfo()
   {
      ASPManager mgr = getASPManager();

      headset.storeSelections();
      if (headlay.isSingleLayout())
         headset.selectRow();
      keys=headset.getSelectedRows("Et_Org,Build_Org");

      if (keys.countItems()>0)
      {
         mgr.transferDataTo("DocIssue.page",keys);
      }
      else
      {
         mgr.showAlert(mgr.translate("DOCMAWDOCTITLEOVWNORECSEL: No records selected!"));
      }

     }

   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
         appendToHTML(headlay.show());
      else 
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
   if ((headlay.isSingleLayout() || headlay.isCustomLayout())
         && headset.countRows() > 0) {
         appendToHTML(tab.showTabsInit());
   }         
   if ((headlay.isSingleLayout() || headlay.isCustomLayout())
         && headset.countRows() > 0) {
      if (tab.getActiveTab() == 1) {
            appendToHTML(et_st_plan_line_lay.show());
      } else if (tab.getActiveTab() == 2) {
            appendToHTML(et_st_equ_status_line_lay.show());
      } else if (tab.getActiveTab() == 3) {
            appendToHTML(et_st_eliminate_line_lay.show());
      } else if (tab.getActiveTab() == 4) {
            appendToHTML(et_st_record_line_lay.show());
      }
   }

   }

   @Override
   protected ASPBlock getBizWfBlock() {
      // TODO Auto-generated method stub
      return headblk;
   }


}
