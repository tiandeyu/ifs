/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.erectw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class EtReport extends  HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.erectw.EtReport");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------
   
   private ASPTabContainer tab; 
   
   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   protected ASPBuffer  keys;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock et_rp_end_project_line_blk;
   private ASPRowSet et_rp_end_project_line_set;
   private ASPCommandBar et_rp_end_project_line_bar;
   private ASPTable et_rp_end_project_line_tbl;
   private ASPBlockLayout et_rp_end_project_line_lay;

   private ASPBlock et_rp_exist_problem_line_blk;
   private ASPRowSet et_rp_exist_problem_line_set;
   private ASPCommandBar et_rp_exist_problem_line_bar;
   private ASPTable et_rp_exist_problem_line_tbl;
   private ASPBlockLayout et_rp_exist_problem_line_lay;

   private ASPBlock et_rp_result_record_line_blk;
   private ASPRowSet et_rp_result_record_line_set;
   private ASPCommandBar et_rp_result_record_line_bar;
   private ASPTable et_rp_result_record_line_tbl;
   private ASPBlockLayout et_rp_result_record_line_lay;

   private ASPBlock et_rp_solve_measure_line_blk;
   private ASPRowSet et_rp_solve_measure_line_set;
   private ASPCommandBar et_rp_solve_measure_line_bar;
   private ASPTable et_rp_solve_measure_line_tbl;
   private ASPBlockLayout et_rp_solve_measure_line_lay;

   private ASPBlock et_rp_summary_line_blk;
   private ASPRowSet et_rp_summary_line_set;
   private ASPCommandBar et_rp_summary_line_bar;
   private ASPTable et_rp_summary_line_tbl;
   private ASPBlockLayout et_rp_summary_line_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  EtReport (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      ASPManager mgr = getASPManager();
      super.run();
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else 
         okFind();
      adjust();
      tab.saveActiveTab();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("ETREPORTNODATA: No data found.");
         headset.clear();
      }
      eval( et_rp_end_project_line_set.syncItemSets() );
      eval( et_rp_exist_problem_line_set.syncItemSets() );
      eval( et_rp_result_record_line_set.syncItemSets() );
      eval( et_rp_solve_measure_line_set.syncItemSets() );
      eval( et_rp_summary_line_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","ET_REPORT_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(et_rp_end_project_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,et_rp_end_project_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","ET_RP_END_PROJECT_LINE_API.New__",et_rp_end_project_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_ID", headset.getValue("ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      et_rp_end_project_line_set.addRow(data);
   }
   public void okFindITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(et_rp_exist_problem_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,et_rp_exist_problem_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM2","ET_RP_EXIST_PROBLEM_LINE_API.New__",et_rp_exist_problem_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM1_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM1_ID", headset.getValue("ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM2/DATA");
      et_rp_exist_problem_line_set.addRow(data);
   }
   public void okFindITEM3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(et_rp_result_record_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,et_rp_result_record_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM3","ET_RP_RESULT_RECORD_LINE_API.New__",et_rp_result_record_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM2_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM2_ID", headset.getValue("ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM3/DATA");
      et_rp_result_record_line_set.addRow(data);
   }
   public void okFindITEM4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(et_rp_solve_measure_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,et_rp_solve_measure_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM4","ET_RP_SOLVE_MEASURE_LINE_API.New__",et_rp_solve_measure_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM3_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM3_ID", headset.getValue("ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM4/DATA");
      et_rp_solve_measure_line_set.addRow(data);
   }
   public void okFindITEM5()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(et_rp_summary_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,et_rp_summary_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM5()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM5","ET_RP_SUMMARY_LINE_API.New__",et_rp_summary_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM4_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM4_ID", headset.getValue("ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM5/DATA");
      et_rp_summary_line_set.addRow(data);
      }
   
      public void activateResultRecord(){
         tab.setActiveTab(1);
      }
      public void activateExistProblem(){
         tab.setActiveTab(2);
      }
      public void activateEndProject(){
         tab.setActiveTab(3);
      }
      public void activateSolveMeasure(){
         tab.setActiveTab(4);
      }
      public void activateRpSummary(){
         tab.setActiveTab(5);
      }

      
      public void validate()
      {
          ASPManager mgr = getASPManager();
          ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
          ASPCommand cmd;
          String val = mgr.readValue("VALIDATE"); 
          String txt = "";
          String projDesc = "";
          String projType = "";
          String projTypeDesc = "";

          if("PROJ_NO".equals(val)) {
             cmd = trans.addCustomFunction("PROJDESC", 
                   "GENERAL_PROJECT_API.GET_PROJ_DESC", "PROJ_NAME");
             cmd.addParameter("PROJ_NO");
             
             cmd = trans.addCustomFunction("PROJTYPE", 
                   "GENERAL_PROJECT_API.Get_Project_Type_Id", "PROJECT_TYPE_NO");
             cmd.addParameter("PROJ_NO");         
             
             trans = mgr.validate(trans);
             projDesc = trans.getValue("PROJDESC/DATA/PROJ_NAME");
             projType = trans.getValue("PROJTYPE/DATA/PROJECT_TYPE_NO");
             
             trans.clear();
             cmd.clear();         
             cmd = trans.addCustomFunction("PROJTYPEDESC", "PROJECT_TYPE_API.Get_Project_Type_Name", "PROJECT_TYPE_NAME");          
             cmd.addParameter("PROJECT_TYPE_NO",projType);
             
             trans = mgr.validate(trans);         
             projTypeDesc = trans.getValue("PROJTYPEDESC/DATA/PROJECT_TYPE_NAME");
             
             txt = ((mgr.isEmpty(projDesc)) ? "" : projDesc) + "^" + ((mgr.isEmpty(projType)) ? "" : projType) + "^";
             txt = txt + ((mgr.isEmpty(projTypeDesc)) ? "" : projTypeDesc) + "^";
             mgr.responseWrite(txt);
          }
          mgr.endResponse();
      }      
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setCustomValidation("PROJ_NO", "PROJ_NAME,PROJECT_TYPE_NO,PROJECT_TYPE_NAME").
              setDynamicLOV("GENERAL_PROJECT").
              setLabel("ETREPORTPROJNO: Proj No").
              setSize(15);
      headblk.addField("PROJ_NAME").
              setReadOnly().
              setFunction("GENERAL_PROJECT_API.Get_Proj_Desc(:PROJ_NO)").
              setLabel("ETREPORTPROJNAME: Proj Name").
              setSize(30);
//      mgr.getASPField("PROJ_NO").setValidation("PROJ_NAME");
      headblk.addField("PROJECT_TYPE_NO").
              setHidden().
              setFunction("GENERAL_PROJECT_API.Get_Project_Type_Id ( :PROJ_NO)").
//              setDynamicLOV("PROJECT_TYPE").
              setLabel("ETREPORTPROJECTTYPENO: Project Type No").
              setSize(15);
      headblk.addField("PROJECT_TYPE_NAME").
              setReadOnly().
              setFunction("PROJECT_TYPE_API.Get_Project_Type_Name(GENERAL_PROJECT_API.Get_Project_Type_Id ( :PROJ_NO))").
              setLabel("ETREPORTPROJECTTYPENAME: Project Type Name").
              setSize(30);
//      mgr.getASPField("PROJECT_TYPE_NO").setValidation("PROJECT_TYPE_NAME");
      headblk.addField("ID").
              setMandatory().
              setHidden().
              setLabel("ETREPORTID: Id").
              setSize(50);
      headblk.addField("STAGE_NO").
              setInsertable().
              setWfProperties().
              setDynamicLOV("ET_STAGE","PROJECT_TYPE_NO").
              setLabel("ETREPORTSTAGENO: Stage No").
              setSize(20);
      headblk.addField("STAGE_DESC").
              setWfProperties().
              setReadOnly().
              setFunction("ET_STAGE_API.Get_Stage_Desc(:STAGE_NO)").
              setLabel("ETREPORTSTAGEDESC: Stage Desc").
              setSize(30);
      mgr.getASPField("STAGE_NO").setValidation("STAGE_DESC");
      headblk.addField("TARGET_NO").
              setInsertable().
              setDynamicLOV("ET_TARGET","PROJECT_TYPE_NO").
              setLabel("ETREPORTTARGETNO: Target No").
              setSize(20);
      headblk.addField("TARGET_NAME").
              setReadOnly().
              setFunction("ET_TARGET_API.Get_Targer_Desc(:TARGET_NO)").
              setLabel("ETREPORTTARGETNAME: Target Name").
              setSize(30);
      mgr.getASPField("TARGET_NO").setValidation("TARGET_NAME");
      headblk.addField("ORG").
              setInsertable().
              setDynamicLOV("PERSON_ZONE").
              setLabel("ETREPORTORG: Org").
              setSize(20);
      headblk.addField("ORG_NAME").
              setReadOnly().
              setLabel("ETREPORTORGNAME: Org Name").
              setFunction("GENERAL_ZONE_API.Get_Zone_Desc (:ORG)").
              setSize(20);
      mgr.getASPField("ORG").setValidation("ORG_NAME");
      headblk.addField("CENTRA_DEPT").
              setInsertable().
              setDynamicLOV("PERSON_ZONE").
              setLabel("ETREPORTCENTRADEPT: Centra Dept").
              setSize(20);
      headblk.addField("CENTRA_DEPT_NAME").
              setReadOnly().
              setLabel("ETREPORTCENTRADEPTNAME: Centra Dept Name").
              setFunction("GENERAL_ZONE_API.Get_Zone_Desc (:CENTRA_DEPT)").
              setSize(20);
      mgr.getASPField("CENTRA_DEPT").setValidation("CENTRA_DEPT_NAME");
      headblk.addField("CREATE_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO_USER").
              setLabel("ETREPORTCREATEPERSON: Create Person").
              setSize(20);
      headblk.addField("CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:CREATE_PERSON)").
              setLabel("ETREPORTCREATEPERSONNAME: Create Person Name").
              setSize(20);
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
      headblk.addField("SUPERVISOR").
              setInsertable().
              setDynamicLOV("PERSON_INFO_LOV").
              setLabel("ETREPORTSUPERVISOR: Supervisor").
              setSize(20);
      headblk.addField("SUPERVISOR_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:SUPERVISOR)").
              setLabel("ETREPORTSUPERVISORNAME: Supervisor Name").
              setSize(20);
      mgr.getASPField("SUPERVISOR").setValidation("SUPERVISOR_NAME");
      headblk.addField("BRANCH_LEADER").
              setInsertable().
              setDynamicLOV("PERSON_INFO_LOV").
              setLabel("ETREPORTBRANCHLEADER: Branch Leader").
              setSize(20);
      headblk.addField("BRANCH_LEADER_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:BRANCH_LEADER)").
              setLabel("ETREPORTBRANCHLEADERNAME: Branch Leader Name").
              setSize(20);
      mgr.getASPField("BRANCH_LEADER").setValidation("BRANCH_LEADER_NAME");
      headblk.addField("NOTE").
              setInsertable().
              setHeight(5).
              setMaxLength(500).
              setLabel("ETREPORTNOTE: Note").
              setSize(50);
      headblk.setView("ET_REPORT");
      headblk.defineCommand("ET_REPORT_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("ETREPORTTBLHEAD: Et Reports");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("PROJ_NAME");
      headlay.setSimple("STAGE_DESC");
      headlay.setSimple("TARGET_NAME");
      headlay.setSimple("ORG_NAME");
      headlay.setSimple("CENTRA_DEPT_NAME");
//      headlay.setSimple("PROJECT_TYPE_NAME");
      headlay.setSimple("SUPERVISOR_NAME");
      headlay.setSimple("BRANCH_LEADER_NAME");
      headlay.setSimple("CREATE_PERSON_NAME");
      headlay.setDataSpan("NOTE", 5);
 
      headbar.addCustomCommand("activateResultRecord","Result Record");
      headbar.addCustomCommand("activateExistProblem", "Exist Problem");
      headbar.addCustomCommand("activateSolveMeasure", "Solve Measure");
      headbar.addCustomCommand("activateRpSummary", "RpSummary");
      headbar.addCustomCommand("activateEndProject", "End Project");


      et_rp_end_project_line_blk = mgr.newASPBlock("ITEM1");
      et_rp_end_project_line_blk.addField("ITEM0_OBJID").
                                 setHidden().
                                 setDbName("OBJID");
      et_rp_end_project_line_blk.addField("ITEM0_OBJVERSION").
                                 setHidden().
                                 setDbName("OBJVERSION");
      et_rp_end_project_line_blk.addField("ITEM0_PROJ_NO").
                                 setDbName("PROJ_NO").
                                 setMandatory().
                                 setHidden().
                                 setReadOnly().
                                 setLabel("ETRPENDPROJECTLINEITEM0PROJNO: Proj No").
                                 setSize(50);
      et_rp_end_project_line_blk.addField("ITEM0_ID").
                                 setDbName("ID").
                                 setMandatory().
                                 setHidden().
                                 setReadOnly().
                                 setLabel("ETRPENDPROJECTLINEITEM0ID: Id").
                                 setSize(50);
      et_rp_end_project_line_blk.addField("LINE_NO").
                                 setMandatory().
                                 setReadOnly().
                                 setLabel("ETRPENDPROJECTLINELINENO: Line No").
                                 setSize(50);
      et_rp_end_project_line_blk.addField("END_MANAGE").
                                 setInsertable().
                                 setHeight(5).
                                 setLabel("ETRPENDPROJECTLINEENDMANAGE: End Manage").
                                 setSize(150);
      et_rp_end_project_line_blk.addField("ITEM0_NOTE").
                                 setDbName("NOTE").
                                 setInsertable().
                                 setHeight(5).
                                 setLabel("ETRPENDPROJECTLINEITEM0NOTE: Note").
                                 setSize(150);
      et_rp_end_project_line_blk.addField("RECORD_PERSON").
                                 setReadOnly().
                                 setLabel("ETRPENDPROJECTLINERECORDPERSON: Record Person").
                                 setSize(20);
      et_rp_end_project_line_blk.addField("RECORD_TIME","Date").
                                 setReadOnly().
                                 setLabel("ETRPENDPROJECTLINERECORDTIME: Record Time").
                                 setSize(30);

      et_rp_end_project_line_blk.setView("ET_RP_END_PROJECT_LINE");
      et_rp_end_project_line_blk.defineCommand("ET_RP_END_PROJECT_LINE_API","New__,Modify__,Remove__");
      et_rp_end_project_line_blk.setMasterBlock(headblk);
      et_rp_end_project_line_set = et_rp_end_project_line_blk.getASPRowSet();
      et_rp_end_project_line_bar = mgr.newASPCommandBar(et_rp_end_project_line_blk);
      et_rp_end_project_line_bar.defineCommand(et_rp_end_project_line_bar.OKFIND, "okFindITEM1");
      et_rp_end_project_line_bar.defineCommand(et_rp_end_project_line_bar.NEWROW, "newRowITEM1");
      et_rp_end_project_line_tbl = mgr.newASPTable(et_rp_end_project_line_blk);
      et_rp_end_project_line_tbl.setTitle("ETRPENDPROJECTLINEITEMHEAD1: EtRpEndProjectLine");
      et_rp_end_project_line_tbl.enableRowSelect();
      et_rp_end_project_line_tbl.setWrap();
      et_rp_end_project_line_lay = et_rp_end_project_line_blk.getASPBlockLayout();
      et_rp_end_project_line_lay.setDefaultLayoutMode(et_rp_end_project_line_lay.MULTIROW_LAYOUT);
      et_rp_end_project_line_lay.setDataSpan("ITEM0_NOTE", 5);
      et_rp_end_project_line_lay.setDataSpan("LINE_NO", 5);
      et_rp_end_project_line_lay.setDataSpan("END_MANAGE", 5);
      
      
      et_rp_exist_problem_line_blk = mgr.newASPBlock("ITEM2");
      et_rp_exist_problem_line_blk.addField("ITEM1_OBJID").
                                   setHidden().
                                   setDbName("OBJID");
      et_rp_exist_problem_line_blk.addField("ITEM1_OBJVERSION").
                                   setHidden().
                                   setDbName("OBJVERSION");
      et_rp_exist_problem_line_blk.addField("ITEM1_PROJ_NO").
                                   setDbName("PROJ_NO").
                                   setMandatory().
                                   setHidden().
                                   setReadOnly().
                                   setLabel("ETRPEXISTPROBLEMLINEITEM1PROJNO: Proj No").
                                   setSize(50);
      et_rp_exist_problem_line_blk.addField("ITEM1_ID").
                                   setDbName("ID").
                                   setMandatory().
                                   setHidden().
                                   setReadOnly().
                                   setLabel("ETRPEXISTPROBLEMLINEITEM1ID: Id").
                                   setSize(50);
      et_rp_exist_problem_line_blk.addField("ITEM1_LINE_NO").
                                   setDbName("LINE_NO").
                                   setMandatory().
                                   setReadOnly().
                                   setLabel("ETRPEXISTPROBLEMLINEITEM1LINENO: Line No").
                                   setSize(50);
      et_rp_exist_problem_line_blk.addField("EXIST_PROBLEM").
                                   setInsertable().
                                   setHeight(4).
                                   setLabel("ETRPEXISTPROBLEMLINEEXISTPROBLEM: Exist Problem").
                                   setSize(150);
      et_rp_exist_problem_line_blk.addField("ITEM1_NOTE").
                                   setDbName("NOTE").
                                   setInsertable().
                                   setHeight(4).
                                   setLabel("ETRPEXISTPROBLEMLINEITEM1NOTE: Note").
                                   setSize(150);
      et_rp_exist_problem_line_blk.addField("ITEM1_RECORD_PERSON").
                                   setDbName("RECORD_PERSON").
                                   setReadOnly().
                                   setLabel("ETRPEXISTPROBLEMLINEITEM1RECORDPERSON: Record Person").
                                   setSize(20);
      et_rp_exist_problem_line_blk.addField("ITEM1_RECORD_TIME","Date").
                                   setDbName("RECORD_TIME").
                                   setReadOnly().
                                   setLabel("ETRPEXISTPROBLEMLINEITEM1RECORDTIME: Record Time").
                                   setSize(30);

      et_rp_exist_problem_line_blk.setView("ET_RP_EXIST_PROBLEM_LINE");
      et_rp_exist_problem_line_blk.defineCommand("ET_RP_EXIST_PROBLEM_LINE_API","New__,Modify__,Remove__");
      et_rp_exist_problem_line_blk.setMasterBlock(headblk);
      et_rp_exist_problem_line_set = et_rp_exist_problem_line_blk.getASPRowSet();
      et_rp_exist_problem_line_bar = mgr.newASPCommandBar(et_rp_exist_problem_line_blk);
      et_rp_exist_problem_line_bar.defineCommand(et_rp_exist_problem_line_bar.OKFIND, "okFindITEM2");
      et_rp_exist_problem_line_bar.defineCommand(et_rp_exist_problem_line_bar.NEWROW, "newRowITEM2");
      et_rp_exist_problem_line_tbl = mgr.newASPTable(et_rp_exist_problem_line_blk);
      et_rp_exist_problem_line_tbl.setTitle("ETRPEXISTPROBLEMLINEITEMHEAD2: EtRpExistProblemLine");
      et_rp_exist_problem_line_tbl.enableRowSelect();
      et_rp_exist_problem_line_tbl.setWrap();
      et_rp_exist_problem_line_lay = et_rp_exist_problem_line_blk.getASPBlockLayout();
      et_rp_exist_problem_line_lay.setDefaultLayoutMode(et_rp_exist_problem_line_lay.MULTIROW_LAYOUT);
      et_rp_exist_problem_line_lay.setDataSpan("ITEM1_NOTE", 5);
      et_rp_exist_problem_line_lay.setDataSpan("ITEM1_LINE_NO", 5);
      et_rp_exist_problem_line_lay.setDataSpan("EXIST_PROBLEM", 5);
      
      
      et_rp_result_record_line_blk = mgr.newASPBlock("ITEM3");
      et_rp_result_record_line_blk.addField("ITEM2_OBJID").
                                   setHidden().
                                   setDbName("OBJID");
      et_rp_result_record_line_blk.addField("ITEM2_OBJVERSION").
                                   setHidden().
                                   setDbName("OBJVERSION");
      et_rp_result_record_line_blk.addField("ITEM2_PROJ_NO").
                                   setDbName("PROJ_NO").
                                   setMandatory().
                                   setHidden().
                                   setReadOnly().
                                   setLabel("ETRPRESULTRECORDLINEITEM2PROJNO: Proj No").
                                   setSize(50);
      et_rp_result_record_line_blk.addField("ITEM2_ID").
                                   setDbName("ID").
                                   setMandatory().
                                   setReadOnly().
                                   setHidden().
                                   setLabel("ETRPRESULTRECORDLINEITEM2ID: Id").
                                   setSize(50);
      et_rp_result_record_line_blk.addField("ITEM2_LINE_NO").
                                   setDbName("LINE_NO").
                                   setMandatory().
                                   setReadOnly().
                                   setLabel("ETRPRESULTRECORDLINEITEM2LINENO: Line No").
                                   setSize(50);
      et_rp_result_record_line_blk.addField("RESULT_RECORD").
                                   setInsertable().
                                   setHeight(4).
                                   setLabel("ETRPRESULTRECORDLINERESULTRECORD: Result Record").
                                   setSize(150);
      et_rp_result_record_line_blk.addField("ITEM2_NOTE").
                                   setDbName("NOTE").
                                   setInsertable().
                                   setHeight(4).
                                   setLabel("ETRPRESULTRECORDLINEITEM2NOTE: Note").
                                   setSize(150);
      et_rp_result_record_line_blk.addField("ITEM2_RECORD_PERSON").
                                   setDbName("RECORD_PERSON").
                                   setReadOnly().
                                   setLabel("ETRPRESULTRECORDLINEITEM2RECORDPERSON: Record Person").
                                   setSize(20);
      et_rp_result_record_line_blk.addField("ITEM2_RECORD_TIME","Date").
                                   setDbName("RECORD_TIME").
                                   setReadOnly().
                                   setLabel("ETRPRESULTRECORDLINEITEM2RECORDTIME: Record Time").
                                   setSize(30);
      
      et_rp_result_record_line_blk.setView("ET_RP_RESULT_RECORD_LINE");
      et_rp_result_record_line_blk.defineCommand("ET_RP_RESULT_RECORD_LINE_API","New__,Modify__,Remove__");
      et_rp_result_record_line_blk.setMasterBlock(headblk);
      et_rp_result_record_line_set = et_rp_result_record_line_blk.getASPRowSet();
      et_rp_result_record_line_bar = mgr.newASPCommandBar(et_rp_result_record_line_blk);
      et_rp_result_record_line_bar.defineCommand(et_rp_result_record_line_bar.OKFIND, "okFindITEM3");
      et_rp_result_record_line_bar.defineCommand(et_rp_result_record_line_bar.NEWROW, "newRowITEM3");
      et_rp_result_record_line_tbl = mgr.newASPTable(et_rp_result_record_line_blk);
      et_rp_result_record_line_tbl.setTitle("ETRPRESULTRECORDLINEITEMHEAD3: EtRpResultRecordLine");
      et_rp_result_record_line_tbl.enableRowSelect();
      et_rp_result_record_line_tbl.setWrap();
      et_rp_result_record_line_lay = et_rp_result_record_line_blk.getASPBlockLayout();
      et_rp_result_record_line_lay.setDefaultLayoutMode(et_rp_result_record_line_lay.MULTIROW_LAYOUT);
      et_rp_result_record_line_lay.setDataSpan("ITEM2_NOTE", 5);
      et_rp_result_record_line_lay.setDataSpan("RESULT_RECORD", 5);
      et_rp_result_record_line_lay.setDataSpan("ITEM2_LINE_NO", 5);
      
      et_rp_solve_measure_line_blk = mgr.newASPBlock("ITEM4");
      et_rp_solve_measure_line_blk.addField("ITEM3_OBJID").
                                   setHidden().
                                   setDbName("OBJID");
      et_rp_solve_measure_line_blk.addField("ITEM3_OBJVERSION").
                                   setHidden().
                                   setDbName("OBJVERSION");
      et_rp_solve_measure_line_blk.addField("ITEM3_PROJ_NO").
                                   setDbName("PROJ_NO").
                                   setMandatory().
                                   setHidden().
                                   setReadOnly().
                                   setLabel("ETRPSOLVEMEASURELINEITEM3PROJNO: Proj No").
                                   setSize(50);
      et_rp_solve_measure_line_blk.addField("ITEM3_ID").
                                   setDbName("ID").
                                   setHidden().
                                   setMandatory().
                                   setReadOnly().
                                   setLabel("ETRPSOLVEMEASURELINEITEM3ID: Id").
                                   setSize(50);
      et_rp_solve_measure_line_blk.addField("ITEM3_LINE_NO").
                                   setDbName("LINE_NO").
                                   setMandatory().
                                   setReadOnly().
                                   setLabel("ETRPSOLVEMEASURELINEITEM3LINENO: Line No").
                                   setSize(50);
      et_rp_solve_measure_line_blk.addField("SOLUTION_MEASURE").
                                   setInsertable().
                                   setHeight(4).
                                   setLabel("ETRPSOLVEMEASURELINESOLUTIONMEASURE: Solution Measure").
                                   setSize(150);
      et_rp_solve_measure_line_blk.addField("ITEM3_NOTE").
                                   setDbName("NOTE").
                                   setInsertable().
                                   setHeight(4).
                                   setLabel("ETRPSOLVEMEASURELINEITEM3NOTE: Note").
                                   setSize(150);
      et_rp_solve_measure_line_blk.addField("ITEM3_RECORD_PERSON").
                                   setDbName("RECORD_PERSON").
                                   setReadOnly().
                                   setLabel("ETRPSOLVEMEASURELINEITEM3RECORDPERSON: Record Person").
                                   setSize(20);
      et_rp_solve_measure_line_blk.addField("ITEM3_RECORD_TIME","Date").
                                   setDbName("RECORD_TIME").
                                   setReadOnly().
                                   setLabel("ETRPSOLVEMEASURELINEITEM3RECORDTIME: Record Time").
                                   setSize(30);

      et_rp_solve_measure_line_blk.setView("ET_RP_SOLVE_MEASURE_LINE");
      et_rp_solve_measure_line_blk.defineCommand("ET_RP_SOLVE_MEASURE_LINE_API","New__,Modify__,Remove__");
      et_rp_solve_measure_line_blk.setMasterBlock(headblk);
      et_rp_solve_measure_line_set = et_rp_solve_measure_line_blk.getASPRowSet();
      et_rp_solve_measure_line_bar = mgr.newASPCommandBar(et_rp_solve_measure_line_blk);
      et_rp_solve_measure_line_bar.defineCommand(et_rp_solve_measure_line_bar.OKFIND, "okFindITEM4");
      et_rp_solve_measure_line_bar.defineCommand(et_rp_solve_measure_line_bar.NEWROW, "newRowITEM4");
      et_rp_solve_measure_line_tbl = mgr.newASPTable(et_rp_solve_measure_line_blk);
      et_rp_solve_measure_line_tbl.setTitle("ETRPSOLVEMEASURELINEITEMHEAD4: EtRpSolveMeasureLine");
      et_rp_solve_measure_line_tbl.enableRowSelect();
      et_rp_solve_measure_line_tbl.setWrap();
      et_rp_solve_measure_line_lay = et_rp_solve_measure_line_blk.getASPBlockLayout();
      et_rp_solve_measure_line_lay.setDefaultLayoutMode(et_rp_solve_measure_line_lay.MULTIROW_LAYOUT);
      et_rp_solve_measure_line_lay.setDataSpan("SOLUTION_MEASURE", 5);
      et_rp_solve_measure_line_lay.setDataSpan("ITEM3_LINE_NO", 5);
      et_rp_solve_measure_line_lay.setDataSpan("ITEM3_NOTE", 5);
      
      
      et_rp_summary_line_blk = mgr.newASPBlock("ITEM5");
      et_rp_summary_line_blk.addField("ITEM4_OBJID").
                             setHidden().
                             setDbName("OBJID");
      et_rp_summary_line_blk.addField("ITEM4_OBJVERSION").
                             setHidden().
                             setDbName("OBJVERSION");
      et_rp_summary_line_blk.addField("ITEM4_PROJ_NO").
                             setDbName("PROJ_NO").
                             setMandatory().
                             setHidden().
                             setReadOnly().
                             setLabel("ETRPSUMMARYLINEITEM4PROJNO: Proj No").
                             setSize(50);
      et_rp_summary_line_blk.addField("ITEM4_ID").
                             setDbName("ID").
                             setHidden().
                             setMandatory().
                             setReadOnly().
                             setLabel("ETRPSUMMARYLINEITEM4ID: Id").
                             setSize(50);
      et_rp_summary_line_blk.addField("ITEM4_LINE_NO").
                             setDbName("LINE_NO").
                             setMandatory().
                             setReadOnly().
                             setLabel("ETRPSUMMARYLINEITEM4LINENO: Line No").
                             setSize(50);
      et_rp_summary_line_blk.addField("SUMMARY").
                             setInsertable().
                             setHeight(4).
                             setLabel("ETRPSUMMARYLINESUMMARY: Summary").
                             setSize(150);
      et_rp_summary_line_blk.addField("ITEM4_NOTE").
                             setDbName("NOTE").
                             setInsertable().
                             setHeight(4).
                             setLabel("ETRPSUMMARYLINEITEM4NOTE: Note").
                             setSize(150);
      et_rp_summary_line_blk.addField("ITEM4_RECORD_PERSON").
                             setDbName("RECORD_PERSON").
                             setReadOnly().
                             setLabel("ETRPSUMMARYLINEITEM4RECORDPERSON: Record Person").
                             setSize(20);
      et_rp_summary_line_blk.addField("ITEM4_RECORD_TIME","Date").
                             setDbName("RECORD_TIME").
                             setReadOnly().
                             setLabel("ETRPSUMMARYLINEITEM4RECORDTIME: Record Time").
                             setSize(30);
      et_rp_summary_line_blk.setView("ET_RP_SUMMARY_LINE");
      et_rp_summary_line_blk.defineCommand("ET_RP_SUMMARY_LINE_API","New__,Modify__,Remove__");
      et_rp_summary_line_blk.setMasterBlock(headblk);
      et_rp_summary_line_set = et_rp_summary_line_blk.getASPRowSet();
      et_rp_summary_line_bar = mgr.newASPCommandBar(et_rp_summary_line_blk);
      et_rp_summary_line_bar.defineCommand(et_rp_summary_line_bar.OKFIND, "okFindITEM5");
      et_rp_summary_line_bar.defineCommand(et_rp_summary_line_bar.NEWROW, "newRowITEM5");
      et_rp_summary_line_tbl = mgr.newASPTable(et_rp_summary_line_blk);
      et_rp_summary_line_tbl.setTitle("ETRPSUMMARYLINEITEMHEAD5: EtRpSummaryLine");
      et_rp_summary_line_tbl.enableRowSelect();
      et_rp_summary_line_tbl.setWrap();
      et_rp_summary_line_lay = et_rp_summary_line_blk.getASPBlockLayout();
      et_rp_summary_line_lay.setDefaultLayoutMode(et_rp_summary_line_lay.MULTIROW_LAYOUT);
      et_rp_summary_line_lay.setDataSpan("ITEM4_LINE_NO", 5);
      et_rp_summary_line_lay.setDataSpan("SUMMARY", 5);
      et_rp_summary_line_lay.setDataSpan("ITEM4_NOTE", 5);
      

      tab = mgr.newASPTabContainer();
      tab.setDirtyFlagEnabled(false);
      
      tab.addTab("ERECTTESTSRPRESULTRECORD:  Result Record","javascript:commandSet('MAIN.activateResultRecord','')");
      tab.addTab("ERECTTESTSRPEXISTPROBLEM:  Exist Problem","javascript:commandSet('MAIN.activateExistProblem','')");
      tab.addTab("ERECTTESTSRPENDPROJECT:  End Project","javascript:commandSet('MAIN.activateEndProject','')");
      tab.addTab("ERECTTESTSRPSOLVEMEASURE: Solve Measure","javascript:commandSet('MAIN.activateSolveMeasure','')");
      tab.addTab("ERECTTESTSRPRPSUMMARY:  RpSummary","javascript:commandSet('MAIN.activateRpSummary','')");
      
      tab.setContainerWidth(1000);
      tab.setContainerHeight(400);
      tab.setLeftTabSpace(3);    
      tab.setContainerSpace(6);
      tab.setTabWidth(100);
      
      headbar.removeCustomCommand("activateResultRecord");
      headbar.removeCustomCommand("activateExistProblem");
      headbar.removeCustomCommand("activateSolveMeasure");
      headbar.removeCustomCommand("activateEndProject");
      headbar.removeCustomCommand("activateRpSummary");

   }



   public void  adjust() throws FndException
   {
      // fill function body
     super.adjust();
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "ETREPORTDESC: Et Report";
   }


   protected String getTitle()
   {
      return "ETREPORTTITLE: Et Report";
   }

   public void  transferToDocInfo()
   {
      ASPManager mgr = getASPManager();

      headset.storeSelections();
      if (headlay.isSingleLayout())
         headset.selectRow();
      keys=headset.getSelectedRows("Et_Org,Build_Org");

      if (keys.countItems()>0)
      {
         mgr.transferDataTo("DocIssue.page",keys);
      }
      else
      {
         mgr.showAlert(mgr.translate("DOCMAWDOCTITLEOVWNORECSEL: No records selected!"));
      }

     }

   protected void printContents() throws FndException
   {

      ASPManager mgr = getASPManager();

      if (headlay.isVisible())
         appendToHTML(headlay.show());
      else 
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
      if ((headlay.isSingleLayout() || headlay.isCustomLayout())
         && headset.countRows() > 0) {
         appendToHTML(tab.showTabsInit());
      }         
      if ((headlay.isSingleLayout() || headlay.isCustomLayout())
         && headset.countRows() > 0) {
      if (tab.getActiveTab() == 1) {
            appendToHTML(et_rp_result_record_line_lay.show());
      } else if (tab.getActiveTab() == 2) {
            appendToHTML(et_rp_exist_problem_line_lay.show());
      } else if (tab.getActiveTab() == 3) {
            appendToHTML((et_rp_end_project_line_lay.show()));
      } else if (tab.getActiveTab() == 4) {
            appendToHTML(et_rp_solve_measure_line_lay.show());
      }else if (tab.getActiveTab() == 5){
         appendToHTML(et_rp_summary_line_lay.show());
      }
   }
   }

   @Override
   protected ASPBlock getBizWfBlock() {
      // TODO Auto-generated method stub
      return headblk;
   }


}
