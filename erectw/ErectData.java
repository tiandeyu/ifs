/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.erectw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.service.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ErectData extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.erectw.ErectData");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------
   private ASPTabContainer tab;
   private ASPTabContainer tabs;
   private int activetab;
   
   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   private ASPBlock erect_stage_blk;
   private ASPRowSet erect_stage_set;
   private ASPCommandBar erect_stage_bar;
   private ASPTable erect_stage_tbl;
   private ASPBlockLayout erect_stage_lay;

   private ASPBlock erect_target_blk;
   private ASPRowSet erect_target_set;
   private ASPCommandBar erect_target_bar;
   private ASPTable erect_target_tbl;
   private ASPBlockLayout erect_target_lay;
   
   private ASPBlock erect_prefession_blk;
   private ASPRowSet erect_prefession_set;
   private ASPCommandBar erect_prefession_bar;
   private ASPTable erect_prefession_tbl;
   private ASPBlockLayout erect_prefession_lay;
   
   private ASPBlock erect_outline_blk;
   private ASPRowSet erect_outline_set;
   private ASPCommandBar erect_outline_bar;
   private ASPTable erect_outline_tbl;
   private ASPBlockLayout erect_outline_lay;
   

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  ErectData (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
     
      if(mgr.commandBarActivated()){
         eval(mgr.commandBarFunction());
      }else 
         okFind0();
         tabs.saveActiveTab();
      /*if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("PRO_TYPE_NO")) )
         okFind();*/
      adjust();
   }

   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

  
   public void okFind0()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(erect_stage_blk);
      q = trans.addQuery(erect_stage_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,erect_stage_blk);
      if (  erect_stage_set.countRows() == 0 )
      {
         mgr.showAlert("ETSTAGENODATA: No data found.");
         erect_stage_set.clear();
      }
   }


   public void countFind0()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(erect_stage_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      erect_stage_lay.setCountValue(toInt(erect_stage_set.getValue("N")));
      erect_stage_set.clear();
   }


   public void newRow0()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("ITEM0","ET_STAGE_API.New__",erect_stage_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM0/DATA");
      erect_stage_set.addRow(data);
   }
   
   public void okFind1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(erect_target_blk);
      q = trans.addQuery(erect_target_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,erect_target_blk);
      if (  erect_target_set.countRows() == 0 )
      {
         mgr.showAlert("ETTARGETNODATA: No data found.");
         erect_target_set.clear();
      }
   }

   public void countFind1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(erect_target_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      erect_target_lay.setCountValue(toInt(erect_target_set.getValue("N")));
      erect_target_set.clear();
   }

   public void newRow1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("ITEM1","ET_TARGET_API.New__",erect_target_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      erect_target_set.addRow(data);
   }


   public void okFind2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(erect_prefession_blk);
      q = trans.addQuery(erect_prefession_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,erect_prefession_blk);
      if (  erect_prefession_set.countRows() == 0 )
      {
         mgr.showAlert("ETPROFESSIONTYPENODATA: No data found.");
         erect_prefession_set.clear();
      }
   }

   public void countFind2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(erect_prefession_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      erect_prefession_lay.setCountValue(toInt(erect_prefession_set.getValue("N")));
      erect_prefession_set.clear();
   }

   public void newRow2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("ITEM2","ET_PROFESSION_TYPE_API.New__",erect_prefession_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM2/DATA");
      erect_prefession_set.addRow(data);
   }

   public void okFind3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(erect_outline_blk);
      q = trans.addQuery(erect_outline_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,erect_outline_blk);
      if (  erect_outline_set.countRows() == 0 )
      {
         mgr.showAlert("ETOUTLINENODATA: No data found.");
         erect_outline_set.clear();
      }
   }

   public void countFind3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(erect_outline_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      erect_outline_lay.setCountValue(toInt(erect_outline_set.getValue("N")));
      erect_outline_set.clear();
   }

   public void newRow3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("ITEM3","ET_OUTLINE_API.New__",erect_outline_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM3/DATA");
      erect_outline_set.addRow(data);
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();
      
      disableConfiguration();

      headblk = mgr.newASPBlock("MAIN");
      headbar = mgr.newASPCommandBar(headblk);
      
      headbar.disableCommand(headbar.FIND);
      headbar.disableCommand(headbar.BACK);
      headbar.disableCommand(headbar.FORWARD);
      headbar.disableCommand(headbar.BACKWARD);
      headbar.disableCommand(headbar.NEWROW);
 
      headbar.addCustomCommand("activateStage", mgr.translate("ERECTSTAGE: Erect Stage"));
      headbar.addCustomCommand("activateTarget", mgr.translate("ERECTTARGET: Erect Target"));
      headbar.addCustomCommand("activateProfession", mgr.translate("ERECTPROFESSION: Erect Profession"));
      headbar.addCustomCommand("activateOutline", mgr.translate("ERECTOUTLINE: Erect Outline"));
      
      headlay = headblk.getASPBlockLayout();
      headlay.setDialogColumns(2);
      headlay.setDefaultLayoutMode(headlay.SINGLE_LAYOUT);
      
           
      erect_stage_blk = mgr.newASPBlock("ITEM0");
      erect_stage_blk.addField("ITEM0_OBJID").
            setDbName("OBJID").
            setHidden();
      erect_stage_blk.addField("ITEM0_OBJVERSION").
            setDbName("OBJVERSION").
            setHidden();
      erect_stage_blk.addField("ITEM0_STAGE_NO").
            setMandatory().
            setReadOnly().
            setDbName("STAGE_NO").
            setLabel("ETSTAGESTAGENO: Stage No").
            setSize(50);
      erect_stage_blk.addField("ITEM0_PROJECT_TYPE_NO").
            setInsertable().
            setReadOnly().
            setMandatory().
            setDynamicLOV("PROJECT_TYPE").
            setDbName("PROJECT_TYPE_NO").
            setLabel("ETSTAGEPROJECTTYPENO: Project Type No").
            setSize(20);
      erect_stage_blk.addField("ITEM0_PROJECT_TYPE_NAME").
            setReadOnly().
            setFunction("PROJECT_TYPE_API.Get_Project_Type_Name(:ITEM0_PROJECT_TYPE_NO)").
            setLabel("ETSTARTPROJECTTYPENAME: Project Type Name").
            setSize(20);
      mgr.getASPField("ITEM0_PROJECT_TYPE_NO").setValidation("ITEM0_PROJECT_TYPE_NAME");
      erect_stage_blk.addField("ITEM0_STAGE_DESC").
            setInsertable().
            setHeight(4).
            setDbName("STAGE_DESC").
            setLabel("ETSTAGESTAGEDESC: Stage Desc").
            setSize(150);
      erect_stage_blk.addField("ITEM0_NOTE").
            setInsertable().
            setDbName("NOTE").
            setLabel("ETSTAGENOTE: Note").
            setHeight(4).
            setSize(150);
      erect_stage_blk.addField("ITEM0_CREATE_PERSON").
            setInsertable().
            setDbName("CREATE_PERSON").
            setDynamicLOV("PERSON_INFO_USER").
            setLabel("ETSTAGECREATEPERSON: Create Person").
            setSize(20);
      erect_stage_blk.addField("ITEM0_CREATE_PERSON_NAME").
            setReadOnly().
            setFunction("PERSON_INFO_API.Get_Name(:ITEM0_CREATE_PERSON)").
            setLabel("ETSTAGECREATEPERSONNAME: Create Person Name").
            setSize(20);
      mgr.getASPField("ITEM0_CREATE_PERSON").setValidation("ITEM0_CREATE_PERSON_NAME");
      erect_stage_blk.setView("ET_STAGE");
      erect_stage_blk.defineCommand("ET_STAGE_API","New__,Modify__,Remove__");
      erect_stage_set = erect_stage_blk.getASPRowSet();
      erect_stage_bar = mgr.newASPCommandBar(erect_stage_blk);
      erect_stage_bar.defineCommand(erect_stage_bar.OKFIND, "okFind0");
      erect_stage_bar.defineCommand(erect_stage_bar.NEWROW, "newRow0");
      erect_stage_bar.defineCommand(erect_stage_bar.COUNTFIND, "countFind0");
      erect_stage_tbl = mgr.newASPTable(erect_stage_blk);
      erect_stage_tbl.setTitle("ETSTAGETBLHEAD: Et Stages");
      erect_stage_tbl.enableRowSelect();
      erect_stage_tbl.setWrap();
      erect_stage_lay = erect_stage_blk.getASPBlockLayout();
      erect_stage_lay.setDefaultLayoutMode(erect_stage_lay.MULTIROW_LAYOUT);
      erect_stage_lay.setSimple("ITEM0_PROJECT_TYPE_NAME");
      erect_stage_lay.setSimple("ITEM0_CREATE_PERSON_NAME");
      erect_stage_lay.setDataSpan("ITEM0_STAGE_DESC", 5);
      erect_stage_lay.setDataSpan("ITEM0_NOTE", 5);
      
      erect_target_blk = mgr.newASPBlock("ITEM1");
      erect_target_blk.addField("ITEM1_OBJID").
               setDbName("OBJID").
              setHidden();
      erect_target_blk.addField("ITEM1_OBJVERSION").
               setDbName("OBJVERSION").
              setHidden();
      erect_target_blk.addField("ITEM1_TARGET_NO").
              setMandatory().
              setReadOnly().
              setDbName("TARGET_NO").
              setLabel("ETTARGETTARGETNO: Target No").
              setSize(50);
      erect_target_blk.addField("ITEM1_PROJECT_TYPE_NO").
              setInsertable().
              setReadOnly().
              setMandatory().
              setDynamicLOV("PROJECT_TYPE").
              setDbName("PROJECT_TYPE_NO").
              setLabel("ETTARGETPROJECTTYPENO: Project Type No").
              setSize(20);
      erect_target_blk.addField("ITEM1_PROJECT_TYPE_NAME").
              setReadOnly().
              setFunction("PROJECT_TYPE_API.Get_Project_Type_Name(:ITEM1_PROJECT_TYPE_NO)").
              setLabel("ETSTARTPROJECTTYPENAME: Project Type Name").
              setSize(20);
      mgr.getASPField("ITEM1_PROJECT_TYPE_NO").setValidation("ITEM1_PROJECT_TYPE_NAME");
      erect_target_blk.addField("ITEM1_TARGER_DESC").
              setInsertable().
              setHeight(4).
              setDbName("TARGER_DESC").
              setLabel("ETTARGETTARGERDESC: Targer Desc").
              setSize(150);
      erect_target_blk.addField("ITEM1_NOTE").
              setInsertable().
              setHeight(4).
              setDbName("NOTE").
              setLabel("ETTARGETNOTE: Note").
              setSize(150);
      erect_target_blk.addField("ITEM1_CREATE_PERSON").
              setInsertable().
              setDbName("CREATE_PERSON").
              setDynamicLOV("PERSON_INFO_USER").
              setLabel("ETTARGETCREATEPERSON: Create Person").
              setSize(20);
      erect_target_blk.addField("ITEM1_CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:ITEM1_CREATE_PERSON)").
              setLabel("ETTARGETCREATEPERSONNAME: Create Person Name").
              setSize(20);
      mgr.getASPField("ITEM1_CREATE_PERSON").setValidation("ITEM1_CREATE_PERSON_NAME");
      erect_target_blk.setView("ET_TARGET");
      erect_target_blk.defineCommand("ET_TARGET_API","New__,Modify__,Remove__");
      erect_target_set = erect_target_blk.getASPRowSet();
      erect_target_bar = mgr.newASPCommandBar(erect_target_blk);
      erect_target_bar.defineCommand(erect_target_bar.OKFIND, "okFind1");
      erect_target_bar.defineCommand(erect_target_bar.NEWROW, "newRow1");
      erect_target_bar.defineCommand(erect_target_bar.COUNTFIND, "countFind1");
      erect_target_tbl = mgr.newASPTable(erect_target_blk);
      erect_target_tbl.setTitle("ETTARGETTBLHEAD: Et Targets");
      erect_target_tbl.enableRowSelect();
      erect_target_tbl.setWrap();
      erect_target_lay = erect_target_blk.getASPBlockLayout();
      erect_target_lay.setDefaultLayoutMode(erect_target_lay.MULTIROW_LAYOUT);
      erect_target_lay.setSimple("ITEM1_PROJECT_TYPE_NAME");
      erect_target_lay.setSimple("ITEM1_CREATE_PERSON_NAME");
      erect_target_lay.setDataSpan("ITEM1_TARGER_DESC", 5);
      erect_target_lay.setDataSpan("ITEM1_NOTE", 5);
      
      erect_prefession_blk = mgr.newASPBlock("ITEM2");
      erect_prefession_blk.addField("ITEM2_OBJID").
               setDbName("OBJID").
              setHidden();
      erect_prefession_blk.addField("ITEM2_OBJVERSION").
               setDbName("OBJVERSION").
              setHidden();
      erect_prefession_blk.addField("ITEM2_PROFESSION_NO").
              setMandatory().
              setReadOnly().
              setDbName("PROFESSION_NO").
              setLabel("ETPROFESSIONTYPEPROFESSIONNO: Profession No").
              setSize(50);
      erect_prefession_blk.addField("ITEM2_PROJECT_TYPE_NO").
              setInsertable().
              setReadOnly().
              setMandatory().
              setDynamicLOV("PROJECT_TYPE").
              setDbName("PROJECT_TYPE_NO").
              setLabel("ETPROFESSIONTYPEPROJECTTYPENO: Project Type No").
              setSize(20);
      erect_prefession_blk.addField("ITEM2_PROJECT_TYPE_NAME").
              setReadOnly().
              setFunction("PROJECT_TYPE_API.Get_Project_Type_Name(:ITEM2_PROJECT_TYPE_NO)").
              setLabel("ETSTARTPROJECTTYPENAME: Project Type Name").
              setSize(20);
      mgr.getASPField("ITEM2_PROJECT_TYPE_NO").setValidation("ITEM2_PROJECT_TYPE_NAME");
      erect_prefession_blk.addField("ITEM2_PROFESSION_DESC").
              setInsertable().
              setHeight(4).
              setDbName("PROFESSION_DESC").
              setLabel("ETPROFESSIONTYPEPROFESSIONDESC: Profession Desc").
              setSize(150);
      erect_prefession_blk.addField("ITEM2_NOTE").
              setInsertable().
              setHeight(4).
              setDbName("NOTE").
              setLabel("ETPROFESSIONTYPENOTE: Note").
              setSize(150);
      erect_prefession_blk.addField("ITEM2_CREATE_PERSON").
              setInsertable().
              setDbName("CREATE_PERSON").
              setDynamicLOV("PERSON_INFO_USER").
              setLabel("ETPROFESSIONTYPECREATEPERSON: Create Person").
              setSize(20);
      erect_prefession_blk.addField("ITEM2_CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:ITEM2_CREATE_PERSON)").
              setLabel("ETPROFESSIONTYPECREATEPERSONNAME: Create Person Name").
              setSize(20);
      mgr.getASPField("ITEM2_CREATE_PERSON").setValidation("ITEM2_CREATE_PERSON_NAME");
      erect_prefession_blk.setView("ET_PROFESSION_TYPE");
      erect_prefession_blk.defineCommand("ET_PROFESSION_TYPE_API","New__,Modify__,Remove__");
      erect_prefession_set = erect_prefession_blk.getASPRowSet();
      erect_prefession_bar = mgr.newASPCommandBar(erect_prefession_blk);
      erect_prefession_bar.defineCommand(erect_prefession_bar.OKFIND, "okFind2");
      erect_prefession_bar.defineCommand(erect_prefession_bar.NEWROW, "newRow2");
      erect_prefession_bar.defineCommand(erect_prefession_bar.COUNTFIND, "countFind2");
      erect_prefession_tbl = mgr.newASPTable(erect_prefession_blk);
      erect_prefession_tbl.setTitle("ETPROFESSIONTYPETBLHEAD: Et Profession Types");
      erect_prefession_tbl.enableRowSelect();
      erect_prefession_tbl.setWrap();
      erect_prefession_lay = erect_prefession_blk.getASPBlockLayout();
      erect_prefession_lay.setDefaultLayoutMode(erect_prefession_lay.MULTIROW_LAYOUT);
      erect_prefession_lay.setSimple("ITEM2_PROJECT_TYPE_NAME");
      erect_prefession_lay.setSimple("ITEM2_CREATE_PERSON_NAME");
      erect_prefession_lay.setDataSpan("ITEM2_PROFESSION_DESC", 5);
      erect_prefession_lay.setDataSpan("ITEM2_NOTE", 5);
      
      erect_outline_blk = mgr.newASPBlock("ITEM3");
      erect_outline_blk.addField("ITEM3_OBJID").
              setDbName("OBJID").
              setHidden();
      erect_outline_blk.addField("ITEM3_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      erect_outline_blk.addField("ITEM3_OUTLINE_NO").
              setMandatory().
              setReadOnly().
              setDbName("OUTLINE_NO").
              setLabel("ETOUTLINEOUTLINENO: Outline No").
              setSize(50);
      erect_outline_blk.addField("ITEM3_PROJECT_TYPE_NO").
               setInsertable().
               setReadOnly().
               setMandatory().
               setDynamicLOV("PROJECT_TYPE").
               setDbName("PROJECT_TYPE_NO").
               setLabel("ETOUTLINEPROJECTTYPENO: Project Type No").
               setSize(20);
      erect_outline_blk.addField("ITEM3_PROJECT_TYPE_NAME").
               setReadOnly().
               setFunction("PROJECT_TYPE_API.Get_Project_Type_Name(:ITEM3_PROJECT_TYPE_NO)").
               setLabel("ETSTARTPROJECTTYPENAME: Project Type Name").
               setSize(20);
      mgr.getASPField("ITEM3_PROJECT_TYPE_NO").setValidation("ITEM3_PROJECT_TYPE_NAME");    
      erect_outline_blk.addField("ITEM3_ORG").
              setInsertable().
              setDynamicLOV("PERSON_ZONE").
              setDbName("ORG").
              setLabel("ETOUTLINEORG: Org").
              setSize(20);
      erect_outline_blk.addField("ITEM3_ORG_NAME").
              setReadOnly().
              setLabel("ETOUTLINEORGNAME: Org Name").
              setFunction("GENERAL_ZONE_API.Get_Zone_Desc (:ITEM3_ORG)").
              setSize(20);
      mgr.getASPField("ITEM3_ORG").setValidation("ITEM3_ORG_NAME");
      erect_outline_blk.addField("ITEM3_PROFESSION_NO").
              setInsertable().
              setDbName("PROFESSION_NO").
              setDynamicLOV("ET_PROFESSION_TYPE","ITEM3_PROJECT_TYPE_NO").
              setLabel("ETOUTLINEPROFESSIONNO: Profession No").
              setSize(20); 
      erect_outline_blk.addField("ITEM3_PROFESSION_NAME").
              setReadOnly().
              setFunction("ET_PROFESSION_TYPE_API.Get_Profession_Desc(:ITEM3_PROFESSION_NO)").
              setLabel("ETOUTLINEPROFESSIONNAME: Profession Name").
              setSize(20);
      mgr.getASPField("ITEM3_PROFESSION_NO").setValidation("ITEM3_PROFESSION_NAME");
      erect_outline_blk.addField("ITEM3_MAKE_PERSON").
              setInsertable().
              setDbName("MAKE_PERSON").
              setDynamicLOV("PERSON_INFO_LOV").
              setLabel("ETOUTLINEMAKEPERSON: Make Person").
              setSize(20);
      erect_outline_blk.addField("ITEM3_MAKE_PERSON_NAME").
               setReadOnly().
               setFunction("PERSON_INFO_API.Get_Name(:ITEM3_MAKE_PERSON)").
               setLabel("ETOUTLINEMAKEPERSONNAME: Mark Person Name").
               setSize(20);
      mgr.getASPField("ITEM3_MAKE_PERSON").setValidation("ITEM3_MAKE_PERSON_NAME");
      erect_outline_blk.addField("ITEM3_OUTLINE_CONTENT").
               setInsertable().
               setHeight(4).
               setDbName("OUTLINE_CONTENT").
               setLabel("ETOUTLINEOUTLINECONTENT: Outline Content").
               setSize(150);
      erect_outline_blk.addField("ITEM3_NOTE").
               setInsertable().
               setHeight(4).
               setDbName("NOTE").
               setLabel("ETOUTLINENOTE: Note").
               setSize(150);
      erect_outline_blk.setView("ET_OUTLINE");
      erect_outline_blk.defineCommand("ET_OUTLINE_API","New__,Modify__,Remove__");
      erect_outline_set = erect_outline_blk.getASPRowSet();
      erect_outline_bar = mgr.newASPCommandBar(erect_outline_blk);
      erect_outline_bar.defineCommand(erect_outline_bar.OKFIND, "okFind3");
      erect_outline_bar.defineCommand(erect_outline_bar.NEWROW, "newRow3");
      erect_outline_bar.defineCommand(erect_outline_bar.COUNTFIND, "countFind3");
      erect_outline_tbl = mgr.newASPTable(erect_outline_blk);
      erect_outline_tbl.setTitle("ETOUTLINETBLHEAD: Et Outlines");
      erect_outline_tbl.enableRowSelect();
      erect_outline_tbl.setWrap();
      erect_outline_lay = erect_outline_blk.getASPBlockLayout();
      erect_outline_lay.setDefaultLayoutMode(erect_outline_lay.MULTIROW_LAYOUT);
      erect_outline_lay.setSimple("ITEM3_MAKE_PERSON_NAME");
      erect_outline_lay.setSimple("ITEM3_PROJECT_TYPE_NAME");
      erect_outline_lay.setSimple("ITEM3_PROFESSION_NAME");
      erect_outline_lay.setSimple("ITEM3_ORG_NAME");
      erect_outline_lay.setDataSpan("ITEM3_MAKE_PERSON", 5);
      erect_outline_lay.setDataSpan("ITEM3_OUTLINE_CONTENT", 5);
      erect_outline_lay.setDataSpan("ITEM3_NOTE", 5);
      
      tabs = mgr.newASPTabContainer();
      tabs.setDirtyFlagEnabled(false);
      tabs.addTab("BASEERECTSTAGE: Erect Stage", "javascript:commandSet('MAIN.activateStage','')");
      tabs.addTab("BASEERECTTARGET: Erect Target", "javascript:commandSet('MAIN.activateTarget','')");
      tabs.addTab("BASEERECTPROFESSION: Erect Prefession", "javascript:commandSet('MAIN.activateProfession','')");
      tabs.addTab("BASEERECTOUTLINE: Erect Outline", "javascript:commandSet('MAIN.activateOutline','')");
      
      tabs.setContainerWidth(700);
      //tab.setContainerHeight(400);
      tabs.setLeftTabSpace(1);
      tabs.setContainerSpace(5);
      tabs.setTabWidth(100);
      
   }



   public void  adjust()
   {
      // fill function body
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "ERECTTESTS:  Erect Tests";
   }


   protected String getTitle()
   {
      return "ERECTTESTSTITLE: Erect Tests";
   }

   public void activateStage(){
      tabs.setActiveTab(1);
      //okFind0();
   }
   public void activateTarget(){
      tabs.setActiveTab(2); 
      okFind1();
      }
   public void activateProfession(){
      tabs.setActiveTab(3);
      okFind2();
   }
   public void activateOutline(){
      tabs.setActiveTab(4);
      okFind3();
   }
   
   protected void printContents() throws FndException
   { 
      super.printContents();
      ASPManager mgr = getASPManager();
      //init necessary method
      appendToHTML(tabs.showTabsInit());
      activetab = tabs.getActiveTab();
      /*if (headlay.isVisible())
          appendToHTML(headlay.show());*/
      if  (activetab == 1)
         appendToHTML(erect_stage_lay.show());
      else  if (activetab == 2)
         appendToHTML(erect_target_lay.show());
      else if (activetab ==3)
         appendToHTML(erect_prefession_lay.show());
      else if (activetab == 4)
         appendToHTML(erect_outline_lay.show());
     
      appendToHTML(tabs.showTabsFinish());
   }
}
