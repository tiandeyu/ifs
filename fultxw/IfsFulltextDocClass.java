/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.fultxw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class IfsFulltextDocClass extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.fultxw.IfsFulltextDocClass");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock ifs_fulltext_columns_blk;
   private ASPRowSet ifs_fulltext_columns_set;
   private ASPCommandBar ifs_fulltext_columns_bar;
   private ASPTable ifs_fulltext_columns_tbl;
   private ASPBlockLayout ifs_fulltext_columns_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  IfsFulltextDocClass (ASPManager mgr, String page_path)
   {
      super(mgr, page_path);
   }

   public void run() throws FndException
   {
      super.run();

      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if (!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("DOC_CLASS")) )
         okFind();
      else
      	okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("IFSFULLTEXTDOCCLASSNODATA: No data found.");
         headset.clear();
      }
      eval( ifs_fulltext_columns_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","IFS_FULLTEXT_DOC_CLASS_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(ifs_fulltext_columns_blk);
      q.addWhereCondition("DOC_CLASS = ?");
      q.addParameter("DOC_CLASS", headset.getValue("DOC_CLASS"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,ifs_fulltext_columns_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","IFS_FULLTEXT_COLUMNS_API.New__",ifs_fulltext_columns_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_DOC_CLASS", headset.getValue("DOC_CLASS"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      ifs_fulltext_columns_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("DOC_CLASS").
              setMandatory().
              setInsertable().
              setDynamicLOV("DOC_CLASS").
              setCustomValidation("DOC_CLASS", "DOC_CLASS_NAME").
              setLabel("DOCMAWDOCUMENTCLASSBASICDOCCLASS: Document Class").
              setSize(50);
      headblk.addField("DOC_CLASS_NAME").
              setInsertable().
              setLabel("DOCMAWDOCUMENTCLASSBASICDESC: Description").
              setSize(50);
      headblk.setView("IFS_FULLTEXT_DOC_CLASS");
      headblk.defineCommand("IFS_FULLTEXT_DOC_CLASS_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("IFSFULLTEXTDOCCLASSTBLHEAD: Ifs Fulltext Doc Classs");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setDialogColumns(1);


      ifs_fulltext_columns_blk = mgr.newASPBlock("ITEM1");
      ifs_fulltext_columns_blk.addField("ITEM0_OBJID").
                               setHidden().
                               setDbName("OBJID");
      ifs_fulltext_columns_blk.addField("ITEM0_OBJVERSION").
                               setHidden().
                               setDbName("OBJVERSION");
      ifs_fulltext_columns_blk.addField("ITEM0_DOC_CLASS").
                               setDbName("DOC_CLASS").
                               setMandatory().
                               setInsertable().
                               setHidden().
                               setLabel("IFSFULLTEXTCOLUMNSITEM0DOCCLASS: Doc Class").
                               setSize(50);
      ifs_fulltext_columns_blk.addField("COLUMN_NAME").
                               setInsertable().
                               setLabel("IFSFULLTEXTCOLUMNSCOLUMNNAME: Column Name").
                               setDynamicLOV("IFS_FTX_COLUMN_TEMPLATE").
                               setSize(50);
      ifs_fulltext_columns_blk.setView("IFS_FULLTEXT_COLUMNS");
      ifs_fulltext_columns_blk.defineCommand("IFS_FULLTEXT_COLUMNS_API","New__,Modify__,Remove__");
      ifs_fulltext_columns_blk.setMasterBlock(headblk);
      ifs_fulltext_columns_set = ifs_fulltext_columns_blk.getASPRowSet();
      ifs_fulltext_columns_bar = mgr.newASPCommandBar(ifs_fulltext_columns_blk);
      ifs_fulltext_columns_bar.defineCommand(ifs_fulltext_columns_bar.OKFIND, "okFindITEM1");
      ifs_fulltext_columns_bar.defineCommand(ifs_fulltext_columns_bar.NEWROW, "newRowITEM1");
      ifs_fulltext_columns_tbl = mgr.newASPTable(ifs_fulltext_columns_blk);
      ifs_fulltext_columns_tbl.setTitle("IFSFULLTEXTCOLUMNSITEMHEAD1: IfsFulltextColumns");
      ifs_fulltext_columns_tbl.enableRowSelect();
      ifs_fulltext_columns_tbl.setWrap();
      ifs_fulltext_columns_lay = ifs_fulltext_columns_blk.getASPBlockLayout();
      ifs_fulltext_columns_lay.setDefaultLayoutMode(ifs_fulltext_columns_lay.MULTIROW_LAYOUT);
      ifs_fulltext_columns_lay.setDialogColumns(1);


   }


   public void adjust()
   {
      // fill function body
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "IFSFULLTEXTDOCCLASSDESC: Ifs Fulltext Doc Class";
   }


   protected String getTitle()
   {
      return "IFSFULLTEXTDOCCLASSTITLE: Ifs Fulltext Doc Class";
   }


   protected void printContents() throws FndException
   {
      super.printContents();

      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      if (ifs_fulltext_columns_lay.isVisible())
          appendToHTML(ifs_fulltext_columns_lay.show());
   }
   //--------------------------  Added in new template  --------------------------
   //--------------  Return blk connected with workflow functions  ---------------
   //-----------------------------------------------------------------------------

   protected ASPBlock getBizWfBlock()
   {
      return headblk;
   }
   
   
   
   
   public void validate()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans   =  mgr.newASPTransactionBuffer();
      ASPCommand cmd ;
      String val = mgr.readValue("VALIDATE");

      if ("DOC_CLASS".equals(val))
      {
      	trans.clear();
         cmd = trans.addCustomFunction( "DUDAYS", "DOC_CLASS_API.GET_DOC_NAME", "DOC_CLASS_NAME" );
         cmd.addParameter("DOC_CLASS");
         trans = mgr.validate(trans);
         String docName = trans.getValue("DUDAYS/DATA/DOC_CLASS_NAME");

         if (mgr.isEmpty(docName))
            docName = "";

         mgr.responseWrite( docName + "^" );
      }
      mgr.endResponse();
   }
      
}
