/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.contrw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ContractQtyVisa extends HzASPPageProviderWf 
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.contrw.ContractQtyVisa");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock contract_qty_visa_item_blk;
   private ASPRowSet contract_qty_visa_item_set;
   private ASPCommandBar contract_qty_visa_item_bar;
   private ASPTable contract_qty_visa_item_tbl;
   private ASPBlockLayout contract_qty_visa_item_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  ContractQtyVisa (ASPManager mgr, String page_path)
   {
      super(mgr, page_path);
   }

   public void run() throws FndException
   {
      super.run();

      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("VISA_NO")) )
         okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();    
      else
         okFind();    
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("CONTRACTQTYVISANODATA: No data found.");
         headset.clear();
      }
      eval( contract_qty_visa_item_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }

   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","CONTRACT_QTY_VISA_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("VISA_CLASS","FALSE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(contract_qty_visa_item_blk);
      q.addWhereCondition("PROJ_NO = ? AND CONTRACT_ID = ? AND VISA_NO = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      q.addParameter("VISA_NO", headset.getValue("VISA_NO"));
      q.setOrderByClause("FULL_PATH");
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,contract_qty_visa_item_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","CONTRACT_QTY_VISA_ITEM_API.New__",contract_qty_visa_item_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      cmd.setParameter("ITEM0_VISA_NO", headset.getValue("VISA_NO"));
      cmd.setParameter("ITEM_TYPE", "ITEM");        
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      contract_qty_visa_item_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Perform Header and Item functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void  performHEAD( String command)
   {
      int currow;
      
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      

      currow = headset.getCurrentRowNo();
      if(headlay.isMultirowLayout())
         headset.storeSelections();
      else
         headset.selectRow();
      headset.markSelectedRows( command );
      mgr.submit(trans);
      headset.goTo(currow);
   }
   public void  report()
   {

      performHEAD( "Report__" );
   }
   public void  inspect()
   {

      performHEAD( "Inspect__" );
   }
   public void  approve()
   {

      performHEAD( "Approve__" );
   }
   public void  audit()
   {

      performHEAD( "Audit__" );
   }
   public void  complete()
   {

      performHEAD( "Complete__" );
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("OBJSTATE").
              setHidden();
      headblk.addField("OBJEVENTS").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setDynamicLOV("GENERAL_PROJECT").
              setInsertable().  
              setDefaultNotVisible().
              setLabel("CONTRACTQTYVISAPROJNO: Proj No").
              setSize(30);  
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
              setReadOnly().  
              setLabel("CONTRACTQTYVISAGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(30);      
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");        
      headblk.addField("CONTRACT_ID").
              setMandatory().
              setInsertable().
              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO"). 
              setLOVProperty("WHERE", "SCHEDULE = 'TRUE'").
              setLOVProperty("ORDER_BY", "CONTRACT_ID").     
              setLabel("CONTRACTQTYVISACONTRACTID: Contract Id").
              setSize(30);
      headblk.addField("CONTRACT_DESC").
              setReadOnly().    
              setFunction("PROJECT_CONTRACT_API.GET_CONTRACT_DESC(:PROJ_NO,:CONTRACT_ID)").
              setLabel("CONTRACTQTYVISACONTRACTDESC: Contract Desc").
              setSize(30);          
      mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_DESC");
      headblk.addField("VISA_NO").
              setMandatory().
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONTRACTQTYVISAVISANO: Visa No").
              setSize(30);  
      headblk.addField("VISA_NAME").
              setMandatory().
              setInsertable().
              setLabel("CONTRACTQTYVISAVISANAME: Visa Name").
              setSize(30);  
      headblk.addField("PLAN_NO").
              setInsertable().
              setHidden().  
              setLabel("CONTRACTQTYVISAPLANNO: Plan No").
              setSize(30);
      headblk.addField("SUB_PROJ_NO").
              setInsertable(). 
              setDefaultNotVisible().
              setDynamicLOV("CON_QUA_TREE","PROJ_NO").
              setLOVProperty("TREE_PARE_FIELD", "PARENT_ID").
              setLOVProperty("TREE_DISP_FIELD", "NODE_NO,NODE_NAME").    
              setLabel("CONTRACTQTYVISASUBPROJNO: Sub Proj No").
              setSize(30);  
      headblk.addField("SUB_PROJ_DESC").  
              setFunction("CON_PROJ_CONSTRUCTION_MAN_API.Get_Node_Name ( :PROJ_NO,:SUB_PROJ_NO)").
              setLabel("CONTRACTQTYVISASUBPROJDESC: Sub Proj Desc").  
              setSize(30).
              setReadOnly();
      mgr.getASPField("SUB_PROJ_NO").setValidation("SUB_PROJ_DESC");
      
      headblk.addField("VISA_CLASS").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("CONTRACTQTYVISAVISACLASS: Visa Class").
              setSize(30);
          
   // 3
      headblk.addField("REPORTOR").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTQTYVISAREPORTOR: Reportor").
            setDynamicLOV("PERSON_INFO_LOV").
            setSize(30);
      headblk.addField("REPORTOR_NAME").
            setReadOnly().
            setDefaultNotVisible().
            setFunction("PERSON_INFO_API.GET_NAME(:REPORTOR)").
            setLabel("CONTRACTQTYVISAREPORTORNAME: Reportor Name").
            setSize(30);
      mgr.getASPField("REPORTOR").setValidation("REPORTOR_NAME");
      
      headblk.addField("REPORT_DATE", "Date").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTQTYVISAREPORTDATE: Report Date").
            setSize(30);
      
      // 4
      headblk.addField("INSPECTOR").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTQTYVISAINSPECTOR: Inspector").
            setDynamicLOV("PERSON_INFO").
            setSize(30);
      headblk.addField("INSPECTOR_NAME").
            setReadOnly().
            setDefaultNotVisible().
            setFunction("PERSON_INFO_API.GET_NAME(:INSPECTOR)").
            setLabel("CONTRACTQTYVISAINSPECTORNAME: Inspector Name").
            setSize(30);
      mgr.getASPField("INSPECTOR").setValidation("INSPECTOR_NAME");
      
      headblk.addField("INSPECT_DATE", "Date").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTQTYVISAINSPECTDATE: Inspect Date").
            setSize(30);
      
      // 5
      headblk.addField("APPROVER").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTQTYVISAAPPROVER: Approver").
            setDynamicLOV("PERSON_INFO").
            setSize(30);
      headblk.addField("APPROVER_NAME").
            setReadOnly().
            setDefaultNotVisible().
            setFunction("PERSON_INFO_API.GET_NAME(:APPROVER)").
            setLabel("CONTRACTQTYVISAAPPROVERNAME: Approver Name").
            setSize(30);
      mgr.getASPField("APPROVER").setValidation("APPROVER_NAME");
      
      headblk.addField("APPROVE_DATE", "Date").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTQTYVISAAPPROVEDATE: Approve Date").
            setSize(30);
      
      // 6
      headblk.addField("AUDITOR").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTQTYVISAAUDITOR: Auditor").
            setDynamicLOV("PERSON_INFO").
            setSize(30);
      headblk.addField("AUDITOR_NAME").
            setReadOnly().
            setDefaultNotVisible().
            setFunction("PERSON_INFO_API.GET_NAME(:AUDITOR)").
            setLabel("CONTRACTQTYVISAAUDITORNAME: Auditor Name").
            setSize(30);
      mgr.getASPField("AUDITOR").setValidation("AUDITOR_NAME");
      
      headblk.addField("AUDIT_DATE", "Date").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTQTYVISAAUDITDATE: Audit Date").
            setSize(30);
      
      headblk.addField("COMPLETE_DATE", "Date").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTQTYVISACOMPLETEDATE: Complete Date").
            setSize(30);  
      headblk.addField("ALL_OWNER_TOTAL", "Number" ,"#0.00").
              setReadOnly().  
              setFunction("CONTRACT_QTY_VISA_API.Cal_Owner_Total(:PROJ_NO,:CONTRACT_ID,:VISA_NO)").
              setLabel("CONTRACTQTYVISAALLOWNERTOTAL: All Owner Total").
              setSize(30);  
      headblk.addField("STATE").  
              setReadOnly(). 
              setLabel("CONTRACTQTYVISASTATE: State").
              setSize(30);
      headblk.setView("CONTRACT_QTY_VISA");
      headblk.defineCommand("CONTRACT_QTY_VISA_API","New__,Modify__,Remove__,Report__,Inspect__,Approve__,Audit__,Complete__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addSecureCustomCommand("Report", "CONTRACTQTYVISAREPORT: Report Contract Qty Visa", "CONTRACT_QTY_VISA_API.Report__");
      headbar.addSecureCustomCommand("Inspect", "CONTRACTQTYVISAINSPECT: Inspect Contract Qty Visa", "CONTRACT_QTY_VISA_API.Inspect__");
      headbar.addSecureCustomCommand("Approve", "CONTRACTQTYVISAAPPROVE: Approve Contract Qty Visa", "CONTRACT_QTY_VISA_API.Approve__");
      headbar.addSecureCustomCommand("Audit", "CONTRACTQTYVISAAUDIT: Audit Contract Qty Visa", "CONTRACT_QTY_VISA_API.Audit__");
      headbar.addSecureCustomCommand("Complete", "CONTRACTQTYVISACOMPLETE: Complete Contract Qty Visa", "CONTRACT_QTY_VISA_API.Complete__");
      headbar.addCommandValidConditions("Report",     "OBJSTATE",    "Enable",      "Initialization");
      headbar.addCommandValidConditions("Inspect", "OBJSTATE",    "Enable",      "Reported");
      headbar.addCommandValidConditions("Approve", "OBJSTATE",    "Enable",      "Inspected");
      headbar.addCommandValidConditions("Audit",      "OBJSTATE",    "Enable",      "Approved");
      headbar.addCommandValidConditions("Complete",   "OBJSTATE",    "Enable",      "Audited");
      headtbl = mgr.newASPTable(headblk);  
      headtbl.setTitle("CONTRACTQTYVISATBLHEAD: Contract Qty Visas");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("REPORTOR_NAME");  
      headlay.setSimple("INSPECTOR_NAME");
      headlay.setSimple("APPROVER_NAME");
      headlay.setSimple("AUDITOR_NAME");
      headlay.setSimple("CONTRACT_DESC");  
      headlay.setSimple("SUB_PROJ_DESC");    
       
      contract_qty_visa_item_blk = mgr.newASPBlock("ITEM1");
      contract_qty_visa_item_blk.addField("ITEM0_OBJID").
                                 setHidden().
                                 setDbName("OBJID");
      contract_qty_visa_item_blk.addField("ITEM0_OBJVERSION").
                                 setHidden().
                                 setDbName("OBJVERSION");
      contract_qty_visa_item_blk.addField("ITEM0_PROJ_NO").
                                 setDbName("PROJ_NO").
                                 setMandatory().
                                 setHidden().
                                 setInsertable().
                                 setLabel("CONTRACTQTYVISAITEMITEM0PROJNO: Proj No").
                                 setSize(50);
      contract_qty_visa_item_blk.addField("ITEM0_CONTRACT_ID").
                                 setDbName("CONTRACT_ID").
                                 setMandatory().
                                 setHidden().
                                 setInsertable().
                                 setLabel("CONTRACTQTYVISAITEMITEM0CONTRACTID: Contract Id").
                                 setSize(100);
      contract_qty_visa_item_blk.addField("ITEM0_VISA_NO").
                                 setDbName("VISA_NO").
                                 setMandatory().
                                 setHidden().
                                 setInsertable().
                                 setLabel("CONTRACTQTYVISAITEMITEM0VISANO: Visa No").
                                 setSize(200);
      contract_qty_visa_item_blk.addField("ITEM_NO").
                                 setInsertable().
                                 setDynamicLOV("PROJECT_CONTRACT_ITEM", "PROJ_NO,CONTRACT_ID,VISA_CLASS NEW_ITEM").
                                 setLOVProperty("WHERE", "ITEM_TYPE = 'ITEM'").    
                                 setLOVProperty("ORDER_BY", "FULL_PATH").  
                                 setCustomValidation("PROJ_NO,CONTRACT_ID,ITEM_NO", "ITEM_DESC,ITEM_TYPE,ITEM_CURRENCY,ITEM_UNIT,EXCHANGE_RATE,PRICE,ORIGINAL_QTY,ORIGINAL_TOTAL,CHANGED_DIFF_QTY,CHANGED_DIFF_TOTAL,QTY,TOTAL").
                                 setLabel("CONTRACTQTYVISAITEMITEMNO: Item No").
                                 setSize(30);      
      contract_qty_visa_item_blk.addField("ITEM_DESC").
                                 setInsertable().
                                 setLabel("CONTRACTQTYVISAITEMITEMDESC: Desc").
                                 setSize(30);
      contract_qty_visa_item_blk.addField("ITEM_UNIT").
                                 setReadOnly().
                                 setLabel("CONTRACTQTYVISAITEMITEMUNIT: Item Unit").
                                 setDynamicLOV("ISO_UNIT").
                                 setSize(10);
      contract_qty_visa_item_blk.addField("ITEM_UNIT_DESC").
                                 setReadOnly().
                                 setLabel("CONTRACTQTYVISAITEMITEMUNITDESC: Item Unit Desc").
                                 setFunction("Iso_Unit_API.Get_Description(:ITEM_UNIT)").
                                 setSize(10);  
      mgr.getASPField("ITEM_UNIT").setValidation("ITEM_UNIT_DESC");
      // 2
      contract_qty_visa_item_blk.addField("PRICE", "Money","#0.00").
                                   setReadOnly().
                                   setCustomValidation("PRICE,REPORT_QTY,INSPECT_QTY,OWNER_QTY", "REPORT_TOTAL,INSPECT_TOTAL,OWNER_TOTAL").
                                   setLabel("CONTRACTREPORTQTYITEMPRICE: Price").
                                   setSize(20);
      contract_qty_visa_item_blk.addField("ORIGINAL_QTY", "Number" ,"#0.00").
                                   setReadOnly().
                                   setFunction("PROJECT_CONTRACT_ITEM_API.Get_Original_Qty(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                   setLabel("CONTRACTQTYVISAITEMORIGINALQTY: Original Qty").
                                   setSize(20);  
      contract_qty_visa_item_blk.addField("ORIGINAL_TOTAL", "Money","#0.00").
                                   setReadOnly().
                                   setFunction("PROJECT_CONTRACT_ITEM_API.Get_Original_Total(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                   setLabel("CONTRACTQTYVISAITEMORIGINALTOTAL: Original Total").
                                   setSize(20);  
      
      contract_qty_visa_item_blk.addField("CHANGED_DIFF_QTY", "Number" ,"#0.00").
                                    setReadOnly().
                                    setFunction("PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Qty(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                    setLabel("CONTRACTQTYVISAITEMCHANGEDDIFFQTY: Changed Diff Qty").
                                    setSize(20);   
       
      contract_qty_visa_item_blk.addField("CHANGED_DIFF_TOTAL", "Money","#0.00").
                                    setReadOnly().
                                    setFunction("PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Total(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                    setLabel("CONTRACTQTYVISAITEMCHANGEDDIFFTOTAL: Changed Diff Total").
                                    setSize(20);   
       
      contract_qty_visa_item_blk.addField("QTY", "Number" ,"#0.00").
                                  setReadOnly().
                                  setLabel("CONTRACTQTYVISAITEMQTY: Qty").
                                  setSize(20);

     contract_qty_visa_item_blk.addField("TOTAL", "Money","#0.00").
                                  setReadOnly().
                                  setLabel("CONTRACTQTYVISAITEMTOTAL: Total").
                                  setSize(20);
     
     // 3
     contract_qty_visa_item_blk.addField("REPORT_QTY", "Number","#0.00").
                                  setInsertable().
                                  setCustomValidation("PRICE,REPORT_QTY", "REPORT_TOTAL").
                                  setLabel("CONTRACTQTYVISAITEMREPORTQTY: Report Qty").
                                  setSize(20);
     contract_qty_visa_item_blk.addField("REPORT_TOTAL", "Number","#0.00").
                                  setInsertable().
                                  setLabel("CONTRACTQTYVISAITEMREPORTTOTAL: Report Total").
                                  setSize(20);
     
     // 4
     contract_qty_visa_item_blk.addField("INSPECT_QTY", "Number","#0.00").
                                  setInsertable().
                                  setCustomValidation("PRICE,INSPECT_QTY", "INSPECT_TOTAL").
                                  setLabel("CONTRACTQTYVISAITEMINSPECTQTY: Inspect Qty").
                                  setSize(20);  
     contract_qty_visa_item_blk.addField("INSPECT_TOTAL", "Number" ,"#0.00").
                                  setInsertable().
                                  setLabel("CONTRACTQTYVISAITEMINSPECTTOTAL: Inspect Total").
                                  setSize(20);

     // 5
     contract_qty_visa_item_blk.addField("OWNER_QTY", "Number" ,"#0.00").
                                  setInsertable().     
                                  setLabel("CONTRACTQTYVISAITEMOWNERQTY: Owner Qty").
                                  setCustomValidation("PRICE,OWNER_QTY", "OWNER_TOTAL").
                                  setSize(20);
     contract_qty_visa_item_blk.addField("OWNER_TOTAL", "Number" ,"#0.00").   
                                  setInsertable().
                                  setLabel("CONTRACTQTYVISAITEMOWNERTOTAL: Owner Total").
                                  setSize(20);  
     contract_qty_visa_item_blk.addField("PLAN_QTY", "Number" ,"#0.00").
                                setInsertable().
                                setHidden().  
                                setLabel("CONTRACTQTYVISAITEMPLANQTY: Plan Qty").
                                setSize(20);

// Hidden fields    
     contract_qty_visa_item_blk.addField("ITEM_TYPE").
                                setReadOnly().
                                setHidden().
                                setCheckBox("FOLDER,ITEM").
                                setLabel("CONTRACTQTYVISAITEMITEMTYPE: Item Type").
                                setSize(6);
     contract_qty_visa_item_blk.addField("ITEM_CURRENCY").
                                setReadOnly().
                                setHidden().
                                setLabel("CONTRACTQTYVISAITEMITEMCURRENCY: Item Currency").
                                setSize(5); 
     contract_qty_visa_item_blk.addField("FULL_PATH").
                                setHidden().
                                setLabel("CONTRACTQTYVISAITEMFULLPATH: Full Path").
                                setSize(50);
      contract_qty_visa_item_blk.addField("REPORT_NO").
                                 setReadOnly().
                                 setLabel("CONTRACTQTYVISAITEMREPORTNO: Report No").
                                 setSize(30);
      contract_qty_visa_item_blk.addField("REPORT_STATUS").
                                 setReadOnly().
                                 setCheckBox("FALSE,TRUE").
                                 setLabel("CONTRACTQTYVISAITEMREPORTSTATUS: Report Status").
                                 setSize(10);
      contract_qty_visa_item_blk.addField("EXCHANGE_RATE").
                                 setReadOnly().
                                 setHidden().    
                                 setLabel("CONTRACTQTYVISAITEMREPORTEXCHANGERATE: Exchange Rate").
                                 setSize(10);
      contract_qty_visa_item_blk.addField("ITEM_NOTE").
                                 setInsertable().
                                 setLabel("CONTRACTQTYVISAITEMITEMNOTE: Item Note").
                                 setHeight(3).
                                 setSize(140);  
      contract_qty_visa_item_blk.setView("CONTRACT_QTY_VISA_ITEM");
      contract_qty_visa_item_blk.defineCommand("CONTRACT_QTY_VISA_ITEM_API","New__,Modify__,Remove__");
      contract_qty_visa_item_blk.setMasterBlock(headblk);
      contract_qty_visa_item_set = contract_qty_visa_item_blk.getASPRowSet();
      contract_qty_visa_item_bar = mgr.newASPCommandBar(contract_qty_visa_item_blk);
      contract_qty_visa_item_bar.defineCommand(contract_qty_visa_item_bar.OKFIND, "okFindITEM1");
      contract_qty_visa_item_bar.defineCommand(contract_qty_visa_item_bar.NEWROW, "newRowITEM1");
      contract_qty_visa_item_tbl = mgr.newASPTable(contract_qty_visa_item_blk);
      contract_qty_visa_item_tbl.setTitle("CONTRACTQTYVISAITEMITEMHEAD1: ContractQtyVisaItem");
      contract_qty_visa_item_tbl.enableRowSelect();
      contract_qty_visa_item_tbl.setWrap();
      contract_qty_visa_item_lay = contract_qty_visa_item_blk.getASPBlockLayout();
      contract_qty_visa_item_lay.setDefaultLayoutMode(contract_qty_visa_item_lay.MULTIROW_LAYOUT);
      contract_qty_visa_item_lay.setSimple("ITEM_UNIT_DESC"); 
      contract_qty_visa_item_lay.setDataSpan("REPORT_STATUS", 6);
      contract_qty_visa_item_lay.setDataSpan("ITEM_NOTE", 6);     
      
   }


   public void adjust() throws FndException
   {
      super.adjust();
      // fill function body
      if(headlay.isMultirowLayout()){
         headset.storeSelections();
         ASPBuffer selected_fields=headset.getSelectedRows("OBJSTATE");
         for(int i=0;i<selected_fields.countItems();i++){
             ASPBuffer subBuff = selected_fields.getBufferAt(i);
             String state=subBuff.getValueAt(0);
             if( "Completed".equals(state)){
                 headbar.disableCommand(headbar.DELETE);
                 headbar.disableCommand(headbar.EDITROW);   
            }  
         }      
      } else {
         if(headset!=null&&headset.countRows()>0){
          String state = headset.getValue("OBJSTATE");    
          if( headlay.isSingleLayout() && ("Completed".equals(state))){ 
             headbar.disableCommand(headbar.DELETE);
             headbar.disableCommand(headbar.EDITROW);       
             contract_qty_visa_item_bar.disableCommand(contract_qty_visa_item_bar.EDITROW);
             contract_qty_visa_item_bar.disableCommand(contract_qty_visa_item_bar.DELETE);  
             contract_qty_visa_item_bar.disableCommand(contract_qty_visa_item_bar.NEWROW);  
      }
      }
      }  
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------
   public void validate()
   {
       ASPManager mgr = getASPManager();
       ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
       ASPCommand cmd;
       String val = mgr.readValue("VALIDATE");    
       float tempValue = 0;
       String txt = "";  
       String itemDesc = "";
       String itemType = "";
       String itemCurrency = "";
       String itemUnit = "";
       String exchangeRate = "";
       String price = "";       
       String mat_no = "";  
       String budget_line_no = "";  
       
       if ("REPORT_QTY".equals(val)) {         
         tempValue = ((mgr.readValue("PRICE")==null)?0:Float.parseFloat(mgr.readValue("PRICE")))*((mgr.readValue("REPORT_QTY")==null)?0:Float.parseFloat(mgr.readValue("REPORT_QTY")));
         java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00"); 
         String strValue = df.format(tempValue);  
         mgr.responseWrite(String.valueOf(strValue)+"^");
       }
       else if("INSPECT_QTY".equals(val)){
         tempValue = ((mgr.readValue("PRICE")==null)?0:Float.parseFloat(mgr.readValue("PRICE")))*((mgr.readValue("INSPECT_QTY")==null)?0:Float.parseFloat(mgr.readValue("INSPECT_QTY")));
         java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00"); 
         String strValue = df.format(tempValue);  
         mgr.responseWrite(String.valueOf(strValue)+"^");
       }else if("OWNER_QTY".equals(val)){
          tempValue = ((mgr.readValue("PRICE")==null)?0:Float.parseFloat(mgr.readValue("PRICE")))*((mgr.readValue("OWNER_QTY")==null)?0:Float.parseFloat(mgr.readValue("OWNER_QTY")));
          java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00"); 
          String strValue = df.format(tempValue);  
          mgr.responseWrite(String.valueOf(strValue)+"^");
       }      
       if("ITEM_NO".equals(val)){    
          String proj_no = mgr.readValue("PROJ_NO");
          String contract_id = mgr.readValue("CONTRACT_ID");
          cmd = trans.addCustomFunction("ITEMDESC", 
                "PROJECT_CONTRACT_ITEM_API.Get_Item_Desc", "ITEM_DESC");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO");             
            
          cmd = trans.addCustomFunction("ITEMTYPE", 
                "PROJECT_CONTRACT_ITEM_API.Get_Item_Type", "ITEM_TYPE");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO");             
          
          cmd = trans.addCustomFunction("ITEMCURRENCY", 
                "PROJECT_CONTRACT_ITEM_API.Get_Item_Currency", "ITEM_CURRENCY");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO");              
          
          cmd = trans.addCustomFunction("ITEMUNIT", 
                "PROJECT_CONTRACT_ITEM_API.Get_Item_Unit", "ITEM_UNIT");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO");            
          
          cmd = trans.addCustomFunction("EXCHANGERATE", 
                "PROJECT_CONTRACT_ITEM_API.Get_Exchange_Rate", "EXCHANGE_RATE");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO");            
          
          cmd = trans.addCustomFunction("PRICE", 
                "PROJECT_CONTRACT_ITEM_API.Get_Price", "PRICE");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO");      
//          ORIGINAL_QTY,ORIGINAL_TOTAL,CHANGED_DIFF_QTY,CHANGED_DIFF_TOTAL,QTY,TOTAL
          cmd = trans.addCustomFunction("ORIGINALQTY", 
                "PROJECT_CONTRACT_ITEM_API.Get_Original_Qty", "ORIGINAL_QTY");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);  
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO");     
          
          cmd = trans.addCustomFunction("ORIGINALTOTAL", 
                "PROJECT_CONTRACT_ITEM_API.Get_Original_Total", "ORIGINAL_TOTAL");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO");  
          
          cmd = trans.addCustomFunction("CHANGEDDIFFQTY", 
                "PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Qty", "CHANGED_DIFF_QTY");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);  
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO");     
          
          cmd = trans.addCustomFunction("CHANGEDDIFFTOTAL", 
                "PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Total", "CHANGED_DIFF_TOTAL");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO");  
          
          cmd = trans.addCustomFunction("QTY", 
                "PROJECT_CONTRACT_ITEM_API.Get_Changed_Qty", "QTY");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);  
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO");     
          
          cmd = trans.addCustomFunction("TOTAL", 
                "PROJECT_CONTRACT_ITEM_API.Get_Changed_Total", "TOTAL");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO");  
          
          trans = mgr.validate(trans);   
          itemDesc = trans.getValue("ITEMDESC/DATA/ITEM_DESC");
          itemType = trans.getValue("ITEMTYPE/DATA/ITEM_TYPE");
          itemCurrency = trans.getValue("ITEMCURRENCY/DATA/ITEM_CURRENCY");
          itemUnit = trans.getValue("ITEMUNIT/DATA/ITEM_UNIT");
          exchangeRate = trans.getValue("EXCHANGERATE/DATA/EXCHANGE_RATE");
          java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00"); 
          price =  trans.getValue("PRICE/DATA/PRICE");     
          String original_qty = trans.getValue("ORIGINALQTY/DATA/ORIGINAL_QTY");   
          String original_total = trans.getValue("ORIGINALTOTAL/DATA/ORIGINAL_TOTAL"); 
          String changed_diff_qty = trans.getValue("CHANGEDDIFFQTY/DATA/CHANGED_DIFF_QTY");   
          String changed_diff_total = trans.getValue("CHANGEDDIFFTOTAL/DATA/CHANGED_DIFF_TOTAL"); 
          String qty =trans.getValue("QTY/DATA/QTY");   
          String total = trans.getValue("TOTAL/DATA/TOTAL");             
          trans.clear();  
          cmd.clear();        
          txt = ((mgr.isEmpty(itemDesc)) ? "" : itemDesc) + "^" + ((mgr.isEmpty(itemType)) ? "ITEM" : itemType) + "^" + ((mgr.isEmpty(itemCurrency)) ? "CNY" : itemCurrency) + "^" + ((mgr.isEmpty(itemUnit)) ? "" : itemUnit) + "^" + ((mgr.isEmpty(exchangeRate)) ? "1" : exchangeRate) + "^" + ((mgr.isEmpty(price)) ? "" : price) + "^" + ((mgr.isEmpty(original_qty)) ? "" : original_qty) + "^"+ ((mgr.isEmpty(original_total)) ? "" : original_total) + "^"+ ((mgr.isEmpty(changed_diff_qty)) ? "" : changed_diff_qty) + "^"+ ((mgr.isEmpty(changed_diff_total)) ? "" : changed_diff_total) + "^"+ ((mgr.isEmpty(qty)) ? "" : qty) + "^"+ ((mgr.isEmpty(total)) ? "" : total) + "^";
          mgr.responseWrite(txt);             
       }  
       mgr.endResponse();        
   }
   
   protected String getDescription()
   {
      return "CONTRACTQTYVISADESC: Contract Qty Visa";
   }


   protected String getTitle()
   {
      return "CONTRACTQTYVISATITLE: Contract Qty Visa";
   }


   protected void printContents() throws FndException
   {
      super.printContents();

      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else 
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }  
      if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
      {
         appendToHTML(contract_qty_visa_item_lay.show());
      }
   }
   //--------------------------  Added in new template  --------------------------
   //--------------  Return blk connected with workflow functions  ---------------
   //-----------------------------------------------------------------------------

   protected ASPBlock getBizWfBlock()
   {
      return headblk;
   }
}
