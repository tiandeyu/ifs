/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.contrw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.util.HashMap;
import java.util.Iterator;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ConsRemainOrderLine extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.contrw.ConsRemainOrderLine");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   private  ASPContext ctx;
   
   public String page_name = getClass().getName().toUpperCase();
   
   boolean createSuccess;
   String  showMsg;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  ConsRemainOrderLine (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      ctx = mgr.getASPContext();
      if(!mgr.isEmpty(mgr.readValue("CLOSE_NO")))
      {
         ctx.setGlobal("CLOSE_NO", mgr.readValue("CLOSE_NO"));
      }
      
      if(!mgr.isEmpty(mgr.readValue("PROJ_NO")))
      {
         ctx.setGlobal("PROJ_NO", mgr.readValue("PROJ_NO"));
      }
      
      if(!mgr.isEmpty(mgr.readValue("TRANS_TYPE_DB")))
      {
         ctx.setGlobal("TRANS_TYPE_DB", mgr.readValue("TRANS_TYPE_DB"));
      }
      
      if(!mgr.isEmpty(mgr.readValue("REM_ORD_NO")))
      {
         ctx.setGlobal("REM_ORD_NO", mgr.readValue("REM_ORD_NO"));
      }
      
      if( mgr.commandBarActivated() )
      {
         storeSelectionToCtx();
         eval(mgr.commandBarFunction());
      }
      else if (mgr.buttonPressed("CREATEORDERLINE"))
         createRemainOrderLine();
      else
         okFind();
      adjust();
   }
   
   private void storeSelectionToCtx()
   {
      ASPManager mgr = getASPManager();
      ASPContext ctx = mgr.getASPContext();
      
      int contRows = headset.countRows();
      if (contRows > 0)
      {
         headset.store();
         HashMap<String, ASPBuffer> orderLineMap = (HashMap) ctx.findGlobalObject(page_name);
         if (orderLineMap == null)
         {
            orderLineMap = new HashMap<String, ASPBuffer>();
         }
         
         headset.first();
         for(int i = 0; i < contRows; i++)
         {
            String rem_ord_no = headset.getRow().getValue("REM_ORD_NO");
            String trans_type = headset.getRow().getValue("TRANS_TYPE_DB");
            String proj_no = headset.getRow().getValue("PROJ_NO");
            String line_no = headset.getRow().getValue("LINE_NO");
            String keyRef = getLineKey(rem_ord_no, trans_type, proj_no, line_no);
            
            if (headset.isRowSelected())
            {
               if (!orderLineMap.containsKey(keyRef))
               {
                  ASPBuffer buff = mgr.newASPBuffer();
                  buff.addItem("REMAIN_NO", headset.getRow().getValue("REMAIN_NO"));
                  buff.addItem("DESCRIPTION", headset.getRow().getValue("DESCRIPTION"));
                  buff.addItem("REMAIN_TYPE_DB", headset.getRow().getValue("REMAIN_TYPE_DB"));
                  buff.addItem("LINE_NO", line_no);
                  
                  orderLineMap.put(keyRef, buff);
               }
            }
            else
            {
               if (orderLineMap.containsKey(keyRef))
               {
                  orderLineMap.remove(keyRef);
               }
            }
            headset.next();
         }
         ctx.setGlobalObject(page_name, orderLineMap);
      }
   }
   
   private void clearSelectionToCtx()
   {
      ASPManager mgr = getASPManager();
      ASPContext ctx = mgr.getASPContext();
      
      ctx.setGlobalObject(page_name, null);
   }
   
   private String getLineKey(String rem_ord_no, String trans_type, String proj_no, String line_no)
   {
      return "REM_ORD_NO=" + rem_ord_no + IfsNames.textSeparator +
             "TRANS_TYPE=" + trans_type + IfsNames.textSeparator +
             "PROJ_NO=" + proj_no + IfsNames.textSeparator +
             "LINE_NO=" + line_no + IfsNames.textSeparator;
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
     
      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      
      String proj_no = ctx.findGlobal("PROJ_NO");
      String trans_type_db = ctx.findGlobal("TRANS_TYPE_DB");
      String rem_ord_no = ctx.findGlobal("REM_ORD_NO");
      
      if (!mgr.isEmpty(proj_no))
         q.addWhereCondition("PROJ_NO='" + proj_no + "'");
      if (!mgr.isEmpty(trans_type_db))
         q.addWhereCondition("TRANS_TYPE_DB='" + trans_type_db + "'");
      if (!mgr.isEmpty(rem_ord_no))
         q.addWhereCondition("REM_ORD_NO='" + rem_ord_no + "'");
      
      q.addWhereCondition("objstate = 'Initialization'");
      
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("CONSREMAINORDERLINENODATA: No data found.");
         headset.clear();
      }
      clearSelectionToCtx();
   }

   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      
      String proj_no = ctx.findGlobal("PROJ_NO");
      String trans_type_db = ctx.findGlobal("TRANS_TYPE_DB");
      String rem_ord_no = ctx.findGlobal("REM_ORD_NO");
      
      if (!mgr.isEmpty(proj_no))
         q.addWhereCondition("PROJ_NO='" + proj_no + "'");
      if (!mgr.isEmpty(trans_type_db))
         q.addWhereCondition("TRANS_TYPE_DB='" + trans_type_db + "'");
      if (!mgr.isEmpty(rem_ord_no))
         q.addWhereCondition("REM_ORD_NO='" + rem_ord_no + "'");
      
      q.addWhereCondition("objstate = 'Initialization'");
      
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("OBJSTATE").
              setHidden();
      headblk.addField("OBJEVENTS").
              setHidden();
      headblk.addField("REM_ORD_NO").
              setMandatory().
              setInsertable().
              setLabel("CONSREMAINORDERLINEREMORDNO: ÒÅÁôÏîµ¥ºÅ").
              setSize(30).setHidden();
      headblk.addField("TRANS_TYPE").
              enumerateValues("Cons_Trans_Type_API").
              setSelectBox().
              setMandatory().
              setInsertable().
              setLabel("CONSREMAINORDERLINETRANSTYPE: Trans Type").
              setSize(30).setHidden();
      headblk.addField("TRANS_TYPE_DB").setHidden().setFunction("Cons_Trans_Type_API.encode( TRANS_TYPE)");
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setLabel("CONSREMAINORDERLINEPROJNO: ÏîÄ¿±àºÅ").
              setSize(30);
      headblk.addField("LINE_NO","Number").
              setMandatory().
              setInsertable().
              setLabel("CONSREMAINORDERLINELINENO: Line No").
              setSize(30).setHidden();
      headblk.addField("REMAIN_NO").
              setInsertable().
              setLabel("CONSREMAINORDERLINEREMAINNO: ÒÅÁôÏî±àÂë").
              setSize(30);
      headblk.addField("DESCRIPTION").
              setInsertable().
              setLabel("CONSREMAINORDERLINEDESCRIPTION: ÒÅÁôÏîÃèÊö").
              setSize(30);
      headblk.addField("CREATE_DATE","Date").
              setInsertable().
              setLabel("CONSREMAINORDERLINECREATEDATE: ´´½¨ÈÕÆÚ").
              setSize(30);
      headblk.addField("PLAN_DATE","Date").
              setInsertable().
              setLabel("CONSREMAINORDERLINEPLANDATE: ¼Æ»®Çå³ýÈÕÆÚ").
              setSize(30);
      headblk.addField("ACTUAL_DATE","Date").
              setInsertable().
              setLabel("CONSREMAINORDERLINEACTUALDATE: Êµ¼ÊÇå³ýÈÕÆÚ").
              setSize(30);
      headblk.addField("REMAIN_TYPE").
              enumerateValues("Cons_Remain_Type_API").
              setSelectBox().
              setMandatory().
              setInsertable().
              setLabel("CONSREMAINORDERLINEREMAINTYPE: ÀàÐÍ").
              setSize(30);
      headblk.addField("REMAIN_TYPE_DB").
              setHidden();
      headblk.addField("STATE").
      		  //setLOVProperty("WHERE", "").
              setLabel("CONSREMAINORDERLINESTATE: ×´Ì¬").
              setSize(30);
     
      headblk.addField("ACTUAL_CLS_DATE").setHidden().setFunction("''");
      headblk.addField("BSEM_CLS_FLAG").setHidden().setFunction("''");
      headblk.addField("CNPE_CLS_FLAG").setHidden().setFunction("''");
      headblk.addField("NOTE").setHidden().setFunction("''");
      headblk.addField("REMAIN_LINE_NO").setHidden().setFunction("''");
      headblk.addField("CLOSE_NO").setHidden().setFunction("''");
      
      headblk.setView("CONS_REMAIN_ORDER_LINE");
      //headblk.defineCommand("CONS_REMAIN_ORDER_LINE_API","New__,Modify__,Remove__,Close__,Open__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("AddRemainLine", "×·¼Ó");
      headbar.enableMultirowAction();
      // headbar.addCustomCommand("Close","CONSREMAINORDERLINECLOSE: Close Cons Remain Order Line");
      //headbar.addCustomCommand("Open","CONSREMAINORDERLINEOPEN: Open Cons Remain Order Line");

      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("CONSREMAINORDERLINETBLHEAD: Cons Remain Order Lines");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
   }



   public void  adjust()
   {
      ASPManager mgr = getASPManager();
      ASPContext ctx = mgr.getASPContext();
      
      HashMap<String, ASPBuffer> orderLineMap = (HashMap) ctx.findGlobalObject(page_name);
      int setCount = headset.countRows();
      
      if (orderLineMap != null && !orderLineMap.isEmpty() && setCount > 0)
      {
         headset.first();
         for(int i = 0; i < setCount; i++)
         {
            String rem_ord_no = headset.getRow().getValue("REM_ORD_NO");
            String trans_type = headset.getRow().getValue("TRANS_TYPE_DB");
            String proj_no = headset.getRow().getValue("PROJ_NO");
            String line_no = headset.getRow().getValue("LINE_NO");
            
            String keyRef = getLineKey(rem_ord_no, trans_type, proj_no, line_no);
               
            if (orderLineMap.containsKey(keyRef))
            {
               headset.selectRow();
            }
            headset.next();
         }
      }
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "CONSREMAINORDERLINEDESC: Cons Remain Order Line";
   }


   protected String getTitle()
   {
      return "CONSREMAINORDERLINETITLE: ·¿¼äÒÆ½»ÒÅÁôÏîÃ÷Ï¸";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      appendToHTML(headlay.show());
      
      if (createSuccess && !mgr.isEmpty(showMsg))
      {
         appendDirtyJavaScript("ifsAlert(\"" + showMsg + "\");\n");
         appendDirtyJavaScript("Close();\n");
      }
      else if (!headlay.isFindLayout() && headset.countRows() > 0)
      {
         beginDataPresentation();
         printSubmitButton("CREATEORDERLINE", mgr.translate("CONSREMAINORDERLINEDLGCREATE: Create Lines"), "");
         printSpaces(1);
         printSubmitButton("CANCEL", mgr.translate("CONSREMAINORDERLINEDLGCANCEL: Cancel"), "OnClick='javascript:window.close();'");
         endDataPresentation();
      }
      
      //
      // Client functions
      //
      
      appendDirtyJavaScript("function Close()\n");
      appendDirtyJavaScript("{\n");
      appendDirtyJavaScript("   try\n");
      appendDirtyJavaScript("   {\n");
      appendDirtyJavaScript("      eval(\"opener.refreshParent()\");\n");
      appendDirtyJavaScript("   }\n");
      appendDirtyJavaScript("   catch(err){}\n");
      appendDirtyJavaScript("   try\n");
      appendDirtyJavaScript("   {\n");
      appendDirtyJavaScript("      window.close();\n");
      appendDirtyJavaScript("   }\n");
      appendDirtyJavaScript("   catch(err){}\n");
      appendDirtyJavaScript("}\n");
   }
   
   public void createRemainOrderLine()
   {	
	   ASPManager mgr = getASPManager();
	   ctx = mgr.getASPContext();
	   ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
	   storeSelectionToCtx();
	   
	   HashMap<String, ASPBuffer> orderLineMap = (HashMap) ctx.findGlobalObject(page_name);
	   
      if (orderLineMap == null || orderLineMap.isEmpty())
      {
         mgr.showAlert(mgr.translate("CONSREMAINORDERLINEDLGNOREC: You must select any lines."));
      }
      else
      {
         Iterator lineKeyIterator = orderLineMap.keySet().iterator();
         
         for (int i = 0; lineKeyIterator.hasNext(); i++)
         {
            ASPBuffer buf = orderLineMap.get(lineKeyIterator.next());
            ASPCommand cmd = trans.addCustomCommand("CLOSELINE"+i, "CONS_CLOSE_ORDER_LINE_API.CREATE_ORDER_LINE");
            cmd.setParameter("CLOSE_NO", ctx.findGlobal("CLOSE_NO"));
            cmd.setParameter("PROJ_NO", ctx.findGlobal("PROJ_NO"));
            cmd.setParameter("TRANS_TYPE_DB", ctx.findGlobal("TRANS_TYPE_DB"));//buf.getValueAt(1)
            cmd.setParameter("REMAIN_NO", buf.getValueAt(0));
            cmd.setParameter("DESCRIPTION",buf.getValueAt(1));
            cmd.setParameter("ACTUAL_CLS_DATE", null);
            cmd.setParameter("BSEM_CLS_FLAG", null);
            cmd.setParameter("CNPE_CLS_FLAG", null);
            cmd.setParameter("NOTE", null);
            cmd.setParameter("REMAIN_TYPE_DB", buf.getValueAt(2));
            cmd.setParameter("REMAIN_LINE_NO", buf.getValueAt(3));
            cmd.setParameter("LINE_NO",null);
         }
         
         trans = mgr.perform(trans);
         createSuccess = true;
         showMsg = mgr.translate("CONSREMAINORDERLINEDLGMSGSUCC: Create lines in close order &1 successfully.", ctx.findGlobal("CLOSE_NO"));
         clearSelectionToCtx();
      }
   }
}
