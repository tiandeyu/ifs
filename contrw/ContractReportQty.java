/*
 *                 IFS Research & Development
 *
 *  This program is protected by copyright law and by international
 *  conventions. All licensing, renting, lending or copying (including
 *  for private use), and all other use of the program, which is not
 *  expressively permitted by IFS Research & Development (IFS), is a
 *  violation of the rights of IFS. Such violations will be reported to the
 *  appropriate authorities.
 *
 *  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
 *  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
 * ----------------------------------------------------------------------------
 * File                          :
 * Description                   :
 * Notes                         :
 * Other Programs Called :
 * ----------------------------------------------------------------------------
 * Modified    : Automatically generated by IFS/Design
 * ----------------------------------------------------------------------------
 */

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.contrw; 

//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.genbaw.GenbawConstants;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ContractReportQty extends HzASPPageProviderWf {  
    
	// -----------------------------------------------------------------------------
	// ---------- Static constants ------------------------------------------------
	// -----------------------------------------------------------------------------

	public static boolean DEBUG = Util.isDebugEnabled("ifs.conscw.ContractReportQty");

	// -----------------------------------------------------------------------------
	// ---------- Header Instances created on page creation --------
	// -----------------------------------------------------------------------------

	protected ASPBlock headblk;
	protected ASPRowSet headset;
	protected ASPCommandBar headbar;
	protected ASPTable headtbl;
	protected ASPBlockLayout headlay;

	// -----------------------------------------------------------------------------
	// ---------- Item Instances created on page creation --------
	// -----------------------------------------------------------------------------

	protected ASPBlock contract_report_qty_item_blk;
	protected ASPRowSet contract_report_qty_item_set;
	protected ASPCommandBar contract_report_qty_item_bar;
	protected ASPTable contract_report_qty_item_tbl;
	protected ASPBlockLayout contract_report_qty_item_lay;
	
	protected ASPBlock contract_report_qty_item_all_blk;
	protected ASPRowSet contract_report_qty_item_all_set;
	protected ASPCommandBar contract_report_qty_item_all_bar;
	protected ASPTable contract_report_qty_item_all_tbl;
	protected ASPBlockLayout contract_report_qty_item_all_lay;
	  
	ASPTransactionBuffer trans;  
   protected ASPTabContainer tabs;  

	// -----------------------------------------------------------------------------
	// ------------------------ Construction ---------------------------
	// -----------------------------------------------------------------------------

	public ContractReportQty(ASPManager mgr, String page_path) {
		super(mgr, page_path);
	}
	
   protected String getDefProj() {
      ASPManager mgr = getASPManager();
      ASPContext ctx =mgr.getASPContext();
      return ctx.findGlobal(GenbawConstants.PERSON_DEFAULT_PROJECT);
   }     
	
	public void run() throws FndException
	{
	   super.run();  
		ASPManager mgr = getASPManager();

		trans = mgr.newASPTransactionBuffer();
		
		if (mgr.commandBarActivated())
			eval(mgr.commandBarFunction());
		else if (mgr.dataTransfered())
			okFind();
		else if (!mgr.isEmpty(mgr.getQueryStringValue("SEARCH")))
			okFind();
		else if (!mgr.isEmpty(mgr.getQueryStringValue("REPORT_NO")))
			okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();    
      else if ("TRUE".equals(mgr.readValue("REFRESH_PARENT")))
         okFindITEM1();        
      else 
         okFind();
      tabs.saveActiveTab();
		adjust();
	}

	// -----------------------------------------------------------------------------
	// ------------------------ Command Bar functions ---------------------------
	// -----------------------------------------------------------------------------

	public void okFind()
	{
		ASPManager mgr = getASPManager();
		ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
		ASPQuery q;

		mgr.createSearchURL(headblk);
		q = trans.addQuery(headblk);
		q.includeMeta("ALL");
		if (mgr.dataTransfered())
			q.addOrCondition(mgr.getTransferedData());
		
//		q.addWhereCondition("Project_Contract_Access_API.Check_Current_Access(CONTRACT_ID) = 'TRUE'");
		
		q.setOrderByClause("CONTRACT_ID ASC,REPORT_NO DESC");
		
		mgr.querySubmit(trans, headblk);
		if (headset.countRows() == 0) {
			mgr.showAlert("CONTRACTREPORTQTYNODATA: No data found.");
			headset.clear();
		}
		eval(contract_report_qty_item_set.syncItemSets());
		eval(contract_report_qty_item_all_set.syncItemSets());
		okFindITEM1();
	}

	public void countFind()
	{
		ASPManager mgr = getASPManager();
		ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
		ASPQuery q;

		q = trans.addQuery(headblk);
		q.setSelectList("to_char(count(*)) N");
		
//		q.addWhereCondition("Project_Contract_Access_API.Check_Current_Access(CONTRACT_ID) = 'TRUE'");
		
		mgr.submit(trans);
		headlay.setCountValue(toInt(headset.getValue("N")));
		headset.clear();
	}

	public void newRow()
	{
		ASPManager mgr = getASPManager();
		ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
		ASPBuffer data;
		ASPCommand cmd;

		cmd = trans.addEmptyCommand("HEAD", "CONTRACT_REPORT_QTY_API.New__", headblk);
		cmd.setOption("ACTION", "PREPARE");
		cmd.setParameter("PROJ_NO", this.getDefProj());      
		trans = mgr.perform(trans);
		data = trans.getBuffer("HEAD/DATA");
		headset.addRow(data);
	}
	
	public void saveAndReturn()
	{
		ASPManager mgr = getASPManager();
		int currentRow;

		headset.changeRow();

		currentRow = headset.getCurrentRowNo();

		mgr.submit(trans);
		
		headset.goTo(currentRow);
		
		okFindITEM1();
	}

	// -----------------------------------------------------------------------------
	// ---------------------- Item block cmd bar functions -------------------------
	// -----------------------------------------------------------------------------

	public void okFindITEM1()
	{
		ASPManager mgr = getASPManager();
		
		if (headset.countRows() == 0)
			return;
		
		ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
		ASPQuery q;
		int headrowno;

		q = trans.addQuery(contract_report_qty_item_blk);
		q.addWhereCondition("CONTRACT_ID = ? AND REPORT_NO = ? AND ITEM_TYPE = ? AND IS_CURR_REPORT = ?");
		q.addParameter("CONTRACT_ID", headset.getValue("CONTRACT_ID"));
		q.addParameter("REPORT_NO", headset.getValue("REPORT_NO"));
		q.addParameter("ITEM_TYPE","ITEM");
		q.addParameter("IS_CURR_REPORT","TRUE");
		q.includeMeta("ALL");    
		headrowno = headset.getCurrentRowNo();
		
		q.setOrderByClause("FULL_PATH");
		
		mgr.querySubmit(trans, contract_report_qty_item_blk);
		headset.goTo(headrowno);
	}
	
	
	
	public void refreshITEM1()
	{
		ASPManager mgr = getASPManager();
		
		if (headset.countRows() == 0)
			return;
		
		ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
		ASPQuery q;
		int headrowno;

		q = trans.addEmptyQuery(contract_report_qty_item_blk);
      q.addWhereCondition("CONTRACT_ID = ? AND REPORT_NO = ? AND ITEM_TYPE = ? AND IS_CURR_REPORT = ?");
      q.addParameter("CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      q.addParameter("REPORT_NO", headset.getValue("REPORT_NO"));
      q.addParameter("ITEM_TYPE","ITEM");
      q.addParameter("IS_CURR_REPORT","TRUE");  
      q.addWhereCondition("IS_DELETE IS NULL OR IS_DELETE = 'FALSE'");
		q.includeMeta("ALL");
		headrowno = headset.getCurrentRowNo();
		
		q.setOrderByClause("FULL_PATH");
		
		mgr.querySubmit(trans, contract_report_qty_item_blk);
		headset.goTo(headrowno);
	}

	public void newRowITEM1()
	{
		ASPManager mgr = getASPManager();
		ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
		ASPCommand cmd;
		ASPBuffer data;

		cmd = trans.addEmptyCommand("ITEM1", "CONTRACT_REPORT_QTY_ITEM_API.New__", contract_report_qty_item_blk);
		cmd.setOption("ACTION", "PREPARE");
		cmd.setParameter("ITEM0_CONTRACT_ID", headset.getValue("CONTRACT_ID"));
		cmd.setParameter("ITEM0_REPORT_NO", headset.getValue("REPORT_NO"));
		cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
		trans = mgr.perform(trans);  
		data = trans.getBuffer("ITEM1/DATA");
		contract_report_qty_item_set.addRow(data);
	}
	
	public void saveAndReturnITEM1()
	{
		ASPManager mgr = getASPManager();
		int currentRow;
		
		contract_report_qty_item_set.changeRow();
		
		currentRow = headset.getCurrentRowNo();

		mgr.submit(trans);

		headset.goTo(currentRow);
		
		headset.refreshRow();
		  
		contract_report_qty_item_tbl.clearQueryRow();
		 
	}
	
	  public void okFindITEM2()
	   {
	      ASPManager mgr = getASPManager();
	      
	      if (headset.countRows() == 0)
	         return;
	      
	      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
	      ASPQuery q;
	      int headrowno;

	      q = trans.addQuery(contract_report_qty_item_all_blk);
	      q.addWhereCondition("CONTRACT_ID = ? AND REPORT_NO = ?");
	      q.addParameter("CONTRACT_ID", headset.getValue("CONTRACT_ID"));
	      q.addParameter("REPORT_NO", headset.getValue("REPORT_NO"));
	      q.includeMeta("ALL");
	      headrowno = headset.getCurrentRowNo();
	      
	      q.setOrderByClause("FULL_PATH");
	      
	      mgr.querySubmit(trans, contract_report_qty_item_all_blk);
	      headset.goTo(headrowno);
	   }
	      
	   public void refreshITEM2()
	   {
	      ASPManager mgr = getASPManager();
	      
	      if (headset.countRows() == 0)
	         return;
	      
	      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
	      ASPQuery q;
	      int headrowno;

	      q = trans.addEmptyQuery(contract_report_qty_item_all_blk);
	      q.addWhereCondition("CONTRACT_ID = ? AND REPORT_NO = ?");
	      q.addParameter("CONTRACT_ID", headset.getValue("CONTRACT_ID"));
	      q.addParameter("REPORT_NO", headset.getValue("REPORT_NO"));
	      q.includeMeta("ALL");
	      headrowno = headset.getCurrentRowNo();
	      
	      q.setOrderByClause("FULL_PATH");
	      
	      mgr.querySubmit(trans, contract_report_qty_item_all_blk);
	      headset.goTo(headrowno);
	   }	   
	// -----------------------------------------------------------------------------
	// -------------------- Perform Header and Item functions ----------------------
	// -----------------------------------------------------------------------------

	public void performHEAD(String command)
	{
		int currow;

		ASPManager mgr = getASPManager();
		ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();

		currow = headset.getCurrentRowNo();
		if (headlay.isMultirowLayout())
			headset.storeSelections();
		else
			headset.selectRow();
		headset.markSelectedRows(command);
		mgr.submit(trans);
		headset.goTo(currow);
		refreshITEM1();
		refreshITEM2();
	}

	public void report()
	{
		performHEAD("Report__");
	}

	public void inspect()
	{
		performHEAD("Inspect__");
	}

	public void untread()
	{
		performHEAD("Untread__");
	}

	public void approve()
	{
		performHEAD("Approve__");
	}

	public void restart()
	{
		performHEAD("Restart__");
	}

	public void audit()
	{
		performHEAD("Audit__");
	}

	public void complete()
	{
		performHEAD("Complete__");
	}

	// -----------------------------------------------------------------------------
	// ------------------------ Predefines Head ---------------------------
	// -----------------------------------------------------------------------------

	public void preDefine()
	{
		ASPManager mgr = getASPManager();

		headblk = mgr.newASPBlock("MAIN");
		headblk.addField("OBJID").
				setHidden();
		headblk.addField("OBJVERSION").
				setHidden();
		headblk.addField("OBJSTATE").
				setHidden();
		headblk.addField("OBJEVENTS").
				setHidden();
		  
		// 1
	  headblk.addField("PROJ_NO").
             setMandatory().
             setDynamicLOV("GENERAL_PROJECT").
             setInsertable(). 
             setWfProperties(). 
             setDefaultNotVisible().
             setLabel("CONTRACTPAYMENTPROJNO: Proj No").
             setSize(50);
	  headblk.addField("GENERAL_PROJECT_PROJ_DESC").
             setReadOnly().
             setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
             setLabel("PROJECTCONTRACTGENERALPROJECTPROJDESC: General Project Proj Desc").
             setSize(20);    
     mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");   
	  headblk.addField("CONTRACT_ID").    
			    setMandatory().
			    setInsertable().
			    setUpperCase().
			    setWfProperties(). 
			    setReadOnly().
			    setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").      
			    setLOVProperty("WHERE", "SCHEDULE = 'TRUE'").
			    setLOVProperty("ORDER_BY", "CONTRACT_ID"). 
			    setLabel("CONTRACTREPORTQTYCONTRACTID: Contract Id").
			    setSize(20);
		headblk.addField("CONTRACT_DESC").
				setReadOnly().    
				setFunction("PROJECT_CONTRACT_API.GET_CONTRACT_DESC(:PROJ_NO,:CONTRACT_ID)").
				setLabel("CONTRACTREPORTQTYCONTRACTDESC: Contract Desc").
				setSize(30);      
		mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_DESC");
		
		headblk.addField("REPORT_NO", "Number").
				setReadOnly().
				setWfProperties(). 
				unsetInsertable().
				setDefaultNotVisible().
				setLabel("CONTRACTREPORTQTYREPORTNO: Report No").
				setSize(10);
		
		// 2
		headblk.addField("YEAR", "Number", "####").
				setMandatory().
				setInsertable().
				setLabel("CONTRACTREPORTQTYYEAR: Year").
				setSize(10);
		headblk.addField("MONTH").
				setMandatory().
				setInsertable().
				enumerateValues("Budget_Month_API").
		      setSelectBox().
				setLabel("CONTRACTREPORTQTYMONTH: Month").
				setSize(10);
	   headblk.addField("START_DATE", "Date").
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONTRACTREPORTQTYSTARTDATE: Start Date").
              setSize(10);
	   headblk.addField("END_DATE", "Date").
	           setInsertable(). 
	           setDefaultNotVisible().
              setLabel("CONTRACTREPORTQTYENDDATE: End Date").
              setSize(10);  
		  
		// 3
		headblk.addField("REPORTOR").
				setReadOnly().
				setDefaultNotVisible().
				setLabel("CONTRACTREPORTQTYREPORTOR: Reportor").
				setDynamicLOV("PERSON_INFO_LOV").
				setSize(10);
		headblk.addField("REPORTOR_NAME").
				setReadOnly().
				setDefaultNotVisible().
				setFunction("PERSON_INFO_API.GET_NAME(:REPORTOR)").
				setLabel("CONTRACTREPORTQTYREPORTORNAME: Reportor Name").
				setSize(10);
		mgr.getASPField("REPORTOR").setValidation("REPORTOR_NAME");
		
		headblk.addField("REPORT_DATE", "Date").
				setReadOnly().
				setDefaultNotVisible().
				setLabel("CONTRACTREPORTQTYREPORTDATE: Report Date").
				setSize(10);
		
		// 4
		headblk.addField("INSPECTOR").
				setReadOnly().
				setDefaultNotVisible().
				setLabel("CONTRACTREPORTQTYINSPECTOR: Inspector").
				setDynamicLOV("PERSON_INFO").
				setSize(10);
		headblk.addField("INSPECTOR_NAME").
				setReadOnly().
				setDefaultNotVisible().
				setFunction("PERSON_INFO_API.GET_NAME(:INSPECTOR)").
				setLabel("CONTRACTREPORTQTYINSPECTORNAME: Inspector Name").
				setSize(10);
		mgr.getASPField("INSPECTOR").setValidation("INSPECTOR_NAME");
		
		headblk.addField("INSPECT_DATE", "Date").
				setReadOnly().
				setDefaultNotVisible().
				setLabel("CONTRACTREPORTQTYINSPECTDATE: Inspect Date").
				setSize(10);
		
		// 5
		headblk.addField("APPROVER").
				setReadOnly().
				setDefaultNotVisible().
				setLabel("CONTRACTREPORTQTYAPPROVER: Approver").
				setDynamicLOV("PERSON_INFO").
				setSize(10);
		headblk.addField("APPROVER_NAME").
				setReadOnly().
				setDefaultNotVisible().
				setFunction("PERSON_INFO_API.GET_NAME(:APPROVER)").
				setLabel("CONTRACTREPORTQTYAPPROVERNAME: Approver Name").
				setSize(10);
		mgr.getASPField("APPROVER").setValidation("APPROVER_NAME");
		
		headblk.addField("APPROVE_DATE", "Date").
				setReadOnly().
				setDefaultNotVisible().
				setLabel("CONTRACTREPORTQTYAPPROVEDATE: Approve Date").
				setSize(10);
		
		// 6
		headblk.addField("AUDITOR").
				setReadOnly().
				setDefaultNotVisible().
				setLabel("CONTRACTREPORTQTYAUDITOR: Auditor").
				setDynamicLOV("PERSON_INFO").
				setSize(10);
		headblk.addField("AUDITOR_NAME").
				setReadOnly().
				setDefaultNotVisible().
				setFunction("PERSON_INFO_API.GET_NAME(:AUDITOR)").
				setLabel("CONTRACTREPORTQTYAUDITORNAME: Auditor Name").
				setSize(10);
		mgr.getASPField("AUDITOR").setValidation("AUDITOR_NAME");
		
		headblk.addField("AUDIT_DATE", "Date").
				setReadOnly().
				setDefaultNotVisible().
				setLabel("CONTRACTREPORTQTYAUDITDATE: Audit Date").
				setSize(10);
		
		// 7
		headblk.addField("COMPLETE_DATE", "Date").
				setReadOnly().
				setDefaultNotVisible().
				setLabel("CONTRACTREPORTQTYCOMPLETEDATE: Complete Date").
				setSize(10);
		headblk.addField("STATE").
				setReadOnly().
				setLabel("CONTRACTREPORTQTYSTATE: State").
				setSize(20);
		 
		// 8
		headblk.addField("REPORT_NOTE").
				setInsertable().
				setMandatory().
				setLabel("CONTRACTREPORTQTYREPORTNOTE: Report Note").
				setSize(50);
		headblk.addField("MON_OWN_TOTAL", "Money" ,"#0.00").
				setReadOnly().
				setFunction("Contract_Report_Qty_API.Cal_Owner_Total(:PROJ_NO,:CONTRACT_ID,:REPORT_NO)").
				setLabel("CONTRACTREPORTQTYMONOWNTOTAL: Mon Owner Total").
				setSize(20);
		
		// 9
		headblk.addField("ACC_OWN_TOTAL", "Money" ,"#0.00").
				setReadOnly().
				setFunction("Contract_Report_Qty_API.Cal_All_Owner_Total(:PROJ_NO,:CONTRACT_ID,:REPORT_NO)").
				setLabel("CONTRACTREPORTQTYACCOWNTOTAL: Acc Owner Total").
				setSize(20);
	   headblk.addField("IS_FINISH").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("CONTRACTREPORTQTYISFINISH: Is Finish").
              setSize(20);
	   headblk.addField("FLOW_TITLE").
              setWfProperties().
              setReadOnly().
              setHidden().
              setFunction("REPORT_NOTE").
              setLabel("FLOWTITLE: Flow Title");  
		headblk.setView("CONTRACT_REPORT_QTY");
		headblk.defineCommand("CONTRACT_REPORT_QTY_API", "New__,Modify__,Remove__,Report__,Inspect__,Untread__,Approve__,Restart__,Audit__,Complete__");
		headset = headblk.getASPRowSet();
		headbar = mgr.newASPCommandBar(headblk);
		
		headbar.defineCommand(headbar.SAVERETURN, "saveAndReturn");    
		headbar.addCustomCommand("import_contract_item", "CONTRACTCONTACTIMPORTCONTRACTITEM: Import Contract Item...");
		headbar.addSecureCustomCommand("Report", "CONTRACTREPORTQTYREPORT: Report...", "CONTRACT_REPORT_QTY_API.Report__");
		headbar.addSecureCustomCommand("Inspect", "CONTRACTREPORTQTYINSPECT: Inspect...", "CONTRACT_REPORT_QTY_API.Inspect__");
		headbar.addSecureCustomCommand("Approve", "CONTRACTREPORTQTYAPPROVE: Approve...", "CONTRACT_REPORT_QTY_API.Approve__");
		headbar.addSecureCustomCommand("Audit", "CONTRACTREPORTQTYAUDIT: Audit...", "CONTRACT_REPORT_QTY_API.Audit__");
		headbar.addSecureCustomCommand("Complete", "CONTRACTREPORTQTYCOMPLETE: Complete", "CONTRACT_REPORT_QTY_API.Complete__");
		headbar.addCustomCommandSeparator();
		headbar.addSecureCustomCommand("Untread", "CONTRACTREPORTQTYUNTREAD: Untread...", "CONTRACT_REPORT_QTY_API.Untread__");
		headbar.addSecureCustomCommand("Restart", "CONTRACTREPORTQTYRESTART: Restart...", "CONTRACT_REPORT_QTY_API.Restart__");
		
		headbar.addCommandValidConditions("Report",		"OBJSTATE",		"Enable",		"Initialization");
		headbar.addCommandValidConditions("Inspect",	"OBJSTATE",		"Enable",		"Reported");
		headbar.addCommandValidConditions("Approve",	"OBJSTATE",		"Enable",		"Inspected");
		headbar.addCommandValidConditions("Audit",		"OBJSTATE",		"Enable",		"Approved");
		headbar.addCommandValidConditions("Complete",	"OBJSTATE",		"Enable",		"Audited");
		headbar.addCommandValidConditions("Untread",	"OBJSTATE",		"Disable",		"Initialization;Completed");
		headbar.addCommandValidConditions("Restart",	"OBJSTATE",		"Enable",		"Inspected;Approved;Audited");
		headbar.addCustomCommand("printReportCover", "CONTRACTREPORTQTYREPORTPRINTCOVER: Contract Report Qty Report Cover...");
		headbar.addCustomCommand("printReport", "CONTRACTREPORTQTYREPORTPRINT: Contract Report Qty Report...");
		headtbl = mgr.newASPTable(headblk);        
		headtbl.setTitle("CONTRACTREPORTQTYTBLHEAD: Contract Report Qtys");
		headtbl.enableRowSelect();
		headtbl.setWrap();
		headlay = headblk.getASPBlockLayout();
		headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
		
		headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
		headlay.setSimple("REPORTOR_NAME");  
		headlay.setSimple("INSPECTOR_NAME");
		headlay.setSimple("APPROVER_NAME");
		headlay.setSimple("AUDITOR_NAME");
		 headlay.setSimple("CONTRACT_DESC");  
		
		//
		// Contract Report Qty Items
		//

		contract_report_qty_item_blk = mgr.newASPBlock("ITEM1");
		contract_report_qty_item_blk.addField("ITEM0_OBJID").
				                       setHidden().
				                       setDbName("OBJID");
		contract_report_qty_item_blk.addField("ITEM0_OBJVERSION").
				                       setHidden().
				                       setDbName("OBJVERSION");
		contract_report_qty_item_blk.addField("ITEM0_CONTRACT_ID").
                        			  setDbName("CONTRACT_ID").
                        			  setMandatory().
                        			  setInsertable().
                        			  setHidden().
                        			  setLabel("CONTRACTREPORTQTYITEMITEM0CONTRACTID: Contract Id").
                        			  setSize(20);
	    contract_report_qty_item_blk.addField("ITEM0_PROJ_NO").
	                                 setDbName("PROJ_NO").
	                                 setMandatory().  
	                                 setInsertable().
	                                 setHidden().
	                                 setLabel("CONTRACTREPORTQTYITEMITEM0PROJNO: Proj No").
	                                 setSize(20);
		contract_report_qty_item_blk.addField("ITEM0_REPORT_NO", "Number").
				                       setDbName("REPORT_NO").
				                       setMandatory().
				                       setInsertable().
				                       setHidden().
				                       setLabel("CONTRACTREPORTQTYITEMITEM0REPORTNO: Report No").
				                       setSize(10);
		contract_report_qty_item_blk.addField("ITEM0_YEAR", "Number").
				                       setDbName("YEAR").
				                       setHidden().
				                       setLabel("CONTRACTREPORTQTYITEMITEM0YEAR: Year").
				                       setSize(4);
		
		contract_report_qty_item_blk.addField("ITEM0_MONTH").
				                       setDbName("MONTH").
				                       setHidden().
				                       setLabel("CONTRACTREPORTQTYITEMITEM0MONTH: Month").
				                       setSize(2);
		
		// 1
		contract_report_qty_item_blk.addField("ITEM_NO").
				                       setMandatory().
				                       setInsertable().
				                       setReadOnly().
				                       setDynamicLOV("PROJECT_CONTRACT_ITEM", "PROJ_NO,CONTRACT_ID").
				                       setLOVProperty("WHERE", "ITEM_TYPE = 'ITEM'").
				                       setLOVProperty("ORDER_BY", "FULL_PATH").  
				                       setLabel("CONTRACTREPORTQTYITEMITEMNO: Item No").
				                       setSize(20);  
		contract_report_qty_item_blk.addField("ITEM_DESC").
		                             setReadOnly().
		                             setLabel("CONTRACTREPORTQTYITEMITEMDESC: Item Desc").
		                             setSize(30);
		contract_report_qty_item_blk.addField("ITEM_UNIT").
				                       setReadOnly().
				                       setLabel("CONTRACTREPORTQTYITEMITEMUNIT: Item Unit").
				                       setDynamicLOV("ISO_UNIT").
				                       setSize(10);
		contract_report_qty_item_blk.addField("ITEM_UNIT_DESC").
				                       setReadOnly().
				                       setLabel("CONTRACTREPORTQTYITEMITEMUNITDESC: Item Unit Desc").
				                       setFunction("Iso_Unit_API.Get_Description(:ITEM_UNIT)").
				                       setSize(10);
		mgr.getASPField("ITEM_UNIT").setValidation("ITEM_UNIT_DESC");
		
		// 2
	    contract_report_qty_item_blk.addField("PRICE", "Money","#0.00").
                                    setReadOnly().
                                    setCustomValidation("PRICE,REPORT_QTY,INSPECT_QTY,OWNER_QTY", "REPORT_TOTAL,INSPECT_TOTAL,OWNER_TOTAL").
                                    setLabel("CONTRACTREPORTQTYITEMPRICE: Price").
                                    setSize(20);
	    contract_report_qty_item_blk.addField("ORIGINAL_QTY", "Number" ,"#0.00").
                                    setReadOnly().
                                    setFunction("PROJECT_CONTRACT_ITEM_API.Get_Original_Qty(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                    setLabel("CONTRACTREPORTQTYITEMORIGINALQTY: Original Qty").
                                    setSize(20);  
	    contract_report_qty_item_blk.addField("ORIGINAL_TOTAL", "Money","#0.00").
                                    setReadOnly().
                                    setFunction("PROJECT_CONTRACT_ITEM_API.Get_Original_Total(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                    setLabel("CONTRACTREPORTQTYITEMORIGINALTOTAL: Original Total").
                                    setSize(20);  
	    
	     contract_report_qty_item_blk.addField("CHANGED_DIFF_QTY", "Number" ,"#0.00").
	                                  setReadOnly().
	                                  setFunction("PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Qty(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
	                                  setLabel("CONTRACTREPORTQTYITEMCHANGEDDIFFQTY: Changed Diff Qty").
	                                  setSize(20);   
	     
	     contract_report_qty_item_blk.addField("CHANGED_DIFF_TOTAL", "Money","#0.00").
                                     setReadOnly().
                                     setFunction("PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Total(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                     setLabel("CONTRACTREPORTQTYITEMCHANGEDDIFFTOTAL: Changed Diff Total").
                                     setSize(20);   
	     
		contract_report_qty_item_blk.addField("QTY", "Number" ,"#0.00").
				                       setReadOnly().
				                       setLabel("CONTRACTREPORTQTYITEMQTY: Qty").
				                       setSize(20);

		contract_report_qty_item_blk.addField("TOTAL", "Money","#0.00").
				                       setReadOnly().
				                       setLabel("CONTRACTREPORTQTYITEMTOTAL: Total").
				                       setSize(20);
		
		// 3
		contract_report_qty_item_blk.addField("REPORT_QTY", "Number","#0.00").
				                       setInsertable().
				                       setCustomValidation("PRICE,REPORT_QTY", "REPORT_TOTAL").
				                       setLabel("CONTRACTREPORTQTYITEMREPORTQTY: Report Qty").
				                       setSize(20);
		contract_report_qty_item_blk.addField("REPORT_TOTAL", "Number","#0.00").
				                       setInsertable().
				                       setLabel("CONTRACTREPORTQTYITEMREPORTTOTAL: Report Total").
				                       setSize(20);
		
		// 4
		contract_report_qty_item_blk.addField("INSPECT_QTY", "Number","#0.00").
		                             setInsertable().
		                             setCustomValidation("PRICE,INSPECT_QTY", "INSPECT_TOTAL").
		                             setLabel("CONTRACTREPORTQTYITEMINSPECTQTY: Inspect Qty").
		                             setSize(20);  
		contract_report_qty_item_blk.addField("INSPECT_TOTAL", "Number" ,"#0.00").
				                       setInsertable().
				                       setLabel("CONTRACTREPORTQTYITEMINSPECTTOTAL: Inspect Total").
				                       setSize(20);

		// 5
		contract_report_qty_item_blk.addField("OWNER_QTY", "Number" ,"#0.00").
				                       setInsertable().     
				                       setLabel("CONTRACTREPORTQTYITEMOWNERQTY: Owner Qty").
				                       setCustomValidation("PRICE,OWNER_QTY", "OWNER_TOTAL").
				                       setSize(20);
		contract_report_qty_item_blk.addField("OWNER_TOTAL", "Number" ,"#0.00").   
				                       setInsertable().
				                       setLabel("CONTRACTREPORTQTYITEMOWNERTOTAL: Owner Total").
				                       setSize(20);
		
		// 6
	    contract_report_qty_item_blk.addField("PRE_OWNER_TOTAL", "Number" ,"#0.00").
                                    unsetInsertable().
                                    setReadOnly().
                                    setFunction("Contract_Report_Qty_Item_API.Cal_All_Owner_Total(:ITEM0_PROJ_NO,:ITEM0_CONTRACT_ID, :ITEM0_REPORT_NO - 1, :ITEM_NO)").
                                    setLabel("CONTRACTREPORTQTYITEMPREOWNERTOTAL: Pre Owner Total").
                                    setSize(20);    
		contract_report_qty_item_blk.addField("ALL_OWNER_TOTAL", "Number" ,"#0.00").
				                       unsetInsertable().
				                       setReadOnly().
				                       setFunction("Contract_Report_Qty_Item_API.Cal_All_Owner_Total(:ITEM0_PROJ_NO,:ITEM0_CONTRACT_ID, :ITEM0_REPORT_NO, :ITEM_NO)").
				                       setLabel("CONTRACTREPORTQTYITEMALLOWNERTOTAL: All Owner Total").
				                       setSize(20);    
		contract_report_qty_item_blk.addField("ITEM_NOTE").
				                       setInsertable().
				                       setLabel("CONTRACTREPORTQTYITEMITEMNOTE: Item Note").
				                       setSize(50);
		contract_report_qty_item_blk.addField("PLAN_QTY", "Number" ,"#0.00").
				                       setInsertable().
				                       setHidden().  
				                       setLabel("CONTRACTREPORTQTYITEMPLANQTY: Plan Qty").
				                       setSize(20);
		
		// Hidden fields    
		contract_report_qty_item_blk.addField("ITEM_TYPE").
				                       setReadOnly().
				                       setCheckBox("FOLDER,ITEM").
				                       setLabel("CONTRACTREPORTQTYITEMITEMTYPE: Item Type").
				                       setSize(6);
	    contract_report_qty_item_blk.addField("VISA_VAR").
	                                 setReadOnly().
	                                 setLabel("CONTRACTREPORTQTYITEMVISAVAR: Visa Var").
	                                 setSize(6);
		contract_report_qty_item_blk.addField("ITEM_CURRENCY").
				                       setReadOnly().
				                       setHidden().
				                       setLabel("CONTRACTREPORTQTYITEMITEMCURRENCY: Item Currency").
				                       setSize(5);
		contract_report_qty_item_blk.addField("CONTRACT_ITEM_REP_TYPE").
				                       enumerateValues("Contract_Item_Rep_Type_API").
				                       setSelectBox().  
				                       setInsertable().
				                       setHidden().
				                       setLabel("CONTRACTREPORTQTYITEMITEMREPTYPE: Item Rep Type").
				                       setSize(20);  
		contract_report_qty_item_blk.addField("FULL_PATH").
				                       setHidden().
				                       setLabel("CONTRACTREPORTQTYITEMFULLPATH: Full Path").
				                       setSize(50);
	   contract_report_qty_item_blk.addField("IS_CURR_REPORT").
                                    setHidden().
                                    setLabel("CONTRACTREPORTQTYITEMISCURRREPORT: Is Curr Report").
                                    setSize(50);
		contract_report_qty_item_blk.setView("CONTRACT_REPORT_QTY_ITEM");
		contract_report_qty_item_blk.defineCommand("CONTRACT_REPORT_QTY_ITEM_API", "Modify__,Remove__");
		contract_report_qty_item_blk.setMasterBlock(headblk);
		contract_report_qty_item_set = contract_report_qty_item_blk.getASPRowSet();
		contract_report_qty_item_bar = mgr.newASPCommandBar(contract_report_qty_item_blk);
		contract_report_qty_item_bar.enableMultirowAction();
		contract_report_qty_item_bar.defineCommand(contract_report_qty_item_bar.OKFIND, "okFindITEM1");
		contract_report_qty_item_bar.defineCommand(contract_report_qty_item_bar.NEWROW, "newRowITEM1");
	   contract_report_qty_item_bar.defineCommand(contract_report_qty_item_bar.REMOVE, "removeRowITEM1");
		contract_report_qty_item_bar.defineCommand(contract_report_qty_item_bar.SAVERETURN, "saveAndReturnITEM1");
		contract_report_qty_item_tbl = mgr.newASPTable(contract_report_qty_item_blk);
		contract_report_qty_item_tbl.setTitle("CONTRACTREPORTQTYITEMITEMHEAD1: ContractReportQtyItem");
		contract_report_qty_item_tbl.enableRowSelect();
		contract_report_qty_item_tbl.setWrap();
		contract_report_qty_item_lay = contract_report_qty_item_blk.getASPBlockLayout();
		contract_report_qty_item_lay.setDialogColumns(2);  
		contract_report_qty_item_lay.setDefaultLayoutMode(contract_report_qty_item_lay.MULTIROW_LAYOUT);
		contract_report_qty_item_lay.setSimple("ITEM_UNIT_DESC");  
		
	    //
      // Contract Report Qty Items All
      //

      contract_report_qty_item_all_blk = mgr.newASPBlock("ITEM2");
      contract_report_qty_item_all_blk.addField("ITEM1_OBJID").
                                       setHidden().
                                       setDbName("OBJID");
      contract_report_qty_item_all_blk.addField("ITEM1_OBJVERSION").
                                       setHidden().
                                       setDbName("OBJVERSION");
      contract_report_qty_item_all_blk.addField("ITEM1_CONTRACT_ID").
                                       setDbName("CONTRACT_ID").
                                       setMandatory().
                                       setInsertable().
                                       setHidden().
                                       setLabel("CONTRACTREPORTQTYITEMITEM1CONTRACTID: Contract Id").
                                       setSize(20);
      contract_report_qty_item_all_blk.addField("ITEM1_PROJ_NO").
                                       setDbName("PROJ_NO").
                                       setMandatory().  
                                       setInsertable().
                                       setHidden().
                                       setLabel("CONTRACTREPORTQTYITEMITEM1PROJNO: Proj No").
                                       setSize(20);
      contract_report_qty_item_all_blk.addField("ITEM1_REPORT_NO", "Number").
                                       setDbName("REPORT_NO").
                                       setMandatory().
                                       setInsertable().
                                       setHidden().
                                       setLabel("CONTRACTREPORTQTYITEMITEM1REPORTNO: Report No").
                                       setSize(10);
      contract_report_qty_item_all_blk.addField("ITEM1_YEAR", "Number").
                                       setDbName("YEAR").
                                       setHidden().
                                       setLabel("CONTRACTREPORTQTYITEMITEM1YEAR: Year").
                                       setSize(4);
            
      contract_report_qty_item_all_blk.addField("ITEM1_MONTH").
                                       setDbName("MONTH").
                                       setHidden().
                                       setLabel("CONTRACTREPORTQTYITEMIITEM1MONTH: Month").
                                       setSize(2);
      // 1
      contract_report_qty_item_all_blk.addField("ITEM1_ITEM_NO").
                                       setMandatory().
                                       setDbName("ITEM_NO").
                                       setInsertable().
                                       setReadOnly().
                                       setDynamicLOV("PROJECT_CONTRACT_ITEM", "PROJ_NO,CONTRACT_ID").
                                       setLOVProperty("WHERE", "ITEM_TYPE = 'ITEM'").
                                       setLOVProperty("ORDER_BY", "FULL_PATH").  
                                       setLabel("CONTRACTREPORTQTYITEMITEM1ITEMNO: Item No").
                                       setSize(20);  
      contract_report_qty_item_all_blk.addField("ITEM1_ITEM_DESC").
                                       setReadOnly().
                                       setDbName("ITEM_DESC").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1ITEMDESC: Item Desc").
                                       setSize(30);
      contract_report_qty_item_all_blk.addField("ITEM1_ITEM_UNIT").
                                       setReadOnly().
                                       setDbName("ITEM_UNIT").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1ITEMUNIT: Item Unit").
                                       setDynamicLOV("ISO_UNIT").
                                       setSize(10);
      contract_report_qty_item_all_blk.addField("ITEM1_ITEM_UNIT_DESC").
                                       setReadOnly().
                                       setLabel("CONTRACTREPORTQTYITEMITEM1ITEMUNITDESC: Item Unit Desc").
                                       setFunction("Iso_Unit_API.Get_Description(:ITEM_UNIT)").
                                       setSize(10);
      mgr.getASPField("ITEM1_ITEM_UNIT").setValidation("ITEM1_ITEM_UNIT_DESC");
      
      // 2
      contract_report_qty_item_all_blk.addField("ITEM1_PRICE", "Money","#0.00").
                                       setReadOnly().
                                       setDbName("PRICE").
                                       setLabel("CONTRACTREPORTQTYITEM1ITEMPRICE: Price").
                                       setSize(20);    
      contract_report_qty_item_all_blk.addField("ITEM1_ORIGINAL_QTY", "Number" ,"#0.00").
                                       setReadOnly().
                                       setFunction("PROJECT_CONTRACT_ITEM_API.Get_Original_Qty(:PROJ_NO,:CONTRACT_ID,:ITEM1_ITEM_NO)").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1ORIGINALQTY: Original Qty").
                                       setSize(20);  
      contract_report_qty_item_all_blk.addField("ITEM1_ORIGINAL_TOTAL", "Money","#0.00").
                                       setReadOnly().
                                       setFunction("PROJECT_CONTRACT_ITEM_API.Get_Original_Total(:PROJ_NO,:CONTRACT_ID,:ITEM1_ITEM_NO)").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1ORIGINALTOTAL: Original Total").
                                       setSize(20);  
       
      contract_report_qty_item_all_blk.addField("ITEM1_CHANGED_DIFF_QTY", "Number" ,"#0.00").
                                       setReadOnly().
                                       setFunction("PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Qty(:PROJ_NO,:CONTRACT_ID,:ITEM1_ITEM_NO)").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1CHANGEDDIFFQTY: Changed Diff Qty").
                                       setSize(20);   
        
      contract_report_qty_item_all_blk.addField("ITEM1_CHANGED_DIFF_TOTAL", "Money","#0.00").
                                       setReadOnly().
                                       setFunction("PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Total(:PROJ_NO,:CONTRACT_ID,:ITEM1_ITEM_NO)").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1CHANGEDDIFFTOTAL: Changed Diff Total").
                                       setSize(20);   
        
      contract_report_qty_item_all_blk.addField("ITEM1_QTY", "Number" ,"#0.00").
                                       setReadOnly().
                                       setDbName("QTY"). 
                                       setLabel("CONTRACTREPORTQTYITEMITEM1QTY: Qty").
                                       setSize(20);

      contract_report_qty_item_all_blk.addField("ITEM1_TOTAL", "Money","#0.00").
                                      setReadOnly().
                                      setDbName("TOTAL").  
                                      setLabel("CONTRACTREPORTQTYITEMITEM1TOTAL: Total").
                                      setSize(20);
      
      // 3
      contract_report_qty_item_all_blk.addField("ITEM1_REPORT_QTY", "Number","#0.00").
                                       setInsertable(). 
                                       setDbName("REPORT_QTY").
                                       setCustomValidation("PRICE,REPORT_QTY", "REPORT_TOTAL").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1REPORTQTY: Report Qty").
                                       setSize(20);
      contract_report_qty_item_all_blk.addField("ITEM1_REPORT_TOTAL", "Number","#0.00").
                                       setInsertable().
                                       setDbName("REPORT_TOTAL").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1REPORTTOTAL: Report Total").
                                       setSize(20);
      
      // 4
      contract_report_qty_item_all_blk.addField("ITEM1_INSPECT_QTY", "Number","#0.00").
                                       setInsertable().
                                       setDbName("INSPECT_QTY").
                                       setCustomValidation("PRICE,INSPECT_QTY", "INSPECT_TOTAL").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1INSPECTQTY: Inspect Qty").
                                       setSize(20);  
      contract_report_qty_item_all_blk.addField("ITEM1_INSPECT_TOTAL", "Number" ,"#0.00").
                                       setInsertable().
                                       setDbName("INSPECT_TOTAL").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1INSPECTTOTAL: Inspect Total").
                                       setSize(20);
      // 5
      contract_report_qty_item_all_blk.addField("ITEM1_OWNER_QTY", "Number" ,"#0.00").
                                       setInsertable().   
                                       setDbName("OWNER_QTY").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1OWNERQTY: Owner Qty").
                                       setCustomValidation("PRICE,OWNER_QTY", "OWNER_TOTAL").
                                       setSize(20);
      contract_report_qty_item_all_blk.addField("ITEM1_OWNER_TOTAL", "Number" ,"#0.00").   
                                       setInsertable().
                                       setDbName("OWNER_TOTAL").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1OWNERTOTAL: Owner Total").
                                       setSize(20);
      
      // 6
      contract_report_qty_item_all_blk.addField("ITEM1_PRE_OWNER_TOTAL", "Number" ,"#0.00").
                                       unsetInsertable().
                                       setReadOnly().
                                       setFunction("Contract_Report_Qty_Item_API.Cal_All_Owner_Total(:ITEM1_PROJ_NO,:ITEM1_CONTRACT_ID, :ITEM1_REPORT_NO - 1, :ITEM1_ITEM_NO)").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1PREOWNERTOTAL: Pre Owner Total").
                                       setSize(20);    
      contract_report_qty_item_all_blk.addField("ITEM1_ALL_OWNER_TOTAL", "Number" ,"#0.00").
                                       unsetInsertable().
                                       setReadOnly().
                                       setFunction("Contract_Report_Qty_Item_API.Cal_All_Owner_Total(:ITEM1_PROJ_NO,:ITEM1_CONTRACT_ID, :ITEM1_REPORT_NO, :ITEM1_ITEM_NO)").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1ALLOWNERTOTAL: All Owner Total").
                                       setSize(20);    
      contract_report_qty_item_all_blk.addField("ITEM1_ITEM_NOTE").
                                       setInsertable().
                                       setDbName("ITEM_NOTE").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1ITEMNOTE: Item Note").
                                       setSize(50);
      contract_report_qty_item_all_blk.addField("ITEM1_PLAN_QTY", "Number" ,"#0.00").
                                       setInsertable().
                                       setDbName("PLAN_QTY").
                                       setHidden().  
                                       setLabel("CONTRACTREPORTQTYITEMITEM1PLANQTY: Plan Qty").
                                       setSize(20);
      
      // Hidden fields    
      contract_report_qty_item_all_blk.addField("ITEM1_ITEM_TYPE").
                                       setReadOnly().
                                       setDbName("ITEM_TYPE").  
                                       setCheckBox("FOLDER,ITEM").
                                       setLabel("CONTRACTREPORTQTYITEMITEM1ITEMTYPE: Item Type").
                                       setSize(6);
      contract_report_qty_item_all_blk.addField("ITEM1_ITEM_CURRENCY").
                                       setDbName("ITEM_CURRENCY").
                                       setReadOnly().  
                                       setHidden().
                                       setLabel("CONTRACTREPORTQTYITEMITEM1ITEMCURRENCY: Item Currency").
                                       setSize(5);  
      contract_report_qty_item_all_blk.addField("ITEM1_FULL_PATH").
                                       setDbName("FULL_PATH").
                                       setHidden().
                                       setLabel("CONTRACTREPORTQTYITEM1ITEMFULLPATH: Full Path").
                                       setSize(50);
      contract_report_qty_item_all_blk.setView("CONTRACT_REPORT_QTY_ITEM");
      contract_report_qty_item_all_blk.defineCommand("CONTRACT_REPORT_QTY_ITEM_API", "");
      contract_report_qty_item_all_blk.setMasterBlock(headblk);            
      contract_report_qty_item_all_set = contract_report_qty_item_all_blk.getASPRowSet();
      contract_report_qty_item_all_bar = mgr.newASPCommandBar(contract_report_qty_item_all_blk);
      contract_report_qty_item_all_bar.enableMultirowAction();
      contract_report_qty_item_all_bar.defineCommand(contract_report_qty_item_all_bar.OKFIND, "okFindITEM2");
      contract_report_qty_item_all_tbl = mgr.newASPTable(contract_report_qty_item_all_blk);  
      contract_report_qty_item_all_tbl.setTitle("CONTRACTREPORTQTYITEMITEM1ITEMHEAD2: ContractReportQtyItem");
      contract_report_qty_item_all_tbl.enableRowSelect();
      contract_report_qty_item_all_tbl.setWrap();
      contract_report_qty_item_all_lay = contract_report_qty_item_all_blk.getASPBlockLayout();
      contract_report_qty_item_all_lay.setDialogColumns(2);  
      contract_report_qty_item_all_lay.setDefaultLayoutMode(contract_report_qty_item_all_lay.MULTIROW_LAYOUT);
      contract_report_qty_item_all_lay.setSimple("ITEM_UNIT_DESC");  
		
      tabs = mgr.newASPTabContainer();
      tabs.addTab(mgr.translate("CONTRACTREPORTQTYLINETAB: Contract Report Qty Line" ), "javascript:commandSet('MAIN.activateContractReportQtyLine', '')");
      tabs.addTab(mgr.translate("CONTRACTREPORTQTYLINEALLTAB: Contract Report Qty Line All" ), "javascript:commandSet('MAIN.activateContractReportQtyLineAll', '')");
      headbar.addCustomCommand("activateContractReportQtyLine", "");
      headbar.addCustomCommand("activateContractReportQtyLineAll", "");
	
	}  

   public void activateContractReportQtyLine()
   {
      tabs.setActiveTab(1);
      okFindITEM1();
   }
   public void activateContractReportQtyLineAll()
   {
      tabs.setActiveTab(2);
      okFindITEM2();
   }
   
	public void adjust() throws FndException
	{
		// fill function body
      super.adjust();
//      if( headlay.isSingleLayout() || headlay.isCustomLayout() && headset.countRows()>0){
//         contract_report_qty_item_bar.disableCommand(contract_report_qty_item_bar.DELETE);
//         contract_report_qty_item_bar.disableCommand(contract_report_qty_item_bar.NEWROW);
//      }
      if(headlay.isMultirowLayout()){
         headset.storeSelections();
         ASPBuffer selected_fields=headset.getSelectedRows("OBJSTATE");
         for(int i=0;i<selected_fields.countItems();i++){
             ASPBuffer subBuff = selected_fields.getBufferAt(i);
             String state=subBuff.getValueAt(0);
             if( "Completed".equals(state)){
                 headbar.disableCommand(headbar.DELETE);
                 headbar.disableCommand(headbar.EDITROW);  
                 headbar.disableCommand("import_contract_item");
            }
         }      
      } else {
         if(headset!=null&&headset.countRows()>0){
          String state = headset.getValue("OBJSTATE");    
          if( headlay.isSingleLayout() && ("Completed".equals(state))){ 
             headbar.disableCommand(headbar.DELETE);
             headbar.disableCommand(headbar.EDITROW);   
             headbar.disableCommand("import_contract_item");
             contract_report_qty_item_bar.disableCommand(contract_report_qty_item_bar.EDITROW);
      }
      }
      }
	}
	
	 //Report  Function
   public void  printReportCover() throws FndException, UnsupportedEncodingException//TODO
   {
    ASPManager mgr = getASPManager();
    ASPConfig cfg = getASPConfig();
    String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
    if (headlay.isMultirowLayout())
       headset.goTo(headset.getRowSelected());
    if (headset.countRows()>0 )
          {   
             String proj_no = headset.getValue("PROJ_NO");
             String contract_id = headset.getValue("CONTRACT_ID");
             String report_no = headset.getValue("REPORT_NO");
              appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=RptContractReportQtyCover.raq&proj_no="+proj_no+"&contract_id="+contract_id+"&report_no="+report_no
                + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
         }         
   }       
   
   public void  printReport() throws FndException, UnsupportedEncodingException//TODO
   {
    ASPManager mgr = getASPManager();
    ASPConfig cfg = getASPConfig();
    String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
    if (headlay.isMultirowLayout())
       headset.goTo(headset.getRowSelected());
    if (headset.countRows()>0 )
          {   
             String proj_no = headset.getValue("PROJ_NO");
             String contract_id = headset.getValue("CONTRACT_ID");
             String report_no = headset.getValue("REPORT_NO");
              appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=RptContractReportQtySum.raq&proj_no="+proj_no+"&contract_id="+contract_id+"&report_no="+report_no
                + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
         }         
   }       

	// -----------------------------------------------------------------------------
	// ------------------------ Presentation functions ---------------------------
	// -----------------------------------------------------------------------------
   public void validate()
   {
       ASPManager mgr = getASPManager();
       String val = mgr.readValue("VALIDATE");    
       float tempValue = 0;
       
       if ("REPORT_QTY".equals(val)) {         
         tempValue = ((mgr.readValue("PRICE")==null)?0:Float.parseFloat(mgr.readValue("PRICE")))*((mgr.readValue("REPORT_QTY")==null)?0:Float.parseFloat(mgr.readValue("REPORT_QTY")));
         java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00"); 
         String strValue = df.format(tempValue);  
         mgr.responseWrite(String.valueOf(strValue)+"^");
       }
       else if("INSPECT_QTY".equals(val)){
         tempValue = ((mgr.readValue("PRICE")==null)?0:Float.parseFloat(mgr.readValue("PRICE")))*((mgr.readValue("INSPECT_QTY")==null)?0:Float.parseFloat(mgr.readValue("INSPECT_QTY")));
         java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00"); 
         String strValue = df.format(tempValue);  
         mgr.responseWrite(String.valueOf(strValue)+"^");
       }else if("OWNER_QTY".equals(val)){
          tempValue = ((mgr.readValue("PRICE")==null)?0:Float.parseFloat(mgr.readValue("PRICE")))*((mgr.readValue("OWNER_QTY")==null)?0:Float.parseFloat(mgr.readValue("OWNER_QTY")));
          java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00"); 
          String strValue = df.format(tempValue);  
          mgr.responseWrite(String.valueOf(strValue)+"^");
       }              
       mgr.endResponse();        
   }
   
	protected String getDescription() {
		return "CONTRACTREPORTQTYDESC: Contract Report Qty";
	}

	protected String getTitle() {
		return getDescription();
	}


   public void import_contract_item() throws FndException{
      ASPManager mgr = getASPManager();
      ASPCommand cmd = mgr.newASPCommand(); 
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      headset.storeSelections();
      if (headlay.isSingleLayout())
         headset.selectRow();
      ASPBuffer selected_fields=headset.getSelectedRows("PROJ_NO,CONTRACT_ID,REPORT_NO");
      callNewWindow("ContractItemDlg.page", selected_fields);         
   }      
         
   private void callNewWindow(String transfer_page, ASPBuffer buff) throws FndException 
   {
       String id;
       ASPManager mgr = getASPManager();
       ASPContext ctx = mgr.getASPContext();
       String proj_no = buff.getBufferAt(0).getValueAt(0);
       String contract_id = buff.getBufferAt(0).getValueAt(1);
       String report_no = buff.getBufferAt(0).getValueAt(2); 
       ctx.setGlobal("CONTRACTITEMDLGPROJNO", proj_no);
       ctx.setGlobal("CONTRACTITEMDLGCONTRACTID", contract_id);
       ctx.setGlobal("CONTRACTITEMDLGREPORTNO", report_no);  
      String url = transfer_page+"?USERCOMMAND=submitTree&PROJ_NO="+proj_no+"&CONTRACT_ID="+contract_id+"&report_no="+report_no;
//      String url = transfer_page+"?PROJ_NO="+project_no+"&PLAN_NO="+plan_no+"&PROJECT_TYPE_NO="+id;
      appendDirtyJavaScript("showNewBrowser_('"+ url + "', 550, 550, 'YES'); \n");
   }
	
	protected void printContents() throws FndException
	{
	   super.printContents();  
      printHiddenField("REFRESH_PARENT", "FALSE");
		ASPManager mgr = getASPManager();
		if (headlay.isVisible())
			appendToHTML(headlay.show());
		else 
		{
			headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
			appendToHTML(headlay.show());
		}
		
		if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
		{
		   appendToHTML(tabs.showTabsInit());      
         if (tabs.getActiveTab() == 1)
             appendToHTML(contract_report_qty_item_lay.show());
         if (tabs.getActiveTab() == 2)
             appendToHTML(contract_report_qty_item_all_lay.show());
         appendToHTML(tabs.showTabsFinish());      
		}  
      appendDirtyJavaScript("function refreshParent()\n");
      appendDirtyJavaScript("{\n");
      appendDirtyJavaScript(" document.form.REFRESH_PARENT.value=\"TRUE\"\n");
      appendDirtyJavaScript(" submit() \n");
      appendDirtyJavaScript("}\n");
	}    

   @Override
   protected ASPBlock getBizWfBlock() {
      // TODO Auto-generated method stub
      return headblk;  
   }
}   
   