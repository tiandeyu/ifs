/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.contrw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.genbaw.GenbawConstants;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ContractPaymentSch extends HzASPPageProviderWf  
{
  
   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.contrw.ContractPayment");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock contract_payment_item_blk;
   private ASPRowSet contract_payment_item_set;
   private ASPCommandBar contract_payment_item_bar;
   private ASPTable contract_payment_item_tbl;
   private ASPBlockLayout contract_payment_item_lay;

   private ASPBlock contract_payment_detain_blk;
   private ASPRowSet contract_payment_detain_set;
   private ASPCommandBar contract_payment_detain_bar;
   private ASPTable contract_payment_detain_tbl;
   private ASPBlockLayout contract_payment_detain_lay;
   
   private ASPTabContainer tabs;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  ContractPaymentSch (ASPManager mgr, String page_path)
   {
      super(mgr, page_path);
   }
   
   protected String getDefProj() {
      ASPManager mgr = getASPManager();
      ASPContext ctx =mgr.getASPContext();
      return ctx.findGlobal(GenbawConstants.PERSON_DEFAULT_PROJECT);
   }    
   
   public void run() throws FndException
   {
      super.run();

      ASPManager mgr = getASPManager();
      String comnd;  
      if( mgr.commandBarActivated() ){
         comnd = mgr.readValue("__COMMAND");
         eval(mgr.commandBarFunction());
         if (( "MAIN.SaveReturn".equals(comnd) )|| ( "ITEM1.SaveReturn".equals(comnd) )|| ( "ITEM1.Delete".equals(comnd) )|| ( "ITEM2.SaveReturn".equals(comnd) )|| ( "ITEM2.SaveNew".equals(comnd) )|| ( "ITEM2.Delete".equals(comnd) ))
         {
            okFindITEM1();  
         }
         else if ( "MAIN.SaveNew".equals(comnd) ||"ITEM1.SaveNew".equals(comnd))
         {
            okFindITEM1();    
         }    
      }
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("PAYMENT_NO")) )
         okFind();
      else 
         okFind();
      tabs .saveActiveTab();  
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------
   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.addWhereCondition("Project_Contract_API.Get_Schedule(PROJ_NO,CONTRACT_ID) = 'TRUE'");
//    q.addWhereCondition("Project_Contract_Access_API.Check_Current_Access(CONTRACT_ID) = 'TRUE'");
      q.setOrderByClause("CONTRACT_ID ASC, PAYMENT_NO DESC");
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("CONTRACTPAYMENTNODATA: No data found.");
         headset.clear();
      }
      eval( contract_payment_item_set.syncItemSets() );
      eval( contract_payment_detain_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      q.addWhereCondition("Project_Contract_API.Get_Schedule(PROJ_NO,CONTRACT_ID) = 'TRUE'");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }

   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","CONTRACT_PAYMENT_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("PROJ_NO", this.getDefProj());  
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(contract_payment_item_blk);
      q.addWhereCondition("PROJ_NO = ? AND CONTRACT_ID = ? AND REPORT_NO = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      q.addParameter("ITEM0_REPORT_NO", headset.getValue("REPORT_NO"));
      q.includeMeta("ALL");              
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,contract_payment_item_blk);        
      headset.goTo(headrowno);
   }
 
   public void okFindITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(contract_payment_detain_blk);
      q.addWhereCondition("PROJ_NO = ? AND CONTRACT_ID = ? AND PAYMENT_NO = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      q.addParameter("PAYMENT_NO", headset.getValue("PAYMENT_NO"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,contract_payment_detain_blk);
      headset.goTo(headrowno);
   }
   
   public void newRowITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM2","CONTRACT_PAYMENT_DETAIN_API.New__",contract_payment_detain_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM1_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM1_CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      cmd.setParameter("ITEM1_PAYMENT_NO", headset.getValue("PAYMENT_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM2/DATA");
      contract_payment_detain_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Perform Header and Item functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void  performHEAD( String command)
   {
      int currow;
      
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      

      currow = headset.getCurrentRowNo();
      if(headlay.isMultirowLayout())
         headset.storeSelections();
      else
         headset.selectRow();
      headset.markSelectedRows( command );
      mgr.submit(trans);
      headset.goTo(currow);
   }
   public void  approve()
   {

      performHEAD( "Approve__" );
   }
   public void  release()
   {

      performHEAD( "Release__" );
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("OBJSTATE").
              setHidden();
      headblk.addField("OBJEVENTS").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setDynamicLOV("GENERAL_PROJECT").
              setInsertable().    
              setLabel("CONTRACTPAYMENTPROJNO: Proj No").
              setSize(30);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setReadOnly().
              setWfProperties(). 
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
              setLabel("PROJECTCONTRACTGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(30); 
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      headblk.addField("CONTRACT_ID").
              setWfProperties(). 
              setMandatory().
              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
              setLOVProperty("WHERE", "SCHEDULE = 'TRUE'").
              setLOVProperty("ORDER_BY", "CONTRACT_ID").
              setInsertable().      
              setLabel("CONTRACTPAYMENTCONTRACTID: Contract Id").
              setSize(30);      
      headblk.addField("CONTRACT_DESC").
              setReadOnly().
              setFunction("PROJECT_CONTRACT_API.GET_CONTRACT_DESC(:PROJ_NO,:CONTRACT_ID)").
              setLabel("CONTRACTPAYMENTCONTRACTDESC: Contract Desc").
              setSize(30);
      mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_DESC");
      headblk.addField("PAYMENT_NO","Number").
              setMandatory().
              setReadOnly().
              unsetInsertable().
              setHidden().
              setWfProperties(). 
              setInsertable().
              setLabel("CONTRACTPAYMENTPAYMENTNO: Payment No").
              setSize(30);
      headblk.addField("PAYMENT_SEQ").
              setInsertable().
              setLabel("CONTRACTPAYMENTPAYMENTSEQ: Payment Seq").
              setSize(30);
      headblk.addField("PAYMENT_DESC").
              setInsertable().    
              setWfProperties().  
              setLabel("CONTRACTPAYMENTPAYMENTDESC: Payment Desc").
              setSize(30);
      // 3
      headblk.addField("YEAR_MONTH", "Date").
              setInsertable().
              setReadOnly().
              setHidden().
              setLabel("CONTRACTPAYMENTYEARMONTH: Year & Month").
              setFunction("''").
              setSize(30);
      headblk.addField("YEAR","Number","####").
              setInsertable().
              setLabel("CONTRACTPAYMENTYEAR: Year").
              setSize(30);
      headblk.addField("MONTH").
              setInsertable().
              enumerateValues("Budget_Month_API").
              setSelectBox().  
              setLabel("CONTRACTPAYMENTMONTH: Month").
              setSize(30);
      // 5
      headblk.addField("PAYMENT_METHOD").
              setInsertable().
              setLabel("CONTRACTPAYMENTPAYMENTMETHOD: Payment Method").
              setDynamicLOV("PAY_METHOD").
              setSize(30);
      headblk.addField("PAYMENT_METHOD_NAME").
              setReadOnly().
              setLabel("CONTRACTPAYMENTPAYMENTMETHODNAME: Payment Method Name").
              setFunction("PAY_METHOD_API.Get_Method_Name(:PAYMENT_METHOD)").
              setSize(30);
      mgr.getASPField("PAYMENT_METHOD").setValidation("PAYMENT_METHOD_NAME");
      
      headblk.addField("PAYMENT_TYPE").
              setInsertable().
              setLabel("CONTRACTPAYMENTPAYMENTTYPE: Payment Type").
              setDynamicLOV("CONTRACT_PAYMENT_TYPE").
              setSize(30);
      headblk.addField("PAYMENT_TYPE_DESC").
              setReadOnly().
              setLabel("CONTRACTPAYMENTPAYMENTTYPEDESC: Payment Type Desc").
              setFunction("CONTRACT_PAYMENT_TYPE_API.Get_Type_Desc(:PAYMENT_TYPE)").
              setSize(30);  
      mgr.getASPField("PAYMENT_TYPE").setValidation("PAYMENT_TYPE_DESC");
      
      // 5.1
      headblk.addField("PAY_MIN_TYPE").
              setInsertable().
              setMandatory().  
              setLabel("CONTRACTPAYMENTPAYMINTYPE: Payment Min Type").
              setDynamicLOV("CONTRACT_PAY_MIN_TYPE", "", 500, 550, true, true).
              setSize(30);
      headblk.addField("PAY_MIN_TYPE_DESC").
              setReadOnly().
              setLabel("CONTRACTPAYMENTPAYMINTYPEDESC: Payment Min Type Desc").
              setFunction("CONTRACT_PAY_MIN_TYPE_API.Get_Type_Desc(:PAY_MIN_TYPE)").
              setSize(30);
      mgr.getASPField("PAY_MIN_TYPE").setValidation("PAY_MIN_TYPE_DESC");
      
      headblk.addField("PAY_SUPP_FILES").
              setInsertable().
              setHidden().
              setLabel("CONTRACTPAYMENTPAYSUPPFILES: Payment Supp Files").
              setDynamicLOV("CONTRACT_PAY_SUPPORT_FILES", "", 500, 550, true, true).
              setSize(30);
      headblk.addField("PAY_SUPP_FILES_DESC").
              setReadOnly().
              setHidden().
              setLabel("CONTRACTPAYMENTPAYSUPPFILESDESC: Payment Supp Files Desc").
              setFunction("CONTRACT_PAY_SUPPORT_FILES_API.Get_File_Desc(:PAY_SUPP_FILES)").
              setSize(30);
      mgr.getASPField("PAY_SUPP_FILES").setValidation("PAY_SUPP_FILES_DESC");
      headblk.addField("CHANGE_PRICE","Number","#0.00").
              unsetInsertable().
              setReadOnly().
              setFunction("PROJECT_CONTRACT_API.Cal_Chg_Contract_Total(:PROJ_NO, :CONTRACT_ID)").
              setLabel("CONTRACTPAYMENTCHANGEPRICE: Change Price").  
              setSize(20);  
   // 6
      headblk.addField("CON_ITM_PAY_CST", "Money" ,"#0.00").
              setReadOnly().
              setFunction("Contract_Payment_API.Cal_Payment_Item(:PROJ_NO,:CONTRACT_ID,:PAYMENT_NO)").
              setLabel("CONTRACTPAYMENTCONITMPAYCST: Con Itm Pay Cst").
              setSize(30);
      
      headblk.addField("CON_DET_PAY_CST", "Money" ,"#0.00").
              setReadOnly().
              setFunction("Contract_Payment_API.Cal_Payment_Detain(:PROJ_NO,:CONTRACT_ID,:PAYMENT_NO)").
              setLabel("CONTRACTPAYMENTCONDETPAYCST: Con Det Pay Cst").
              setSize(30);
      
      // 6.5
      headblk.addField("PRE_PAY_CST", "Money" ,"#0.00").
              setReadOnly().
              setFunction("Contract_Payment_API.Cal_All_Contract_Payment(:PROJ_NO,:CONTRACT_ID,:PAYMENT_NO - 1)").
              setLabel("CONTRACTPAYMENTPREPAYCST: Pre Pay Cst").
              setSize(30);
        
      headblk.addField("CON_PAY_CST", "Money" ,"#0.00").
              setReadOnly().
              setFunction("Contract_Payment_API.Cal_Contract_Payment(:PROJ_NO,:CONTRACT_ID,:PAYMENT_NO)").
              setLabel("CONTRACTPAYMENTCONPAYCST: Con Pay Cst").
              setSize(30);
      
      headblk.addField("ALL_PAY_CST", "Money" ,"#0.00").
              setReadOnly().
              setFunction("Contract_Payment_API.Cal_All_Contract_Payment(:PROJ_NO,:CONTRACT_ID,:PAYMENT_NO)").
              setLabel("CONTRACTPAYMENTALLPAYCST: All Pay Cst").
              setSize(30);
      headblk.addField("ACTUAL_PAYMENT", "Money","#0.00").
              setInsertable().
              setLabel("CONTRACTPAYMENTACTUALPAYMENT: Actual Payment").
              setSize(30);  
      
      // 7
      headblk.addField("APPROVER").
            setInsertable().
            setHidden().
            setLabel("CONTRACTPAYMENTAPPROVER: Approver").
            setDynamicLOV("PERSON_INFO_LOV").
            setSize(30);
      headblk.addField("APPROVER_NAME").
            setReadOnly().
            setHidden().
            setLabel("CONTRACTPAYMENTAPPROVERNAME: Approver Name").
            setFunction("Person_Info_API.Get_Name(:APPROVER)").
            setSize(30);
      mgr.getASPField("APPROVER").setValidation("APPROVER_NAME");
      
      headblk.addField("UNDERTAKER").
            setInsertable().
            setHidden().
            setLabel("CONTRACTPAYMENTUNDERTAKER: Undertaker").
            setDynamicLOV("PERSON_INFO_LOV").
            setSize(30);
      headblk.addField("UNDERTAKER_NAME").
            setReadOnly().
            setHidden().
            setLabel("CONTRACTPAYMENTUNDERTAKERNAME: Undertaker Name").
            setFunction("Person_Info_API.Get_Name(:UNDERTAKER)").
            setSize(30);
      mgr.getASPField("UNDERTAKER").setValidation("UNDERTAKER_NAME");
      
      headblk.addField("PAYMENT_CURRENCY").
              setInsertable().
              setLabel("CONTRACTPAYMENTPAYMENTCURRENCY: Payment Currency").
              setHidden().    
              setDynamicLOV("ISO_CURRENCY").
              setSize(30);
      headblk.addField("PAYMENT_CURRENCY_DESC"). 
              setReadOnly().
              setLabel("CONTRACTPAYMENTPAYMENTCURRENCYDESC: Payment Currency Desc").
              setFunction("Iso_Currency_API.Get_Description(:PAYMENT_CURRENCY)").
              setSize(10);
      mgr.getASPField("PAYMENT_CURRENCY").setValidation("PAYMENT_CURRENCY_DESC");
      
      headblk.addField("FILES").
              setInsertable().
              setHidden().
              setLabel("CONTRACTPAYMENTFILES: Files").
              setSize(30);
      headblk.addField("PAYMENT_DATE","Date").
              setInsertable().
              setLabel("CONTRACTPAYMENTPAYMENTDATE: Payment Date").
              setSize(30);
      headblk.addField("REPORT_DATE","Date").
              setInsertable().
              setLabel("CONTRACTPAYMENTREPORTDATE: Report Date").
              setSize(30);

      headblk.addField("REPORT_NO","Number").
              setInsertable().
              setDynamicLOV("CONTRACT_REPORT_QTY", "PROJ_NO,CONTRACT_ID").
              setLabel("CONTRACTPAYMENTREPORTNO: Report No").
              setSize(30);  
      headblk.addField("SECEND_SIDE").
              setReadOnly().
              setFunction("PROJECT_CONTRACT_API.Get_Secend_Side(:PROJ_NO, :CONTRACT_ID)").
              setLabel("CONTRACTPAYMENTSECENDSIDE: Secend Side").
              setSize(30);
      headblk.addField("STATE").
              setLabel("CONTRACTPAYMENTSTATE: State").
              setSize(30);
      headblk.addField("PAYMENT_ACCORD").
              setInsertable().
              setLabel("CONTRACTPAYMENTPAYMENYACCORD: Payment Accord").
              setSize(120).
              setHeight(6);
      headblk.addField("PAYMENT_CONDITION").
              setInsertable().
              setLabel("CONTRACTPAYMENTPAYMENYCONDITION: Payment Condition").
              setSize(120).
              setHeight(6);
      headblk.addField("NOTE").
              setInsertable().
              setLabel("CONTRACTPAYMENTNOTE: Note").
              setSize(120).
              setHeight(4);
      headblk.setView("CONTRACT_PAYMENT");
      headblk.defineCommand("CONTRACT_PAYMENT_API","New__,Modify__,Remove__,Approve__,Release__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addSecureCustomCommand("Approve","CONTRACTPAYMENTAPPROVE: Approve Contract Payment","CONTRACT_PAYMENT_API.Approve__");
      headbar.addSecureCustomCommand("Release","CONTRACTPAYMENTRELEASE: Release Contract Payment","CONTRACT_PAYMENT_API.Release__");
      headbar.addCommandValidConditions("Approve", "OBJSTATE",    "Enable",      "Initialization");
      headbar.addCommandValidConditions("Release", "OBJSTATE",    "Enable",      "Approving");
      headbar.addCustomCommand("printReportPre", "PROJECTCONTRACTPRINTREPORTPRE: Print Report Pre...");
      headbar.addCustomCommand("printReportApply", "PROJECTCONTRACTPRINTREPORTAPPLY: Print Report Apply...");
      headbar.addCustomCommand("printReportApproval", "PROJECTCONTRACTPRINTREPORTAPPROVAL: Print Report Approval...");
      
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("CONTRACTPAYMENTTBLHEAD: Contract Payments");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("CONTRACT_DESC");
      headlay.setSimple("PAYMENT_METHOD_NAME");
      headlay.setSimple("PAYMENT_TYPE_DESC");
      headlay.setSimple("APPROVER_NAME");
      headlay.setSimple("UNDERTAKER_NAME");
      headlay.setSimple("PAYMENT_CURRENCY_DESC");
      headlay.setSimple("PAY_MIN_TYPE_DESC");
      headlay.setSimple("PAY_SUPP_FILES_DESC");
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("CONTRACT_DESC");     
      headlay.setDataSpan("NOTE", 6);  
      headlay.setDataSpan("PAYMENT_ACCORD", 6);  
      headlay.setDataSpan("PAYMENT_CONDITION", 6); 
      headlay.setDataSpan("STATE", 6); 
      // Tab commands
      headbar.addCustomCommand("activateItems", "Items");
      headbar.addCustomCommand("activateDetains", "Detains");
      
      contract_payment_item_blk = mgr.newASPBlock("ITEM1");
      contract_payment_item_blk.addField("ITEM0_OBJID").
                                   setHidden().
                                   setDbName("OBJID");
      contract_payment_item_blk.addField("ITEM0_OBJVERSION").
                                   setHidden().
                                   setDbName("OBJVERSION");
      contract_payment_item_blk.addField("ITEM0_CONTRACT_ID").
                                   setDbName("CONTRACT_ID").
                                   setMandatory().
                                   setInsertable().
                                   setHidden().
                                   setLabel("CONTRACTREPORTQTYITEMITEM0CONTRACTID: Contract Id").
                                   setSize(20);
       contract_payment_item_blk.addField("ITEM0_PROJ_NO").
                                setDbName("PROJ_NO").
                                setMandatory().  
                                setInsertable().
                                setHidden().
                                setLabel("CONTRACTREPORTQTYITEMITEM0PROJNO: Proj No").
                                setSize(20);
      contract_payment_item_blk.addField("ITEM0_REPORT_NO", "Number").
                                   setDbName("REPORT_NO").
                                   setMandatory().
                                   setInsertable().
                                   setHidden().
                                   setLabel("CONTRACTREPORTQTYITEMITEM0REPORTNO: Report No").
                                   setSize(10);
      contract_payment_item_blk.addField("ITEM0_YEAR", "Number").
                                   setDbName("YEAR").
                                   setHidden().
                                   setLabel("CONTRACTREPORTQTYITEMITEM0YEAR: Year").
                                   setSize(4);
      
      contract_payment_item_blk.addField("ITEM0_MONTH").
                                   setDbName("MONTH").
                                   setHidden().
                                   setLabel("CONTRACTREPORTQTYITEMITEM0MONTH: Month").
                                   setSize(2);
      
      // 1
      contract_payment_item_blk.addField("ITEM_NO").
                                   setMandatory().
                                   setInsertable().
                                   setReadOnly().
                                   setDynamicLOV("PROJECT_CONTRACT_ITEM", "PROJ_NO,CONTRACT_ID").
                                   setLOVProperty("WHERE", "ITEM_TYPE = 'ITEM'").
                                   setLOVProperty("ORDER_BY", "FULL_PATH").  
                                   setLabel("CONTRACTREPORTQTYITEMITEMNO: Item No").
                                   setSize(20);  
      contract_payment_item_blk.addField("ITEM_DESC").
                                   setReadOnly().
                                   setLabel("CONTRACTREPORTQTYITEMITEMDESC: Item Desc").
                                   setSize(30);
      contract_payment_item_blk.addField("ITEM_UNIT").
                                   setReadOnly().
                                   setLabel("CONTRACTREPORTQTYITEMITEMUNIT: Item Unit").
                                   setDynamicLOV("ISO_UNIT").
                                   setSize(10);
      contract_payment_item_blk.addField("ITEM_UNIT_DESC").
                                   setReadOnly().
                                   setLabel("CONTRACTREPORTQTYITEMITEMUNITDESC: Item Unit Desc").
                                   setFunction("Iso_Unit_API.Get_Description(:ITEM_UNIT)").
                                   setSize(10);
      mgr.getASPField("ITEM_UNIT").setValidation("ITEM_UNIT_DESC");
      
      // 2
      contract_payment_item_blk.addField("PRICE", "Money","#0.00").
                                setReadOnly().
                                setLabel("CONTRACTREPORTQTYITEMPRICE: Price").
                                setSize(20);   
      contract_payment_item_blk.addField("ORIGINAL_QTY", "Number" ,"#0.00").
                                setReadOnly().
                                setFunction("PROJECT_CONTRACT_ITEM_API.Get_Original_Qty(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                setLabel("CONTRACTPAYMENITEMORIGINALQTY: Original Qty").
                                setSize(20);  
      contract_payment_item_blk.addField("ORIGINAL_TOTAL", "Money","#0.00").
                                setReadOnly().
                                setFunction("PROJECT_CONTRACT_ITEM_API.Get_Original_Total(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                setLabel("CONTRACTPAYMENITEMORIGINALTOTAL: Original Total").
                                setSize(20);
    
      contract_payment_item_blk.addField("CHANGED_DIFF_QTY", "Number" ,"#0.00").
                                setReadOnly().
                                setFunction("PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Qty(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                setLabel("CONTRACTPAYMENITEMCHANGEDDIFFQTY: Changed Diff Qty").
                                setSize(20);   

      contract_payment_item_blk.addField("CHANGED_DIFF_TOTAL", "Money","#0.00").
                                setReadOnly().
                                setFunction("PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Total(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                setLabel("CONTRACTPAYMENITEMCHANGEDDIFFTOTAL: Changed Diff Total").
                                setSize(20);    
      contract_payment_item_blk.addField("QTY", "Number" ,"#0.00").
                                   setReadOnly().
                                   setLabel("CONTRACTREPORTQTYITEMQTY: Qty").
                                   setSize(20);  
      contract_payment_item_blk.addField("TOTAL", "Money","#0.00").
                                   setReadOnly().
                                   setLabel("CONTRACTREPORTQTYITEMTOTAL: Total").
                                   setSize(20);

      // 5
      contract_payment_item_blk.addField("OWNER_QTY", "Number" ,"#0.00").
                                   setInsertable().     
                                   setLabel("CONTRACTREPORTQTYITEMOWNERQTY: Owner Qty").
                                   setSize(20);  
      contract_payment_item_blk.addField("OWNER_TOTAL", "Number" ,"#0.00").   
                                   setInsertable().
                                   setLabel("CONTRACTREPORTQTYITEMOWNERTOTAL: Owner Total").
                                   setSize(20);
      
      // 6
       contract_payment_item_blk.addField("PRE_OWNER_TOTAL", "Number" ,"#0.00").
                                    unsetInsertable().
                                    setReadOnly().
                                    setFunction("Contract_Report_Qty_Item_API.Cal_All_Owner_Total(:ITEM0_PROJ_NO,:ITEM0_CONTRACT_ID, :ITEM0_REPORT_NO - 1, :ITEM_NO)").
                                    setLabel("CONTRACTREPORTQTYITEMPREOWNERTOTAL: Pre Owner Total").
                                    setSize(20);    
      contract_payment_item_blk.addField("ALL_OWNER_TOTAL", "Number" ,"#0.00").
                                   unsetInsertable().
                                   setReadOnly().
                                   setFunction("Contract_Report_Qty_Item_API.Cal_All_Owner_Total(:ITEM0_PROJ_NO,:ITEM0_CONTRACT_ID, :ITEM0_REPORT_NO, :ITEM_NO)").
                                   setLabel("CONTRACTREPORTQTYITEMALLOWNERTOTAL: All Owner Total").
                                   setSize(20);    
      contract_payment_item_blk.addField("ITEM_NOTE").
                                   setInsertable().
                                   setLabel("CONTRACTREPORTQTYITEMITEMNOTE: Item Note").
                                   setSize(50);   
      contract_payment_item_blk.addField("ITEM_TYPE").
                                   setReadOnly().
                                   setCheckBox("FOLDER,ITEM").
                                   setLabel("CONTRACTREPORTQTYITEMITEMTYPE: Item Type").
                                   setSize(6);
      contract_payment_item_blk.addField("FULL_PATH").
                                   setHidden().
                                   setLabel("CONTRACTREPORTQTYITEMFULLPATH: Full Path").
                                   setSize(50);
      contract_payment_item_blk.setView("CONTRACT_REPORT_QTY_ITEM");
      contract_payment_item_blk.defineCommand("CONTRACT_REPORT_QTY_ITEM_API", "");
      contract_payment_item_blk.setMasterBlock(headblk);                
      contract_payment_item_set = contract_payment_item_blk.getASPRowSet();
      contract_payment_item_bar = mgr.newASPCommandBar(contract_payment_item_blk);
      contract_payment_item_bar.enableMultirowAction();
      contract_payment_item_bar.defineCommand(contract_payment_item_bar.OKFIND, "okFindITEM1");
      contract_payment_item_tbl = mgr.newASPTable(contract_payment_item_blk);        
      contract_payment_item_tbl.setTitle("CONTRACTREPORTQTYITEMITEMHEAD1: ContractReportQtyItem");
      contract_payment_item_tbl.enableRowSelect();    
      contract_payment_item_tbl.setWrap();
      contract_payment_item_lay = contract_payment_item_blk.getASPBlockLayout();
      contract_payment_item_lay.setDialogColumns(2);  
      contract_payment_item_lay.setDefaultLayoutMode(contract_payment_item_lay.MULTIROW_LAYOUT);
      contract_payment_item_lay.setSimple("ITEM_UNIT_DESC");      

      contract_payment_detain_blk = mgr.newASPBlock("ITEM2");
      contract_payment_detain_blk.addField("ITEM1_OBJID").
                                  setHidden().
                                  setDbName("OBJID");
      contract_payment_detain_blk.addField("ITEM1_OBJVERSION").
                                  setHidden().
                                  setDbName("OBJVERSION");
      contract_payment_detain_blk.addField("ITEM1_PROJ_NO").
                                  setDbName("PROJ_NO").
                                  setMandatory().
                                  setHidden().
                                  setInsertable().
                                  setLabel("CONTRACTPAYMENTDETAINITEM1PROJNO: Proj No").
                                  setSize(50);
      contract_payment_detain_blk.addField("ITEM1_CONTRACT_ID").
                                  setDbName("CONTRACT_ID").
                                  setMandatory().
                                  setInsertable().
                                  setHidden().
                                  setLabel("CONTRACTPAYMENTDETAINITEM1CONTRACTID: Contract Id").
                                  setSize(20);
      contract_payment_detain_blk.addField("ITEM1_PAYMENT_NO", "Number").
                                  setDbName("PAYMENT_NO").
                                  setMandatory().
                                  setInsertable().
                                  setHidden().
                                  setLabel("CONTRACTPAYMENTDETAINITEM1PAYMENTNO: Payment No").
                                  setSize(10);
      // 1
      contract_payment_detain_blk.addField("DETAIN_NAME").
                                  setMandatory().
                                  setDynamicLOV("PROJECT_CONTRACT_DETAIN","PROJ_NO,CONTRACT_ID").
                                  setInsertable().       
                                  setLabel("CONTRACTPAYMENTDETAINDETAINNAME: Detain Name").
                                  setSize(20);
      
      contract_payment_detain_blk.addField("DETAIN_NAME_DESC").
                                  setReadOnly().
                                  setFunction("PROJECT_CONTRACT_DETAIN_API.Get_Detain_Name(:PROJ_NO,:CONTRACT_ID,:DETAIN_NAME)").
                                  setLabel("CONTRACTPAYMENTDETAINDETAINNAMEDESC: Detain Name Desc").  
                                  setSize(20);    
      // 2
      contract_payment_detain_blk.addField("DETAIN_PROP", "Number","#0.00").
                                  setReadOnly().    
                                  setInsertable().
                                  setLabel("CONTRACTPAYMENTDETAINDETAINPROP: Detain Prop").
                                  setSize(10);
      
      contract_payment_detain_blk.addField("DETAIN_TOTAL", "Money","#0.00").
                                  setInsertable().
                                  setLabel("CONTRACTPAYMENTDETAINDETAINTOTAL: Detain Total").
                                  setSize(20);    

      contract_payment_detain_blk.addField("PRE_DETAIN_TOTAL", "Money","#0.00").
                                  setReadOnly().
                                  setLabel("CONTRACTPAYMENTDETAINPREDETAINTOTAL: Pre Detain Total").
                                  setFunction("CONTRACT_PAYMENT_DETAIN_API.Cal_All_Detain_Total(:ITEM1_PROJ_NO,:ITEM1_CONTRACT_ID, :ITEM1_PAYMENT_NO - 1, :DETAIN_NAME)").
                                  setSize(20);

      contract_payment_detain_blk.addField("ALL_DETAIN_TOTAL", "Money","#0.00").
                                  setReadOnly().
                                  setLabel("CONTRACTPAYMENTDETAINALLDETAINTOTAL: All Detain Total").
                                  setFunction("CONTRACT_PAYMENT_DETAIN_API.Cal_All_Detain_Total(:ITEM1_PROJ_NO,:ITEM1_CONTRACT_ID, :ITEM1_PAYMENT_NO, :DETAIN_NAME)").
                                  setSize(20);
          
      // 4
      contract_payment_detain_blk.addField("DETAIN_NOTE").
                                  setInsertable().
                                  setLabel("CONTRACTPAYMENTDETAINDETAINNOTE: Detain Note").
                                  setSize(50);
      contract_payment_detain_blk.addField("DETAIN_EXT").
                                  setInsertable().
                                  setHidden().
                                  setCheckBox("FALSE,TRUE").
                                  setLabel("CONTRACTPAYMENTDETAINDETAINEXT: Detain Ext").
                                  setSize(5);  
      contract_payment_detain_blk.setView("CONTRACT_PAYMENT_DETAIN");
      contract_payment_detain_blk.defineCommand("CONTRACT_PAYMENT_DETAIN_API","New__,Modify__");  
      contract_payment_detain_blk.setMasterBlock(headblk);
      contract_payment_detain_set = contract_payment_detain_blk.getASPRowSet();
      contract_payment_detain_bar = mgr.newASPCommandBar(contract_payment_detain_blk);
      contract_payment_detain_bar.defineCommand(contract_payment_detain_bar.OKFIND, "okFindITEM2");
      contract_payment_detain_bar.defineCommand(contract_payment_detain_bar.NEWROW, "newRowITEM2");
      contract_payment_detain_tbl = mgr.newASPTable(contract_payment_detain_blk);
      contract_payment_detain_tbl.setTitle("CONTRACTPAYMENTDETAINITEMHEAD2: ContractPaymentDetain");
      contract_payment_detain_tbl.enableRowSelect();
      contract_payment_detain_tbl.setWrap();
      contract_payment_detain_lay = contract_payment_detain_blk.getASPBlockLayout();
      contract_payment_detain_lay.setDefaultLayoutMode(contract_payment_detain_lay.MULTIROW_LAYOUT);

      tabs = mgr.newASPTabContainer();
      tabs.addTab(mgr.translate("CONTRACTPAYMENTITEMS: Items"), "javascript:commandSet('MAIN.activateItems','')");
      tabs.addTab(mgr.translate("CONTRACTPAYMENTDETAINS: Detains"), "javascript:commandSet('MAIN.activateDetains','')");
    
      tabs.setContainerWidth(700);
      tabs.setLeftTabSpace(1);    
      tabs.setContainerSpace(5);
      tabs.setTabWidth(100);

   }
   public void activateItems()
   {
      tabs.setActiveTab(1);
      okFindITEM1();
   }
   
   public void activateDetains()
   {
      tabs.setActiveTab(2);
      okFindITEM2();
   }

   public void adjust() throws FndException
   {
      super.adjust();  
      // fill function body
      headbar.removeCustomCommand("activateItems");
      headbar.removeCustomCommand("activateDetains");
      if(headlay.isMultirowLayout()){
         headset.storeSelections();    
         ASPBuffer selected_fields=headset.getSelectedRows("OBJSTATE");
         for(int i=0;i<selected_fields.countItems();i++){
             ASPBuffer subBuff = selected_fields.getBufferAt(i);
             String state=subBuff.getValueAt(0);
             if( "Released".equals(state)){    
                 headbar.disableCommand(headbar.DELETE);
                 headbar.disableCommand(headbar.EDITROW);   
            }
         }          
      } else {
         if(headset!=null&&headset.countRows()>0){
          String state = headset.getValue("OBJSTATE");    
          if( headlay.isSingleLayout() && ("Released".equals(state))){ 
             headbar.disableCommand(headbar.DELETE);
             headbar.disableCommand(headbar.EDITROW);           
      }        
      }
      }
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------
   public void  printReportPre() throws FndException, UnsupportedEncodingException
   {
    ASPManager mgr = getASPManager();
    ASPConfig cfg = getASPConfig();
    String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
    if (headlay.isMultirowLayout())
       headset.goTo(headset.getRowSelected());
    if (headset.countRows()>0 )
          {   
             String proj_no = headset.getValue("PROJ_NO");
             String contract_id = headset.getValue("CONTRACT_ID");
             String payment_no = headset.getValue("PAYMENT_NO");
              appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=RptContractPaymentSchPre.raq&proj_no="+proj_no+"&contract_id="+contract_id+"&payment_no="+payment_no
                + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
         }
   }  
   public void  printReportApply() throws FndException, UnsupportedEncodingException
   {
    ASPManager mgr = getASPManager();
    ASPConfig cfg = getASPConfig();
    String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
    if (headlay.isMultirowLayout())
       headset.goTo(headset.getRowSelected());
    if (headset.countRows()>0 )
          {   
             String proj_no = headset.getValue("PROJ_NO");
             String contract_id = headset.getValue("CONTRACT_ID");
             String payment_no = headset.getValue("PAYMENT_NO");
              appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=RptContractPaymentSchApply.raq&proj_no="+proj_no+"&contract_id="+contract_id+"&payment_no="+payment_no
                + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
         }
   }  
   public void  printReportApproval() throws FndException, UnsupportedEncodingException
   {
    ASPManager mgr = getASPManager();
    ASPConfig cfg = getASPConfig();
    String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
    if (headlay.isMultirowLayout())
       headset.goTo(headset.getRowSelected());
    if (headset.countRows()>0 )
          {   
             String proj_no = headset.getValue("PROJ_NO");
             String contract_id = headset.getValue("CONTRACT_ID");
             String payment_no = headset.getValue("PAYMENT_NO");
              appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=RptContractPaymentSchApproval.raq&proj_no="+proj_no+"&contract_id="+contract_id+"&payment_no="+payment_no
                + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
         }
   }  
   
   protected String getDescription()
   {
      return "CONTRACTPAYMENTSCHDESC: Contract Payment Sch";
   }


   protected String getTitle()
   {
      return "CONTRACTPAYMENTSCHTITLE: Contract Payment Sch";
   }
    

   protected void printContents() throws FndException
   {
      super.printContents();

      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else{
             headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);  
             appendToHTML(headlay.show());    
          }  
      if (headlay.isCustomLayout()|| headlay.isSingleLayout()&& headset.countRows() > 0)
      {    
         appendToHTML(tabs.showTabsInit());  
         if (tabs.getActiveTab() == 1)    
         {
            appendToHTML(contract_payment_item_lay.show());
         }
         else if (tabs.getActiveTab() == 2)
         {  
            appendToHTML(contract_payment_detain_lay.show());
         }    
      }
   }
   //--------------------------  Added in new template  --------------------------
   //--------------  Return blk connected with workflow functions  ---------------
   //-----------------------------------------------------------------------------

   protected ASPBlock getBizWfBlock()
   {
      return headblk;
   }
}  
