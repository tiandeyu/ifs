/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.contrw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ContractContactReq extends HzASPPageProviderWf
{  

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.contrw.ContractContactReq");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock contract_contact_req_item_blk;
   private ASPRowSet contract_contact_req_item_set;
   private ASPCommandBar contract_contact_req_item_bar;
   private ASPTable contract_contact_req_item_tbl;
   private ASPBlockLayout contract_contact_req_item_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  ContractContactReq (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      super.run();
      ASPManager mgr = getASPManager();
      String comnd;  
      if( mgr.commandBarActivated() ){
         comnd = mgr.readValue("__COMMAND");  
         eval(mgr.commandBarFunction());
         if (( "MAIN.ViewDetails".equals(comnd) )&& headset.countRows()>0)
         {
            ASPContext ctx = mgr.getASPContext();   
            ctx.setGlobal("CONTRACT_CONTACT_REQ_PROJ_NO", headset.getValue("PROJ_NO"));
            ctx.setGlobal("CONTRACT_CONTACT_REQ_CONTRACT_ID", headset.getValue("CONTRACT_ID")); 
         }   
      } 
      else if(mgr.dataTransfered())  
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("CON_REQ_NO")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("CONTRACT_ID")) )
         okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();    
      else    
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------
   public void  performHEAD( String command)
   {
      int currow;
      
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      

      currow = headset.getCurrentRowNo();
      if(headlay.isMultirowLayout())
         headset.storeSelections();
      else
         headset.selectRow();
      headset.markSelectedRows( command );
      mgr.submit(trans);
      headset.goTo(currow);
   }
   public void  report()
   {

      performHEAD( "Report__" );
   }
   public void  inspect()
   {

      performHEAD( "Inspect__" );
   }
   public void  approve()
   {

      performHEAD( "Approve__" );
   }
   public void  audit()
   {

      performHEAD( "Audit__" );
   }
   public void  complete()
   {

      performHEAD( "Complete__" );
   }

   
   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("CONTRACTCONTACTREQNODATA: No data found.");
         headset.clear();
      }
      eval( contract_contact_req_item_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","CONTRACT_CONTACT_REQ_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(contract_contact_req_item_blk);
      q.addWhereCondition("PROJ_NO = ? AND CON_REQ_NO = ? AND CONTRACT_ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("CON_REQ_NO", headset.getValue("CON_REQ_NO"));
      q.addParameter("CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,contract_contact_req_item_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;
      ASPContext ctx = mgr.getASPContext(); 
      cmd = trans.addEmptyCommand("ITEM1","CONTRACT_CONTACT_REQ_ITEM_API.New__",contract_contact_req_item_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_CON_REQ_NO", headset.getValue("CON_REQ_NO"));
      cmd.setParameter("ITEM0_CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      cmd.setParameter("ITEM_TYPE", "ITEM");        
      ctx.setGlobal("CONTRACT_CONTACT_REQ_PROJ_NO", headset.getValue("PROJ_NO"));
      ctx.setGlobal("CONTRACT_CONTACT_REQ_CONTRACT_ID", headset.getValue("CONTRACT_ID")); 
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      contract_contact_req_item_set.addRow(data);
   }
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("OBJSTATE").
              setHidden();
      headblk.addField("OBJEVENTS").
              setHidden();  
      headblk.addField("PROJ_NO").
              setMandatory().
              setDynamicLOV("GENERAL_PROJECT").
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONTRACTCONTACTREQPROJNO: Proj No").
              setSize(30);
      
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("CONTRACTCONTACTREQEGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(30).
              setReadOnly();
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");

      headblk.addField("CONTRACT_ID").
              setInsertable().
              setMandatory().
              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
              setLabel("CONTRACTCONTACTREQCONTRACTID: Contract Id").
              setSize(30);
      headblk.addField("CONTRACT_NAME").
              setFunction("PROJECT_CONTRACT_API.Get_Contract_Desc (:PROJ_NO,:CONTRACT_ID)").
              setLabel("CONTRACTCONTACTREQCONTRACTNNAME: Contract Name").
              setSize(30).
              setReadOnly();
      mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_NAME");
      
      headblk.addField("CON_REQ_NO").
//              setMandatory().  
              setReadOnly().
//              setInsertable().  
              setDefaultNotVisible().
              setLabel("CONTRACTCONTACTREQCONREQNO: Con Req No").
              setSize(30);
      headblk.addField("CON_REQ_NAME").
              setInsertable().
              setMandatory().  
              setLabel("CONTRACTCONTACTREQCONREQNAME: Con Req Name").
              setSize(30);
      headblk.addField("REQ_FEE_TYPE").
              enumerateValues("Req_Fee_Type_API").
              setSelectBox().
              setMandatory().
              setInsertable().
              setLabel("CONTRACTCONTACTREQREQFEETYPE: Req Fee Type").
              setSize(30);

      headblk.addField("SUB_PROJ_NO").
              setInsertable().
              setMandatory().    
              setDefaultNotVisible().
              setDynamicLOV("CON_QUA_TREE","PROJ_NO").
              setLOVProperty("TREE_PARE_FIELD", "PARENT_ID").
              setLOVProperty("TREE_DISP_FIELD", "NODE_NO,NODE_NAME").
              setLabel("CONTRACTCONTACTREQSUBPROJNO: Sub Proj No").
              setSize(30);

      headblk.addField("SUB_PROJ_DESC").
              setFunction("CON_PROJ_CONSTRUCTION_MAN_API.Get_Node_Name(:PROJ_NO,:SUB_PROJ_NO)").
              setLabel("CONTRACTCONTACTREQSUBPROJDESC: SUB PROJ DESC").
              setReadOnly().   
              setSize(30);
      mgr.getASPField("SUB_PROJ_NO").setValidation("SUB_PROJ_DESC");
          
      headblk.addField("BOOKLET_NO").
              setInsertable().
              setDefaultNotVisible().
              setDynamicLOV("DOC_BOOKLET").
              setLabel("CONTRACTCONTACTREQBOOKLETNO: Booklet No").
              setSize(30);
      headblk.addField("BOOKLET_NAME").
              setFunction("Doc_Booklet_Api.Get_Booklet_Name(:BOOKLET_NO)").
              setLabel("CONTRACTCONTACTREQBOOKLETNAME: Booklet Name").
              setSize(30).
              setDefaultNotVisible().
              setReadOnly();
      mgr.getASPField("BOOKLET_NO").setValidation("BOOKLET_NAME");

      headblk.addField("CREATE_PERSON").
              setDynamicLOV("PERSON_INFO").
              setDefaultNotVisible().
              setLabel("CONTRACTCONTACTREQCRATEPERSON: Create Person").
              setSize(30);
      headblk.addField("CREATE_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
              setLabel("CONTRACTCONTACTREQCRATEPERSONNAME: Create Person Name").
              setSize(30).
              setDefaultNotVisible().
              setReadOnly();
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
      headblk.addField("CREATE_DATE","Date").
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONTRACTCONTACTREQCREATEDATE: Create Date").
              setSize(30);
      
      headblk.addField("DEPT").
              setDynamicLOV("GENERAL_ZONE", "PROJ_NO").
              setDefaultNotVisible().
              setLabel("CONTRACTCONTACTREQDEPT: Dept").
              setSize(30);

      headblk.addField("DEPT_DESC").
              setFunction("GENERAL_ZONE_API.Get_Zone_Desc(:DEPT)").
              setLabel("CONPROJCONNECTIONLISTCOSTORGDEPTDESC: Dept Desc").
              setSize(30).
              setDefaultNotVisible().
              setReadOnly();
      
      mgr.getASPField("DEPT").setValidation("DEPT_DESC");
      
   // 3
      headblk.addField("REPORTOR").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTCONTACTREQREPORTOR: Reportor").
            setDynamicLOV("PERSON_INFO_LOV").
            setSize(30);
      headblk.addField("REPORTOR_NAME").
            setReadOnly().
            setDefaultNotVisible().
            setFunction("PERSON_INFO_API.GET_NAME(:REPORTOR)").
            setLabel("CONTRACTCONTACTREQREPORTORNAME: Reportor Name").
            setSize(30);
      mgr.getASPField("REPORTOR").setValidation("REPORTOR_NAME");
      
      headblk.addField("REPORT_DATE", "Date").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTCONTACTREQREPORTDATE: Report Date").
            setSize(30);
      
      // 4
      headblk.addField("INSPECTOR").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTCONTACTREQINSPECTOR: Inspector").
            setDynamicLOV("PERSON_INFO").
            setSize(30);
      headblk.addField("INSPECTOR_NAME").
            setReadOnly().
            setDefaultNotVisible().
            setFunction("PERSON_INFO_API.GET_NAME(:INSPECTOR)").
            setLabel("CONTRACTCONTACTREQINSPECTORNAME: Inspector Name").
            setSize(30);
      mgr.getASPField("INSPECTOR").setValidation("INSPECTOR_NAME");
      
      headblk.addField("INSPECT_DATE", "Date").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTCONTACTREQINSPECTDATE: Inspect Date").
            setSize(30);
      
      // 5
      headblk.addField("APPROVER").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTCONTACTREQAPPROVER: Approver").
            setDynamicLOV("PERSON_INFO").
            setSize(30);
      headblk.addField("APPROVER_NAME").
            setReadOnly().
            setDefaultNotVisible().
            setFunction("PERSON_INFO_API.GET_NAME(:APPROVER)").
            setLabel("CONTRACTCONTACTREQAPPROVERNAME: Approver Name").
            setSize(30);
      mgr.getASPField("APPROVER").setValidation("APPROVER_NAME");
      
      headblk.addField("APPROVE_DATE", "Date").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTCONTACTREQAPPROVEDATE: Approve Date").
            setSize(30);
      
      // 6
      headblk.addField("AUDITOR").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTCONTACTREQAUDITOR: Auditor").
            setDynamicLOV("PERSON_INFO").
            setSize(30);
      headblk.addField("AUDITOR_NAME").
            setReadOnly().
            setDefaultNotVisible().
            setFunction("PERSON_INFO_API.GET_NAME(:AUDITOR)").
            setLabel("CONTRACTCONTACTREQAUDITORNAME: Auditor Name").
            setSize(30);
      mgr.getASPField("AUDITOR").setValidation("AUDITOR_NAME");
      
      headblk.addField("AUDIT_DATE", "Date").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTCONTACTREQAUDITDATE: Audit Date").
            setSize(30);
      
      headblk.addField("COMPLETE_DATE", "Date").
            setReadOnly().
            setDefaultNotVisible().
            setLabel("CONTRACTCONTACTREQCOMPLETEDATE: Complete Date").
            setSize(30);
          
      headblk.addField("STATE").  
               setReadOnly(). 
               setLabel("CONTRACTCONTACTREQSTATE: State").
               setSize(30);
      
      headblk.addField("ALL_REPORT_TOTAL","Number","#0.00").    
              setReadOnly(). 
              setDefaultNotVisible().
              setFunction("CONTRACT_CONTACT_REQ_ITEM_API.CAL_REPORT_TOTAL(:PROJ_NO,:CONTRACT_ID,:CON_REQ_NO)").
              setLabel("CONTRACTCONTACTREQALLREPORTTOTAL: All Report Total").
              setSize(30);    
      
      headblk.addField("ALL_INSPECT_TOTAL","Number","#0.00").  
              setReadOnly(). 
              setDefaultNotVisible().
              setFunction("CONTRACT_CONTACT_REQ_ITEM_API.CAL_INSPECT_TOTAL(:PROJ_NO,:CONTRACT_ID,:CON_REQ_NO)").
              setLabel("CONTRACTCONTACTREQALLINSPECTTOTAL: All Inspect Total").
              setSize(30);
      
      headblk.addField("ALL_OWNER_TOTAL","Number","#0.00").  
              setReadOnly(). 
              setDefaultNotVisible().
              setFunction("CONTRACT_CONTACT_REQ_ITEM_API.CAL_OWNER_TOTAL(:PROJ_NO,:CONTRACT_ID,:CON_REQ_NO)").
              setLabel("CONTRACTCONTACTREQALLOWNERTOTAL: All Owner Total").
              setSize(30);
      headblk.addField("IS_CHANGE").  
              setReadOnly().
              setDefaultNotVisible().
              setCheckBox("FALSE,TRUE").
              setLabel("CONTRACTCONTACTREQISCHANGE: Is Change").
              setSize(30);
      headblk.addField("CHANGE_PAGE").  
              setReadOnly().
              setHidden().
              setDefaultNotVisible().
              setLabel("CONTRACTCONTACTREQCHANGEPAGE: Change Page").
              setSize(30);      
      headblk.addField("CHANGE_NO").  
               setReadOnly(). 
               setDefaultNotVisible().
               setFieldHyperlink("/b2e/secured/contrw/ContractVariationSch.page", "CHANGE_PAGE", "CHANGE_NO CONTRACT_VAR_NO","NEWWIN").
               setLabel("CONTRACTCONTACTREQCHANGENO: Change No").
               setSize(30);          
      headblk.addField("CHANGE_NAME").  
              setReadOnly().
              setDefaultNotVisible().
              setFunction("CONTRACT_VARIATION_API.Get_Contract_Var_Desc(:PROJ_NO,:CONTRACT_ID,:CHANGE_NO)"). 
              setLabel("CONTRACTCONTACTREQCHANGENAME: Change Name").
              setSize(30); 
     mgr.getASPField("CHANGE_NO").setValidation("CHANGE_NAME");  
      
     headblk.addField("CONTACT_CLASS_NO").  
             setMandatory().  
             setInsertable().
             setDefaultNotVisible().
             setDynamicLOV("CONTRACT_CONTRACT_TYPE").
             setLabel("CONTRACTCONTACTREQCONTACTCLASSNO: Contact Class No").
             setSize(30);       
     headblk.addField("CONTACT_CLASS_NAME").  
             setReadOnly().  
             setFunction("CONTRACT_CONTRACT_TYPE_API.Get_Contact_Class_Name(:CONTACT_CLASS_NO)").
             setLabel("CONTRACTCONTACTREQCONTACTCLASSNO: Contact Class No").
             setSize(30);       
     mgr.getASPField("CONTACT_CLASS_NO").setValidation("CONTACT_CLASS_NAME");      
      headblk.addField("PLAN_NO").
              setInsertable().
              setHidden().
              setLabel("CONTRACTCONTACTREQPLANNO: Plan No").
              setSize(30);
      
      headblk.addField("NOTE").
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONTRACTCONTACTREQNOTE: Note").
              setHeight(5).
              setSize(120);
      headblk.setView("CONTRACT_CONTACT_REQ");
      headblk.defineCommand("CONTRACT_CONTACT_REQ_API","New__,Modify__,Remove__,Report__,Inspect__,Approve__,Audit__,Complete__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addSecureCustomCommand("Report", "CONTRACTCONTACTAREPORT: Report Contract Qty Visa", "CONTRACT_CONTACT_REQ_API.Report__");
      headbar.addSecureCustomCommand("Inspect", "CONTRACTCONTACTINSPECT: Inspect Contract Qty Visa", "CONTRACT_CONTACT_REQ_API.Inspect__");
      headbar.addSecureCustomCommand("Approve", "CONTRACTCONTACTAPPROVE: Approve Contract Qty Visa", "CONTRACT_CONTACT_REQ_API.Approve__");
      headbar.addSecureCustomCommand("Audit", "CONTRACTCONTACTAUDIT: Audit Contract Qty Visa", "CONTRACT_CONTACT_REQ_API.Audit__");
      headbar.addSecureCustomCommand("Complete", "CONTRACTCONTACTCOMPLETE: Complete Contract Qty Visa", "CONTRACT_CONTACT_REQ_API.Complete__");
      headbar.addCommandValidConditions("Report",     "OBJSTATE",    "Enable",      "Initialization");
      headbar.addCommandValidConditions("Inspect", "OBJSTATE",    "Enable",      "Reported");  
      headbar.addCommandValidConditions("Approve", "OBJSTATE",    "Enable",      "Inspected");
      headbar.addCommandValidConditions("Audit",      "OBJSTATE",    "Enable",      "Approved");
      headbar.addCommandValidConditions("Complete",   "OBJSTATE",    "Enable",      "Audited");
      headtbl = mgr.newASPTable(headblk);      
      headtbl.setTitle("CONTRACTCONTACTREQTBLHEAD: Contract Contact Reqs");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setDataSpan("NOTE", 5); 
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("SUB_PROJ_DESC");
      headlay.setSimple("BOOKLET_NAME");    
      headlay.setSimple("CONTRACT_NAME");
      headlay.setSimple("CREATE_PERSON_NAME");
      headlay.setSimple("DEPT_DESC");
      headlay.setSimple("REPORTOR_NAME");  
      headlay.setSimple("INSPECTOR_NAME");
      headlay.setSimple("APPROVER_NAME");
      headlay.setSimple("AUDITOR_NAME");
      headlay.setSimple("CHANGE_NAME");    
      headlay.setSimple("CONTACT_CLASS_NAME");    
      
      contract_contact_req_item_blk = mgr.newASPBlock("ITEM1");
      contract_contact_req_item_blk.addField("ITEM0_OBJID").
                                    setHidden().
                                    setDbName("OBJID");
      contract_contact_req_item_blk.addField("ITEM0_OBJVERSION").
                                    setHidden().
                                    setDbName("OBJVERSION");
      contract_contact_req_item_blk.addField("ITEM0_PROJ_NO").
                                    setDbName("PROJ_NO").
                                    setMandatory().
                                    setInsertable().
                                    setHidden().
                                    setLabel("CONTRACTCONTACTREQITEMITEM0PROJNO: Proj No").
                                    setSize(30);
      contract_contact_req_item_blk.addField("ITEM0_CON_REQ_NO").
                                    setDbName("CON_REQ_NO").
                                    setMandatory().
                                    setInsertable().
                                    setHidden().
                                    setLabel("CONTRACTCONTACTREQITEMITEM0CONREQNO: Con Req No").
                                    setSize(50);
      contract_contact_req_item_blk.addField("ITEM0_CONTRACT_ID").
                                    setDbName("CONTRACT_ID").
                                    setInsertable().
                                    setHidden().
                                    setLabel("CONTRACTCONTACTREQITEMITEM0CONTRACTID: Contract Id").
                                    setSize(30);
      contract_contact_req_item_blk.addField("ITEM_NO").
                                    setMandatory().
                                    setDynamicLOV("PROJECT_CONTRACT_ITEM", "PROJ_NO,CONTRACT_ID").
                                    setLOVProperty("WHERE", "ITEM_TYPE = 'ITEM'").      
                                    setLOVProperty("ORDER_BY", "FULL_PATH").  
                                    setCustomValidation("ITEM_NO", "ITEM_DESC,ITEM_TYPE,ITEM_UNIT,ITEM_PRICE,ORIGINAL_QTY,ORIGINAL_TOTAL,CHANGED_DIFF_QTY,CHANGED_DIFF_TOTAL,QTY,TOTAL,REPORT_PRICE,INSPECT_PRICE,OWNER_PRICE").
                                    setInsertable().          
                                    setLabel("CONTRACTCONTACTREQITEMITEMNO: No").  
                                    setSize(30);  
      contract_contact_req_item_blk.addField("ITEM_DESC").
                                    setInsertable().
                                    setLabel("CONTRACTCONTACTREQITEMITEMDESC: Desc").
                                    setSize(30);    
      contract_contact_req_item_blk.addField("ITEM_UNIT").
                                    setInsertable().
                                    setDynamicLOV("ISO_UNIT"). 
                                    setLabel("CONTRACTCONTACTREQITEMITEMUNIT: Unit").
                                    setSize(30);
      contract_contact_req_item_blk.addField("ITEM_UNIT_DESC").
                                    setReadOnly().
                                    setLabel("CONTRACTCONTACTREQITEMITEMUNITDESC: Item Unit Desc").
                                    setFunction("Iso_Unit_API.Get_Description(:ITEM_UNIT)").
                                    setSize(10);  
      mgr.getASPField("ITEM_UNIT").setValidation("ITEM_UNIT_DESC");    
      contract_contact_req_item_blk.addField("ITEM_TYPE").
                                    setInsertable().
                                    setCustomValidation("ITEM_TYPE", "ITEM_UNIT,ITEM_PRICE,REPORT_PRICE,REPORT_QTY,REPORT_TOTAL,INSPECT_QTY,INSPECT_PRICE,INSPECT_TOTAL,OWNER_QTY,OWNER_QTY,OWNER_TOTAL,REPORT_PRICE,INSPECT_PRICE,OWNER_PRICE").
                                    setCheckBox("FOLDER,ITEM").    
                                    setLabel("CONTRACTCONTACTREQITEMITEMTYPE: Type").
                                    setSize(30);
      contract_contact_req_item_blk.addField("ITEM0_REQ_FEE_TYPE").
                                    setDbName("REQ_FEE_TYPE").
                                    enumerateValues("Req_Fee_Type_API").
                                    setSelectBox().  
                                    setMandatory().
                                    setInsertable().
                                    setLabel("CONTRACTCONTACTREQITEMREQFEETYPE: Req Fee Type").
                                    setSize(30);      
      contract_contact_req_item_blk.addField("ITEM_PRICE","Number","#0.00").  
                                   setReadOnly().    
                                   setLabel("CONTRACTCONTACTREQITEMITEMPRICE: Price").
                                   setSize(30);
      contract_contact_req_item_blk.addField("REPORT_PRICE","Number","#0.00").
                                    setInsertable().
                                    setLabel("CONTRACTCONTACTREQITEMREPORTPRICE: Report Price").
                                    setCustomValidation("REPORT_QTY,REPORT_PRICE", "REPORT_TOTAL").
                                    setSize(30);    
      contract_contact_req_item_blk.addField("REPORT_QTY","Number","#0.00").
                                    setInsertable().
                                    setLabel("CONTRACTCONTACTREQITEMREPORTQTY: Report Qty").
                                    setCustomValidation("REPORT_QTY,REPORT_PRICE", "REPORT_TOTAL").
                                    setSize(30);    
      contract_contact_req_item_blk.addField("REPORT_TOTAL","Number","#0.00").  
                                    setInsertable().
                                    setLabel("CONTRACTCONTACTREQITEMREPORTTOTAL: Report Total").
                                    setSize(30);
      contract_contact_req_item_blk.addField("INSPECT_PRICE","Number","#0.00").
                                    setInsertable().
                                    setLabel("CONTRACTCONTACTREQITEMINSPECTPRICE: Inspect Price").
                                    setCustomValidation("INSPECT_QTY,INSPECT_PRICE", "INSPECT_TOTAL").
                                    setSize(30);
      contract_contact_req_item_blk.addField("INSPECT_QTY","Number","#0.00").
                                    setInsertable().
                                    setLabel("CONTRACTCONTACTREQITEMINSPECTQTY: Inspect Qty").
                                    setCustomValidation("INSPECT_QTY,INSPECT_PRICE", "INSPECT_TOTAL").
                                    setSize(30);
      contract_contact_req_item_blk.addField("INSPECT_TOTAL","Number","#0.00").
                                    setInsertable().
                                    setLabel("CONTRACTCONTACTREQITEMINSPECTTOTAL: Inspect Total").
                                    setSize(30);
      contract_contact_req_item_blk.addField("OWNER_PRICE","Number","#0.00").
                                    setInsertable().
                                    setLabel("CONTRACTCONTACTREQITEMOWNERPRICE: Owner Price").
                                    setCustomValidation("OWNER_QTY,OWNER_PRICE", "OWNER_TOTAL").
                                    setSize(30);      
      contract_contact_req_item_blk.addField("OWNER_QTY","Number","#0.00").
                                    setInsertable().
                                    setLabel("CONTRACTCONTACTREQITEMOWNERQTY: Owner Qty").
                                    setCustomValidation("OWNER_QTY,OWNER_PRICE", "OWNER_TOTAL").
                                    setSize(30);
      contract_contact_req_item_blk.addField("OWNER_TOTAL","Number","#0.00").
                                    setInsertable().
                                    setLabel("CONTRACTCONTACTREQITEMOWNERTOTAL: Owner Total").
                                    setSize(30);
      contract_contact_req_item_blk.addField("ORIGINAL_QTY", "Number" ,"#0.00").
                                    setReadOnly().
                                    setFunction("PROJECT_CONTRACT_ITEM_API.Get_Original_Qty(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                    setLabel("CONTRACTCONTACTREQITEMORIGINALQTY: Original Qty").
                                    setSize(20);    
      contract_contact_req_item_blk.addField("ORIGINAL_TOTAL", "Money","#0.00").
                                    setReadOnly().
                                    setFunction("PROJECT_CONTRACT_ITEM_API.Get_Original_Total(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                    setLabel("CONTRACTCONTACTREQITEMORIGINALTOTAL: Original Total").
                                    setSize(20);  
      contract_contact_req_item_blk.addField("CHANGED_DIFF_QTY", "Number" ,"#0.00").
                                    setReadOnly().
                                    setFunction("PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Qty(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                    setLabel("CONTRACTCONTACTREQITEMCHANGEDDIFFQTY: Changed Diff Qty").
                                    setSize(20);   

      contract_contact_req_item_blk.addField("CHANGED_DIFF_TOTAL", "Money","#0.00").
                                    setReadOnly().
                                    setFunction("PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Total(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                    setLabel("CONTRACTCONTACTREQITEMCHANGEDDIFFTOTAL: Changed Diff Total").
                                    setSize(20); 
      contract_contact_req_item_blk.addField("QTY", "Number" ,"#0.00").
                                    setReadOnly().
                                    setFunction("PROJECT_CONTRACT_ITEM_API.Get_Changed_Qty(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").
                                    setLabel("CONTRACTCONTACTREQITEMQTY: Qty").
                                    setSize(20);
      contract_contact_req_item_blk.addField("TOTAL", "Money","#0.00").
                                    setReadOnly().
                                    setFunction("PROJECT_CONTRACT_ITEM_API.Get_Changed_Total(:PROJ_NO,:CONTRACT_ID,:ITEM_NO)").                                    
                                    setLabel("CONTRACTCONTACTREQITEMOTAL: Total").  
                                    setSize(20);    
      contract_contact_req_item_blk.addField("FULL_PATH").   
                                    setInsertable().
                                    setHidden().  
                                    setLabel("CONTRACTCONTACTREQITEMFULLPATH: Full Path").
                                    setSize(120);
      contract_contact_req_item_blk.addField("ITEM_NOTE").   
                                    setInsertable().    
                                    setLabel("CONTRACTCONTACTREQITEMITEMNOTE: Note").
                                    setHeight(5).
                                    setSize(120);
      contract_contact_req_item_blk.setView("CONTRACT_CONTACT_REQ_ITEM");
      contract_contact_req_item_blk.defineCommand("CONTRACT_CONTACT_REQ_ITEM_API","Modify__");
      contract_contact_req_item_blk.setMasterBlock(headblk);
      contract_contact_req_item_set = contract_contact_req_item_blk.getASPRowSet();
      contract_contact_req_item_bar = mgr.newASPCommandBar(contract_contact_req_item_blk);
      contract_contact_req_item_bar.defineCommand(contract_contact_req_item_bar.OKFIND, "okFindITEM1");
      contract_contact_req_item_bar.defineCommand(contract_contact_req_item_bar.NEWROW, "newRowITEM1");
      contract_contact_req_item_tbl = mgr.newASPTable(contract_contact_req_item_blk);
      contract_contact_req_item_tbl.setTitle("CONTRACTCONTACTREQITEMITEMHEAD1: ContractContactReqItem");
      contract_contact_req_item_tbl.enableRowSelect();
      contract_contact_req_item_tbl.setWrap();
      contract_contact_req_item_lay = contract_contact_req_item_blk.getASPBlockLayout();
      contract_contact_req_item_lay.setDefaultLayoutMode(contract_contact_req_item_lay.MULTIROW_LAYOUT);
      contract_contact_req_item_lay.setDataSpan("FULL_PATH", 5);
      contract_contact_req_item_lay.setDataSpan("ITEM_NOTE", 5);
      contract_contact_req_item_lay.setDataSpan("TOTAL", 5);  
      contract_contact_req_item_lay.setSimple("ITEM_UNIT_DESC");  

   }

   public void  adjust() throws FndException
   { 
      super.adjust();  
      // fill function body
      if(headlay.isMultirowLayout()){
         headset.storeSelections();
         ASPBuffer selected_fields=headset.getSelectedRows("OBJSTATE");
         for(int i=0;i<selected_fields.countItems();i++){
             ASPBuffer subBuff = selected_fields.getBufferAt(i);
             String state=subBuff.getValueAt(0);
             if( "Completed".equals(state)){
                 headbar.disableCommand(headbar.DELETE);
                 headbar.disableCommand(headbar.EDITROW);   
            }  
         }      
      } else {
         if(headset!=null&&headset.countRows()>0){
          String state = headset.getValue("OBJSTATE");    
          if( headlay.isSingleLayout() && ("Completed".equals(state))){ 
             headbar.disableCommand(headbar.DELETE);
             headbar.disableCommand(headbar.EDITROW);  
             contract_contact_req_item_bar.disableCommand(contract_contact_req_item_bar.EDITROW);
             contract_contact_req_item_bar.disableCommand(contract_contact_req_item_bar.DELETE);  
             contract_contact_req_item_bar.disableCommand(contract_contact_req_item_bar.NEWROW);  
      }  
      }
      }  
   }

   //-----------------------------------------------------------------------------
   //--------------------------------  validate ----------------------------------
   //-----------------------------------------------------------------------------
   public void validate()
   {    
       ASPManager mgr = getASPManager();
       ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
       ASPCommand cmd;  
       String val = mgr.readValue("VALIDATE");    
       float tempValue = 0;
       String txt = "";  
       String itemDesc = "";
       String itemType = "";
       String itemUnit = "";  
       String price = "";       
       if ("REPORT_QTY".equals(val) || "REPORT_PRICE".equals(val)) {         
         tempValue = ((mgr.readValue("REPORT_PRICE")==null)?0:Float.parseFloat(mgr.readValue("REPORT_PRICE")))*((mgr.readValue("REPORT_QTY")==null)?0:Float.parseFloat(mgr.readValue("REPORT_QTY")));
         java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00"); 
         String strValue = df.format(tempValue);  
         mgr.responseWrite(String.valueOf(strValue)+"^");
       }
       else if("INSPECT_QTY".equals(val) || "INSPECT_PRICE".equals(val) ){
         tempValue = ((mgr.readValue("INSPECT_PRICE")==null)?0:Float.parseFloat(mgr.readValue("INSPECT_PRICE")))*((mgr.readValue("INSPECT_QTY")==null)?0:Float.parseFloat(mgr.readValue("INSPECT_QTY")));
         java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00"); 
         String strValue = df.format(tempValue);  
         mgr.responseWrite(String.valueOf(strValue)+"^");
       }else if("OWNER_QTY".equals(val) || "OWNER_PRICE".equals(val)){
          tempValue = ((mgr.readValue("OWNER_PRICE")==null)?0:Float.parseFloat(mgr.readValue("OWNER_PRICE")))*((mgr.readValue("OWNER_QTY")==null)?0:Float.parseFloat(mgr.readValue("OWNER_QTY")));
          java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00"); 
          String strValue = df.format(tempValue);  
          mgr.responseWrite(String.valueOf(strValue)+"^");  
       }else if("ITEM_NO".equals(val)){  
          ASPContext ctx =mgr.getASPContext();
          String proj_no = ctx.findGlobal("CONTRACT_CONTACT_REQ_PROJ_NO");
          String contract_id = ctx.findGlobal("CONTRACT_CONTACT_REQ_CONTRACT_ID");  
          String item_no = mgr.readValue("ITEM_NO");
          cmd = trans.addCustomFunction("ITEMDESC", 
                "PROJECT_CONTRACT_ITEM_API.Get_Item_Desc", "ITEM_DESC");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO",item_no);             
            
          cmd = trans.addCustomFunction("ITEMTYPE", 
                "PROJECT_CONTRACT_ITEM_API.Get_Item_Type", "ITEM_TYPE");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO",item_no);               
          
          cmd = trans.addCustomFunction("ITEMUNIT", 
                "PROJECT_CONTRACT_ITEM_API.Get_Item_Unit", "ITEM_UNIT");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO",item_no);                                 
            
          cmd = trans.addCustomFunction("ITEMPRICE", 
                "PROJECT_CONTRACT_ITEM_API.Get_Price", "ITEM_PRICE");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO",item_no);        
//          ORIGINAL_QTY,ORIGINAL_TOTAL,CHANGED_DIFF_QTY,CHANGED_DIFF_TOTAL,QTY,TOTAL
          cmd = trans.addCustomFunction("ORIGINALQTY", 
                "PROJECT_CONTRACT_ITEM_API.Get_Original_Qty", "ORIGINAL_QTY");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);  
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO",item_no);     
          
          cmd = trans.addCustomFunction("ORIGINALTOTAL", 
                "PROJECT_CONTRACT_ITEM_API.Get_Original_Total", "ORIGINAL_TOTAL");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO",item_no);  
          
          cmd = trans.addCustomFunction("CHANGEDDIFFQTY", 
                "PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Qty", "CHANGED_DIFF_QTY");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);  
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);  
          cmd.addParameter("ITEM_NO",item_no);     
          
          cmd = trans.addCustomFunction("CHANGEDDIFFTOTAL", 
                "PROJECT_CONTRACT_ITEM_API.Cal_Changed_Diff_Total", "CHANGED_DIFF_TOTAL");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO",item_no);  
          
          cmd = trans.addCustomFunction("QTY", 
                "PROJECT_CONTRACT_ITEM_API.Get_Changed_Qty", "QTY");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);  
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO",item_no);     
          
          cmd = trans.addCustomFunction("TOTAL", 
                "PROJECT_CONTRACT_ITEM_API.Get_Changed_Total", "TOTAL");
          cmd.addParameter("ITEM0_PROJ_NO",proj_no);
          cmd.addParameter("ITEM0_CONTRACT_ID",contract_id);
          cmd.addParameter("ITEM_NO",item_no);    
            
          trans = mgr.validate(trans);   
          itemDesc = trans.getValue("ITEMDESC/DATA/ITEM_DESC");
          itemType = trans.getValue("ITEMTYPE/DATA/ITEM_TYPE");
          itemUnit = trans.getValue("ITEMUNIT/DATA/ITEM_UNIT");
          java.text.DecimalFormat df = new java.text.DecimalFormat("#0.00"); 
          price =  trans.getValue("ITEMPRICE/DATA/ITEM_PRICE");     
          String original_qty = trans.getValue("ORIGINALQTY/DATA/ORIGINAL_QTY");   
          String original_total = trans.getValue("ORIGINALTOTAL/DATA/ORIGINAL_TOTAL"); 
          String changed_diff_qty = trans.getValue("CHANGEDDIFFQTY/DATA/CHANGED_DIFF_QTY");   
          String changed_diff_total = trans.getValue("CHANGEDDIFFTOTAL/DATA/CHANGED_DIFF_TOTAL"); 
          String qty =trans.getValue("QTY/DATA/QTY");   
          String total = trans.getValue("TOTAL/DATA/TOTAL");             
          trans.clear();  
          cmd.clear();            
          txt = ((mgr.isEmpty(itemDesc)) ? "" : itemDesc) + "^" + ((mgr.isEmpty(itemType)) ? "ITEM" : itemType) + "^" +        ((mgr.isEmpty(itemUnit)) ? "" : itemUnit) + "^" + ((mgr.isEmpty(price)) ? "" : price) + "^" + ((mgr.isEmpty(original_qty)) ? "" : original_qty) + "^"+ ((mgr.isEmpty(original_total)) ? "" : original_total) + "^"+ ((mgr.isEmpty(changed_diff_qty)) ? "" : changed_diff_qty) + "^"+ ((mgr.isEmpty(changed_diff_total)) ? "" : changed_diff_total) + "^"+ ((mgr.isEmpty(qty)) ? "" : qty) + "^"+ ((mgr.isEmpty(total)) ? "" : total) + "^" + ((mgr.isEmpty(price)) ? "" : price) + "^"  + ((mgr.isEmpty(price)) ? "" : price) + "^"+ ((mgr.isEmpty(price)) ? "" : price) + "^" ;
          mgr.responseWrite(txt);        
       }else if("ITEM_TYPE".equals(val)){
           if("FOLDER".equals(mgr.readValue("ITEM_TYPE"))){
             txt =  "" + "^" +  "" + "^" +   "" + "^" +   "" + "^" +   "" + "^" +   "" + "^" +"" + "^" +  "" + "^" +   "" + "^" +   "" + "^" +   "" + "^";
             mgr.responseWrite(txt);  
           }         
       }                            
       mgr.endResponse();        
   } 
   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------
   
   protected String getDescription()
   {
      return "CONTRACTCONTACTREQDESC: Contract Contact Req";
   }


   protected String getTitle()
   {
      return "CONTRACTCONTACTREQTITLE: Contract Contact Req";
   }


   protected void printContents() throws FndException
   {
      super.printContents();
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }           
      if (contract_contact_req_item_lay.isVisible())
          appendToHTML(contract_contact_req_item_lay.show());

   }

   @Override
   protected ASPBlock getBizWfBlock()
   {
      return headblk;
   }    
}
