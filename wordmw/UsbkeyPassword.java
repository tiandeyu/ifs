/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.wordmw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.IOException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class UsbkeyPassword extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.wordmw.UsbkeyPassword");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  UsbkeyPassword (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SN")) )
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("USBKEYPASSWORDNODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","USBKEY_PASSWORD_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("SN").
              setMandatory().
              setLabel("USBKEYPASSWORDSN: Sn").
              setReadOnly().
              setSize(20);
      headblk.addField("PASSWORD").
              setInsertable().
              setPasswordField().
              setLabel("USBKEYPASSWORDPASSWORD: Password").
              setSize(20);
      headblk.addField("REMARK").
              setInsertable().
              setLabel("USBKEYPASSWORDREMARK: Remark").
              setSize(20);
      headblk.setView("USBKEY_PASSWORD");
      headblk.defineCommand("USBKEY_PASSWORD_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("USBKEYPASSWORDTBLHEAD: Usbkey Passwords");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);

   }
   
   
   /**
    * Encode a string using Base64 encoding. Used when storing passwords as
    * cookies.
    *
    * This is weak encoding in that anyone can use the decodeString routine to
    * reverse the encoding.
    *
    * @param str
    * @return String
    * @throws IOException
    */
   public static String encodeString(String str)
   {
       sun.misc.BASE64Encoder encoder = new sun.misc.BASE64Encoder();
       String encodedStr = new String(encoder.encodeBuffer(str.getBytes()));

       return encodedStr.trim();
   }

   /**
    * Decode a string using Base64 encoding.
    *
    * @param str
    * @return String
    * @throws IOException
    */
   public static String decodeString(String str) throws IOException
   {
       sun.misc.BASE64Decoder dec = new sun.misc.BASE64Decoder();
       String value = new String(dec.decodeBuffer(str));

       return value;
   }
   
   public static void main(String[] args) throws IOException{
       String str="12345678eeqewrqer9";
      
       System.out.println(encodeString(""));
       System.out.println(decodeString(""));
      
   }
  


   public void  adjust()
   {
	  ASPManager mgr = getASPManager();
      // fill function body
	  if(!headlay.isEditLayout() && !headlay.isNewLayout()){
		  mgr.getASPField("PASSWORD").setHidden();
	  }
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "USBKEYPASSWORDDESC: Usbkey Password";
   }


   protected String getTitle()
   {
      return "USBKEYPASSWORDTITLE: Usbkey Password";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      printTextLabel("   " + mgr.translate("USBKEYPASSWORDCURRENTUSBKEYSN: Current Usbkey SN"));
      printField("USBKEYSN", "","");
      if (headlay.isVisible())
          appendToHTML(headlay.show());

      appendToHTML("<script src=\"/b2e/unsecured/common/scripts/iSignatureAPI.js\"></script>");
      appendToHTML("<object id=Mana classid=\"clsid:E5C44C76-610A-4C1F-9083-6CE933E3DC1D\" width=0 height=0 align=center hspace=0 vspace=0></object> \n" );
      appendDirtyJavaScript("var usbkeysn = form.Mana.WebGetKeySN(); \n");
      appendDirtyJavaScript("if(usbkeysn){form.USBKEYSN.value=usbkeysn;\n");
      if(headlay.isNewLayout() || headlay.isFindLayout()){
    	  appendDirtyJavaScript(" if(form.SN){\n");
    	  appendDirtyJavaScript(" form.SN.value=usbkeysn;\n");
    	  appendDirtyJavaScript(" }\n");
      }
      appendDirtyJavaScript(" } \n");
      
      if(headlay.isEditLayout()){
    	  
    	  appendDirtyJavaScript("function checkMainFields(){ \n");
    	  appendDirtyJavaScript("    if(form.SN.value != form.USBKEYSN.value){\n");
    	  appendDirtyJavaScript("       alert('无权修改当前记录！');\n");
    	  appendDirtyJavaScript("       return false;\n");
    	  appendDirtyJavaScript(" }\n");
    	  appendDirtyJavaScript("return true;} \n");
      }
      
      
      
      
    if(headlay.isSingleLayout()){
    	printHiddenField("SN", headset.getValue("SN"));
        appendDirtyJavaScript(" if(form.SN.value!=usbkeysn){\n");
        appendDirtyJavaScript("    if(document.getElementsByTagName){\n");
        appendDirtyJavaScript("       var allLinks = parent.document.getElementsByTagName('img');\n");
        appendDirtyJavaScript("       var hasDelete = false;\n");
        appendDirtyJavaScript("       var deleteImgCtl;\n");
        appendDirtyJavaScript("       for(i = 0;i<allLinks.length;i++){\n");
        appendDirtyJavaScript("          var tempLink = allLinks[i];\n");
        appendDirtyJavaScript("          if('MAIN_Delete' == tempLink.name || 'MAIN_MultiDelte' == tempLink.name){\n");
        appendDirtyJavaScript("             hasDelete = true;\n");
        appendDirtyJavaScript("             deleteImgCtl = tempLink;\n");
        appendDirtyJavaScript("             break;\n");
        appendDirtyJavaScript("          }\n");
        appendDirtyJavaScript("       }\n");
        appendDirtyJavaScript("       if(hasDelete){\n");
        appendDirtyJavaScript("          var deleteLinkCtl = deleteImgCtl.parentNode;\n");
        appendDirtyJavaScript("          deleteImgCtl.style.display = 'none';\n");
        appendDirtyJavaScript("          deleteLinkCtl.style.display = 'none';\n");
        appendDirtyJavaScript("       }\n");
        appendDirtyJavaScript("    }\n");
        appendDirtyJavaScript(" }\n");
    }else{
        appendDirtyJavaScript(" if(true){\n");
        appendDirtyJavaScript("    if(document.getElementsByTagName){\n");
        appendDirtyJavaScript("       var allLinks = parent.document.getElementsByTagName('img');\n");
        appendDirtyJavaScript("       var hasDelete = false;\n");
        appendDirtyJavaScript("       var deleteImgCtl;\n");
        appendDirtyJavaScript("       for(i = 0;i<allLinks.length;i++){\n");
        appendDirtyJavaScript("          var tempLink = allLinks[i];\n");
        appendDirtyJavaScript("          if('MAIN_Delete' == tempLink.name || 'MAIN_MultiDelte' == tempLink.name){\n");
        appendDirtyJavaScript("             hasDelete = true;\n");
        appendDirtyJavaScript("             deleteImgCtl = tempLink;\n");
        appendDirtyJavaScript("             break;\n");
        appendDirtyJavaScript("          }\n");
        appendDirtyJavaScript("       }\n");
        appendDirtyJavaScript("       if(hasDelete){\n");
        appendDirtyJavaScript("          var deleteLinkCtl = deleteImgCtl.parentNode;\n");
        appendDirtyJavaScript("          deleteImgCtl.style.display = 'none';\n");
        appendDirtyJavaScript("          deleteLinkCtl.style.display = 'none';\n");
        appendDirtyJavaScript("       }\n");
        appendDirtyJavaScript("    }\n");
        appendDirtyJavaScript(" }\n");
    }
    //Added by lqw 20131218 begin

  //Added by lqw 20131218 end;
      
      
      
      
   }
   
   protected AutoString getContents() throws FndException 
   {
      return super.getContents();
   }
   
}
