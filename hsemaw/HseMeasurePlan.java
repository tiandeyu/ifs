/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.hsemaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class HseMeasurePlan extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.hsemaw.HseMeasurePlan");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  HseMeasurePlan (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      ASPManager mgr = getASPManager();
      super.run();
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else 
         okFind();
      
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.addWhereCondition("TYPE_ID  IS NULL");
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("HSEMEASUREPLANNODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","HSE_MEASURE_PLAN_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setWfProperties().
              setInsertable().
              setDynamicLOV("GENERAL_PROJECT").
              setLabel("HSEMEASUREPLANPROJNO: Proj No").
              setSize(30);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
              setLabel("HSEMEASUREPLANGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(20).
              setReadOnly();
      
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      
      headblk.addField("ID").
              setLabel("HSEMEASUREPLANID: Id").
              setWfProperties().
              setSize(30).
              setHidden();
      headblk.addField("DOC_NAME").
              setInsertable().
              setLabel("HSEMEASUREPLANDOCNAME: Doc Name").
              setSize(30);
      headblk.addField("PROJECT_NAME").
              setInsertable().
              setLabel("HSEMEASUREPLANPROJECTNAME: Project Name").
              setSize(30);
      headblk.addField("DOC_TIME","Date").
              setInsertable().
              setLabel("HSEMEASUREPLANDOCTIME: Doc Time").
              setSize(30);
      headblk.addField("ORG").
              setInsertable().
              setDynamicLOV("GENERAL_ZONE").
//              setLOVProperty("WHERE", "PERSON_ID = '"+mgr.getFndUser()+"'").
              setLabel("HSEMEASUREPLANORG: Org").
              setSize(30);
      headblk.addField("ORG_DESC").
              setReadOnly().
              setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc_ (:ORG)").
              setLabel("HSEMEASUREPLANORGDESC: Org Desc").
              setSize(30);  
      mgr.getASPField("ORG").setValidation("ORG_DESC");

      headblk.addField("NOTE").
              setInsertable().
              setLabel("HSEMEASUREPLANNOTE: Note").
              setSize(120).
              setHeight(5);
     
      headblk.setView("HSE_MEASURE_PLAN");
      headblk.defineCommand("HSE_MEASURE_PLAN_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("HSEMEASUREPLANTBLHEAD: Hse Measure Plans");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setSimple("ORG_DESC");
      headlay.setDataSpan("NOTE", 5);
      headlay.setDataSpan("ORG", 5);
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
 



   }



   public void  adjust() throws FndException
   {
      // fill function body
      super.adjust();
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "HSEMEASUREPLANDESC: Hse Measure Plan";
   }


   protected String getTitle()
   {
      return "HSEMEASUREPLANTITLE: Hse Measure Plan";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());

   }

   @Override
   protected ASPBlock getBizWfBlock() {
      // TODO Auto-generated method stub
      return headblk;
   }
}
