/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.hsemaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class HseSecQuaExam extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.hsemaw.HseSecQuaExam");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  HseSecQuaExam (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      super.run();
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else 
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("HSESECQUAEXAMNODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","HSE_SEC_QUA_EXAM_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }

   public void validate()
  {
     ASPManager mgr=getASPManager();
     ASPTransactionBuffer trans=mgr.newASPTransactionBuffer();
     ASPCommand cmd;
     String str=mgr.readValue("VALIDATE");
   
     if ("CONTRACT_ID".equals(str)) {
        cmd = trans.addCustomFunction("CONTRACT_DESC","PROJECT_CONTRACT_API.GET_CONTRACT_DESC","CONTRACT_DESC");
        cmd.addParameter("PROJ_NO");
        cmd.addParameter("CONTRACT_ID");

        cmd = trans.addCustomFunction("SECEND_SIDE","PROJECT_CONTRACT_API.GET_SECEND_SIDE","SECEND_SIDE");
        cmd.addParameter("PROJ_NO");
        cmd.addParameter("CONTRACT_ID");

        trans = mgr.validate(trans);
        String CONTRACT_DESC     = trans.getValue("CONTRACT_DESC/DATA/CONTRACT_DESC"            );
        String SECEND_SIDE     = trans.getValue("SECEND_SIDE/DATA/SECEND_SIDE"            );

        CONTRACT_DESC     = mgr.isEmpty(CONTRACT_DESC    )? ""  : CONTRACT_DESC    ;
        SECEND_SIDE     = mgr.isEmpty(SECEND_SIDE    )? ""  : SECEND_SIDE    ;
        
        trans.clear();
        cmd = trans.addCustomFunction("SECEND_SIDE_NAME","SUPPLIER_INFO_API.GET_NAME","SECEND_SIDE_NAME");
        cmd.addParameter("SECEND_SIDE",SECEND_SIDE);
        

        trans = mgr.validate(trans);
        String SECEND_SIDE_NAME     = trans.getValue("SECEND_SIDE_NAME/DATA/SECEND_SIDE_NAME"            );
  
        SECEND_SIDE_NAME     = mgr.isEmpty(SECEND_SIDE_NAME    )? ""  : SECEND_SIDE_NAME    ;
        
        mgr.responseWrite(CONTRACT_DESC + "^"+SECEND_SIDE + "^" +SECEND_SIDE_NAME + "^" );
     }
     mgr.endResponse();
  }  
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      

      headblk.addField("ID").
              setMandatory().
              setInsertable().
              setLabel("HSESECQUAEXAMID: Id").
              setSize(20);
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setDynamicLOV("GENERAL_PROJECT").
              setLabel("HSESECQUAEXAMPROJNO: Proj No").
              setSize(20);
      headblk.addField("PROJ_DESC").
               setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
               setLabel("HSESECQUAEXAMPROJDESC: Proj Desc").
               setReadOnly().
               setSize(30);
      mgr.getASPField("PROJ_NO").setValidation("PROJ_DESC");

      headblk.addField("CONTRACT_ID").
              setInsertable().
              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
              setLabel("HSESECQUAEXAMCONTRACTID: Contract Id").
              setCustomValidation("PROJ_NO,CONTRACT_ID", "CONTRACT_DESC,SECEND_SIDE,SECEND_SIDE_NAME").
              setSize(20);
      headblk.addField("CONTRACT_DESC").
              setFunction("PROJECT_CONTRACT_API.GET_CONTRACT_DESC ( :PROJ_NO,:CONTRACT_ID)").
              setLabel("HSESECQUAEXAMCONTRACTDESC: Contract Desc").
//              setWfProperties().
              setReadOnly().
              setSize(30);
//      mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_DESC");
      


      headblk.addField("SECEND_SIDE").
              setDefaultNotVisible().
              setReadOnly().
              setFunction("PROJECT_CONTRACT_API.GET_SECEND_SIDE ( :PROJ_NO,:CONTRACT_ID)").
              setLabel("HSESECQUAEXAMSECENDSIDE: Secend Side").
              setSize(20);
      headblk.addField("SECEND_SIDE_NAME").
              setSize(30).
              setMaxLength(140).
              setReadOnly().
//              setWfProperties().
              setFunction("SUPPLIER_INFO_API.GET_NAME(PROJECT_CONTRACT_API.GET_SECEND_SIDE ( :PROJ_NO,:CONTRACT_ID))").    
              setLabel("HSESECQUAEXAMSECENDSIDENAME: Secend Side Name");
//      mgr.getASPField("SECEND_SIDE").setValidation("SECEND_SIDE_NAME");

      headblk.addField("QUA_NAME").
              setInsertable().
              setLabel("HSESECQUAEXAMQUANAME: Qua Name").
              setSize(30);
      headblk.addField("NOTE").
              setInsertable().
              setLabel("HSESECQUAEXAMNOTE: Note").
              setHeight(4).
              setSize(100);
      headblk.addField("CREATE_PERSON").
              setInsertable().
//              setHidden().
              setDynamicLOV("PERSON_INFO").
              setLabel("HSESECQUAEXAMCREATEPERSON: Create Person").
              setSize(20);
      headblk.addField("CREATE_PERSON_NAME").
              setReadOnly().
//              setHidden().
              setLabel("HSESECQUAEXAMCREATEPERSONNAME: Create Person Name").
              setFunction("PERSON_INFO_API.GET_NAME (:CREATE_PERSON)").
              setSize(30);
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
//              setHidden().
              setLabel("HSESECQUAEXAMCREATETIME: Create Time").
              setSize(20);
      
      headblk.addField("FLOW_TITLE").
      setWfProperties().
      setReadOnly().
      setHidden().
      setFunction("PROJECT_CONTRACT_API.GET_CONTRACT_DESC ( :PROJ_NO,:CONTRACT_ID)").
      setLabel("FLOWTITLE: Flow Title").
      setSize(30);
     
      headblk.setView("HSE_SEC_QUA_EXAM");
      headblk.defineCommand("HSE_SEC_QUA_EXAM_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("printReport", "HSELARGEEQUREVAPPLPRINTREPORT: Print Report...");
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("HSESECQUAEXAMTBLHEAD: Hse Sec Qua Exams");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("PROJ_DESC");
      headlay.setSimple("CONTRACT_DESC");
      headlay.setSimple("SECEND_SIDE_NAME");
      headlay.setSimple("CREATE_PERSON_NAME");
      headlay.setDataSpan("QUA_NAME", 5);
      headlay.setDataSpan("NOTE", 5);
 



   }



   public void  adjust() throws FndException
   {
      // fill function body
      super.adjust();
   }

   public void  printReport() throws FndException, UnsupportedEncodingException
  {
   ASPManager mgr = getASPManager();
   ASPConfig cfg = getASPConfig();
   String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
   if (headlay.isMultirowLayout())
      headset.goTo(headset.getRowSelected());
   if (headset.countRows()>0 )
         {   
            String proj_no = headset.getValue("PROJ_NO");
            String accept_id = headset.getValue("ID");
             appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=HseSecQuaExam.raq&proj_no="+proj_no+"&id="+accept_id
               + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
        }
  }   

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "HSESECQUAEXAMDESC: Hse Sec Qua Exam";
   }


   protected String getTitle()
   {
      return "HSESECQUAEXAMTITLE: Hse Sec Qua Exam";
   }


   protected void printContents() throws FndException
   {
      super.printContents();
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());

   }
   @Override
   protected ASPBlock getBizWfBlock() {
      // TODO Auto-generated method stub
      return headblk;
   }
}
