/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.hsemaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class HseAccident extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.quamaw.HseAccident");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  HseAccident (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      ASPManager mgr = getASPManager();
      super.run();
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else 
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      q.addWhereCondition(" quote_id is null and belong_to_lu = 'HseAccident'");
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("QUAACCIDENTNODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      q.addWhereCondition(" quote_id is null and belong_to_lu = 'HseAccident'");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","QUA_ACCIDENT_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("BELONG_TO_LU", "HseAccident");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }

   public void validate()
   {
       ASPManager mgr = getASPManager();
       ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
       ASPCommand cmd;
       ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
       ASPCommand cmd1;
       String val = mgr.readValue("VALIDATE"); 
       String txt = "";
       String contractDesc = "";
       String contructOrg = "";
       String contructOrgDesc = "";
       String supervisionOrg = "";
       String supervisionOrgDesc = "";
       String projDesc = "";
       String projType = "";
       String QUA_GRADE_DESC = "";

       if ("CONTRACT_NO".equals(val)) {   
          cmd = trans.addCustomFunction("CONTRACTDESC", 
                "PROJECT_CONTRACT_API.Get_Contract_Desc", "CONTRACT_DESC");
          cmd.addParameter("PROJ_NO,CONTRACT_NO");
          
          cmd = trans.addCustomFunction("CONSTRUCTORG", 
                "PROJECT_CONTRACT_API.Get_Secend_Side", "CONSTRUCT_ORG");
          cmd.addParameter("PROJ_NO,CONTRACT_NO");
          
          cmd = trans.addCustomFunction("SUPERVISIONORG", 
                "PROJECT_CONTRACT_API.Get_Third_Side", "SUPERVISION_ORG");
          cmd.addParameter("PROJ_NO,CONTRACT_NO");
          
          trans = mgr.validate(trans);
          contractDesc = trans.getValue("CONTRACTDESC/DATA/CONTRACT_DESC");
          contructOrg = trans.getValue("CONSTRUCTORG/DATA/CONSTRUCT_ORG");
          supervisionOrg = trans.getValue("SUPERVISIONORG/DATA/SUPERVISION_ORG");
          
          trans.clear();
          cmd.clear();
          cmd = trans.addCustomFunction("CONSTRUCTORGDESC", 
                "GENERAL_ZONE_API.Get_Zone_Desc", "CONSTRUCT_ORG_DESC");
          cmd.addParameter("CONSTRUCT_ORG",contructOrg);
          
          cmd = trans.addCustomFunction("SUPERVISIONORGDESC", 
                "GENERAL_ZONE_API.Get_Zone_Desc", "SUPERVISION_ORG_DESC");
          cmd.addParameter("SUPERVISION_ORG",supervisionOrg);
   
          trans = mgr.validate(trans);
          contructOrgDesc = trans.getValue("CONSTRUCTORGDESC/DATA/CONSTRUCT_ORG_DESC");
          supervisionOrgDesc = trans.getValue("SUPERVISIONORGDESC/DATA/SUPERVISION_ORG_DESC");
          
          txt = ((mgr.isEmpty(contractDesc)) ? "" : contractDesc) + "^" + ((mgr.isEmpty(contructOrg)) ? "" : contructOrg) + "^";
          txt = txt + ((mgr.isEmpty(contructOrgDesc)) ? "" : contructOrgDesc) + "^" + ((mgr.isEmpty(supervisionOrg)) ? "" : supervisionOrg) + "^";
          txt = txt + ((mgr.isEmpty(supervisionOrgDesc)) ? "" : supervisionOrgDesc) + "^";
          mgr.responseWrite(txt);
       }
       if("PROJ_NO".equals(val)) {
          cmd = trans.addCustomFunction("PROJDESC", 
                "GENERAL_PROJECT_API.GET_PROJ_DESC", "GENERAL_PROJECT_PROJ_DESC");
          cmd.addParameter("PROJ_NO");
          
          cmd = trans.addCustomFunction("PROJTYPE", 
                "GENERAL_PROJECT_API.Get_Project_Type_Id", "PROJECT_TYPE_NO");
          cmd.addParameter("PROJ_NO");
          
          trans = mgr.validate(trans);
          projDesc = trans.getValue("PROJDESC/DATA/GENERAL_PROJECT_PROJ_DESC");
          projType = trans.getValue("PROJTYPE/DATA/PROJECT_TYPE_NO");
          
          txt = ((mgr.isEmpty(projDesc)) ? "" : projDesc) + "^" + ((mgr.isEmpty(projType)) ? "" : projType) + "^";
          mgr.responseWrite(txt);
       }
       if("QUA_GRADE_NO".equals(val)) {
          cmd1 = trans1.addCustomFunction("PROJTYPE1", 
                "GENERAL_PROJECT_API.Get_Project_Type_Id", "PROJECT_TYPE_NO");
          cmd1.addParameter("PROJ_NO",mgr.readValue("PROJ_NO"));
          
          trans1 = mgr.validate(trans1);
          projType = trans1.getValue("PROJTYPE1/DATA/PROJECT_TYPE_NO");
          
          
          cmd = trans.addCustomFunction("GETHSEGRADEDESC", 
                "HSE_ACC_GRADE_API.Get_Description", "QUA_GRADE_DESC");
          String QUA_GRADE_NO = mgr.readValue("QUA_GRADE_NO");
          
          cmd.addParameter("QUA_GRADE_NO",QUA_GRADE_NO);
          cmd.addParameter("PROJECT_TYPE_NO",projType);
          
          trans = mgr.validate(trans);
          QUA_GRADE_DESC = trans.getValue("GETHSEGRADEDESC/DATA/QUA_GRADE_DESC");
          
          txt = ((mgr.isEmpty(QUA_GRADE_DESC)) ? "" : QUA_GRADE_DESC) + "^" ;
          mgr.responseWrite(txt);
       }
       mgr.endResponse();
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      
      headblk.addField("PROJ_NO").
              setMandatory().
              setWfProperties().
              setInsertable().
              setDynamicLOV("GENERAL_PROJECT").
              setLabel("HSEACCIDENTPROJNO: Proj No").
              setCustomValidation("PROJ_NO", "GENERAL_PROJECT_PROJ_DESC,PROJECT_TYPE_NO").
              setSize(30); 
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("HSEACCIDENTPROJECTPROJDESC: General Project Proj Desc").
              setReadOnly().
              setSize(30);
//      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      headblk.addField("ID").
              setHidden().
              setWfProperties().
              setLabel("HSEACCIDENTID: Id").
              setSize(30);
      headblk.addField("QUA_ACCIDENT_NO").
              setMandatory().
              setInsertable().
              setLabel("HSEACCIDENTNO: Hse Accident No").
              setSize(30);
      headblk.addField("CONTRACT_NO").
              setInsertable().
              setMandatory().
              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
//              setLOVProperty("WHERE", "STATUS='1'").  
//              setLOVProperty("TREE_PARE_FIELD", "PRE_CONTRACT_NO").
//              setLOVProperty("TREE_DISP_FIELD", "CONTRACT_ID,CONTRACT_DESC").
              setLabel("HSEACCIDENTCONTRACTNO: Contract No").
              setCustomValidation("PROJ_NO,CONTRACT_NO", "CONTRACT_DESC,CONSTRUCT_ORG,CONSTRUCT_ORG_DESC,SUPERVISION_ORG,SUPERVISION_ORG_DESC").
              setSize(30);
      headblk.addField("CONTRACT_DESC").
              setReadOnly().
              setFunction("PROJECT_CONTRACT_API.Get_Contract_Desc (:PROJ_NO,:CONTRACT_NO)").
              setLabel("HSEACCIDENTCONTRACTDESC: Contract Desc").
              setSize(30);
      headblk.addField("CONSTRUCT_ORG").
              setReadOnly().
//              setFunction("PROJECT_CONTRACT_API.Get_Secend_Side (:PROJ_NO,:CONTRACT_NO)").
              setLabel("HSEACCIDENTCONSTRUCTORG: Construct Org").
              setSize(30);
      headblk.addField("CONSTRUCT_ORG_DESC").
              setReadOnly().
              setFunction("GENERAL_ZONE_API.Get_Zone_Desc (PROJECT_CONTRACT_API.Get_Secend_Side (:PROJ_NO,:CONTRACT_NO))").
              setLabel("HSEACCIDENTCONSTRUCTORGEDESC: Construct Org Desc").
              setSize(30);
      headblk.addField("SUPERVISION_ORG").
              setInsertable().
              setDynamicLOV("GENERAL_ZONE").
//              setLOVProperty("WHERE", "PERSON_ID = '"+mgr.getFndUser()+"'").
//              setFunction("PROJECT_CONTRACT_API.Get_Third_Side (:PROJ_NO,:CONTRACT_NO)").
              setLabel("HSEACCIDENTSUPERVISIONORG: Supervision Org").
              setSize(30);
      headblk.addField("SUPERVISION_ORG_DESC").
              setReadOnly().
              setFunction("GENERAL_ZONE_API.Get_Zone_Desc ( :SUPERVISION_ORG)").
              setLabel("HSEACCIDENTSUPERVISIONORGDESC: Supervision Org Desc").
              setSize(30);
      mgr.getASPField("SUPERVISION_ORG").setValidation("SUPERVISION_ORG_DESC");
      headblk.addField("SUB_PROJ_NO").
              setInsertable().    
              setDynamicLOV("CON_QUA_TREE","PROJ_NO").
              setLOVProperty("TREE_PARE_FIELD", "PARENT_ID").
              setLOVProperty("TREE_DISP_FIELD", "NODE_NO,NODE_NAME").
              setLabel("HSEACCIDENTSUBPROJNO: Sub Proj No").
              setSize(30);
      headblk.addField("SUB_PROJ_NAME").
              setReadOnly().
              setLabel("HSEACCIDENTSUBPROJNAME: Sub Proj Name").
              setFunction("CON_PROJ_CONSTRUCTION_MAN_API.Get_Node_Name (:PROJ_NO,:SUB_PROJ_NO)").
              setSize(30);
      mgr.getASPField("SUB_PROJ_NO").setValidation("SUB_PROJ_NAME");
      headblk.addField("PROJ_POSITION").
              setInsertable().
              setLabel("HSEACCIDENTPROJPOSITION: Proj Position").
              setSize(30).
              setMaxLength(100);
      headblk.addField("ACCIDENT_NAME").
              setInsertable().
              setLabel("HSEACCIDENTACCIDENTNAME: Accident Name").
              setSize(30).
              setMaxLength(100);
      headblk.addField("ACCIDENT_CONDITION").
              setInsertable().
              setLabel("HSEACCIDENTACCIDENTCONDITION: Accident Condition").
              setSize(30).
              setMaxLength(2000).
              setHeight(3);
      headblk.addField("ACCIDENT_CAUSE").
              setInsertable().
              setLabel("HSEACCIDENTACCIDENTCAUSE: Accident Cause").
              setSize(30).
              setMaxLength(500).
              setHeight(3);
      headblk.addField("PROJECT_TYPE_NO").
              setLabel("HSEACCIDENTPROJECTTYPENO: Project Type No").
              setFunction("GENERAL_PROJECT_API.Get_Project_Type_Id ( :PROJ_NO)").
              setHidden().
              setSize(30);  
      
      headblk.addField("QUA_GRADE_NO").
              setInsertable().
              setLabel("HSEACCIDENTQUAGRADENO: Hse Acc Grade No").
              setDynamicLOV("HSE_ACC_GRADE", "PROJECT_TYPE_NO").
              setCustomValidation("PROJ_NO,QUA_GRADE_NO,PROJECT_TYPE_NO","QUA_GRADE_DESC").
              setSize(30);
      headblk.addField("QUA_GRADE_DESC").
              setFunction("HSE_ACC_GRADE_API.Get_Description( :QUA_GRADE_NO,GENERAL_PROJECT_API.Get_Project_Type_Id ( :PROJ_NO))").
              setLabel("HSEACCIDENTGRADEDESC: Hse Grade Desc").
              setReadOnly().
              setSize(30);      
//      mgr.getASPField("QUA_GRADE_NO").setValidation("QUA_GRADE_DESC");
      headblk.addField("LOSS_AMOUT","Number").
              setInsertable().
              setLabel("HSEACCIDENTLOSSAMOUT: Loss Amout").
              setSize(30);
      headblk.addField("HAPPEN_DATE","Date").
              setInsertable().
              setLabel("HSEACCIDENTHAPPENDATE: Happen Date").
              setSize(30);
      
      headblk.addField("DUTY_ORG").
              setInsertable().
              setDynamicLOV("GENERAL_ZONE").
//              setLOVProperty("WHERE", "PERSON_ID = '"+mgr.getFndUser()+"'").
              setLabel("HSEACCIDENTDUTYORG: Duty Org").
              setSize(30);
      headblk.addField("DUTY_ORG_DESC").
              setReadOnly().
              setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc_ (:DUTY_ORG)").
              setLabel("HSEACCIDENTDUTYORGDESC: Duty Org Desc").
              setSize(30);  
      mgr.getASPField("DUTY_ORG").setValidation("DUTY_ORG_DESC");
      
      headblk.addField("HANDLE_PERSON").             
              setLabel("HSEACCIDENTHANDLEPERSON: Handle Person").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setSize(30);
      headblk.addField("HANDLE_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :HANDLE_PERSON)").
              setLabel("HSEACCIDENTHANDLEPERSONNAME: Handle Person Name").
              setReadOnly().
              setSize(30);
      mgr.getASPField("HANDLE_PERSON").setValidation("HANDLE_PERSON_NAME");
      headblk.addField("HANDLE_TIME","Date").
              setLabel("HSEACCIDENTHANDLETIME: Handle Time").
              setInsertable().
              setSize(30);
      headblk.addField("INITIAL_DEAL_ADVICE").
              setInsertable().
              setLabel("HSEACCIDENTINITIALDEALADVICE: Initial Deal Advice").
              setSize(120).
              setMaxLength(500).
              setHeight(3);
      headblk.addField("NOTE").
              setInsertable().
              setLabel("HSEACCIDENTNOTE: Note").
              setSize(120).
              setMaxLength(500).
              setHeight(3);
      headblk.addField("BELONG_TO_LU").
              setHidden().
              setLabel("HSEACCIDENTBELONGTOLU: Belong To Lu").
              setSize(30);
      

      headblk.setView("QUA_ACCIDENT");
      headblk.defineCommand("QUA_ACCIDENT_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("HSEACCIDENTTBLHEAD: Hse Accidents");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headbar.addCustomCommand("printReport", "HSEACCIDENTPRINTREPORT: Print Report...");

      headlay.setDataSpan("HANDLE_TIME", 5);
      headlay.setDataSpan("INITIAL_DEAL_ADVICE", 5);
      headlay.setDataSpan("ACCIDENT_NAME", 5);
      headlay.setDataSpan("NOTE", 5);
      headlay.setSimple("CONSTRUCT_ORG_DESC");
      headlay.setSimple("SUPERVISION_ORG_DESC");
      headlay.setSimple("CONTRACT_DESC");
      headlay.setSimple("HANDLE_PERSON_NAME");
      headlay.setSimple("SUB_PROJ_NAME");
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("CONTRACT_DESC");
      headlay.setSimple("DUTY_ORG_DESC");
      headlay.setSimple("QUA_GRADE_DESC");
   }



   public void  adjust() throws FndException
   {
      super.adjust();
      // fill function body
   }
   
   
   public void  printReport() throws FndException, UnsupportedEncodingException
  {
   ASPManager mgr = getASPManager();
   ASPConfig cfg = getASPConfig();
   String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
   if (headlay.isMultirowLayout())
      headset.goTo(headset.getRowSelected());
   if (headset.countRows()>0 )
         {   
            String proj_no = headset.getValue("PROJ_NO");
            String id = headset.getValue("ID");
             appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=HseAccident.raq&proj_no="+proj_no+"&id="+id
               + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
        }
  }   

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "HSEACCIDENTDESC: Hse Accident";
   }


   protected String getTitle()
   {
      return "HSEACCIDENTTITLE: Hse Accident";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());

   }

   @Override
   protected ASPBlock getBizWfBlock() {
      // TODO Auto-generated method stub
      return headblk;
   }
}
