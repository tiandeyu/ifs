/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.hsemaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class HseDangerSource extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.hsemaw.HseDangerSource");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock hse_danger_source_line_blk;
   private ASPRowSet hse_danger_source_line_set;
   private ASPCommandBar hse_danger_source_line_bar;
   private ASPTable hse_danger_source_line_tbl;
   private ASPBlockLayout hse_danger_source_line_lay;

   private String val;
   private ASPCommand cmd;
   private ASPTransactionBuffer trans;
   
   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  HseDangerSource (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SOURCE_NO")) )
         okFind();
      else 
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("HSEDANGERSOURCENODATA: No data found.");
         headset.clear();
      }
      eval( hse_danger_source_line_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","HSE_DANGER_SOURCE_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(hse_danger_source_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND SOURCE_NO = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("SOURCE_NO", headset.getValue("SOURCE_NO"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,hse_danger_source_line_blk);
      headset.goTo(headrowno);
   }
   
   
   public void validate()
   {
       ASPManager mgr = getASPManager();
       ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
       ASPCommand cmd;
       ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
       ASPCommand cmd1;
       String val = mgr.readValue("VALIDATE");    
       float tempValue = 0;
       String scoreL,scoreE,scoreC,scoreD;
       String descL,descE,descC,descD; 
       String txt = "";
       String dInfo = "";
       String sql = "";
       String  CREATE_PERSON_NAME = "";
       String  APPLY_ORG_DESC = "";
       String  APPLY_ORG = "";
       
       if ("E".equals(val)||"L".equals(val)||"C".equals(val)) {
          cmd = trans.addCustomFunction("ESCORE", 
                "HSE_BASE_DATA_LEC_API.Get_Score", "E_SCORE");
          cmd.addParameter("E",mgr.readValue("E"));
          cmd = trans.addCustomFunction("EDESC", 
                "HSE_BASE_DATA_LEC_API.Get_Lec_Desc", "E_DESC");
          cmd.addParameter("E",mgr.readValue("E"));
          
          cmd = trans.addCustomFunction("LSCORE", 
                "HSE_BASE_DATA_LEC_API.Get_Score", "L_SCORE");
          cmd.addParameter("L",mgr.readValue("L"));
          cmd = trans.addCustomFunction("LDESC", 
                "HSE_BASE_DATA_LEC_API.Get_Lec_Desc", "L_DESC");
          cmd.addParameter("L",mgr.readValue("L"));
          
          cmd = trans.addCustomFunction("CSCORE", 
                "HSE_BASE_DATA_LEC_API.Get_Score", "C_SCORE");
          cmd.addParameter("C",mgr.readValue("C"));
          cmd = trans.addCustomFunction("CDESC", 
                "HSE_BASE_DATA_LEC_API.Get_Lec_Desc", "C_DESC");
          cmd.addParameter("C",mgr.readValue("C"));
          trans = mgr.validate(trans);
          
          scoreE = trans.getValue("ESCORE/DATA/E_SCORE");
          descE = trans.getValue("EDESC/DATA/E_DESC");
          scoreL = trans.getValue("LSCORE/DATA/L_SCORE");
          descL = trans.getValue("LDESC/DATA/L_DESC");
          scoreC = trans.getValue("CSCORE/DATA/C_SCORE");
          descC = trans.getValue("CDESC/DATA/C_DESC");
          tempValue = ((scoreE==null)?0:Float.parseFloat(scoreE))*((scoreC==null)?0:Float.parseFloat(scoreC))*((scoreL==null)?0:Float.parseFloat(scoreL));
          trans.clear();
          cmd.clear();
          if("L".equals(val)){
             txt = String.valueOf((scoreL==null)?"0":Float.parseFloat(scoreL)) + "^" + ((descL==null)?"":descL) + "^" + String.valueOf(tempValue)+"^";
          }else if("E".equals(val)){
             txt = String.valueOf((scoreE==null)?"0":Float.parseFloat(scoreE)) + "^" + ((descE==null)?"":descE) + "^" + String.valueOf(tempValue)+"^";
          }else {
             txt = String.valueOf((scoreC==null)?"0":Float.parseFloat(scoreC)) + "^" + ((descC==null)?"":descC) + "^" + String.valueOf(tempValue)+"^";
          }
       }
      
       if(mgr.isEmpty(mgr.readValue("L"))||mgr.isEmpty(mgr.readValue("E"))||mgr.isEmpty(mgr.readValue("C"))){
       }else{
          cmd = trans.addCustomFunction("DDESC", 
                "HSE_BASE_DATA_LEC_API.Get_D_Info", "D_DESC");
          cmd.addParameter("D",String.valueOf(tempValue));
          trans = mgr.validate(trans);
          dInfo = trans.getValue("DDESC/DATA/D_DESC");
          //search the score and desc
          sql = "select score, lec_desc from hse_base_data_lec ";
          sql = sql + "where id = '" + dInfo + "'";
          trans.clear();
          trans.addQuery("ITEMS",sql);
          trans = mgr.perform(trans);
          scoreD = trans.getValue("ITEMS/DATA/SCORE");
          descD = trans.getValue("ITEMS/DATA/LEC_DESC");
          
          txt = txt + (mgr.isEmpty(scoreD)?"":scoreD) + "^" + (mgr.isEmpty(descD)?"":descD) + "^";
       }
       
       if ("CREATE_PERSON".equals(val)) {
          
          cmd = trans.addCustomFunction("GETCREATEPERSONNAME", 
                "PERSON_INFO_API.GET_NAME", "CREATE_PERSON_NAME");
          cmd.addParameter("CREATE_PERSON");
          
          cmd = trans.addCustomFunction("GETPERSONDEFZONE", 
                "PERSON_ZONE_API.Get_User_Def_Zone", "APPLY_ORG");
          cmd.addParameter("CREATE_PERSON");
          
          trans = mgr.validate(trans);
          CREATE_PERSON_NAME = trans.getValue("GETCREATEPERSONNAME/DATA/CREATE_PERSON_NAME");
          APPLY_ORG = trans.getValue("GETPERSONDEFZONE/DATA/APPLY_ORG");
          
          
          cmd1 = trans1.addCustomFunction("GETPERSONAPPLYORG", 
                "GENERAL_ZONE_API.Get_Zone_Desc", "APPLY_ORG_DESC");
          cmd1.addParameter("APPLY_ORG",APPLY_ORG);
          trans1 = mgr.validate(trans1);
          APPLY_ORG_DESC = trans1.getValue("GETPERSONAPPLYORG/DATA/APPLY_ORG_DESC");

          txt = ((mgr.isEmpty(CREATE_PERSON_NAME)) ? "" : CREATE_PERSON_NAME) + "^"
                + ((mgr.isEmpty(APPLY_ORG)) ? "" : APPLY_ORG) + "^"
                + ((mgr.isEmpty(APPLY_ORG_DESC)) ? "" : APPLY_ORG_DESC) + "^";
       }
       
       
       mgr.responseWrite(txt);
       mgr.endResponse();
   }
   
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","HSE_DANGER_SOURCE_LINE_API.New__",hse_danger_source_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_SOURCE_NO", headset.getValue("SOURCE_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      hse_danger_source_line_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setLabel("HSEDANGERSOURCEPROJNO: Proj No").
              setDynamicLOV("GENERAL_PROJECT",600,445).
              setSize(30);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setReadOnly().
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
              setLabel("HSEENVFACTORPROJNO: General Project Proj Desc").
              setSize(30);
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC"); 
      headblk.addField("SOURCE_NO").
              setHidden().    
              setSize(30);
      headblk.addField("STATUS").
              setHidden().
              setInsertable().
              setLabel("HSEDANGERSOURCESTATUS: Status").
              setSize(30);
      
      headblk.addField("CREATE_PERSON").
              setDynamicLOV("PERSON_INFO").
              setLabel("HSEDANGERSOURCECREATEPERSON: Create Person").
              setSize(30).
              setCustomValidation("CREATE_PERSON","CREATE_PERSON_NAME,APPLY_ORG,APPLY_ORG_DESC");
      
      headblk.addField("CREATE_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
              setLabel("HSEDANGERSOURCEPERSONINFONAME: Create Person Name").
              setSize(30).
              setReadOnly();
      headblk.addField("APPLY_ORG").
              setDynamicLOV("GENERAL_ZONE").
              setLabel("HSEDANGERSOURCEAPPLYORG: Apply Org").
              setSize(30);
      headblk.addField("APPLY_ORG_DESC").
              setFunction("GENERAL_ZONE_API.Get_Zone_Desc ( :APPLY_ORG)").
              setLabel("HSEDANGERSOURCEAPPLYORGDESC: Apply Org Desc").
              setSize(30).
              setReadOnly();
      mgr.getASPField("APPLY_ORG").setValidation("APPLY_ORG_DESC");
      
      
      headblk.addField("CREATE_TIME","Date").
              setLabel("HSEDANGERSOURCECREATETIME: Create Time").
              setInsertable().    
              setSize(30);
      headblk.addField("CHECK_PERSON").
              setHidden().
              setLabel("HSEDANGERSOURCECHECKPERSON: Check Person").
              setSize(30);
      headblk.addField("CHECK_TIME","Date").
              setHidden().
              setLabel("HSEDANGERSOURCECHECKTIME: Check Time").
              setSize(30);
      headblk.addField("APPROVE_PERSON").
              setHidden().
              setLabel("HSEDANGERSOURCEAPPROVEPERSON: Approve Person").
              setSize(30);
      headblk.addField("APPROVE_TIME","Date").
              setHidden().
              setLabel("HSEDANGERSOURCEAPPROVETIME: Approve Time").
              setSize(30);
      headblk.setView("HSE_DANGER_SOURCE");
      headblk.defineCommand("HSE_DANGER_SOURCE_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("HSEDANGERSOURCETBLHEAD: Hse Danger Sources");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("CREATE_PERSON_NAME");
      headlay.setSimple("APPLY_ORG_DESC");


      hse_danger_source_line_blk = mgr.newASPBlock("ITEM1");
      hse_danger_source_line_blk.addField("ITEM0_OBJID").
                                 setHidden().
                                 setDbName("OBJID");
      hse_danger_source_line_blk.addField("ITEM0_OBJVERSION").
                                 setHidden().
                                 setDbName("OBJVERSION");
      hse_danger_source_line_blk.addField("ITEM0_PROJ_NO").
                                 setDbName("PROJ_NO").
                                 setMandatory().
                                 setInsertable().
                                 setHidden().
                                 setLabel("HSEDANGERSOURCELINEITEM0PROJNO: Proj No").
                                 setSize(30);
      hse_danger_source_line_blk.addField("ITEM0_SOURCE_NO").
                                 setDbName("SOURCE_NO").
                                 setMandatory().
                                 setInsertable().
                                 setHidden().
                                 setLabel("HSEDANGERSOURCELINEITEM0SOURCENO: Source No").
                                 setSize(30);
      hse_danger_source_line_blk.addField("LINE_NO").
                                 setLabel("HSEDANGERSOURCELINELINENO: Line No").
                                 setHidden().
                                 setSize(30);
      hse_danger_source_line_blk.addField("TECHNOLOGY_EVENT").
                                 setInsertable().
                                 setLabel("HSEDANGERSOURCELINETECHNOLOGYEVENT: Technology Event").
                                 setSize(30);
      hse_danger_source_line_blk.addField("DANGEROUS_SOURCE").
                                 setInsertable().
                                 setLabel("HSEDANGERSOURCELINEDANGEROUSSOURCE: Dangerous Source").
                                 setSize(30);
      hse_danger_source_line_blk.addField("ACCIDENT").
                                 setInsertable().
                                 setLabel("HSEDANGERSOURCELINEACCIDENT: Accident").
                                 setSize(30);
      hse_danger_source_line_blk.addField("DANGEROUS_LEVEL").
                                 setInsertable().
                                 setHidden().
//                                 setFunction("HSE_BASE_DATA_LEC_API.Get_Score( HSE_BASE_DATA_LEC_API.Get_D_Info( :D))").
                                 setLabel("HSEDANGERSOURCELINEDANGEROUSLEVEL: Dangerous Level").
                                 setSize(30);
      hse_danger_source_line_blk.addField("DISCRIMINATE_ACCORD").
                                 setInsertable().
                                 setLabel("HSEDANGERSOURCELINEDISCRIMINATEACCORD: Discriminate Accord").
                                 setSize(120);
      hse_danger_source_line_blk.addField("L").
                                 setInsertable().
                                 setDynamicLOV("HSE_BASE_DATA_LEC").
                                 setLOVProperty("WHERE", "HSE_LEC_DB = 'L'").
                                 setLabel("HSEDANGERSOURCELINEL: L").
                                 setCustomValidation("L,E,C","L_SCORE,L_DESC,D,DANGEROUS_LEVEL,D_DESC").
                                 setSize(5);
      hse_danger_source_line_blk.addField("L_SCORE").
                                 setReadOnly().
                                 setDefaultNotVisible().
                                 setFunction("HSE_BASE_DATA_LEC_API.Get_Score( :L)").
                                 setSize(5);
      hse_danger_source_line_blk.addField("L_DESC").
                                 setDefaultNotVisible().
                                 setReadOnly().
                                 setFunction("HSE_BASE_DATA_LEC_API.Get_Lec_Desc( :L)").
                                 setSize(30);
      hse_danger_source_line_blk.addField("E").
                                 setInsertable().
                                 setDynamicLOV("HSE_BASE_DATA_LEC").
                                 setLOVProperty("WHERE", "HSE_LEC_DB = 'E'").
                                 setLabel("HSEDANGERSOURCELINEE: E").
                                 setCustomValidation("L,E,C","E_SCORE,E_DESC,D,DANGEROUS_LEVEL,D_DESC").
                                 setSize(5);
      hse_danger_source_line_blk.addField("E_SCORE").
                                 setReadOnly().
                                 setDefaultNotVisible().
                                 setFunction("HSE_BASE_DATA_LEC_API.Get_Score( :E)").
                                 setSize(5);
      hse_danger_source_line_blk.addField("E_DESC").
                                 setReadOnly().
                                 setDefaultNotVisible().
                                 setFunction("HSE_BASE_DATA_LEC_API.Get_Lec_Desc( :E)").
                                 setSize(30);
      hse_danger_source_line_blk.addField("C").
                                 setInsertable().
                                 setDynamicLOV("HSE_BASE_DATA_LEC").
                                 setLOVProperty("WHERE", "HSE_LEC_DB = 'C'").
                                 setLabel("HSEDANGERSOURCELINEC: C").
                                 setCustomValidation("L,E,C","C_SCORE,C_DESC,D,DANGEROUS_LEVEL,D_DESC").                  
                                 setSize(5);
      hse_danger_source_line_blk.addField("C_SCORE").
                                 setReadOnly().
                                 setDefaultNotVisible().
                                 setFunction("HSE_BASE_DATA_LEC_API.Get_Score( :C)").
                                 setSize(5);
      hse_danger_source_line_blk.addField("C_DESC").
                                 setReadOnly().
                                 setDefaultNotVisible().
                                 setFunction("HSE_BASE_DATA_LEC_API.Get_Lec_Desc( :C)").
                                 setSize(30);
      hse_danger_source_line_blk.addField("D","Number").
                                 setLabel("HSEDANGERSOURCELINED: D").
                                 setReadOnly().     
                                 setSize(10);
      hse_danger_source_line_blk.addField("D_DESC").
                                 setReadOnly().
                                 setLabel("HSEDANGERSOURCELINEDDESC: D Desc").
                                 setFunction("HSE_BASE_DATA_LEC_API.Get_Lec_Desc(HSE_BASE_DATA_LEC_API.Get_D_Info( :D))").
                                 setSize(50);
      hse_danger_source_line_blk.addField("CONTROL_MEASURE").
                                 setInsertable().
                                 setLabel("HSEDANGERSOURCELINECONTROLMEASURE: Control Measure").
                                 setHeight(4).
                                 setSize(120);
      hse_danger_source_line_blk.setView("HSE_DANGER_SOURCE_LINE");
      hse_danger_source_line_blk.defineCommand("HSE_DANGER_SOURCE_LINE_API","New__,Modify__,Remove__");
      hse_danger_source_line_blk.setMasterBlock(headblk);
      hse_danger_source_line_set = hse_danger_source_line_blk.getASPRowSet();
      hse_danger_source_line_bar = mgr.newASPCommandBar(hse_danger_source_line_blk);
      hse_danger_source_line_bar.defineCommand(hse_danger_source_line_bar.OKFIND, "okFindITEM1");
      hse_danger_source_line_bar.defineCommand(hse_danger_source_line_bar.NEWROW, "newRowITEM1");
      hse_danger_source_line_tbl = mgr.newASPTable(hse_danger_source_line_blk);
      hse_danger_source_line_tbl.setTitle("HSEDANGERSOURCELINEITEMHEAD1: HseDangerSource");
      hse_danger_source_line_tbl.enableRowSelect();
      hse_danger_source_line_tbl.setWrap();
      hse_danger_source_line_lay = hse_danger_source_line_blk.getASPBlockLayout();
      hse_danger_source_line_lay.setDefaultLayoutMode(hse_danger_source_line_lay.MULTIROW_LAYOUT);
      hse_danger_source_line_lay.setDataSpan("DISCRIMINATE_ACCORD",5);
      hse_danger_source_line_lay.setDataSpan("CONTROL_MEASURE",5);
      hse_danger_source_line_lay.setDataSpan("ACCIDENT",5);
      hse_danger_source_line_lay.setSimple("L_SCORE");
      hse_danger_source_line_lay.setSimple("L_DESC");
      hse_danger_source_line_lay.setSimple("C_SCORE");
      hse_danger_source_line_lay.setSimple("C_DESC");
      hse_danger_source_line_lay.setSimple("E_SCORE");
      hse_danger_source_line_lay.setSimple("E_DESC");
      hse_danger_source_line_lay.setSimple("D_DESC");

   }

   public void  adjust()
   {
      // fill function body
   }
   

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "HSEDANGERSOURCEDESC: Hse Danger Source";
   }


   protected String getTitle()
   {
      return "HSEDANGERSOURCETITLE: Hse Danger Source";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible()) {
          appendToHTML(headlay.show());
      }
      else
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
      if (hse_danger_source_line_lay.isVisible())
          appendToHTML(hse_danger_source_line_lay.show());

   }
      
}
