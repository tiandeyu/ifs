/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.genfrw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.util.StringTokenizer;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class GenFormSmall extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.genfrw.GenFormSmall");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   private String __g_type_no;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public GenFormSmall(ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }
   
   //-----------------------------------------------------------------------------
   //--------------  Return blk connected with workflow functions  ---------------
   //-----------------------------------------------------------------------------

   protected ASPBlock getBizWfBlock()
   {
      return headblk;
   }

   //-----------------------------------------------------------------------------
   //---------------------------  Run logic functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void run() throws FndException
   {
      super.run();

      ASPManager mgr = getASPManager();
      ASPContext ctx = mgr.getASPContext();

      __g_type_no = ctx.readValue("TYPE_NO");
      
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("FORM_SEQ")) )
         okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("TYPE_NO")))
      {
         __g_type_no = mgr.getQueryStringValue("TYPE_NO");
         okFind();
      }
      adjust();
      ctx.writeValue("TYPE_NO", __g_type_no);
   }

   //-----------------------------------------------------------------------------
   //
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("GENFORMSMALLNODATA: No data found.");
         headset.clear();
      }
   }

   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }

   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPContext ctx = mgr.getASPContext();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","GEN_FORM_SMALL_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      
      __g_type_no = ctx.readValue("TYPE_NO");
      if (!mgr.isEmpty(__g_type_no))
         data.setFieldItem("TYPE_NO", __g_type_no);
      
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      
      // line 1
      headblk.addField("TYPE_NO").
              setMandatory().
              setInsertable().
              setHidden().
              setDynamicLOV("GEN_FORM_TYPE").
              setLabel("GENFORMSMALLTYPENO: Type No").
              setSize(20);
      headblk.addField("FORM_SEQ","Number").
              setInsertable().
              setHidden().
              setLabel("GENFORMSMALLFORMSEQ: Form Seq").
              setSize(10);
      headblk.addField("FORM_NO").
              setInsertable().
              setLabel("GENFORMSMALLFORMNO: Form No").
              setSize(20);
      
      // line 2
      headblk.addField("FORM_NAME").
              setInsertable().
              setLabel("GENFORMSMALLFORMNAME: Form Name").
              setSize(30);
      
      headblk.addField("S1").setHidden();
      headblk.addField("F1").setFunction("'ABC'").setHidden();
      headblk.addField("S2").setHidden();
      headblk.addField("F2").setFunction("''").setHidden();
      headblk.addField("S3").setHidden();
      headblk.addField("F3").setFunction("''").setHidden();
      headblk.addField("S4").setHidden();
      headblk.addField("F4").setFunction("''").setHidden();
      headblk.addField("S5").setHidden();
      headblk.addField("F5").setFunction("''").setHidden();
      headblk.addField("S6").setHidden();
      headblk.addField("F6").setFunction("''").setHidden();
      headblk.addField("S7").setHidden();
      headblk.addField("F7").setFunction("''").setHidden();
      headblk.addField("S8").setHidden();
      headblk.addField("F8").setFunction("''").setHidden();
      headblk.addField("S9").setHidden();
      headblk.addField("F9").setFunction("''").setHidden();
      headblk.addField("S10").setHidden();
      headblk.addField("F10").setFunction("''").setHidden();
      headblk.addField("S11").setHidden();
      headblk.addField("F11").setFunction("''").setHidden();
      headblk.addField("S12").setHidden();
      headblk.addField("F12").setFunction("''").setHidden();
      headblk.addField("S13").setHidden();
      headblk.addField("F13").setFunction("''").setHidden();
      headblk.addField("S14").setHidden();
      headblk.addField("F14").setFunction("''").setHidden();
      headblk.addField("S15").setHidden();
      headblk.addField("F15").setFunction("''").setHidden();
      headblk.addField("S16").setHidden();
      headblk.addField("F16").setFunction("''").setHidden();
      headblk.addField("S17").setHidden();
      headblk.addField("F17").setFunction("''").setHidden();
      headblk.addField("S18").setHidden();
      headblk.addField("F18").setFunction("''").setHidden();
      headblk.addField("S19").setHidden();
      headblk.addField("F19").setFunction("''").setHidden();
      headblk.addField("S20").setHidden();
      headblk.addField("F20").setFunction("''").setHidden();
      headblk.addField("S21").setHidden();
      headblk.addField("F21").setFunction("''").setHidden();
      headblk.addField("S22").setHidden();
      headblk.addField("F22").setFunction("''").setHidden();
      headblk.addField("S23").setHidden();
      headblk.addField("F23").setFunction("''").setHidden();
      headblk.addField("S24").setHidden();
      headblk.addField("F24").setFunction("''").setHidden();
      headblk.addField("S25").setHidden();
      headblk.addField("F25").setFunction("''").setHidden();
      headblk.addField("S26").setHidden();
      headblk.addField("F26").setFunction("''").setHidden();
      headblk.addField("S27").setHidden();
      headblk.addField("F27").setFunction("''").setHidden();
      headblk.addField("S28").setHidden();
      headblk.addField("F28").setFunction("''").setHidden();
      headblk.addField("S29").setHidden();
      headblk.addField("F29").setFunction("''").setHidden();
      headblk.addField("S30").setHidden();
      headblk.addField("F30").setFunction("''").setHidden();
      headblk.addField("N1","Number").setHidden();
      headblk.addField("N2","Number").setHidden();
      headblk.addField("N3","Number").setHidden();
      headblk.addField("N4","Number").setHidden();
      headblk.addField("N5","Number").setHidden();
      headblk.addField("N6","Number").setHidden();
      headblk.addField("N7","Number").setHidden();
      headblk.addField("N8","Number").setHidden();
      headblk.addField("N9","Number").setHidden();
      headblk.addField("N10","Number").setHidden();
      headblk.addField("D1","Date").setHidden();
      headblk.addField("D2","Date").setHidden();
      headblk.addField("D3","Date").setHidden();
      headblk.addField("D4","Date").setHidden();
      headblk.addField("D5","Date").setHidden();
      headblk.addField("D6","Date").setHidden();
      headblk.addField("D7","Date").setHidden();
      headblk.addField("D8","Date").setHidden();
      headblk.addField("D9","Date").setHidden();
      headblk.addField("D10","Date").setHidden();
      headblk.addField("DOC_REMOTE_NAME").
              setInsertable().
              setHidden().
              setLabel("GENFORMSMALLDOCREMOTENAME: Doc Remote Name").
              setSize(50);
      headblk.addField("DOC_TEMPL_NAME").
              setInsertable().
              setHidden().
              setLabel("GENFORMSMALLDOCTEMPLNAME: Doc Templ Name").
              setSize(50);
      headblk.addField("DOC_LOCK").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setHidden().
              setLabel("GENFORMSMALLDOCLOCK: Doc Lock").
              setSize(5);
      
      headblk.addField("T1").setFunction("''").setHidden();
      headblk.addField("T2").setFunction("''").setHidden();
      headblk.addField("T3").setFunction("''").setHidden();
      headblk.addField("T4").setFunction("''").setHidden();
      headblk.addField("T5").setFunction("''").setHidden();
      headblk.addField("T6").setFunction("''").setHidden();
      headblk.addField("T7").setFunction("''").setHidden();
      headblk.addField("T8").setFunction("''").setHidden();
      headblk.addField("T9").setFunction("''").setHidden();
      headblk.addField("T10").setFunction("''").setHidden();
      headblk.addField("T11").setFunction("''").setHidden();
      headblk.addField("T12").setFunction("''").setHidden();
      headblk.addField("T13").setFunction("''").setHidden();
      headblk.addField("T14").setFunction("''").setHidden();
      headblk.addField("T15").setFunction("''").setHidden();
      headblk.addField("T16").setFunction("''").setHidden();
      headblk.addField("T17").setFunction("''").setHidden();
      headblk.addField("T18").setFunction("''").setHidden();
      headblk.addField("T19").setFunction("''").setHidden();
      headblk.addField("T20").setFunction("''").setHidden();
      
      headblk.setView("GEN_FORM_SMALL");
      headblk.defineCommand("GEN_FORM_SMALL_API", "New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("GENFORMSMALLTBLHEAD: Gen Form Smalls");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.SINGLE_LAYOUT);
      
      setImmutableFieldProperty();
      defineGroups();
   }
   
   private void setImmutableFieldProperty()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      if (!mgr.isEmpty(mgr.getQueryStringValue("TYPE_NO")))
      {
         __g_type_no = mgr.getQueryStringValue("TYPE_NO");
         ASPQuery qry = trans.addQuery("GETTYPESETTING", "SELECT field_name, " +
               " db_name," +
               " validate_function " +
               " FROM ifsapp.GEN_FORM_TYPE_IMMUTABLE where type_no = '" + __g_type_no + "'");
         trans = mgr.performConfig(trans);
         ASPBuffer type_setting = trans.getBuffer("GETTYPESETTING");
         ASPField[] fields = headblk.getFields();
         for (int i = 0; i < fields.length; i++)
         {
            ASPField field = fields[i];
            for (int j = 0; j < type_setting.countItems() - 1; j++)
            {
               ASPBuffer setting_row = type_setting.getBufferAt(j);
               if (field.getName().equals(setting_row.getValue("FIELD_NAME")))
               {
                  // Check db name
                  if (!mgr.isEmpty(setting_row.getValue("DB_NAME")))
                     field.setDbName(setting_row.getValue("DB_NAME"));
                  
               }
            }
         }
      }
   }

   public void adjust() throws FndException
   {
      // fill function body
      super.adjust();
      setFieldProperty();
      changeGroupFields();
   }
   
   private void setFieldProperty()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      if (headset.countRows() > 0)
      {
         String type_no = headset.getValue("TYPE_NO");
         if (!mgr.isEmpty(type_no))
         {
            ASPQuery qry = trans.addQuery("GETTYPESETTING", "SELECT field_name, " +
                  " label," +
                  " field_size," +
                  " height," +
                  " max_length," +
                  " NVL(insertalbe, 'FALSE') insertalbe," +
                  " NVL(read_only, 'FALSE')  read_only," +
                  " NVL(mandatory, 'FALSE')  mandatory," +
                  " NVL(queryable, 'FALSE')  queryable," +
                  " NVL(hidden, 'FALSE')     hidden," +
                  " NVL(default_not_visible, 'FALSE') default_not_visible," +
                  " lov," +
                  " lov_property," +
                  " hyperlink," +
                  " alignment_db," +
                  " NVL(upper_case, 'FALSE')  upper_case," +
                  " function," +
                  " check_box," +
                  " NVL(select_box, 'FALSE')  select_box," +
                  " enumerate_values " +
                  " FROM ifsapp.GEN_FORM_TYPE_LINE where type_no = '" + type_no + "'");
            trans = mgr.perform(trans);
            ASPBuffer type_setting = trans.getBuffer("GETTYPESETTING");
            ASPField[] fields = headblk.getFields();
            for (int i = 0; i < fields.length; i++)
            {
               ASPField field = fields[i];
               for (int j = 0; j < type_setting.countItems() - 1; j++)
               {
                  ASPBuffer setting_row = type_setting.getBufferAt(j);
                  if (field.getName().equals(setting_row.getValue("FIELD_NAME")))
                  {
                     // if field is visible
                     if ("FALSE".equals(setting_row.getValue("HIDDEN")))
                     {
                        field.unsetHidden();
                        field.setLabel(setting_row.getValue("LABEL"));
                        
                        if (!mgr.isEmpty(setting_row.getValue("FIELD_SIZE")))
                           field.setSize(Integer.parseInt(setting_row.getValue("FIELD_SIZE")));
                        else
                           field.setSize(10);
                        
                        if (!mgr.isEmpty(setting_row.getValue("HEIGHT")))
                           field.setHeight(Integer.parseInt(setting_row.getValue("HEIGHT")));
                        
                        if (!mgr.isEmpty(setting_row.getValue("MAX_LENGTH")))
                           field.setMaxLength(Integer.parseInt(setting_row.getValue("MAX_LENGTH")));
                        
                        if ("FALSE".equals(setting_row.getValue("INSERTALBE")))
                           field.unsetInsertable();
                        else
                           field.setInsertable();
                        
                        if ("FALSE".equals(setting_row.getValue("READ_ONLY")))
                           field.unsetReadOnly();
                        else
                           field.setReadOnly();
                        
                        if ("FALSE".equals(setting_row.getValue("MANDATORY")))
                           field.unsetMandatory();
                        else
                           field.setMandatory();
                        
                        if ("FALSE".equals(setting_row.getValue("QUERYABLE")))
                           field.unsetQueryable();
                        else
                           field.setQueryable();
                        
                        if ("FALSE".equals(setting_row.getValue("DEFAULT_NOT_VISIBLE")))
                           field.unsetDefaultNotVisible();
                        else
                           field.setDefaultNotVisible();
                        
                        String lov = setting_row.getValue("LOV");
                        if (!mgr.isEmpty(lov))
                        {
                           StringTokenizer st_lov = new StringTokenizer(lov, ";");
                           int count_lov = st_lov.countTokens();
                           switch (count_lov)
                           {
                           case 1:
                              field.setDynamicLOV(st_lov.nextToken());
                              break;
                           case 2:
                              field.setDynamicLOV(st_lov.nextToken(), st_lov.nextToken());
                              break;
                           case 3:
                              field.setDynamicLOV(st_lov.nextToken(), Integer.parseInt(st_lov.nextToken()), Integer.parseInt(st_lov.nextToken()));
                              break;
                           case 4:
                              field.setDynamicLOV(st_lov.nextToken(), st_lov.nextToken(), Integer.parseInt(st_lov.nextToken()), Integer.parseInt(st_lov.nextToken()));
                              break;
                           case 5:
                              field.setDynamicLOV(st_lov.nextToken(), st_lov.nextToken(), Integer.parseInt(st_lov.nextToken()), Integer.parseInt(st_lov.nextToken()), "TRUE".equals(st_lov.nextToken()));
                              break;
                           case 6:
                              field.setDynamicLOV(st_lov.nextToken(), st_lov.nextToken(), Integer.parseInt(st_lov.nextToken()), Integer.parseInt(st_lov.nextToken()), "TRUE".equals(st_lov.nextToken()), "TRUE".equals(st_lov.nextToken()));
                              break;
                           }
                        }
                        
                        String hyperlink = setting_row.getValue("HYPERLINK");
                        if (!mgr.isEmpty(hyperlink))
                        {
                           StringTokenizer st_hyper = new StringTokenizer(hyperlink, ";");
                           int count_hyper = st_hyper.countTokens();
                           switch (count_hyper)
                           {
                           case 1:
                              field.setHyperlink(st_hyper.nextToken(), "");
                              break;
                           case 2:
                              field.setHyperlink(st_hyper.nextToken(), st_hyper.nextToken());
                              break;
                           case 3:
                              field.setHyperlink(st_hyper.nextToken(), st_hyper.nextToken(), st_hyper.nextToken());
                              break;
                           case 4:
                              field.setHyperlink(st_hyper.nextToken(), st_hyper.nextToken(), st_hyper.nextToken(), "TRUE".equals(st_hyper.nextToken()));
                              break;
                           case 5:
                              field.setHyperlink(st_hyper.nextToken(), st_hyper.nextToken(), st_hyper.nextToken(), st_hyper.nextToken(), "TRUE".equals(st_hyper.nextToken()));
                              break;
                           }
                        }
                        
                        // Check alignment
                        if (!mgr.isEmpty(setting_row.getValue("ALIGNMENT_DB")))
                           field.setAlignment(setting_row.getValue("ALIGNMENT_DB"));
                        
                        // Check upper case
                        if ("TRUE".equals(setting_row.getValue("UPPER_CASE")))
                           field.setUpperCase();
                        
                        // Check function
                        if (!mgr.isEmpty(setting_row.getValue("FUNCTION")))
                        {
                           field.setFunction(setting_row.getValue("FUNCTION"));
                           setFieldFuncValue(field);
                           headlay.setSimple(field.getName());
                        }
                        
                        // Check check box
                        if (!mgr.isEmpty(setting_row.getValue("CHECK_BOX")))
                           field.setCheckBox(setting_row.getValue("CHECK_BOX"));
                        
                        // Check select box
                        if ("TRUE".equals(setting_row.getValue("SELECT_BOX")) && !mgr.isEmpty(setting_row.getValue("ENUMERATE_VALUES")))
                        {
                           field.setSelectBox();
                           field.enumerateValues(setting_row.getValue("ENUMERATE_VALUES"));
                        }
                     }
                     else
                        field.setHidden();
                  }
               }
            }
            
            // Check and set validation
            trans.clear();
            qry = trans.addQuery("GETTYPESETTING", "SELECT field_name, " +
                  " NVL(hidden, 'FALSE')     hidden," +
                  " validation FROM ifsapp.GEN_FORM_TYPE_LINE where validation IS NOT NULL AND type_no = '" + type_no + "'");
            trans = mgr.perform(trans);
            type_setting = trans.getBuffer("GETTYPESETTING");
            for (int i = 0; i < fields.length; i++)
            {
               ASPField field = fields[i];
               for (int j = 0; j < type_setting.countItems() - 1; j++)
               {
                  ASPBuffer setting_row = type_setting.getBufferAt(j);
                  if (field.getName().equals(setting_row.getValue("FIELD_NAME")))
                  {
                     // if field is visible
                     if ("FALSE".equals(setting_row.getValue("HIDDEN")))
                     {
                        // Check validation
                        field.setValidation(setting_row.getValue("VALIDATION"));
                     }
                  }
               }
            }
         }
      }
   }
   
   private void setFieldFuncValue(ASPField field)
   {
      ASPManager mgr = getASPManager();
      if (headset.countRows() == 0)
         return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      String call_function = field.getCallExpression();
      String call_parameters = field.getFunctionParameters();
      ASPCommand cmd = trans.addCustomFunction("GETFIELDVALUE", call_function, field.getName());
      cmd.addParameter(call_parameters, headset.getValue(call_parameters));
      trans = mgr.perform(trans);
      headset.setValue(field.getName(), trans.getValue("GETFIELDVALUE/DATA/" + field.getName()));
   }
   
   private void defineGroups()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      String field_name_sel = "";
      if (!mgr.isEmpty(mgr.getQueryStringValue("TYPE_NO")))
      {
         __g_type_no = mgr.getQueryStringValue("TYPE_NO");
         field_name_sel = " ifsapp.GEN_FORM_TYPE_LINE_API.Get_Group_Fields('" + __g_type_no + "', title) field_name,";
      }
      else
         field_name_sel = " '' field_name,";
      
      ASPQuery qry = trans.addQuery("GETTYPEGROUPS", "SELECT title, " +
            field_name_sel +
            " NVL(show_header, 'FALSE') show_header," +
            " NVL(show_first, 'FALSE')  show_first," +
            " show_columns," +
            " NVL(show_title, 'FALSE')  show_title FROM ifsapp.GEN_FORM_TYPE_GROUPS ORDER BY group_order");
      trans = mgr.performConfig(trans);
      ASPBuffer type_setting = trans.getBuffer("GETTYPEGROUPS");
      for (int i = 0; i < type_setting.countItems() - 1; i++)
      {
         ASPBuffer setting_row = type_setting.getBufferAt(i);
         headlay.defineGroup(setting_row.getValue("TITLE"),
               mgr.isEmpty(setting_row.getValue("FIELD_NAME")) ? "T" + String.valueOf(i + 1) : setting_row.getValue("FIELD_NAME"),
               "TRUE".equals(setting_row.getValue("SHOW_HEADER")),
               "TRUE".equals(setting_row.getValue("SHOW_FIRST")),
               Integer.parseInt(setting_row.getValue("SHOW_COLUMNS")),
               "TRUE".equals(setting_row.getValue("SHOW_TITLE")));
      }
   }
   
   private void changeGroupFields()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      if (headset.countRows() > 0)
      {
         String type_no = headset.getValue("TYPE_NO");
         if (!mgr.isEmpty(type_no))
         {
            ASPQuery qry = trans.addQuery("GETGROUPFIELDS", "SELECT title, " +
                  " ifsapp.GEN_FORM_TYPE_LINE_API.Get_Group_Fields('" + type_no + "', title) field_name FROM ifsapp.GEN_FORM_TYPE_GROUPS ORDER BY group_order");
            trans = mgr.perform(trans);
            ASPBuffer type_setting = trans.getBuffer("GETGROUPFIELDS");
            for (int i = 0; i < type_setting.countItems() - 1; i++)
            {
               ASPBuffer setting_row = type_setting.getBufferAt(i);
               headlay.setGroupFields(setting_row.getValue("TITLE"), setting_row.getValue("FIELD_NAME"));
            }
         }
      }
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      ASPManager mgr = getASPManager();
      ASPContext ctx = mgr.getASPContext();
      __g_type_no = ctx.readValue("TYPE_NO");
      if (!mgr.isEmpty(__g_type_no))
         return "GENFORMSMALLDESC: Gen Form Small - " + __g_type_no;
      else
         return "GENFORMSMALLDESC: Gen Form Small";
   }

   protected String getTitle()
   {
      return getDescription();
   }

   protected void printContents() throws FndException
   {
      super.printContents();

      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
   }
}
