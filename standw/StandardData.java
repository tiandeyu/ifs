/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.standw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.service.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class StandardData extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.standw.StandardData");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------
   
   private ASPTabContainer tabs;
   private int activetab;
   
   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   private ASPBlock profession_group_blk;
   private ASPRowSet profession_group_set;
   private ASPCommandBar profession_group_bar;
   private ASPTable profession_group_tbl;
   private ASPBlockLayout profession_group_lay;

   private ASPBlock assess_std_classify_blk;
   private ASPRowSet assess_std_classify_set;
   private ASPCommandBar assess_std_classify_bar;
   private ASPTable assess_std_classify_tbl;
   private ASPBlockLayout assess_std_classify_lay;
   
   private ASPBlock reach_std_temp_blk;
   private ASPRowSet reach_std_temp_set;
   private ASPCommandBar reach_std_temp_bar;
   private ASPTable reach_std_temp_tbl;
   private ASPBlockLayout reach_std_temp_lay;
   
   private ASPBlock check_style_blk;
   private ASPRowSet check_style_set;
   private ASPCommandBar check_style_bar;
   private ASPTable check_style_tbl;
   private ASPBlockLayout check_style_lay;
   
   private ASPBlock nece_cond_line_blk;
   private ASPRowSet nece_cond_line_set;
   private ASPCommandBar nece_cond_line_bar;
   private ASPTable nece_cond_line_tbl;
   private ASPBlockLayout nece_cond_line_lay;
   

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  StandardData (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
     
      if(mgr.commandBarActivated()){
         eval(mgr.commandBarFunction());
      }else 
         okFind0();
         tabs.saveActiveTab();
      /*if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("PRO_TYPE_NO")) )
         okFind();*/
      adjust();
   }

   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind0()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(profession_group_blk);
      q = trans.addQuery(profession_group_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,profession_group_blk);
      if (  profession_group_set.countRows() == 0 )
      {
         mgr.showAlert("PROFESSIONGROUPNODATA: No data found.");
         profession_group_set.clear();
      }
   }



   public void countFind0()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(profession_group_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      profession_group_lay.setCountValue(toInt(profession_group_set.getValue("N")));
      profession_group_set.clear();
   }



   public void newRow0()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("ITEM1","PROFESSION_GROUP_API.New__",profession_group_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      profession_group_set.addRow(data);
   }

   public void okFind1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(assess_std_classify_blk);
      q = trans.addQuery(assess_std_classify_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,assess_std_classify_blk);
      if (  assess_std_classify_set.countRows() == 0 )
      {
         mgr.showAlert("ASSESSSTDCLASSIFYNODATA: No data found.");
         assess_std_classify_set.clear();
      }
   }


   public void countFind1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(assess_std_classify_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      assess_std_classify_lay.setCountValue(toInt(assess_std_classify_set.getValue("N")));
      assess_std_classify_set.clear();
   }

   public void newRow1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("ITEM2","ASSESS_STD_CLASSIFY_API.New__",assess_std_classify_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM2/DATA");
      assess_std_classify_set.addRow(data);
   } 

   public void okFind2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(reach_std_temp_blk);
      q = trans.addQuery(reach_std_temp_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,reach_std_temp_blk);
      if (  reach_std_temp_set.countRows() == 0 )
      {
         mgr.showAlert("REACHSTDTEMPNODATA: No data found.");
         reach_std_temp_set.clear();
      }
   }

   public void countFind2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(reach_std_temp_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      reach_std_temp_lay.setCountValue(toInt(reach_std_temp_set.getValue("N")));
      reach_std_temp_set.clear();
   }

   public void newRow2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("ITEM3","REACH_STD_TEMP_API.New__",reach_std_temp_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM3/DATA");
      reach_std_temp_set.addRow(data);
   }

   public void okFind3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(check_style_blk);
      q = trans.addQuery(check_style_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,check_style_blk);
      if (  check_style_set.countRows() == 0 )
      {
         mgr.showAlert("CHECKSTYLENODATA: No data found.");
         check_style_set.clear();
      }
   }

   public void countFind3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(check_style_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      check_style_lay.setCountValue(toInt(check_style_set.getValue("N")));
      check_style_set.clear();
   }

   public void newRow3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("ITEM4","CHECK_STYLE_API.New__",check_style_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM4/DATA");
      check_style_set.addRow(data);
   }
   
   public void okFind4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(nece_cond_line_blk);
      q = trans.addQuery(nece_cond_line_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,nece_cond_line_blk);
      if (  nece_cond_line_set.countRows() == 0 )
      {
         mgr.showAlert("NECECONDLINENODATA: No data found.");
         nece_cond_line_set.clear();
      }
   }



   public void countFind4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(nece_cond_line_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      nece_cond_line_lay.setCountValue(toInt(nece_cond_line_set.getValue("N")));
      nece_cond_line_set.clear();
   }



   public void newRow4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("ITEM5","NECE_COND_LINE_API.New__",nece_cond_line_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM5/DATA");
      nece_cond_line_set.addRow(data);
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();
      
      disableConfiguration();

      headblk = mgr.newASPBlock("MAIN");
      headbar = mgr.newASPCommandBar(headblk);
      
      headbar.disableCommand(headbar.FIND);
      headbar.disableCommand(headbar.BACK);
      headbar.disableCommand(headbar.FORWARD);
      headbar.disableCommand(headbar.BACKWARD);
      headbar.disableCommand(headbar.NEWROW);
       
 
      headbar.addCustomCommand("activateProfession", mgr.translate("PROFESSIONGROUP:  Profession Group"));
      headbar.addCustomCommand("activateAssessStd", mgr.translate("ASSESSSTD: Assess Std"));
      headbar.addCustomCommand("activateStdTemp", mgr.translate("STDTEMP: Std Temp"));
      headbar.addCustomCommand("activateCheckStyle", mgr.translate("CHECKSTYLE: Check Style"));
      headbar.addCustomCommand("activateNeceCondLine", mgr.translate("NECECONDLINE: Nece Cond Line"));
      
      headlay = headblk.getASPBlockLayout();
      headlay.setDialogColumns(2);
      headlay.setDefaultLayoutMode(headlay.SINGLE_LAYOUT);
      
      profession_group_blk = mgr.newASPBlock("ITEM1");
      profession_group_blk.addField("ITEM0_OBJID").
              setDbName("OBJID").
              setHidden();
      profession_group_blk.addField("ITEM0_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      profession_group_blk.addField("ITEM0_PROJECT_TYPE_NO").
              setMandatory().
              setDbName("PROJECT_TYPE_NO").
              setInsertable().
              setReadOnly().
              setDynamicLOV("PROJECT_TYPE").
              setLabel("PROFESSIONGROUPPROJECTTYPENO: Project Type No").
              setSize(15);
      profession_group_blk.addField("ITEM0_PROJECT_TYPE_NAME").
              setReadOnly().
              setFunction("PROJECT_TYPE_API.Get_Project_Type_Name(:ITEM0_PROJECT_TYPE_NO)").
              setLabel("ETREPORTPROJECTTYPENAME: Project Type Name").
              setSize(30);
      mgr.getASPField("ITEM0_PROJECT_TYPE_NO").setValidation("ITEM0_PROJECT_TYPE_NAME");
      profession_group_blk.addField("ITEM0_GROUP_NO").
              setMandatory().
              setDbName("GROUP_NO").
              setReadOnly().
              setLabel("PROFESSIONGROUPGROUPNO: Group No").
              setSize(50);
      profession_group_blk.addField("ITEM0_GROUP_DESC").
              setInsertable().
              setHeight(4).
              setDbName("GROUP_DESC").
              setLabel("PROFESSIONGROUPGROUPDESC: Group Desc").
              setSize(150);
      profession_group_blk.addField("ITEM0_NOTE").
              setInsertable().
              setHeight(4).
              setDbName("NOTE").
              setLabel("PROFESSIONGROUPNOTE: Note").
              setSize(150);
      profession_group_blk.addField("ITEM0_CREATE_PERSON").
              setInsertable().
              setDbName("CREATE_PERSON").
              setDynamicLOV("PERSON_INFO_USER").
              setLabel("PROFESSIONGROUPCREATEPERSON: Create Person").
              setSize(20);
      profession_group_blk.addField("ITEM0_CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:ITEM0_CREATE_PERSON)").
              setLabel("PROFESSIONGROUPCREATEPERSONNAME: Create Person Name").
              setSize(20);
      mgr.getASPField("ITEM0_CREATE_PERSON").setValidation("ITEM0_CREATE_PERSON_NAME");
      profession_group_blk.addField("ITEM0_CREATE_TIME","Date").
              setInsertable().
              setDbName("CREATE_TIME").
              setLabel("PROFESSIONGROUPCREATETIME: Create Time").
              setSize(20);
      profession_group_blk.setView("PROFESSION_GROUP");
      profession_group_blk.defineCommand("PROFESSION_GROUP_API","New__,Modify__,Remove__");
      profession_group_set = profession_group_blk.getASPRowSet();
      profession_group_bar = mgr.newASPCommandBar(profession_group_blk);
      profession_group_bar.defineCommand(profession_group_bar.OKFIND, "okFind0");
      profession_group_bar.defineCommand(profession_group_bar.NEWROW, "newRow0");
      profession_group_bar.defineCommand(profession_group_bar.COUNTFIND, "countFind0");
      profession_group_tbl = mgr.newASPTable(profession_group_blk);
      profession_group_tbl.setTitle("PROFESSIONGROUPTBLHEAD: Profession Groups");
      profession_group_tbl.enableRowSelect();
      profession_group_tbl.setWrap();
      profession_group_lay = profession_group_blk.getASPBlockLayout();
      profession_group_lay.setDefaultLayoutMode(profession_group_lay.MULTIROW_LAYOUT);
      profession_group_lay.setSimple("ITEM0_PROJECT_TYPE_NAME");
      profession_group_lay.setSimple("ITEM0_CREATE_PERSON_NAME");
      profession_group_lay.setDataSpan("ITEM0_GROUP_NO", 5);
      profession_group_lay.setDataSpan("ITEM0_GROUP_DESC", 5);
      profession_group_lay.setDataSpan("ITEM0_NOTE", 5);
      
      assess_std_classify_blk = mgr.newASPBlock("ITEM2");
      assess_std_classify_blk.addField("ITEM1_OBJID").
              setDbName("OBJID").
              setHidden();
      assess_std_classify_blk.addField("ITEM1_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      assess_std_classify_blk.addField("ITEM1_PROJECT_TYPE_NO").
              setMandatory().
              setDbName("PROJECT_TYPE_NO").
              setInsertable().
              setReadOnly().
              setDynamicLOV("PROJECT_TYPE").
              setLabel("ASSESSSTDCLASSIFYPROJECTTYPENO: Project Type No").
              setSize(15);
      assess_std_classify_blk.addField("ITEM1_PROJECT_TYPE_NAME").
              setReadOnly().
              setFunction("PROJECT_TYPE_API.Get_Project_Type_Name(:ITEM1_PROJECT_TYPE_NO)").
              setLabel("ETREPORTPROJECTTYPENAME: Project Type Name").
              setSize(30);
      mgr.getASPField("ITEM1_PROJECT_TYPE_NO").setValidation("ITEM1_PROJECT_TYPE_NAME");
      assess_std_classify_blk.addField("ITEM1_STD_NO").
              setMandatory().
              setDbName("STD_NO").
              setReadOnly().
              setLabel("ASSESSSTDCLASSIFYSTDNO: Std No").
              setSize(50);
      assess_std_classify_blk.addField("ITEM1_STD_DESC").
              setInsertable().
              setHeight(4).
              setDbName("STD_DESC").
              setLabel("ASSESSSTDCLASSIFYSTDDESC: Std Desc").
              setSize(150);
      assess_std_classify_blk.addField("ITEM1_NOTE").
              setInsertable().
              setHeight(4).
              setDbName("NOTE").
              setLabel("ASSESSSTDCLASSIFYNOTE: Note").
              setSize(150);
      assess_std_classify_blk.addField("ITEM1_CREATE_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO_USER").
              setDbName("CREATE_PERSON").
              setLabel("ASSESSSTDCLASSIFYCREATEPERSON: Create Person").
              setSize(20);
      assess_std_classify_blk.addField("ITEM1_CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:ITEM1_CREATE_PERSON)").
              setLabel("ASSESSSTDCLASSIFYCREATEPERSONNAME: Create Person Name").
              setSize(20);
      mgr.getASPField("ITEM1_CREATE_PERSON").setValidation("ITEM1_CREATE_PERSON_NAME");
      assess_std_classify_blk.addField("ITEM1_CREATE_TIME","Date").
              setInsertable().
              setDbName("CREATE_TIME").
              setLabel("ASSESSSTDCLASSIFYCREATETIME: Create Time").
              setSize(20);
      assess_std_classify_blk.setView("ASSESS_STD_CLASSIFY");
      assess_std_classify_blk.defineCommand("ASSESS_STD_CLASSIFY_API","New__,Modify__,Remove__");
      assess_std_classify_set = assess_std_classify_blk.getASPRowSet();
      assess_std_classify_bar = mgr.newASPCommandBar(assess_std_classify_blk);
      assess_std_classify_bar.defineCommand(assess_std_classify_bar.OKFIND, "okFind1");
      assess_std_classify_bar.defineCommand(assess_std_classify_bar.NEWROW, "newRow1");
      assess_std_classify_bar.defineCommand(assess_std_classify_bar.COUNTFIND, "countFind1");
      assess_std_classify_tbl = mgr.newASPTable(assess_std_classify_blk);
      assess_std_classify_tbl.setTitle("ASSESSSTDCLASSIFYTBLHEAD: Assess Std Classifys");
      assess_std_classify_tbl.enableRowSelect();
      assess_std_classify_tbl.setWrap();
      assess_std_classify_lay = assess_std_classify_blk.getASPBlockLayout();
      assess_std_classify_lay.setDefaultLayoutMode(assess_std_classify_lay.MULTIROW_LAYOUT);
      assess_std_classify_lay.setSimple("ITEM1_PROJECT_TYPE_NAME");
      assess_std_classify_lay.setSimple("ITEM1_CREATE_PERSON_NAME");
      profession_group_lay.setDataSpan("ITEM1_STD_NO", 5);
      profession_group_lay.setDataSpan("ITEM1_STD_DESC", 5);
      profession_group_lay.setDataSpan("ITEM1_NOTE", 5);
      
      reach_std_temp_blk = mgr.newASPBlock("ITEM3");
      reach_std_temp_blk.addField("ITEM2_OBJID").
              setDbName("OBJID").
              setHidden();
      reach_std_temp_blk.addField("ITEM2_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      reach_std_temp_blk.addField("ITEM2_PROJECT_TYPE_NO").
              setMandatory().
              setDbName("PROJECT_TYPE_NO").
              setInsertable().
              setReadOnly().
              setDynamicLOV("PROJECT_TYPE").
              setLabel("REACHSTDTEMPPROJECTTYPENO: Project Type No").
              setSize(15);
      reach_std_temp_blk.addField("ITEM2_PROJECT_TYPE_NAME").
              setReadOnly().
              setFunction("PROJECT_TYPE_API.Get_Project_Type_Name(:ITEM2_PROJECT_TYPE_NO)").
              setLabel("ETREPORTPROJECTTYPENAME: Project Type Name").
              setSize(30);
      mgr.getASPField("ITEM2_PROJECT_TYPE_NO").setValidation("ITEM2_PROJECT_TYPE_NAME");
      reach_std_temp_blk.addField("ITEM2_TEMP_NO").
              setMandatory().
              setDbName("TEMP_NO").
              setReadOnly().
              setLabel("REACHSTDTEMPTEMPNO: Temp No").
              setSize(50);
      reach_std_temp_blk.addField("ITEM2_CONTENT").
              setInsertable().
              setHeight(4).
              setDbName("CONTENT").
              setLabel("REACHSTDTEMPCONTENT: Content").
              setSize(150);
      reach_std_temp_blk.addField("ITEM2_NOTE").
              setInsertable().
              setHeight(4).
              setDbName("NOTE").
              setLabel("REACHSTDTEMPOITEM2NOTE: Note").
              setSize(150);
      reach_std_temp_blk.addField("ITEM2_ORG").
              setInsertable().
              setDbName("ORG").
              setHidden().
              setLabel("REACHSTDTEMPORG: Org").
              setSize(50);
      reach_std_temp_blk.addField("ITEM2_STD_NO").
              setDbName("STD_NO").
              setDynamicLOV("ASSESS_STD_CLASSIFY","ITEM2_PROJECT_TYPE_NO").
              setLabel("REACHSTDTEMPSTDNO: Std No").
              setSize(20);     
      reach_std_temp_blk.addField("ITEM2_ASSCSS_STD_DESC").
              setReadOnly().
              setFunction("ASSESS_STD_CLASSIFY_API.Get_Std_Desc(:ITEM2_PROJECT_TYPE_NO,:ITEM2_STD_NO)").
              setLabel("REACHSTDTEMPASSCSSSTD: Asscss Std").
              setSize(30);
      mgr.getASPField("ITEM2_STD_NO").setValidation("ITEM2_ASSCSS_STD_DESC"); 
      reach_std_temp_blk.addField("ITEM2_STD_SCORE","Number").
              setInsertable().
              setDbName("STD_SCORE").
              setLabel("REACHSTDTEMPSTDSCORE: Std Score").
              setSize(20);
      reach_std_temp_blk.addField("ITEM2_CHECK_SCORE","Number").
              setInsertable().
              setDbName("CHECK_SCORE").
              setLabel("REACHSTDTEMPITEM2CHECKSCORE: Check Score").
              setSize(20);
      reach_std_temp_blk.addField("ITEM2_COMPLETE_VALUE","Number").
              setInsertable().
              setHidden().
              setDbName("COMPLETE_VALUE").
              setLabel("REACHSTDTEMPCOMPLETEVALUE: Complete Value").
              setSize(50);
      reach_std_temp_blk.addField("ITEM2_DEDUCTION_STD","Number").
              setInsertable().
              setHidden().
              setDbName("DEDUCTION_STD").
              setLabel("REACHSTDTEMPDEDUCTIONSTD: Deduction Std").
              setSize(50);
      reach_std_temp_blk.addField("ITEM2_DEDUCTION","Number").
              setInsertable().
              setHidden().
              setDbName("DEDUCTION").
              setLabel("REACHSTDTEMPDEDUCTION: Deduction").
              setSize(50);
      reach_std_temp_blk.addField("ITEM2_DEDUCTION_REASON").
              setInsertable().
              setHidden().
              setDbName("DEDUCTION_REASON").
              setLabel("REACHSTDTEMPCREATETIME: Deduction Reason").
              setSize(50);
      reach_std_temp_blk.addField("ITEM2_CREATE_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO_USER").
              setDbName("CREATE_PERSON").
              setLabel("REACHSTDTEMPCREATEPERSON: Create Person").
              setSize(20);
      reach_std_temp_blk.addField("ITEM2_CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:ITEM2_CREATE_PERSON)").
              setLabel("REACHSTDTEMPCREATEPERSONNAME: Create Person Name").
              setSize(20);
      mgr.getASPField("ITEM2_CREATE_PERSON").setValidation("ITEM2_CREATE_PERSON_NAME");
      reach_std_temp_blk.addField("ITEM2_CREATE_TIME","Date").
              setInsertable().
              setDbName("CREATE_TIME").
              setLabel("PROFESSIONGROUPCREATETIME: Create Time").
              setSize(20);
      reach_std_temp_blk.setView("REACH_STD_TEMP");
      reach_std_temp_blk.defineCommand("REACH_STD_TEMP_API","New__,Modify__,Remove__");
      reach_std_temp_set = reach_std_temp_blk.getASPRowSet();
      reach_std_temp_bar = mgr.newASPCommandBar(reach_std_temp_blk);
      reach_std_temp_bar.defineCommand(reach_std_temp_bar.OKFIND, "okFind2");
      reach_std_temp_bar.defineCommand(reach_std_temp_bar.NEWROW, "newRow2");
      reach_std_temp_bar.defineCommand(reach_std_temp_bar.COUNTFIND, "countFind2");    
      reach_std_temp_tbl = mgr.newASPTable(reach_std_temp_blk);
      reach_std_temp_tbl.setTitle("REACHSTDTEMPTBLHEAD: Reach Std Temps");
      reach_std_temp_tbl.enableRowSelect();
      reach_std_temp_tbl.setWrap();
      reach_std_temp_lay = reach_std_temp_blk.getASPBlockLayout();
      reach_std_temp_lay.setDefaultLayoutMode(reach_std_temp_lay.MULTIROW_LAYOUT);
      reach_std_temp_lay.setSimple("ITEM2_PROJECT_TYPE_NAME");
      reach_std_temp_lay.setSimple("ITEM2_ASSCSS_STD_DESC");
      reach_std_temp_lay.setSimple("ITEM2_CREATE_PERSON_NAME");
      reach_std_temp_lay.setDataSpan("ITEM2_CONTENT", 5);
      reach_std_temp_lay.setDataSpan("ITEM2_NOTE", 5);
      reach_std_temp_lay.setDataSpan("ITEM2_STD_NO", 5);
      
     
      check_style_blk = mgr.newASPBlock("ITEM4");
      check_style_blk.addField("ITEM3_OBJID").
              setDbName("OBJID").
              setHidden();
      check_style_blk.addField("ITEM3_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      check_style_blk.addField("ITEM3_PROJECT_TYPE_NO").
              setMandatory().
              setDbName("PROJECT_TYPE_NO").
              setInsertable().
              setReadOnly().
              setDynamicLOV("PROJECT_TYPE").
              setLabel("CHECKSTYLEPROJECTTYPENO: Project Type No").
              setSize(20);
      check_style_blk.addField("ITEM3_PROJECT_TYPE_NAME").
              setReadOnly().
              setFunction("PROJECT_TYPE_API.Get_Project_Type_Name(:ITEM3_PROJECT_TYPE_NO)").
              setLabel("ETREPORTPROJECTTYPENAME: Project Type Name").
              setSize(30);
      mgr.getASPField("ITEM3_PROJECT_TYPE_NO").setValidation("ITEM3_PROJECT_TYPE_NAME");
      check_style_blk.addField("ITEM3_CHECK_STYLE_NO").
              setMandatory().
              setDbName("CHECK_STYLE_NO").
              setReadOnly().
              setLabel("CHECKSTYLECHECKSTYLENO: Check Style No").
              setSize(20);
      check_style_blk.addField("ITEM3_CHECK_STYLE_NAME").
              setInsertable().
              setDbName("CHECK_STYLE_NAME").
              setLabel("CHECKSTYLECHECKSTYLENAME: Check Style Name").
              setSize(20);
      check_style_blk.addField("ITEM3_CREATE_PERSON").
              setInsertable().
              setDbName("CREATE_PERSON").
              setDynamicLOV("PERSON_INFO_USER").
              setLabel("CHECKSTYLECREATEPERSON: Create Person").
              setSize(20);
      check_style_blk.addField("ITEM3_CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:ITEM3_CREATE_PERSON)").
              setLabel("CHECKSTYLECREATEPERSONNAME: Create Person Name").
              setSize(20);
      mgr.getASPField("ITEM3_CREATE_PERSON").setValidation("ITEM3_CREATE_PERSON_NAME");
      check_style_blk.addField("ITEM3_CREATE_TIME","Date").
              setInsertable().
              setDbName("CREATE_TIME").
              setLabel("CHECKSTYLECREATETIME: Create Time").
              setSize(20);
      check_style_blk.addField("ITEM3_NOTE").
              setInsertable().
              setHeight(4).
              setDbName("NOTE").
              setLabel("CHECKSTYLENOTE: Note").
              setSize(150);
      check_style_blk.setView("CHECK_STYLE");
      check_style_blk.defineCommand("CHECK_STYLE_API","New__,Modify__,Remove__");
      check_style_set = check_style_blk.getASPRowSet();
      check_style_bar = mgr.newASPCommandBar(check_style_blk);
      check_style_bar.defineCommand(check_style_bar.OKFIND, "okFind3");
      check_style_bar.defineCommand(check_style_bar.NEWROW, "newRow3");
      check_style_bar.defineCommand(check_style_bar.COUNTFIND, "countFind3");
      check_style_tbl = mgr.newASPTable(check_style_blk);
      check_style_tbl.setTitle("CHECKSTYLETBLHEAD: Check Styles");
      check_style_tbl.enableRowSelect();
      check_style_tbl.setWrap();
      check_style_lay = check_style_blk.getASPBlockLayout();
      check_style_lay.setDefaultLayoutMode(check_style_lay.MULTIROW_LAYOUT);
      check_style_lay.setSimple("ITEM3_PROJECT_TYPE_NAME");
      check_style_lay.setSimple("ITEM3_CREATE_PERSON_NAME");
      check_style_lay.setDataSpan("ITEM3_CHECK_STYLE_NAME", 5);
      check_style_lay.setDataSpan("ITEM3_NOTE", 5);
      
      
      nece_cond_line_blk = mgr.newASPBlock("ITEM5");
      nece_cond_line_blk.addField("ITEM4_OBJID").
              setDbName("OBJID").
              setHidden();
      nece_cond_line_blk.addField("ITEM4_OBJVERSION").
              setDbName("OBJVERSION").
              setHidden();
      nece_cond_line_blk.addField("ITEM4_PROJECT_TYPE_NO").
              setDbName("PROJECT_TYPE_NO").
              setDynamicLOV("PROJECT_TYPE").
              setMandatory().
              setInsertable().
              setReadOnly().
              setLabel("NECECONDLINEPROJECTTYPENO: Project Type No").
              setSize(15);
      nece_cond_line_blk.addField("ITEM4_PROJECT_TYPE_NAME").
              setReadOnly().
              setFunction("PROJECT_TYPE_API.Get_Project_Type_Name(:ITEM4_PROJECT_TYPE_NO)").
              setLabel("NECECONDLINEPROJECTTYPENAME: Project Type Name").
              setSize(30);
      mgr.getASPField("ITEM4_PROJECT_TYPE_NO").setValidation("ITEM4_PROJECT_TYPE_NAME");
      nece_cond_line_blk.addField("ITEM4_NECE_NO").
               setDbName("NECE_NO").
               setMandatory().
               setReadOnly().
               setLabel("NECECONDLINENECENO: Nece No").
               setSize(50);
      nece_cond_line_blk.addField("ITEM4_NECE_CONDITION").
              setDbName("NECE_CONDITION").
              setHeight(3).
              setInsertable().
              setLabel("NECECONDLINENECECONDITION: Nece Condition").
              setSize(150);
      nece_cond_line_blk.addField("ITEM4_OPINION").
              setDbName("OPINION").
              setInsertable().
              setHeight(3).
              setLabel("NECECONDLINEOPINION: Opinion").
              setSize(150);
      nece_cond_line_blk.addField("ITEM4_NOTE").
              setDbName("NOTE").
              setInsertable().
              setHeight(5).
              setLabel("NECECONDLINENOTE: Note").
              setSize(150);
      nece_cond_line_blk.addField("ITEM4_TYPE_NO").
              setDbName("TYPE_NO").
              setHidden().
              setInsertable().
              setLabel("NECECONDLINETYPENO: Type No").
              setSize(20);
      nece_cond_line_blk.addField("ITEM4_CREATE_PERSON").
              setDbName("CREATE_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO_USER").
              setLabel("NECECONDLINECREATEPERSON: Create Person").
              setSize(15);
      nece_cond_line_blk.addField("ITEM4_CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.Get_Name(:ITEM4_CREATE_PERSON)").
              setLabel("NECECONDLINECREATEPERSONNAME: Create Person Name").
              setSize(20);
      mgr.getASPField("ITEM4_CREATE_PERSON").setValidation("ITEM4_CREATE_PERSON_NAME");
      nece_cond_line_blk.addField("ITEM4_CREATE_TIME","Date").
              setDbName("CREATE_TIME").
              setInsertable().
              setLabel("NECECONDLINECREATETIME: Create Time").
              setSize(20);
      nece_cond_line_blk.setView("NECE_COND_LINE");
      nece_cond_line_blk.defineCommand("NECE_COND_LINE_API","New__,Modify__,Remove__");
      nece_cond_line_set = nece_cond_line_blk.getASPRowSet();
      nece_cond_line_bar = mgr.newASPCommandBar(nece_cond_line_blk);
      nece_cond_line_bar.defineCommand(nece_cond_line_bar.OKFIND, "okFind4");
      nece_cond_line_bar.defineCommand(nece_cond_line_bar.NEWROW, "newRow4");
      nece_cond_line_bar.defineCommand(nece_cond_line_bar.COUNTFIND, "countFind4");
      nece_cond_line_tbl = mgr.newASPTable(nece_cond_line_blk);
      nece_cond_line_tbl.setTitle("NECECONDLINETBLHEAD: Nece Cond Lines");
      nece_cond_line_tbl.enableRowSelect();
      nece_cond_line_tbl.setWrap();
      nece_cond_line_lay = nece_cond_line_blk.getASPBlockLayout();
      nece_cond_line_lay.setDefaultLayoutMode(nece_cond_line_lay.MULTIROW_LAYOUT);
      nece_cond_line_lay.setSimple("ITEM4_PROJECT_TYPE_NAME");
      nece_cond_line_lay.setSimple("ITEM4_CREATE_PERSON_NAME");
      nece_cond_line_lay.setDataSpan("ITEM4_NECE_CONDITION", 5);
      nece_cond_line_lay.setDataSpan("ITEM4_OPINION", 5);
      nece_cond_line_lay.setDataSpan("ITEM4_NOTE", 5);
      
      tabs = mgr.newASPTabContainer();
      tabs.setDirtyFlagEnabled(false);
      tabs.addTab("BASEPROFESSIONGROUP: Profession Group", "javascript:commandSet('MAIN.activateProfession','')");
      tabs.addTab("BASEASSESSSTD: Assess Std", "javascript:commandSet('MAIN.activateAssessStd','')");
      tabs.addTab("BASESTDTEMP: Std Temp", "javascript:commandSet('MAIN.activateStdTemp','')");
      tabs.addTab("BASECHECKSTYLE: Check Style", "javascript:commandSet('MAIN.activateCheckStyle','')");
      tabs.addTab("BASENECECONDLINE: Nece Cond Line", "javascript:commandSet('MAIN.activateNeceCondLine','')");
      
      tabs.setContainerWidth(700);
      //tab.setContainerHeight(400);
      tabs.setLeftTabSpace(1);
      tabs.setContainerSpace(5);
      tabs.setTabWidth(100);
   }

  

   public void  adjust()
   {
      // fill function body
      
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "REACHSTANDARD:  Reach Standard";
   }


   protected String getTitle()
   {
      return "REACHSTANDARDTITLE: Reach Standard";
   }

   public void activateProfession(){
      tabs.setActiveTab(1);
      //okFind0();
   }
   public void activateAssessStd(){
      tabs.setActiveTab(2); 
      okFind1();
      }
   public void activateStdTemp(){
      tabs.setActiveTab(3);
      okFind2();
   }
   public void activateCheckStyle(){
      tabs.setActiveTab(4);
      okFind3();
   }
   public void activateNeceCondLine(){
      tabs.setActiveTab(5);
      okFind4();
   }
   
   protected void printContents() throws FndException
   { 
      super.printContents();
      ASPManager mgr = getASPManager();
      
      appendToHTML(tabs.showTabsInit());
      activetab = tabs.getActiveTab();
      /*if (headlay.isVisible())
          appendToHTML(headlay.show());*/
      if  (activetab == 1)
         appendToHTML(profession_group_lay.show());
      else  if (activetab == 2)
         appendToHTML(assess_std_classify_lay.show());
      else if (activetab ==3)
         appendToHTML(reach_std_temp_lay.show());
      else if (activetab == 4)
         appendToHTML(check_style_lay.show());
      else if (activetab == 5)
         appendToHTML(nece_cond_line_lay.show());
      appendToHTML(tabs.showTabsFinish());
   }
}
