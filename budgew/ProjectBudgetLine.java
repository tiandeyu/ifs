/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.budgew;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ProjectBudgetLine extends ASPPageProvider
{
  
   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.budgew.ProjectBudgetLine");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   private ASPBlock sub_budget_project_blk;
   private ASPRowSet sub_budget_project_set;
   private ASPCommandBar sub_budget_project_bar;
   private ASPTable sub_budget_project_tbl;
   private ASPBlockLayout sub_budget_project_lay;
   private boolean bRefreshTree;
   private String comnd;
   private ASPTabContainer tabs;
   private ASPContext ctx;  

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  ProjectBudgetLine (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      ASPManager mgr = getASPManager();
      String project_type_id =  mgr.readValue("PROJ_NO");
      String temp_no = mgr.readValue("BUDGET_NO");  
      String budget_line_no =  mgr.readValue("BUDGET_LINE_NO");
      ctx = mgr.getASPContext();  
      bRefreshTree      = false;    
      if( mgr.commandBarActivated() ){
         comnd = mgr.readValue("__COMMAND");
         if (( "MAIN.SaveReturn".equals(comnd) )|| ( "ITEM1.SaveReturn".equals(comnd) )|| ( "ITEM1.Delete".equals(comnd) )|| ( "ITEM2.SaveReturn".equals(comnd) )|| ( "ITEM2.SaveNew".equals(comnd) )|| ( "ITEM2.Delete".equals(comnd) ))
         {
            bRefreshTree = true;
         }
         else if ( "MAIN.SaveNew".equals(comnd) ||"ITEM1.SaveNew".equals(comnd))
         {
            bRefreshTree = true;  
         }
         eval(mgr.commandBarFunction());
         
      }
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(project_type_id) || !mgr.isEmpty(temp_no)){
         ctx.setGlobal("PROJ_NO", project_type_id);
         ctx.setGlobal("BUDGET_NO", temp_no);  
         if(!mgr.isEmpty(budget_line_no))
         ctx.setGlobal("BUDGET_LINE_NO", budget_line_no);
         else     
         ctx.setGlobal("BUDGET_LINE_NO", "1");       
         okFind();  
      }    
      else
         okFind();
      tabs.saveActiveTab();   
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      String project_type_id = ctx.findGlobal("PROJ_NO")==null?"":ctx.findGlobal("PROJ_NO");
      String temp_no = ctx.findGlobal("BUDGET_NO")==null?"":ctx.findGlobal("BUDGET_NO");
      String budget_line_no = ctx.findGlobal("BUDGET_LINE_NO")==null?"":ctx.findGlobal("BUDGET_LINE_NO");
      ASPQuery q;    
      mgr.createSearchURL(headblk);    
      q = trans.addQuery(headblk);
      if (!mgr.isEmpty(project_type_id) ){
          q.addWhereCondition("PROJ_NO = ?");
          q.addParameter("PROJ_NO",project_type_id); 
      } 
      if (!mgr.isEmpty(temp_no) ){
          q.addWhereCondition("BUDGET_NO = ? " );
          q.addParameter("BUDGET_NO",temp_no);
      }
      if (!mgr.isEmpty(budget_line_no)){
          q.addWhereCondition("BUDGET_LINE_NO = ? ");
          q.addParameter("BUDGET_LINE_NO" , budget_line_no);  
      }else{
         q.addWhereCondition("PARENT_NO IS NULL");
      }  
      q.setOrderByClause("BUDGET_LINE_NO");
      q.includeMeta("ALL");      
      if(mgr.dataTransfered())
          q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if(headset.countRows()>0)   
      ctx.setGlobal("BUDGET_LINE_NO", headset.getValue("BUDGET_LINE_NO")); 
      if (  headset.countRows() == 0 )
      {      
         mgr.showAlert("PROJECTBUDGETLINENODATA: No data found.");
         headset.clear();
      }
   }

   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }
   
   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;
      ASPCommand cmd1;    
      cmd1 = trans1.addCustomFunction( "GETPROJECTTYPEID", "GENERAL_PROJECT_API.Get_Project_Type_Id", "PROJECT_TYPE_ID" );
      cmd1.addParameter("PROJECT_TYPE_ID", ctx.findGlobal("PROJ_NO")); 
      trans1 = mgr.validate(trans1);     
      cmd = trans.addEmptyCommand("HEAD","PROJECT_BUDGET_LINE_API.New__",headblk);
      cmd.setParameter("PROJ_NO", ctx.findGlobal("PROJ_NO"));
      cmd.setParameter("BUDGET_NO", ctx.findGlobal("BUDGET_NO"));
      cmd.setParameter("STATUS", "1");
      cmd.setParameter("PROJECT_TYPE_ID",  trans1.getValue("GETPROJECTTYPEID/DATA/PROJECT_TYPE_ID"));
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }

   public void newRowItem1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;
      ASPCommand cmd1;
      cmd1 = trans1.addCustomFunction( "GETPROJECTTYPEID", "GENERAL_PROJECT_API.Get_Project_Type_Id", "ITEM1_PROJECT_TYPE_ID" );
      cmd1.addParameter("PROJECT_TYPE_ID", ctx.findGlobal("PROJ_NO")); 
      trans1 = mgr.validate(trans1); 
      cmd = trans.addEmptyCommand("ITEM1","PROJECT_BUDGET_LINE_API.New__",sub_budget_project_blk);
      cmd.setParameter("ITEM1_PROJ_NO", ctx.findGlobal("PROJ_NO"));
      cmd.setParameter("ITEM1_BUDGET_NO", ctx.findGlobal("BUDGET_NO"));  
      cmd.setParameter("ITEM1_PARENT_NO", ctx.findGlobal("BUDGET_LINE_NO"));
      cmd.setParameter("ITEM1_PROJECT_TYPE_ID",  trans1.getValue("GETPROJECTTYPEID/DATA/ITEM1_PROJECT_TYPE_ID"));
      cmd.setOption("ACTION","PREPARE");    
      trans = mgr.perform(trans);    
      data = trans.getBuffer("ITEM1/DATA");  
      sub_budget_project_set.addRow(data);
   }
   
   public void okFindItem1()  
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      String project_type_id = ctx.findGlobal("PROJ_NO");
      String temp_no = ctx.findGlobal("BUDGET_NO");
      String budget_line_no = ctx.findGlobal("BUDGET_LINE_NO");
      ASPQuery q;
      mgr.createSearchURL(sub_budget_project_blk);
      q = trans.addQuery(sub_budget_project_blk);
      if (!mgr.isEmpty(project_type_id) ){
          q.addWhereCondition("PROJ_NO = ?");
          q.addParameter("ITEM1_PROJ_NO",project_type_id); 
      }     
      if (!mgr.isEmpty(temp_no) ){
          q.addWhereCondition("BUDGET_NO = ? " );
          q.addParameter("ITEM1_BUDGET_NO",temp_no);
      }  
      if (!mgr.isEmpty(budget_line_no)){
//          q.addWhereCondition("PARENT_NO = ? ");    
          q.addWhereCondition("budget_line_no IN (SELECT budget_line_no from IFSAPP.PROJECT_BUDGET_LINE WHERE BUDGET_NO = ? AND  PROJ_NO = ? START WITH parent_no  = ? connect by prior budget_line_no = parent_no) ");
//          q.addWhereCondition("START WITH  parent_no = ? CONNECT BY  prior budget_line_no = parent_no ");
          q.addParameter("ITEM1_BUDGET_NO",temp_no);        
          q.addParameter("ITEM1_PROJ_NO",project_type_id); 
          q.addParameter("ITEM1_PARENT_NO" , budget_line_no);  
      }                        
      q.addOrderByClause("SEQ_NO,BUDGET_LINE_NO"); 
      q.includeMeta("ALL");  
      if(mgr.dataTransfered())
          q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,sub_budget_project_blk);
      if (  sub_budget_project_set.countRows() == 0 )
      {
         mgr.showAlert("PROJECTBUDGETLINENODATA: No data found.");
         sub_budget_project_set.clear();
      }
   }

   public void countFindItem1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(sub_budget_project_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      sub_budget_project_lay.setCountValue(toInt(sub_budget_project_set.getValue("N")));
      sub_budget_project_set.clear();
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();
      ctx = mgr.getASPContext();      
      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setHidden().
              setLabel("PROJECTBUDGETLINEPROJECTTYPEID: Project Type Id").
              setSize(20);
      headblk.addField("PROJECT_TYPE_ID").
              setInsertable().
              setHidden().
              setLabel("PROJECTBUDGETLINEPROJECTTYPEID: Project Type Id").
              setSize(50);
      headblk.addField("BUDGET_NO").
              setMandatory().
              setInsertable().
              setHidden().
              setLabel("PROJECTBUDGETLINETEMPNO: Temp No").
              setSize(50);
      headblk.addField("BUDGET_LINE_NO").
              setMandatory().
              setInsertable().
              setLabel("PROJECTBUDGETLINEBUDGETLINENO: Budget Line No").
              setSize(30);
      headblk.addField("PRE_CODE").
              setInsertable().
              setLabel("PROJECTBUDGETLINEPRECODE: Pre Code").
              setSize(30);
      headblk.addField("BUDGET_NAME").
              setInsertable().
              setLabel("PROJECTBUDGETLINEBUDGETNAME: Budget Name").
              setSize(120);
      headblk.addField("SUBJECT_NO").
               setInsertable().
               setLabel("PROJECTBUDGETLINESUBJECTNO: Subject No").
               setSize(50);   
      headblk.addField("PARENT_NO").
              setInsertable().
              setLabel("PROJECTBUDGETLINEPARENTNO: Parent No").
              setSize(30);
      headblk.addField("SEQ_NO").
              setInsertable().
              setLabel("PROJECTBUDGETLINESEQNO: Seq No").
              setSize(30);
      headblk.addField("TREE_LEVEL").
              setReadOnly(). 
              setHidden().
              setLabel("PROJECTBUDGETLINETREELEVEL: Tree Level").
              setSize(30);
      headblk.addField("BUDGET_TYPE").
              enumerateValues("Budget_Type_API").
              setSelectBox().
              setMandatory().
              setInsertable().
              setLabel("PROJECTBUDGETLINEBUDGETTYPE: Budget Type").
              setSize(20);  
      headblk.addField("STATUS").
               setHidden();
      headblk.addField("SPECIAL_NO").
              setInsertable().
              setDynamicLOV("BUDGET_SPECIAL_TYPE").
              setLabel("PROJECTBUDGETLINESPECIALNO: Special No").
              setSize(30);
      headblk.addField("SPECIAL_NAME").
              setReadOnly().
              setFunction("BUDGET_SPECIAL_TYPE_API.Get_Special_Name(:SPECIAL_NO)").
              setLabel("PROJECTBUDGETLINESPECIALNAME: Special NAME").
              setSize(30);  
      mgr.getASPField("SPECIAL_NO").setValidation("SPECIAL_NAME");
      headblk.addField("BUDGET_CONTACT_TYPE").
              enumerateValues("Budget_Contact_Type_API").
              setSelectBox().
              setInsertable().
              setLabel("PROJECTBUDGETLINEBUDGETCONTACTTYPE: Budget Contact Type").
              setSize(200);
      headblk.addField("REPORT_TYPE_ID").
              setDynamicLOV("BUDGET_REPORT_TYPE","PROJECT_TYPE_ID").
              setInsertable().                  
              setLabel("PROJECTBUDGETLINEREPORTTYPEID: Report Type Id").
              setSize(30);  
      headblk.addField("REPORT_TYPE_NAME").
              setFunction("BUDGET_REPORT_TYPE_API.Get_Report_Type_Desc(:PROJECT_TYPE_ID,:REPORT_TYPE_ID)").
              setReadOnly().          
              setLabel("PROJECTBUDGETLINEREPORTTYPENAME: Report Type NAME").
              setSize(30);
      mgr.getASPField("REPORT_TYPE_ID").setValidation("REPORT_TYPE_NAME");
      headblk.addField("BUDGET_IS_BID").
              enumerateValues("Budget_Is_Bid_API").
              setSelectBox().
              setInsertable().
              setLabel("PROJECTBUDGETLINEBUDGETISBID: Budget Is Bid").
              setSize(200);
      headblk.addField("BUDGET_MATERIAL_TYPE").
              enumerateValues("Budget_Material_Type_API").
              setSelectBox().
              setInsertable().
              setLabel("PROJECTBUDGETLINEBUDGETMATERIALTYPE: Budget Material Type").
              setSize(200);
      headblk.addField("IS_ESIMATE").
              setInsertable().
              setCheckBox("0,1").
              setLabel("PROJECTBUDGETLINEISESIMATE: Is Esimate").
              setSize(10);
      headblk.addField("UNIT_CODE").
              setInsertable().
              setDynamicLOV("ISO_UNIT").
              setLabel("PROJECTBUDGETLINEUNITCODE: Unit Code").
              setSize(30);
      headblk.addField("UNIT_CODE_DESC").
              setReadOnly().
              setFunction("ISO_UNIT_API.Get_Description(:UNIT_CODE,'zh')"). 
              setLabel("PROJECTBUDGETLINEUNITCODE: Unit Code").        
              setSize(30);
      mgr.getASPField("UNIT_CODE").setValidation("UNIT_CODE_DESC");    

      headblk.addField("AMOUNT","Number").
              setInsertable().
              setLabel("PROJECTBUDGETLINEAMOUNT: Amount").
              setSize(30);
      headblk.addField("PRICE","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINEPRICE: Price").
              setSize(30);
      headblk.addField("IS_LEAF").
              setInsertable().
              setHidden().
              setLabel("PROJECTBUDGETLINEISLEAF: Is Leaf").
              setSize(10);
      
      headblk.addField("SUBTOTAL_CON","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINESUBTOTALCON: Subtotal Con").
              setSize(30);
      headblk.addField("SUBTOTAL_INSTALL","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINESUBTOTALINSTALL: Subtotal Install").
              setSize(30);
      headblk.addField("SUBTOTAL_EQU","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINESUBTOTALEQU: Subtotal Equ").
              setSize(30);
      headblk.addField("SUBTOTAL_OTHER","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINESUBTOTALOTHER: Subtotal Other").
              setSize(30);
      headblk.addField("INSTALL_FEE","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINEINSTALLFEE: Install Fee").
              setSize(30);
      headblk.addField("INSTALL_MATERIALS","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINEINSTALLMATERIALS: Install Materials").
              setSize(30);
      headblk.addField("EXE_SUBTOTAL_CON","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINEEXESUBTOTALCON: Exe Subtotal Con").
              setSize(30);
      headblk.addField("EXE_SUBTOTAL_INSTALL","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINEEXESUBTOTALINSTALL: Exe Subtotal Install").
              setSize(30);
      headblk.addField("EXE_SUBTOTAL_EQU","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINEEXESUBTOTALEQU: Exe Subtotal Equ").
              setSize(30);
      headblk.addField("EXE_SUBTOTAL_OTHER","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINEEXESUBTOTALOTHER: Exe Subtotal Other").
              setSize(30);
      headblk.addField("EXE_INSTALL_FEE","Number" ,"#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINEEXEINSTALLFEE: Exe Install Fee").
              setSize(30);
      headblk.addField("EXE_INSTALL_MATERIALS","Number" ,"#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINEEXEINSTALLMATERIALS: Exe Install Materials").
              setSize(30);
      headblk.addField("TOTAL","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINETOTAL: Total").
              setSize(30);
      headblk.addField("CTL_SCALE","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINECTLSCALE: Ctl Scale").
              setSize(30);
      headblk.addField("CTL_PRICE","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINECTLPRICE: Ctl Price").
              setSize(30);  
      headblk.addField("TOTAL_EXE","Number","#0.00").
              setInsertable().
              setLabel("PROJECTBUDGETLINETOTALEXE: Total Exe").
              setSize(30);
      headblk.addField("TOTAL_CONTRACT_REQ","Number","#0.00").
              setReadOnly().
              setFunction("PROJECT_BUDGET_LINE_API.Cal_Contract_Req_Qty(:BUDGET_LINE_NO,:PROJ_NO)").
              setLabel("PROJECTBUDGETLINETOTALCONTRACTREQ: Total Contract Req").
              setSize(30); 
      headblk.addField("TOTAL_CONTRACT_ORIGINAL","Number","#0.00").
              setReadOnly().
              setFunction("PROJECT_BUDGET_LINE_API.Cal_Contract_Total(:BUDGET_LINE_NO,:PROJ_NO)").
              setLabel("PROJECTBUDGETLINETOTALCONTRACTORIGINAL: Total Contract Original").
              setSize(30); 
      headblk.addField("TOTAL_CONTRACT_CHANGED","Number","#0.00").
              setReadOnly().
              setFunction("PROJECT_BUDGET_LINE_API.Cal_Contract_Changed_Total(:BUDGET_LINE_NO,:PROJ_NO)").
              setLabel("PROJECTBUDGETLINETOTALCONTRACTCHANGED: Total Contract Changed").
              setSize(30); 
      headblk.setView("PROJECT_BUDGET_LINE");
      headblk.defineCommand("PROJECT_BUDGET_LINE_API","Modify__,Remove__");  
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("activateSubBudgetProject", "Sub Budget Project...");  
      headbar.addCustomCommand("activateBudgetProject", "Budget Project...");
      headtbl = mgr.newASPTable(headblk);  
      headtbl.setTitle("PROJECTBUDGETLINETBLHEAD: Project Budget Lines");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.SINGLE_LAYOUT);    
      headlay.defineGroup(mgr.translate("PROJECTBUDGETLINETBLHEAD: Project Budget Info"),"BUDGET_LINE_NO,PRE_CODE,BUDGET_NAME,SUBJECT_NO,PARENT_NO,SEQ_NO,BUDGET_TYPE,SPECIAL_NO,SPECIAL_NAME,BUDGET_CONTACT_TYPE,REPORT_TYPE_ID,REPORT_TYPE_NAME,BUDGET_IS_BID,BUDGET_MATERIAL_TYPE,STATUS",true,true);
      headlay.defineGroup(mgr.translate("PROJECTBUDGETLINETBLDETAIL: Project Budget Economy Target"),"UNIT_CODE,UNIT_CODE_DESC,PRICE,AMOUNT",false,true,2);
      headlay.defineGroup(mgr.translate("PROJECTBUDGETLINETBLBUDGETINFOGROUP: Budget Info Group"),"SUBTOTAL_CON,SUBTOTAL_INSTALL,SUBTOTAL_EQU,SUBTOTAL_OTHER,INSTALL_MATERIALS,INSTALL_FEE,TOTAL,CTL_SCALE,CTL_PRICE",true,true,2);
      headlay.defineGroup(mgr.translate("PROJECTBUDGETLINETBLEXEBUDGETINFO: Exe Budget Info"),"EXE_SUBTOTAL_CON,EXE_SUBTOTAL_INSTALL,EXE_SUBTOTAL_EQU,EXE_SUBTOTAL_OTHER,EXE_INSTALL_MATERIALS,EXE_INSTALL_FEE,TOTAL_EXE",true,true,2);
      headlay.defineGroup(mgr.translate("PROJECTBUDGETLINETBLCONTRACTINFO: Budget Contract Info"),"TOTAL_CONTRACT_ORIGINAL,TOTAL_CONTRACT_CHANGED,TOTAL_CONTRACT_REQ",true,true,2);
      headlay.setDialogColumns(2);            
      headlay.setDataSpan("BUDGET_NAME", 8); 
      headlay.setSimple("SPECIAL_NAME");
      headlay.setSimple("REPORT_TYPE_NAME");    
      //-----------------------------------------------------------------------------    
      //------------------------  sub project budget  ---------------------------
      //-----------------------------------------------------------------------------
      sub_budget_project_blk = mgr.newASPBlock("ITEM1");   
      sub_budget_project_blk.addField("ITEM1_OBJID").
                             setDbName("OBJID").
                             setHidden();
      sub_budget_project_blk.addField("ITEM1_OBJVERSION"). 
                             setDbName("OBJVERSION").
                             setHidden();
      sub_budget_project_blk.addField("ITEM1_PROJ_NO").
                             setDbName("PROJ_NO").
                             setMandatory().
                             setInsertable().
                             setHidden().
                             setLabel("PROJECTBUDGETLINEPROJECTTYPEID: Project Type Id").
                             setSize(20);
      sub_budget_project_blk.addField("ITEM1_PROJECT_TYPE_ID").
                             setDbName("PROJECT_TYPE_ID"). 
                             setInsertable().
                             setHidden().
                             setLabel("PROJECTBUDGETLINEPROJECTTYPEID: Project Type Id").
                             setSize(50);
      sub_budget_project_blk.addField("ITEM1_BUDGET_NO").
                             setDbName("BUDGET_NO").
                             setMandatory().
                             setInsertable().
                             setHidden().
                             setLabel("PROJECTBUDGETLINETEMPNO: Temp No").
                             setSize(50);
      sub_budget_project_blk.addField("ITEM1_BUDGET_LINE_NO").
                             setDbName("BUDGET_LINE_NO").
                             setMandatory().
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEBUDGETLINENO: Budget Line No").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_PRE_CODE").
                             setDbName("PRE_CODE").
                             setInsertable().
                             setDefaultNotVisible().
                             setLabel("PROJECTBUDGETLINEPRECODE: Pre Code").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_BUDGET_NAME").
                             setDbName("BUDGET_NAME").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEBUDGETNAME: Budget Name").
                             setSize(120);
      sub_budget_project_blk.addField("ITEM1_SUBJECT_NO").
                             setDbName("SUBJECT_NO").
                             setInsertable().
                             setDefaultNotVisible().
                             setLabel("PROJECTBUDGETLINESUBJECTNO: Subject No").
                             setSize(50);   
      sub_budget_project_blk.addField("ITEM1_PARENT_NO").
                             setDbName("PARENT_NO").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEPARENTNO: Parent No").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_SEQ_NO").
                             setDbName("SEQ_NO"). 
                             setDefaultNotVisible().  
                             setInsertable().
                             setLabel("PROJECTBUDGETLINESEQNO: Seq No").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_TREE_LEVEL").
                             setDbName("TREE_LEVEL"). 
                             setReadOnly(). 
                             setHidden().
                             setLabel("PROJECTBUDGETLINETREELEVEL: Tree Level").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_BUDGET_TYPE").
                             setDbName("BUDGET_TYPE").
                             enumerateValues("Budget_Type_API").
                             setSelectBox().
                             setMandatory().
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEBUDGETTYPE: Budget Type").
                             setSize(20);  
      sub_budget_project_blk.addField("ITEM1_SPECIAL_NO").
                             setDbName("SPECIAL_NO").
                             setDefaultNotVisible().
                             setInsertable().   
                             setDynamicLOV("BUDGET_SPECIAL_TYPE").
                             setLabel("PROJECTBUDGETLINESPECIALNO: Special No").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_SPECIAL_NAME").
                             setReadOnly().
                             setDefaultNotVisible().
                             setFunction("BUDGET_SPECIAL_TYPE_API.Get_Special_Name(:ITEM1_SPECIAL_NO)").    
                             setLabel("PROJECTBUDGETLINESPECIALNAME: Special NAME").
                             setSize(30);        
      sub_budget_project_blk.addField("ITEM1_BUDGET_CONTACT_TYPE"). 
                             setDbName("BUDGET_CONTACT_TYPE").
                             enumerateValues("Budget_Contact_Type_API").
                             setSelectBox().
                             setDefaultNotVisible().
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEBUDGETCONTACTTYPE: Budget Contact Type").
                             setSize(200);
      sub_budget_project_blk.addField("ITEM1_REPORT_TYPE_ID").
                             setDbName("REPORT_TYPE_ID").
                             setDefaultNotVisible().
                             setDynamicLOV("BUDGET_REPORT_TYPE","ITEM1_PROJECT_TYPE_ID").
                             setInsertable().                  
                             setLabel("PROJECTBUDGETLINEREPORTTYPEID: Report Type Id").
                             setSize(30);  
      sub_budget_project_blk.addField("ITEM1_REPORT_TYPE_NAME").
                             setFunction("BUDGET_REPORT_TYPE_API.Get_Report_Type_Desc(:ITEM1_PROJECT_TYPE_ID,:ITEM1_REPORT_TYPE_ID)").
                             setReadOnly().       
                             setDefaultNotVisible().
                             setLabel("PROJECTBUDGETLINEREPORTTYPENAME: Report Type NAME").
                             setSize(30);
      mgr.getASPField("ITEM1_REPORT_TYPE_ID").setValidation("ITEM1_REPORT_TYPE_NAME");
      sub_budget_project_blk.addField("ITEM1_BUDGET_IS_BID").
                             setDbName("BUDGET_IS_BID").
                             setDefaultNotVisible().
                             enumerateValues("Budget_Is_Bid_API").
                             setSelectBox().
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEBUDGETISBID: Budget Is Bid").
                             setSize(200);
      sub_budget_project_blk.addField("ITEM1_BUDGET_MATERIAL_TYPE").
                             setDbName("BUDGET_MATERIAL_TYPE").
                             enumerateValues("Budget_Material_Type_API").
                             setSelectBox().
                             setDefaultNotVisible().
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEBUDGETMATERIALTYPE: Budget Material Type").
                             setSize(200);
      sub_budget_project_blk.addField("ITEM1_IS_ESIMATE").
                             setDbName("IS_ESIMATE").
                             setInsertable().
                             setDefaultNotVisible().
                             setCheckBox("0,1").
                             setLabel("PROJECTBUDGETLINEISESIMATE: Is Esimate").
                             setSize(10);
      sub_budget_project_blk.addField("ITEM1_UNIT_CODE").
                             setDbName("UNIT_CODE").
                             setInsertable().
                             setDynamicLOV("ISO_UNIT").
                             setLabel("PROJECTBUDGETLINEUNITCODE: Unit Code").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_UNIT_CODE_DESC").
                             setReadOnly().
                             setDefaultNotVisible().  
                             setFunction("ISO_UNIT_API.Get_Description(:ITEM1_UNIT_CODE,'zh')"). 
                             setLabel("PROJECTBUDGETLINEUNITCODE: Unit Code").        
                             setSize(30);
      mgr.getASPField("ITEM1_UNIT_CODE").setValidation("ITEM1_UNIT_CODE_DESC");    
      
      sub_budget_project_blk.addField("ITEM1_AMOUNT","Number").
                             setInsertable().
                             setDbName("AMOUNT").
                             setLabel("PROJECTBUDGETLINEAMOUNT: Amount").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_PRICE","Number" ,"#0.00").
                             setDbName("PRICE"). 
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEPRICE: Price").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_IS_LEAF").   
                             setDbName("IS_LEAF").
                             setInsertable().
                             setHidden().
                             setDefaultNotVisible().
                             setLabel("PROJECTBUDGETLINEISLEAF: Is Leaf").
                             setSize(10);
      sub_budget_project_blk.addField("ITEM1_SUBTOTAL_CON","Number","#0.00").
                             setDbName("SUBTOTAL_CON").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINESUBTOTALCON: Subtotal Con").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_SUBTOTAL_INSTALL","Number","#0.00").
                             setDbName("SUBTOTAL_INSTALL").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINESUBTOTALINSTALL: Subtotal Install").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_SUBTOTAL_EQU","Number","#0.00").
                             setDbName("SUBTOTAL_EQU").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINESUBTOTALEQU: Subtotal Equ").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_SUBTOTAL_OTHER","Number","#0.00").  
                             setDbName("SUBTOTAL_OTHER").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINESUBTOTALOTHER: Subtotal Other").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_INSTALL_FEE","Number","#0.00").
                             setDbName("INSTALL_FEE").
                             setInsertable().
                             setDefaultNotVisible().
                             setLabel("PROJECTBUDGETLINEINSTALLFEE: Install Fee").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_INSTALL_MATERIALS","Number","#0.00").
                             setDbName("INSTALL_MATERIALS").
                             setInsertable().
                             setDefaultNotVisible().
                             setLabel("PROJECTBUDGETLINEINSTALLMATERIALS: Install Materials").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_EXE_SUBTOTAL_CON","Number","#0.00").
                             setDbName("EXE_SUBTOTAL_CON").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEEXESUBTOTALCON: Exe Subtotal Con").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_EXE_SUBTOTAL_INSTALL","Number","#0.00").
                             setDbName("EXE_SUBTOTAL_INSTALL").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEEXESUBTOTALINSTALL: Exe Subtotal Install").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_EXE_SUBTOTAL_EQU","Number","#0.00").
                             setDbName("EXE_SUBTOTAL_EQU").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEEXESUBTOTALEQU: Exe Subtotal Equ").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_EXE_SUBTOTAL_OTHER","Number","#0.00").  
                             setDbName("EXE_SUBTOTAL_OTHER").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEEXESUBTOTALOTHER: Exe Subtotal Other").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_EXE_INSTALL_FEE","Number","#0.00").  
                             setDbName("EXE_INSTALL_FEE").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEEXEINSTALLFEE: Exe Install Fee").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_EXE_INSTALL_MATERIALS","Number","#0.00").
                             setDbName("EXE_INSTALL_MATERIALS").
                             setInsertable().
                             setDefaultNotVisible().
                             setLabel("PROJECTBUDGETLINEEXEINSTALLMATERIALS: Exe Install Materials").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_TOTAL","Number","#0.00").
                             setDbName("TOTAL").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINETOTAL: Total").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_CTL_SCALE","Number","#0.00").
                             setDbName("CTL_SCALE").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINEITEMCTLSCALE: Ctl Scale").
                             setSize(30);    
      sub_budget_project_blk.addField("ITEM1_CTL_PRICE","Number","#0.00").
                             setInsertable().
                             setDbName("CTL_PRICE").   
                             setLabel("PROJECTBUDGETLINEITEMCTLPRICE: Ctl Price").
                             setSize(30);  
      sub_budget_project_blk.addField("ITEM1_TOTAL_EXE","Number","#0.00").
                             setDbName("TOTAL_EXE").
                             setInsertable().
                             setLabel("PROJECTBUDGETLINETOTALEXE: Total Exe").
                             setSize(30);
      sub_budget_project_blk.addField("ITEM1_TOTAL_CONTRACT_REQ","Number","#0.00").
                             setReadOnly().
                             setDefaultNotVisible().      
                             setFunction("PROJECT_BUDGET_LINE_API.Cal_Contract_Req_Qty(:ITEM1_BUDGET_LINE_NO,:ITEM1_PROJ_NO)").
                             setLabel("PROJECTBUDGETLINETOTALCONTRACTREQ: Total Contract Req").
                             setSize(30); 
      sub_budget_project_blk.addField("ITEM1_TOTAL_CONTRACT_ORIGINAL","Number","#0.00").
                             setReadOnly().  
                             setDefaultNotVisible().
                             setFunction("PROJECT_BUDGET_LINE_API.Cal_Contract_Total(:ITEM1_BUDGET_LINE_NO,:ITEM1_PROJ_NO)").
                             setLabel("PROJECTBUDGETLINETOTALCONTRACTORIGINAL: Total Contract Original").
                             setSize(30);   
      sub_budget_project_blk.addField("ITEM1_TOTAL_CONTRACT_CHANGED","Number","#0.00").
                             setReadOnly().
                             setDefaultNotVisible().  
                             setFunction("PROJECT_BUDGET_LINE_API.Cal_Contract_Changed_Total(:ITEM1_BUDGET_LINE_NO,:ITEM1_PROJ_NO)").
                             setLabel("PROJECTBUDGETLINETOTALCONTRACTCHANGED: Total Contract Changed").
                             setSize(30);            
      sub_budget_project_blk.enableFuncFieldsNonSelect();  
      sub_budget_project_blk.setView("PROJECT_BUDGET_LINE");
      sub_budget_project_blk.defineCommand("PROJECT_BUDGET_LINE_API","New__,Modify__,Remove__");
      sub_budget_project_set = sub_budget_project_blk.getASPRowSet();
      sub_budget_project_bar = mgr.newASPCommandBar(sub_budget_project_blk);
      sub_budget_project_bar.defineCommand(sub_budget_project_bar.OKFIND,"okFindItem1");
      sub_budget_project_bar.defineCommand(sub_budget_project_bar.NEWROW,"newRowItem1");
      sub_budget_project_bar.defineCommand(sub_budget_project_bar.COUNTFIND,"countFindItem1");
      sub_budget_project_tbl = mgr.newASPTable(sub_budget_project_blk);
      sub_budget_project_tbl.setTitle("PROJECTBUDGETLINETBLHEAD: Project Budget Temp Lines");
      sub_budget_project_tbl.enableRowSelect();  
      sub_budget_project_tbl.setWrap();
      sub_budget_project_lay = sub_budget_project_blk.getASPBlockLayout();
      sub_budget_project_lay.setDefaultLayoutMode(sub_budget_project_lay.MULTIROW_LAYOUT);
      sub_budget_project_lay.defineGroup(mgr.translate("SUBPROJECTBUDGETLINETBLHEAD: Project Budget Info"),"ITEM1_BUDGET_LINE_NO,ITEM1_PRE_CODE,ITEM1_BUDGET_NAME,ITEM1_SUBJECT_NO,ITEM1_PARENT_NO,ITEM1_SEQ_NO,ITEM1_BUDGET_TYPE,ITEM1_SPECIAL_NO,ITEM1_SPECIAL_NAME,ITEM1_BUDGET_CONTACT_TYPE,ITEM1_REPORT_TYPE_ID,ITEM1_REPORT_TYPE_NAME,ITEM1_BUDGET_IS_BID,ITEM1_BUDGET_MATERIAL_TYPE",false,true);
      sub_budget_project_lay.defineGroup(mgr.translate("SUBPROJECTBUDGETLINETBLDETAIL: Project Budget Economy Target"),"ITEM1_UNIT_CODE,ITEM1_UNIT_CODE_DESC,ITEM1_PRICE,ITEM1_AMOUNT",true,true,2);
      sub_budget_project_lay.defineGroup(mgr.translate("SUBPROJECTBUDGETLINETBLBUDGETINFO: Budget Info"),"ITEM1_SUBTOTAL_CON,ITEM1_SUBTOTAL_INSTALL,ITEM1_SUBTOTAL_EQU,ITEM1_SUBTOTAL_OTHER,ITEM1_INSTALL_MATERIALS,ITEM1_INSTALL_FEE,ITEM1_TOTAL,ITEM1_CTL_SCALE,ITEM1_CTL_PRICE",true,true,2);
      sub_budget_project_lay.defineGroup(mgr.translate("SUBPROJECTBUDGETLINETBLEXEBUDGETINFO: Exe Budget Info"),"ITEM1_EXE_SUBTOTAL_CON,ITEM1_EXE_SUBTOTAL_INSTALL,ITEM1_EXE_SUBTOTAL_EQU,ITEM1_EXE_SUBTOTAL_OTHER,ITEM1_EXE_INSTALL_MATERIALS,ITEM1_EXE_INSTALL_FEE,ITEM1_TOTAL_EXE",true,true,2);
      sub_budget_project_lay.defineGroup(mgr.translate("SUBPROJECTBUDGETLINETBLCONTRACTINFO: Budget Contract Info"),"ITEM1_TOTAL_CONTRACT_ORIGINAL,ITEM1_TOTAL_CONTRACT_CHANGED,ITEM1_TOTAL_CONTRACT_REQ",true,true,2);  
      sub_budget_project_lay.setDialogColumns(2);              
      sub_budget_project_lay.setDataSpan("ITEM1_BUDGET_NAME", 8); 
      sub_budget_project_lay.setSimple("ITEM1_SPECIAL_NAME");
      sub_budget_project_lay.setSimple("ITEM1_REPORT_TYPE_NAME");  
       
      tabs = mgr.newASPTabContainer();    
      tabs.setDirtyFlagEnabled(false);
      tabs.addTab(mgr.translate("PROJECTBUDGET: Budget Project"), "javascript:commandSet('MAIN.activateBudgetProject','')");
      tabs.addTab(mgr.translate("SUBPROJECTBUDGET: Sub Budget Project"), "javascript:commandSet('MAIN.activateSubBudgetProject','')"); 
      tabs.setContainerWidth(700);  
      tabs.setLeftTabSpace(1);     
      tabs.setContainerSpace(5);  
      tabs.setTabWidth(100);  
      
   }
   
   public void importBudgetTemp(){
      ASPManager mgr = getASPManager();
      ASPCommand cmd = mgr.newASPCommand(); 
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      cmd=trans.addCustomCommand("import_budget_temp", "PROJECT_BUDGET_LINE_API.Import_Budget_Temp");
      cmd.addParameter("PROJ_NO",headset.getValue("PROJ_NO"));
      bRefreshTree=true;
      
   }   

   public void  adjust() throws FndException
   {
      // fill function body
      ASPManager mgr = getASPManager();
      headbar.removeCustomCommand("activateSubBudgetProject");
      headbar.removeCustomCommand("activateBudgetProject");     
      if(sub_budget_project_blk.getFuncFieldsNonSelect())
      {
         setFuncFieldValue(sub_budget_project_blk);  
      }
   }  

   public void activateBudgetProject()
   {   
      tabs.setActiveTab(1);
      okFind(); 
   }

   public void activateSubBudgetProject()
   {   
      tabs.setActiveTab(2);
      okFindItem1();

   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return null;
   }
  

   protected String getTitle()
   {
      return null;
   }
  
   protected AutoString getContents() throws FndException{
      ASPManager mgr = getASPManager();
      AutoString out = getOutputStream();
      out.clear();  
      out.append("<html>\n");
      out.append("<head>\n");
      out.append(mgr.generateHeadTag(""));
      out.append("</head>\n");
      out.append("<body ");
      out.append(mgr.generateBodyTag());
      out.append(">\n");
      out.append("<form ");
      out.append(mgr.generateFormTag());
      out.append(">\n");
      out.append("\n");
      if(tabs!=null&&out!=null){
      out.append(tabs.showTabsInit());
      if (tabs.getActiveTab() == 1 ){
          out.append(headlay.show());
      } else if (tabs.getActiveTab() == 2 ){
          out.append(sub_budget_project_lay.show());   
      } 
      out.append(tabs.showTabsFinish());
      }  
      appendDirtyJavaScript("function refreshTree()\n");
      appendDirtyJavaScript("{\n");
      appendDirtyJavaScript("   parent_url = this.parent.location.href;\n");
      appendDirtyJavaScript("  url_str = this.parent.frames[\"contents\"].location.href;\n");  
      appendDirtyJavaScript("        this.parent.frames[\"contents\"].location.href = url_str;\n");
      appendDirtyJavaScript("}\n");    
      if (bRefreshTree)
      {          
         appendDirtyJavaScript("   refreshTree(");
         // XSS_Safe DINHLK 20070808
         appendDirtyJavaScript(");\n");    
         bRefreshTree = false;       
      }  
      out.append(mgr.endPresentation());
      out.append("</form>\n");
      out.append("</body>\n");
      out.append("</html>");
      return out;
 }
}           
