/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.genbaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.util.Str;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class GeneralImport extends ASPPageProvider
{
   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------
   
   public static boolean DEBUG = Util.isDebugEnabled("ifs.genbaw.GeneralImport");
   
   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------
   
   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------
   
   private ASPBlock general_import_info_blk;
   private ASPRowSet general_import_info_set;
   private ASPCommandBar general_import_info_bar;
   private ASPTable general_import_info_tbl;
   private ASPBlockLayout general_import_info_lay;
   
   private ASPBlock general_import_hist_blk;
   private ASPRowSet general_import_hist_set;
   private ASPCommandBar general_import_hist_bar;
   private ASPTable general_import_hist_tbl;
   private ASPBlockLayout general_import_hist_lay;
   
   protected ASPTabContainer tabs;
   
   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------
   
   public  GeneralImport (ASPManager mgr, String page_path)
   {
      super(mgr, page_path);
   }
   
   public void run() throws FndException
   {
      super.run();
      
      ASPManager mgr = getASPManager();
      
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("PKG_NAME")) )
         okFind();
      adjust();
      tabs.saveActiveTab();
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------
   
   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      
      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      
      q.addWhereCondition("EXECUTOR = Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User)");
      
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("GENERALIMPORTNODATA: No data found.");
         headset.clear();
      }
      okFindITEM1();
      okFindITEM2();
   }
   
   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      
      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      
      q.addWhereCondition("EXECUTOR = Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User)");
      
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }
   
   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;
      
      cmd = trans.addEmptyCommand("HEAD","GENERAL_IMPORT_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------
   
   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      
      if (headset.countRows() == 0) return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      
      q = trans.addQuery(general_import_info_blk);
      q.addWhereCondition("PKG_NAME = ?");
      q.addParameter("PKG_NAME", headset.getValue("PKG_NAME"));
      
      q.setOrderByClause("LINE_NO");
      
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans, general_import_info_blk);
      headset.goTo(headrowno);
   }
   
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;
      
      cmd = trans.addEmptyCommand("ITEM1","GENERAL_IMPORT_INFO_API.New__",general_import_info_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PKG_NAME", headset.getValue("PKG_NAME"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      general_import_info_set.addRow(data);
   }
   
   public void okFindITEM2()
   {
      ASPManager mgr = getASPManager();
      
      if (headset.countRows() == 0) return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(general_import_hist_blk);
      q.addWhereCondition("PKG_NAME = ?");
      q.addParameter("PKG_NAME", headset.getValue("PKG_NAME"));
      
      q.setOrderByClause("EXECUTE_DATE DESC");
      
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,general_import_hist_blk);
      headset.goTo(headrowno);
   }
   
   public void newRowITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      cmd = trans.addEmptyCommand("ITEM2","GENERAL_IMPORT_HIST_API.New__",general_import_hist_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM1_PKG_NAME", headset.getValue("PKG_NAME"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM2/DATA");
      general_import_hist_set.addRow(data);
   }
   
   public void importNow()
   {
      ASPManager mgr = getASPManager();
      
      if (headlay.isSingleLayout())
      {
         headset.unselectRows();
         headset.selectRow();
      }
      else
         headset.selectRows();
      
      if (headset.countRows() == 0) return;

      String pkg_name = headset.getValue("PKG_NAME");
      String pre_attr = "";
      String attribute = "";
      ASPCommand cmd;
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      String import_record = "SELECT line_no, attr_value FROM GENERAL_IMPORT_INFO WHERE pkg_name = ? AND NVL(status, 'FALSE') = 'FALSE' ORDER BY line_no";
      ASPQuery q = trans.addQuery("GETIMPORTRECORD", import_record);
      q.addParameter("PKG_NAME", pkg_name);
      q.setBufferSize(10000);
      trans = mgr.perform(trans);
      ASPBuffer import_buff = trans.getBuffer("GETIMPORTRECORD");
      
      if (import_buff.countItems() > 0)
      {
         // New__ PREPARE
         pre_attr = "";
         trans.clear();
         cmd = trans.addCustomCommand("GETDFT", pkg_name + ".New__");
         cmd.addParameter("INFO",       "S", "OUT", "");
         cmd.addParameter("OBJID",      "S", "OUT", "");
         cmd.addParameter("OBJVERSION", "S", "OUT", "");
         cmd.addParameter("ATTR",       "S", "IN_OUT", pre_attr);
         cmd.addParameter("ACTION",     "S", "IN", "PREPARE");

         trans = mgr.perform(trans);
         pre_attr = trans.getValue("GETDFT/DATA/ATTR");
         if(mgr.isEmpty(pre_attr))
            pre_attr = "";
         
         int success_count = 0;
         int failure_count = 0;
         boolean exist_error = false;
         
         int count = Integer.parseInt(import_buff.getBuffer("INFO").getValue("ROWS"));
         for (int i = 0; i < count; i++)
         {
            if ("DATA".equals(import_buff.getNameAt(i)))
            {
               String line_no = import_buff.getBufferAt(i).getValue("LINE_NO");
               String attr_value = import_buff.getBufferAt(i).getValue("ATTR_VALUE");
               
               if (!mgr.isEmpty(attr_value))
               {
                  //New__ DO
                  trans.clear();
                  attr_value = Str.replace(Str.replace(attr_value, "=", (char)31 + ""), "^", (char)30 + "");
                  attribute = pre_attr + attr_value;
                  cmd = trans.addCustomCommand("IMPXLS" + i, pkg_name + ".New__");
                  cmd.addParameter("INFO",       "S", "OUT", "");
                  cmd.addParameter("OBJID",      "S", "OUT", "");
                  cmd.addParameter("OBJVERSION", "S", "OUT", "");
                  cmd.addParameter("ATTR",       "S", "IN_OUT", attribute);
                  cmd.addParameter("ACTION",     "S", "IN", "DO");
                  
                  trans = mgr.perform_(trans);
                  ASPBuffer header = trans.getResponseHeader();
                  String status = header.getValue("STATUS");
                  if (!"DONE".equals(status) )
                  {
                     failure_count = failure_count + 1;
                     exist_error = true;
                     String err_msg = header.getValue("FND_EXCEPTION/MESSAGE");
                     if (!mgr.isEmpty(err_msg) && err_msg.indexOf("\n") >= 0)
                     {
                        err_msg = err_msg.substring(0, err_msg.indexOf("\n"));
                        String original_err_msg = err_msg;
                        try
                        {
                           int index = err_msg.indexOf(":");
                           if (index >= 0)
                              err_msg = err_msg.substring(index + 1);
                           index = err_msg.indexOf(":");
                           if (index >= 0)
                              err_msg = err_msg.substring(index + 1);
                        }
                        catch (Exception e)
                        {
                           err_msg = original_err_msg;
                        }
                        err_msg = err_msg.trim();
                     }
                     trans.clear();
                     cmd = trans.addCustomCommand("MODIFYERRORINFO", "General_Import_Info_API.Modify_Error_Info");
                     cmd.addParameter("PKG_NAME",     "S", "IN", pkg_name);
                     cmd.addParameter("LINE_NO",      "S", "IN", line_no);
                     cmd.addParameter("ERROR_INFO",   "S", "IN", err_msg);
                     mgr.perform(trans);
                  }
                  else
                  {
                     success_count = success_count + 1;
                     trans.clear();
                     cmd = trans.addCustomCommand("REMOVEINFO", "General_Import_Info_API.Remove_Info");
                     cmd.addParameter("PKG_NAME",     "S", "IN", pkg_name);
                     cmd.addParameter("LINE_NO",      "S", "IN", line_no);
                     mgr.perform(trans);
                  }
               }
            }
         }
         
         // import successfully, Modify status of import
         if (!exist_error)
         {
            trans.clear();
            cmd = trans.addCustomCommand("MODIFYSTATUS", "General_Import_API.Modify_Status");
            cmd.addParameter("PKG_NAME", "S", "IN", pkg_name);
            cmd.addParameter("STATUS",   "S", "IN", "TRUE");
            mgr.perform(trans);
         }
         
         // Create Import Hist
         trans.clear();
         cmd = trans.addCustomCommand("CREATEHIST", "General_Import_Hist_API.Create_Hist");
         cmd.addParameter("PKG_NAME",      "S", "IN", pkg_name);
         cmd.addParameter("SUCCESS_COUNT", "N", "IN", success_count);
         cmd.addParameter("FAILURE_COUNT", "N", "IN", failure_count);
         mgr.perform(trans);
      }
      else
      {
         mgr.showAlert("GENERALIMPORTNORECORD: There is no record to import.");
      }
      
      if (headset.countRows() > 0)
      {
         headset.refreshRow();
         okFindITEM1();
         okFindITEM2();
      }
   }
   
   public void importPro()
   {
      ASPManager mgr = getASPManager();
      if (headlay.isSingleLayout())
      {
         headset.unselectRows();
         headset.selectRow();
      }
      else
         headset.selectRows();
      
      if (headset.countRows() == 0) return;

      String pkg_name = headset.getValue("PKG_NAME");
      ASPCommand cmd;
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      cmd = trans.addCustomCommand("IMPORTNOW", "General_Import_API.Import_Now");
      cmd.addParameter("PKG_NAME", "S", "IN", pkg_name);
      mgr.perform(trans);
      
      if (headset.countRows() > 0)
      {
         headset.refreshRow();
         okFindITEM1();
         okFindITEM2();
      }
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------
   
   public void preDefine()
   {
      ASPManager mgr = getASPManager();
      
      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
      setHidden();
      
      headblk.addField("OBJVERSION").
      setHidden();
      
      // line 1
      headblk.addField("PKG_NAME").
      setMandatory().
      setInsertable().
      setLabel("GENERALIMPORTPKGNAME: Pkg Name").
      setSize(30);
      
      headblk.addField("VIEW_NAME").
      setInsertable().
      setLabel("GENERALIMPORTVIEWNAME: View Name").
      setSize(30);
      
      // line 2
      headblk.addField("FILE_NAME").
      setInsertable().
      setLabel("GENERALIMPORTFILENAME: File Name").
      setSize(120);
      
      // line 3
      headblk.addField("EXECUTOR").
      setInsertable().
      setDynamicLOV("PERSON_INFO_LOV").
      setLabel("GENERALIMPORTEXECUTOR: Executor").
      setSize(10);
      
      headblk.addField("EXECUTOR_NAME").
      setReadOnly().
      setFunction("Person_Info_API.Get_Name(:EXECUTOR)").
      setLabel("GENERALIMPORTEXECUTORNAME: Executor Name").
      setSize(10);
      mgr.getASPField("EXECUTOR").setValidation("EXECUTOR_NAME");
      
      headblk.addField("EXECUTE_DATE","Datetime").
      setInsertable().
      setLabel("GENERALIMPORTEXECUTEDATE: Execute Date").
      setSize(10);
      
      // line 4
      headblk.addField("STATUS").
      setInsertable().
      setCheckBox("FALSE,TRUE").
      setLabel("GENERALIMPORTSTATUS: Status").
      setSize(5);
      
      headblk.setView("GENERAL_IMPORT");
      headblk.defineCommand("GENERAL_IMPORT_API", "");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      
      // headbar.addSecureCustomCommand("ImportNow", "GENERALIMPORTCOMMAND: Import...", "GENERAL_IMPORT_INFO_API.Modify__");
      // headbar.addCommandValidConditions("ImportNow", "STATUS", "Disable", "TRUE");
      
      headbar.addSecureCustomCommand("ImportPro", "GENERALIMPORTPRO: Import Pro...", "GENERAL_IMPORT_API.Import_Now");
      headbar.addCommandValidConditions("ImportPro", "STATUS", "Disable", "TRUE");
      
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("GENERALIMPORTTBLHEAD: General Imports");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.SINGLE_LAYOUT);
      headlay.setSimple("EXECUTOR_NAME");
      headlay.setDataSpan("FILE_NAME", 5);
      
      headbar.addCustomCommand("activateInfo", "Info");
      headbar.addCustomCommand("activateHist", "Hist");
      
      //
      // Import Error Info
      //
      
      general_import_info_blk = mgr.newASPBlock("ITEM1");
      general_import_info_blk.addField("ITEM0_OBJID").
      setHidden().
      setDbName("OBJID");
      
      general_import_info_blk.addField("ITEM0_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      
      general_import_info_blk.addField("ITEM0_PKG_NAME").
      setDbName("PKG_NAME").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("GENERALIMPORTINFOITEM0PKGNAME: Pkg Name").
      setSize(30);
      
      // line 1
      general_import_info_blk.addField("LINE_NO","Number").
      setReadOnly().
      setLabel("GENERALIMPORTINFOLINENO: Line No").
      setSize(10);
      
      general_import_info_blk.addField("EXCEL_ROW_NO").
      setReadOnly().
      setLabel("GENERALIMPORTINFOEXCELROWNO: Excel Row No").
      setSize(10);
      
      // line 2
      general_import_info_blk.addField("ATTR_VALUE").
      setInsertable().
      setLabel("GENERALIMPORTINFOATTRVALUE: Attr Value").
      setSize(120).
      setHeight(10);
      
      // line 3
      general_import_info_blk.addField("ERROR_INFO").
      setReadOnly().
      setLabel("GENERALIMPORTINFOERRORINFO: Error Info").
      setSize(120).
      setHeight(3);
      
      // line 4
      general_import_info_blk.addField("ITEM0_STATUS").
      setDbName("STATUS").
      setReadOnly().
      setCheckBox("FALSE,TRUE").
      setLabel("GENERALIMPORTINFOITEM0STATUS: Status").
      setSize(5);
      
      general_import_info_blk.setView("GENERAL_IMPORT_INFO");
      general_import_info_blk.defineCommand("GENERAL_IMPORT_INFO_API", "Modify__,Remove__");
      general_import_info_blk.setMasterBlock(headblk);
      general_import_info_set = general_import_info_blk.getASPRowSet();
      general_import_info_bar = mgr.newASPCommandBar(general_import_info_blk);
      general_import_info_bar.defineCommand(general_import_info_bar.OKFIND, "okFindITEM1");
      general_import_info_bar.defineCommand(general_import_info_bar.NEWROW, "newRowITEM1");
      general_import_info_tbl = mgr.newASPTable(general_import_info_blk);
      general_import_info_tbl.setTitle("GENERALIMPORTINFOITEMHEAD1: GeneralImportInfo");
      general_import_info_tbl.enableRowSelect();
      general_import_info_tbl.setWrap();
      general_import_info_lay = general_import_info_blk.getASPBlockLayout();
      general_import_info_lay.setDefaultLayoutMode(general_import_info_lay.MULTIROW_LAYOUT);
      
      general_import_info_lay.setDataSpan("ATTR_VALUE", 5);
      general_import_info_lay.setDataSpan("ERROR_INFO", 5);
      
      //
      // Import History
      //
      
      general_import_hist_blk = mgr.newASPBlock("ITEM2");
      general_import_hist_blk.addField("ITEM1_OBJID").
      setHidden().
      setDbName("OBJID");
      
      general_import_hist_blk.addField("ITEM1_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      
      general_import_hist_blk.addField("ITEM1_PKG_NAME").
      setDbName("PKG_NAME").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("GENERALIMPORTHISTITEM1PKGNAME: Pkg Name").
      setSize(30);
      
      // line 1
      general_import_hist_blk.addField("ITEM1_LINE_NO", "Number").
      setDbName("LINE_NO").
      setReadOnly().
      setLabel("GENERALIMPORTHISTITEM1LINENO: Line No").
      setSize(10);
      
      general_import_hist_blk.addField("ITEM1_EXECUTOR").
      setDbName("EXECUTOR").
      setReadOnly().
      setDynamicLOV("PERSON_INFO_LOV").
      setLabel("GENERALIMPORTHISTITEM1EXECUTOR: Executor").
      setSize(10);
      
      general_import_hist_blk.addField("ITEM1_EXECUTOR_NAME").
      setReadOnly().
      setFunction("Person_Info_API.Get_Name(:ITEM1_EXECUTOR)").
      setLabel("GENERALIMPORTHISTITEM1EXECUTORNAME: Executor Name").
      setSize(10);
      mgr.getASPField("ITEM1_EXECUTOR").setValidation("ITEM1_EXECUTOR_NAME");
      
      general_import_hist_blk.addField("ITEM1_EXECUTE_DATE", "Datetime").
      setDbName("EXECUTE_DATE").
      setReadOnly().
      setLabel("GENERALIMPORTHISTITEM1EXECUTEDATE: Execute Date").
      setSize(10);
      
      general_import_hist_blk.addField("SUCCESS_COUNT","Number").
      setReadOnly().
      setLabel("GENERALIMPORTHISTSUCCESSCOUNT: Success Count").
      setSize(10);
      
      general_import_hist_blk.addField("FAILURE_COUNT","Number").
      setReadOnly().
      setLabel("GENERALIMPORTHISTFAILURECOUNT: Failure Count").
      setSize(10);
      
      general_import_hist_blk.setView("GENERAL_IMPORT_HIST");
      general_import_hist_blk.defineCommand("GENERAL_IMPORT_HIST_API", "");
      general_import_hist_blk.setMasterBlock(headblk);
      general_import_hist_set = general_import_hist_blk.getASPRowSet();
      general_import_hist_bar = mgr.newASPCommandBar(general_import_hist_blk);
      general_import_hist_bar.defineCommand(general_import_hist_bar.OKFIND, "okFindITEM2");
      general_import_hist_bar.defineCommand(general_import_hist_bar.NEWROW, "newRowITEM2");
      general_import_hist_tbl = mgr.newASPTable(general_import_hist_blk);
      general_import_hist_tbl.setTitle("GENERALIMPORTHISTITEMHEAD2: GeneralImportHist");
      general_import_hist_tbl.enableRowSelect();
      general_import_hist_tbl.setWrap();
      general_import_hist_lay = general_import_hist_blk.getASPBlockLayout();
      general_import_hist_lay.setDefaultLayoutMode(general_import_hist_lay.MULTIROW_LAYOUT);
      
      general_import_hist_lay.setSimple("ITEM1_EXECUTOR_NAME");
      
      //
      // Tab definitions
      //
      
      tabs = mgr.newASPTabContainer();
      tabs.addTab(mgr.translate("GENERALIMPORTINFO: Info"), "javascript:commandSet('MAIN.activateInfo','')");
      tabs.addTab(mgr.translate("GENERALIMPORTHIST: Hist"), "javascript:commandSet('MAIN.activateHist','')");
      
      tabs.setContainerWidth(700);
      tabs.setLeftTabSpace(1);
      tabs.setContainerSpace(5);
      tabs.setTabWidth(100);
   }
   
   public void adjust()
   {
      headbar.removeCustomCommand("activateInfo");
      headbar.removeCustomCommand("activateHist");
   }
   
   public void activateInfo()
   {
      tabs.setActiveTab(1);
      okFindITEM1();
   }
   
   public void activateHist()
   {
      tabs.setActiveTab(2);
      okFindITEM2();
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------
   
   protected String getDescription()
   {
      if (headset.countRows() > 0)
      {
         if ("TRUE".equals(headset.getValue("STATUS")))
         {
            return "GENERALIMPORTDESCSUCC: General Import - Import Successfully";
         }
         else
         {
            return "GENERALIMPORTDESCPARTIALLY: General Import - Import Partially";
         }
      }
      else
         return "GENERALIMPORTDESC: General Import";
   }
   
   protected String getTitle()
   {
      return getDescription();
   }
   
   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
         appendToHTML(headlay.show());
      else 
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
      
      if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
      {
         appendToHTML(tabs.showTabsInit());
         if (tabs.getActiveTab() == 1)
            appendToHTML(general_import_info_lay.show());
         else if (tabs.getActiveTab() == 2)
            appendToHTML(general_import_hist_lay.show());
      }
      
      appendDirtyJavaScript("try\n");
      appendDirtyJavaScript("{\n");
      appendDirtyJavaScript("   eval(\"opener.refreshParent()\");\n");
      appendDirtyJavaScript("}\n");
      appendDirtyJavaScript("catch(err){}\n");
   }
}
