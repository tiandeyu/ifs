/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.docctw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class DocRecieveTrans extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.docctw.DocRecieveTrans");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   protected ASPBlock       itemblk3;
   protected ASPRowSet      itemset3;
   protected ASPCommandBar  itembar3;
   protected ASPTable       itemtbl3;
   protected ASPBlockLayout itemlay3;

   protected ASPBlock       itemblk4;
   protected ASPRowSet      itemset4;
   protected ASPCommandBar  itembar4;
   protected ASPTable       itemtbl4;
   protected ASPBlockLayout itemlay4;

   private ASPTransactionBuffer trans;

   private ASPQuery q;
   protected ASPTabContainer tabs;   
   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   private ASPHTMLFormatter fmt;

   public  DocRecieveTrans (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      super.run();
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("TRANS_NO")) )
         okFind();
      tabs.saveActiveTab();
      adjust();
   }
   
   protected ASPBlock getBizWfBlock(){
      return headblk;
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("DOCRECIEVETRANSNODATA: No data found.");
         headset.clear();
      }
   }       
   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","DOC_RECIEVE_TRANS_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }

   public void okFindITEM3()
   {
      ASPManager mgr = getASPManager();
      if (tabs.getActiveTab()== 4)
      {
         if (headset.countRows() == 0)
            return;
         trans.clear();
         q = trans.addEmptyQuery(itemblk3);
         q.addWhereCondition("DOC_CLASS = ? AND DOC_NO = ? AND DOC_SHEET = ? AND DOC_REV = ?");
         q.addParameter("DOC_CLASS", headset.getValue("DOC_CLASS"));
         q.addParameter("DOC_NO", headset.getValue("DOC_NO"));
         q.addParameter("DOC_SHEET", headset.getValue("DOC_SHEET"));
         q.addParameter("DOC_REV", headset.getValue("DOC_REV") );
         q.includeMeta("ALL");
         int headrowno = headset.getCurrentRowNo();
         mgr.querySubmit(trans, itemblk3);
         headset.goTo(headrowno);
      }
   }


   public void countFindITEM3()
   {
      ASPManager mgr = getASPManager();

      q = trans.addQuery(itemblk3);
      q.setSelectList("to_char(count(*)) N");
      //Bug ID 45944, inoslk, start
      q.addWhereCondition("DOC_CLASS = ? AND DOC_NO = ? AND DOC_SHEET = ? AND DOC_REV = ?");
      q.addParameter("DOC_CLASS",headset.getValue("DOC_CLASS"));
      q.addParameter("DOC_NO",headset.getValue("DOC_NO"));
      q.addParameter("DOC_SHEET",headset.getValue("DOC_SHEET"));
      q.addParameter("DOC_REV",headset.getValue("DOC_REV"));
      mgr.submit(trans);
      itemlay3.setCountValue(toInt(itemset3.getValue("N")));
      itemset3.clear();
   }
   public void  okFindITEM4()
   {
      ASPManager mgr = getASPManager();

      if (tabs.getActiveTab()== 5)
      {
         if (headset.countRows() == 0)
            return;
         trans.clear();
         q = trans.addQuery(itemblk4);
         q.addWhereCondition("SUB_DOC_CLASS = ? AND SUB_DOC_NO = ? AND SUB_DOC_SHEET = ? AND SUB_DOC_REV = ?");
         q.addParameter("SUB_DOC_CLASS", headset.getValue("DOC_CLASS"));
         q.addParameter("SUB_DOC_NO", headset.getValue("DOC_NO"));
         q.addParameter("SUB_DOC_SHEET", headset.getValue("DOC_SHEET"));
         q.addParameter("SUB_DOC_REV", headset.getValue("DOC_REV") );
         q.includeMeta("ALL");
         int headrowno = headset.getCurrentRowNo();
         mgr.querySubmit(trans, itemblk4);
         headset.goTo(headrowno);
      }
   }
   public void  countFindITEM4()
   {
      ASPManager mgr = getASPManager();

      q = trans.addQuery(itemblk4);
      q.setSelectList("to_char(count(*)) N");
      q.addWhereCondition("SUB_DOC_CLASS = ? AND SUB_DOC_NO = ? AND SUB_DOC_SHEET = ? AND SUB_DOC_REV = ?");
      q.addParameter("SUB_DOC_CLASS",headset.getValue("DOC_CLASS"));
      q.addParameter("SUB_DOC_NO",headset.getValue("DOC_NO"));
      q.addParameter("SUB_DOC_SHEET",headset.getValue("DOC_SHEET"));
      q.addParameter("SUB_DOC_REV",headset.getValue("DOC_REV"));
      mgr.submit(trans);
      itemlay4.setCountValue(toInt(itemset4.getValue("N")));
      itemset4.clear();
   }


   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("TRANS_NO").
              setHidden().
              setLabel("DOCRECIEVETRANSTRANSNO: Trans No").
              setSize(50);  
      headblk.addField("DOC_TITLE").
              setMandatory().
              setInsertable().
              setLabel("DOCRECIEVETRANSDOCTITLE: Doc Title").
              setHyperlink("../docmaw/EdmMacro.page?PROCESS_DB=VIEW&DOC_TYPE=ORIGINAL",
                    "DOC_CLASS,DOC_NO,DOC_SHEET,DOC_REV", "NEWWIN"). 
              setSize(100).
              setWfProperties(1).
              setMaxLength(250);
      headblk.addField("DOC_SHEET").
              setMandatory().
              setHidden().
              setInsertable().
              setLabel("DOCRECIEVETRANSDOCSHEET: Doc Sheet").
              setSize(20);
      headblk.addField("DOC_REV").
              setMandatory().
              setInsertable().
              setHidden().
              setLabel("DOCRECIEVETRANSDOCREV: Doc Rev").
              setSize(20);
      headblk.addField("DOC_CLASS").
              setMandatory().
              setInsertable().
              setHidden().
              setLabel("DOCRECIEVETRANSDOCCLASS: Doc Class").
              setSize(20);
      headblk.addField("DOC_NO").
              setMandatory().
              setHidden().
              setInsertable().
              setLabel("DOCRECIEVETRANSDOCNO: Doc No").
              setSize(20);
      headblk.addField("CONTRACT")
             .setReadOnly()
             .setDynamicLOV("SITE", 400, 600)
             .setLabel("DOCRECIEVETRANSCONTRACT: Contract");
      headblk.addField("CONTRACT_DESCRIPTION")
            .setFunction("SITE_Api.Get_Description(:CONTRACT)")
            .setLabel("DOCRECIEVETRANSDOCCONTRACTDESCRIPTION: Contract Description")
            .setReadOnly();
      mgr.getASPField("CONTRACT").setValidation("CONTRACT_DESCRIPTION");
      headblk.addField("DOC_CODE").
              setInsertable().      
              setMandatory().
              setWfProperties(0).
              setLabel("DOCRECIEVETRANSDOCCODE: Doc Code").
              setSize(20);
      headblk.addField("MAIN_CONTENT").
              setInsertable().
              setLabel("DOCRECIEVETRANSMAINCONTENT: Main Content").
              setSize(100)
              .setHeight(5);
      headblk.addField("TRANS_SATTE").
              setReadOnly().
              setLabel("DOCRECIEVETRANSTRANSSATTE: Trans Satte").
              setSize(20);
      headblk.addField("MAIN_DEPT").
              setInsertable().
              setDynamicLOV("GENERAL_ORGANIZATION").
              setLOVProperty("WHERE", "ORG_TYPE_DB = 'DEP'").
              setLabel("DOCRECIEVETRANSMAINDEPT: Main Dept").
              setSize(20);
      headblk.addField("COOPERATE_DEPT").
              setInsertable().
              setDynamicLOV("GENERAL_ORGANIZATION", "", 500, 550, true, true).
              setLOVProperty("WHERE", "ORG_TYPE_DB = 'DEP'").
              setLabel("DOCRECIEVETRANSCOOPERATEDEPT: Cooperate Dept").
              setSize(20);
      headblk.addField("PASS_DEPT").
              setInsertable().
              setDynamicLOV("GENERAL_ORGANIZATION", "", 500, 550, true, true).
              setLOVProperty("WHERE", "ORG_TYPE_DB = 'DEP'").
              setLabel("DOCRECIEVETRANSPASSDEPT: Pass Dept").
              setSize(20);
      headblk.addField("PARTIAL_OPINION").
              setInsertable().
              setLabel("DOCRECIEVETRANSPARTIALOPINION: Partial Opinion").
              setSize(100).
              setHeight(5);
      headblk.addField("LEADER_OPINION").
              setInsertable().
              setLabel("DOCRECIEVETRANSLEADEROPINION: Leader Opinion").
              setSize(100).      
              setHeight(5);
      headblk.addField("MANAGE_OPNION").
              setInsertable().
              setLabel("DOCRECIEVETRANSMANAGEOPNION: Manage Opnion").
              setSize(100).
              setHeight(5);
      headblk.addField("MANAGE_RESULT").
              setInsertable().
              setLabel("DOCRECIEVETRANSMANAGERESULT: Manage Result").
              setSize(100).
              setHeight(5);
      headblk.addField("EMERGENCY").
              setInsertable().
              setLabel("DOCRECIEVETRANSEMERGENCY: Emergency").
              setCheckBox("FALSE,TRUE").
              setSize(10);
      headblk.addField("DOC_REPLY").
              setInsertable().
              setLabel("DOCRECIEVETRANSDOCREPLY: Doc Reply").
              setCheckBox("FALSE,TRUE").
              setSize(10);
      headblk.addField("RECEIPT").
              setInsertable().
              setCheckBox("FALSE,TRUE").
              setLabel("DOCRECIEVETRANSRECEIPT: Receipt").
              setSize(10);
      headblk.addField("DOC_REPLY_NO").
              setInsertable().
              setLabel("DOCRECIEVETRANSDOCREPLYNO: Doc Reply No").
              setSize(20);
      headblk.addField("RECIEVE_UNIT_ID").
              setInsertable().
              setDynamicLOV("DOC_CONTACTS_UNIT", "CONTRACT").
              setLabel("DOCRECIEVETRANSRECIEVEUNITID: Recieve Unit Id").
              setSize(20);
      headblk.addField("RECIEVE_UNIT_NAME").
               setReadOnly().
               setFunction("DOC_CONTACTS_UNIT_API.Get_Unit_Description(:CONTRACT,:RECIEVE_UNIT_ID)").
               setLabel("DOCRECIEVETRANSRECIEVEUNITNAME: Recieve Unit Name").
               setSize(20);
      headblk.addField("UNIT_ID").
              setInsertable().
              setHidden().
              setLabel("DOCRECIEVETRANSUNITID: Unit Id").
              setSize(20);
      headblk.addField("SEND_UNIT_ID").
              setInsertable().
              setHidden(). 
              setLabel("DOCRECIEVETRANSSENDUNITID: Send Unit Id").
              setSize(5);
      headblk.addField("LEADER").
               setInsertable().
               setDynamicLOV("PERSON_INFO").
               setLabel("DOCRECIEVETRANSPARTIALPERSON: Partial Person").
               setSize(20);
      headblk.addField("PARTIAL_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("DOCRECIEVETRANSLEADER: Leader").
              setSize(20);
      headblk.setView("DOC_RECIEVE_TRANS");
      headblk.defineCommand("DOC_RECIEVE_TRANS_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("DOCRECIEVETRANSTBLHEAD: Doc Recieve Transs");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.SINGLE_LAYOUT);               
      headlay.setDataSpan("DOC_TITLE",5);     
      headlay.setDataSpan("MAIN_CONTENT",5);        
      headlay.setDataSpan("PARTIAL_OPINION",5);        
      headlay.setDataSpan("LEADER_OPINION",5); 
      headlay.setDataSpan("MANAGE_RESULT",5); 
      headlay.setDataSpan("MANAGE_OPNION",5);  
      headlay.defineGroup(
            "Main",
            "OBJID,OBJVERSION,DOC_TITLE,DOC_CODE,DOC_CLASS,DOC_NO,DOC_SHEET,DOC_REV,RECIEVE_UNIT_ID,MAIN_CONTENT,TRANS_SATTE",
            false, true);                         
      headlay.defineGroup(                   
              mgr.translate("DOCMAWDOCISSUEDOCINFO: Doc Trans Detail"),
              "CONTRACT,CONTRACT_DESCRIPTION,MAIN_DEPT,COOPERATE_DEPT,PASS_DEPT,LAEDER,PARTIAL_PERSON,PARTIAL_OPINION,LEADER_OPINION,MANAGE_OPNION,MANAGE_RESULT,EMERGENCY,DOC_REPLY,RECEIPT,DOC_REPLY_NO",
              true, true);               
      headbar.addCustomCommand("activateConsistsOf", "Consists Of");
      headbar.addCustomCommand("activateWhereUsed", "Where Used");
      //
      // Document Structure - Consists of
      //

      itemblk3 = mgr.newASPBlock("ITEM3");

      itemblk3.disableDocMan();

      itemblk3.addField("ITEM3_OBJID").setDbName("OBJID").setHidden();

      itemblk3.addField("ITEM3_OBJVERSION").setDbName("OBJVERSION").setHidden();

      itemblk3
            .addField("REPLACE_REVISION_TITLE")
            .setHidden()
            .setReadOnly()
            .setBold()
            .setFunction("''")
            .setLabel(
                  "DOCMAWDOCISSUEREPLACEREVISIONTITLE: Enter Replacement Document:");

      itemblk3.addField("SUB_DOC_CLASS").setSize(20).setMaxLength(12)
            .setMandatory().setUpperCase().setReadOnly().setInsertable()
            .setDynamicLOV("DOC_CLASS").setLabel(
                  "DOCMAWDOCISSUESUBDOCCLASS: Doc Class");

      itemblk3.addField("SUB_DOC_NO").setSize(20).setMaxLength(120)
            .setMandatory().setUpperCase().setReadOnly().setInsertable()
            .setDynamicLOV("DOC_TITLE", "SUB_DOC_CLASS DOC_CLASS")
            .setCustomValidation("SUB_DOC_CLASS,SUB_DOC_NO", "SSUBDOCTITLE").
            // setCustomValidation("DOC_CLASS,DOC_NO","SSUBDOCTITLE").
            setSecureHyperlink("DocIssue.page",
                  "SUB_DOC_CLASS,SUB_DOC_NO,SUB_DOC_SHEET,SUB_DOC_REV"). // Bug
            // Id
            // 85223
            setLabel("DOCMAWDOCISSUESUBDOCNO: Doc No");

      itemblk3
            .addField("SUB_DOC_SHEET")
            .setSize(20)
            .setMaxLength(10)
            .setMandatory()
            .setUpperCase()
            .setReadOnly()
            .setInsertable()
            .setDynamicLOV("DOC_ISSUE_LOV1",
                  "SUB_DOC_CLASS DOC_CLASS, SUB_DOC_NO DOC_NO")
            .setLOVProperty(
                  "TITLE",
                  mgr
                        .translate("DOCMAWDOCISSUESUBDOCSHEET1: List of Based on Sheets"))
            .setLabel("DOCMAWDOCISSUESUBDOCSHEET: Doc Sheet");

      itemblk3
            .addField("SUB_DOC_REV")
            .setSize(20)
            .setMaxLength(6)
            .setMandatory()
            .setUpperCase()
            .setReadOnly()
            .setInsertable()
            .setDynamicLOV("DOC_ISSUE",
                  "SUB_DOC_CLASS DOC_CLASS, SUB_DOC_NO DOC_NO, SUB_DOC_SHEET DOC_SHEET")
            .setCustomValidation(
                  "SUB_DOC_CLASS,SUB_DOC_NO,SUB_DOC_SHEET,SUB_DOC_REV",
                  "NNOOFCHILDREN")
            .setLabel("DOCMAWDOCISSUESUBDOCREV: Revision");

      itemblk3.addField("SSUBDOCTITLE").setSize(20).setMaxLength(80)
            .setReadOnly().setFunction(
                  "DOC_TITLE_API.Get_Title(:SUB_DOC_CLASS, :SUB_DOC_NO)")
            .setLabel("DOCMAWDOCISSUESSUBDOCTITLE: Title");

      itemblk3
            .addField("ITEMBLK3_STATE")
            .setSize(20)
            .setMaxLength(253)
            .setReadOnly()
            .setFunction(
                  "DOC_ISSUE_API.Get_State (:SUB_DOC_CLASS, :SUB_DOC_NO, :SUB_DOC_SHEET, :SUB_DOC_REV)")
            .setLabel("DOCMAWDOCISSUECONSISTSOFSTATE: Document Status");

      itemblk3
            .addField("NNOOFCHILDREN", "Number")
            .setSize(20)
            .setMaxLength(6)
            .setReadOnly()
            .setFunction(
                  "DOC_STRUCTURE_API.Number_Of_Children_(:SUB_DOC_CLASS, :SUB_DOC_NO, :SUB_DOC_SHEET, :SUB_DOC_REV)")
            .setLabel("DOCMAWDOCISSUENNOOFCHILDREN: No of Child documents");

      itemblk3.addField("CONSISTS_OF_RELATIVE_PATH").setDbName("RELATIVE_PATH")
            .setSize(40).setMaxLength(256).setLabel(
                  "DOCMAWDOCISSUERELATIVEPATH: Relative Path");

      itemblk3.addField("ITEM3_DOC_CLASS").setDbName("DOC_CLASS").setHidden();

      itemblk3.addField("ITEM3_DOC_NO").setDbName("DOC_NO").setHidden();

      itemblk3.addField("ITEM3_DOC_SHEET").setDbName("DOC_SHEET").setHidden();

      itemblk3.addField("ITEM3_DOC_REV").setDbName("DOC_REV").setHidden();

      itemblk3.setView("DOC_STRUCTURE");
      itemblk3.defineCommand("DOC_STRUCTURE_API", "New__,Modify__,Remove__");
      itemblk3.setMasterBlock(headblk);

      itemset3 = itemblk3.getASPRowSet();

      itembar3 = mgr.newASPCommandBar(itemblk3);
      itembar3.defineCommand(itembar3.OKFIND, "okFindITEM3");
      itembar3.defineCommand(itembar3.COUNTFIND, "countFindITEM3");
      itembar3.defineCommand(itembar3.NEWROW, "newRowITEM3");
      itembar3.defineCommand(itembar3.SAVERETURN, "saveReturnITEM3");
      itembar3.addCustomCommand("transferToDocInfoFromConsistOf", mgr
            .translate("DOCMAWDOCISSUEDOCINFO: Document Info..."));
      itembar3.addSecureCustomCommand("replaceRevision", mgr
            .translate("DOCMAWDOCISSUEREPLACEREVISION: Replace Revision..."),
            "Doc_Structure_API.Replace_Issue_"); // Bug Id 70286
      itembar3.addCustomCommand("previousLevel", mgr
            .translate("DOCMAWDOCISSUEPREVLEVEL: Previous Level"));
      itemtbl3 = mgr.newASPTable(itemblk3);
      itemtbl3.setTitle(mgr.translate("DOCMAWDOCISSUEDOCCONSIT: Consists Of"));

      itemlay3 = itemblk3.getASPBlockLayout();
      itemlay3.setDialogColumns(2);
      itemlay3.setDefaultLayoutMode(itemlay3.MULTIROW_LAYOUT);
      //
      // Doucment Structure - Where used
      //

      itemblk4 = mgr.newASPBlock("ITEM4");

      itemblk4.disableDocMan();

      itemblk4.addField("ITEM4_OBJID").setDbName("OBJID").setHidden();

      itemblk4.addField("ITEM4_OBJVERSION").setDbName("OBJVERSION").setHidden();

      itemblk4.addField("ITEM4_DOC_CLASS").setDbName("DOC_CLASS").setSize(20)
            .setMaxLength(12).setMandatory().setUpperCase().setReadOnly()
            .setInsertable().setDynamicLOV("DOC_CLASS").setLabel(
                  "DOCMAWDOCISSUEITEM4DOCCLASS: Doc Class");

      itemblk4.addField("ITEM4_DOC_NO").setDbName("DOC_NO").setSize(20)
            .setMaxLength(120).setMandatory().setUpperCase().setReadOnly()
            .setInsertable().setDynamicLOV("DOC_TITLE",
                  "ITEM4_DOC_CLASS DOC_CLASS").setCustomValidation(
                  "DOC_CLASS,DOC_NO", "ITEM4_SSUBDOCTITLE").setSecureHyperlink(
                  "DocIssue.page", "DOC_CLASS,DOC_NO,DOC_SHEET,DOC_REV"). // Bug
            // Id
            // 85223
            setLabel("DOCMAWDOCISSUEITEM4DOCNO: Doc No");

      itemblk4
            .addField("ITEM4_DOC_SHEET")
            .setDbName("DOC_SHEET")
            .setSize(20)
            .setMaxLength(10)
            .setMandatory()
            .setUpperCase()
            .setReadOnly()
            .setInsertable()
            .setDynamicLOV("DOC_ISSUE_LOV1",
                  "ITEM4_DOC_CLASS DOC_CLASS, ITEM4_DOC_NO DOC_NO")
            .setLOVProperty(
                  "TITLE",
                  mgr
                        .translate("DOCMAWDOCISSUESUBDOCSHEET1: List of Based on Sheets"))
            .setLabel("DOCMAWDOCISSUEITEM4DOCSHEET: Doc Sheet");

      itemblk4
            .addField("ITEM4_DOC_REV")
            .setDbName("DOC_REV")
            .setSize(20)
            .setMaxLength(6)
            .setMandatory()
            .setUpperCase()
            .setReadOnly()
            .setInsertable()
            .setDynamicLOV("DOC_ISSUE",
                  "ITEM4_DOC_CLASS DOC_CLASS, ITEM4_DOC_NO DOC_NO, ITEM4_DOC_SHEET DOC_SHEET")
            .setCustomValidation("DOC_CLASS,DOC_NO,DOC_SHEET,DOC_REV",
                  "ITEM4_NNOOFCHILDREN").setLabel(
                  "DOCMAWDOCISSUEITEM4DOCREV: Revision");

      itemblk4.addField("ITEM4_SSUBDOCTITLE").setSize(20).setMaxLength(80)
            .setReadOnly().setFunction(
                  "DOC_TITLE_API.Get_Title(:ITEM4_DOC_CLASS,:ITEM4_DOC_NO)")
            .setLabel("DOCMAWDOCISSUEITEM4SSUBDOCTITLE: Title");
      mgr.getASPField("ITEM4_DOC_NO").setValidation("ITEM4_SSUBDOCTITLE");

      itemblk4
            .addField("ITEMBLK4_STATE")
            .setSize(20)
            .setMaxLength(253)
            .setReadOnly()
            .setFunction(
                  "DOC_ISSUE_API.Get_State (:ITEM4_DOC_CLASS, :ITEM4_DOC_NO, :ITEM4_DOC_SHEET, :ITEM4_DOC_REV)")
            .setLabel("DOCMAWDOCISSUECONSISTSOFSTATE: Document Status");

      itemblk4
            .addField("ITEM4_NNOOFCHILDREN", "Number")
            .setSize(20)
            .setMaxLength(6)
            .setReadOnly()
            .setFunction(
                  "DOC_STRUCTURE_API.Number_Of_Children_(:ITEM4_DOC_CLASS, :ITEM4_DOC_NO, :ITEM4_DOC_SHEET, :ITEM4_DOC_REV)")
            .setLabel("DOCMAWDOCISSUEITEM4NNOOFCHILDREN: No of Child documents");
      mgr.getASPField("ITEM4_DOC_REV").setValidation("ITEM4_NNOOFCHILDREN");

      itemblk4.addField("WHERE_USED_RELATIVE_PATH").setDbName("RELATIVE_PATH")
            .setSize(40).setMaxLength(256).setLabel(
                  "DOCMAWDOCISSUERELATIVEPATH: Relative Path");

      itemblk4.addField("ITEM4_SUB_DOC_CLASS").setDbName("SUB_DOC_CLASS")
            .setHidden();

      itemblk4.addField("ITEM4_SUB_DOC_NO").setDbName("SUB_DOC_NO").setHidden();

      itemblk4.addField("ITEM4_SUB_DOC_SHEET").setDbName("SUB_DOC_SHEET")
            .setHidden();

      itemblk4.addField("ITEM4_SUB_DOC_REV").setDbName("SUB_DOC_REV")
            .setHidden();

      itemblk4.setView("DOC_STRUCTURE");
      itemblk4.defineCommand("DOC_STRUCTURE_API", "New__,Modify__,Remove__");
      itemblk4.setMasterBlock(headblk);

      itemset4 = itemblk4.getASPRowSet();

      itembar4 = mgr.newASPCommandBar(itemblk4);
      itembar4.defineCommand(itembar4.OKFIND, "okFindITEM4");
      itembar4.defineCommand(itembar4.COUNTFIND, "countFindITEM4");
      itembar4.defineCommand(itembar4.NEWROW, "newRowITEM4");
      itembar4.defineCommand(itembar4.DUPLICATEROW, "duplicateRowITEM4");
      itembar4.addCustomCommand("transferToDocInfoFromWhereUsed", mgr
            .translate("DOCMAWDOCISSUEDOCINFO: Document Info..."));

      itemtbl4 = mgr.newASPTable(itemblk4);
      itemtbl4.setTitle(mgr.translate("DOCMAWDOCISSUEDOCWHEUSED: Where Used"));

      itemlay4 = itemblk4.getASPBlockLayout();
      itemlay4.setDialogColumns(2);
      itemlay4.setDefaultLayoutMode(itemlay4.MULTIROW_LAYOUT);
      tabs = mgr.newASPTabContainer();    
      tabs.addTab(mgr.translate("DOCMAWDOCISSUECONSISTS: Consists Of"), "javascript:commandSet('MAIN.activateConsistsOf','')");
      tabs.addTab(mgr.translate("DOCMAWDOCISSUEWHEREUSED: Where Used"), "javascript:commandSet('MAIN.activateWhereUsed','')");
      tabs.setContainerWidth(700);      
      tabs.setLeftTabSpace(1);
      tabs.setContainerSpace(5);
      tabs.setTabWidth(100);
   }    
          
   public void adjust() throws FndException
   {
      super.adjust();
      // fill function body
      headbar.removeCustomCommand("activateConsistsOf");
      headbar.removeCustomCommand("activateWhereUsed");    
   }
   public void activateConsistsOf()
   {
      tabs.setActiveTab(1);
      okFindITEM3();
   }        

   public void activateWhereUsed()
   {
      tabs.setActiveTab(2);
      okFindITEM4();
   }
   public String  tabsFinish()
   {
      return tabs.showTabsFinish();
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "DOCRECIEVETRANSDESC: Doc Recieve Trans";
   }


   protected String getTitle()
   {
      return "DOCRECIEVETRANSTITLE: Doc Recieve Trans";
   }

   protected void printContents() throws FndException
   {
      super.printContents();
      ASPManager mgr = getASPManager();
      fmt     = mgr.newASPHTMLFormatter();       
      if (headlay.isVisible()){
         appendToHTML(headlay.show());
      } 
      if(headlay.isSingleLayout()||headlay.isCustomLayout())   {
         appendToHTML(tabs.showTabsInit());
         if (tabs.getActiveTab()== 1)
         {
            appendToHTML(itemlay3.show());  
         }  
         else if (tabs.getActiveTab()== 2)
         {
            appendToHTML(itemlay4.show());     
         }   
         appendToHTML(tabsFinish());                   
      }
   }
   
}
