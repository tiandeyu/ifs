/*
 *                 IFS Research & Development
 *
 *  This program is protected by copyright law and by international
 *  conventions. All licensing, renting, lending or copying (including
 *  for private use), and all other use of the program, which is not
 *  expressively permitted by IFS Research & Development (IFS), is a
 *  violation of the rights of IFS. Such violations will be reported to the
 *  appropriate authorities.
 *
 *  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
 *  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
 * ----------------------------------------------------------------------------
 * File                          :
 * Description                   :
 * Notes                         :
 * Other Programs Called :
 * ----------------------------------------------------------------------------
 * Modified    : Automatically generated by IFS/Design
 * ----------------------------------------------------------------------------
 */

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.docctw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import ifs.docmaw.DocmawConstants;
import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class DocDistributionCtl extends HzASPPageProviderWf
{
   
   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------
   
   public static boolean DEBUG = Util.isDebugEnabled("ifs.docctw.DocDistributionCtl");
   private final static String TRANSFER_PARAM_NAME = "__TRANSFER";
   private static int sub_lay_size = 200;
   
   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------
   
   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------
   
   private ASPBlock doc_distribution_files_blk;
   private ASPRowSet doc_distribution_files_set;
   private ASPCommandBar doc_distribution_files_bar;
   private ASPTable doc_distribution_files_tbl;
   private ASPBlockLayout doc_distribution_files_lay;
   
   private ASPBlock doc_distribution_depts_blk;
   private ASPRowSet doc_distribution_depts_set;
   private ASPCommandBar doc_distribution_depts_bar;
   private ASPTable doc_distribution_depts_tbl;
   private ASPBlockLayout doc_distribution_depts_lay;
   
   private ASPBlock doc_distribution_units_blk;
   private ASPRowSet doc_distribution_units_set;
   private ASPCommandBar doc_distribution_units_bar;
   private ASPTable doc_distribution_units_tbl;
   private ASPBlockLayout doc_distribution_units_lay;
   
   private ASPBlock doc_distribution_callback_blk;
   private ASPRowSet doc_distribution_callback_set;
   private ASPCommandBar doc_distribution_callback_bar;
   private ASPTable doc_distribution_callback_tbl;
   private ASPBlockLayout doc_distribution_callback_lay;
   
   private ASPBlock doc_distribution_hist_blk;
   private ASPRowSet doc_distribution_hist_set;
   private ASPCommandBar doc_distribution_hist_bar;
   private ASPTable doc_distribution_hist_tbl;
   private ASPBlockLayout doc_distribution_hist_lay;
   
   private ASPTabContainer tabs;
   
   
   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------
   
   public  DocDistributionCtl (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }
   
   public void run() throws FndException
   {
      super.run();
      ASPManager mgr = getASPManager();
      
      if (mgr.commandBarActivated())
         eval(mgr.commandBarFunction());
      else if (mgr.dataTransfered())
         okFind();
      else if (!mgr.isEmpty(mgr.getQueryStringValue("SEARCH")))
         okFind();
      else if (!mgr.isEmpty(mgr.getQueryStringValue("DIST_NO")))
         okFind();
      else if ("TRUE".equals(mgr.readValue("REFRESH_PARENT")))
         performRefreshParent();
      adjust();
      tabs.saveActiveTab();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------
   
   public void okFind() 
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      
      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if (mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      
      // Data isolation
      String tempPersonZones = mgr.getASPContext().findGlobal(
            ifs.genbaw.GenbawConstants.PERSON_ZONES);
      StringBuffer sb = new StringBuffer("(");
      if (!"()".equals(tempPersonZones)) {
         sb.append("(ZONE_NO IN " + tempPersonZones).append(")");
      } else {
         sb.append("(1=2)");
      }
      sb.append(")");
      q.addWhereCondition(sb.toString());
      
      q.setOrderByClause("TO_NUMBER(DIST_NO) DESC");
      mgr.querySubmit(trans, headblk);
      if (headset.countRows() == 0) 
      {
         mgr.showAlert("DOCDISTRIBUTIONCTLNODATA: No data found.");
         headset.clear();
      } 
      else 
      {
         eval(headset.syncItemSets());
         okFindITEM1();
      }
   }
   
   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      
      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      
      // Data isolation
      String tempPersonZones = mgr.getASPContext().findGlobal(
            ifs.genbaw.GenbawConstants.PERSON_ZONES);
      StringBuffer sb = new StringBuffer("(");
      if (!"()".equals(tempPersonZones)) {
         sb.append("(ZONE_NO IN " + tempPersonZones).append(")");
      } else {
         sb.append("(1=2)");
      }
      sb.append(")");
      q.addWhereCondition(sb.toString());
      
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }
   
   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;
      
      cmd = trans.addEmptyCommand("HEAD", "DOC_DISTRIBUTION_CTL_API.New__", headblk);
      cmd.setOption("ACTION", "PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }
   
   
   //-----------------------------------------------------------------------------
   //-----------------------  Item block cmd bar functions  ----------------------
   //-----------------------------------------------------------------------------
   
   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      
      if (headset.countRows() == 0)
         return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      
      q = trans.addQuery(doc_distribution_files_blk);
      q.addWhereCondition("DIST_NO = ?");
      q.addParameter("DIST_NO", headset.getValue("DIST_NO"));
      q.setOrderByClause("SEQ_NO");
      q.includeMeta("ALL");
      q.setBufferSize(sub_lay_size);
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans, doc_distribution_files_blk);
      headset.goTo(headrowno);
   }
   
   public void refreshITEM1()
   {
      ASPManager mgr = getASPManager();
      
      if (headset.countRows() == 0)
         return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      
      q = trans.addEmptyQuery(doc_distribution_files_blk);
      q.addWhereCondition("DIST_NO = ?");
      q.addParameter("DIST_NO", headset.getValue("DIST_NO"));
      q.setOrderByClause("SEQ_NO");
      q.includeMeta("ALL");
      q.setBufferSize(sub_lay_size);
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans, doc_distribution_files_blk);
      headset.goTo(headrowno);
   }
   
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;
      
      cmd = trans.addEmptyCommand("ITEM1","DOC_DISTRIBUTION_FILES_API.New__",doc_distribution_files_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_DIST_NO", headset.getValue("DIST_NO"));
      if (!mgr.isEmpty(headset.getValue("DIST_TYPE")))
      {
         cmd.setParameter("DOC_CLASS", headset.getValue("DIST_TYPE"));
      }
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      doc_distribution_files_set.addRow(data);
   }
   
   public void okFindITEM2()
   {
      ASPManager mgr = getASPManager();
      
      if (headset.countRows() == 0)
         return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      
      q = trans.addQuery(doc_distribution_depts_blk);
      q.addWhereCondition("DIST_NO = ?");
      q.addParameter("DIST_NO", headset.getValue("DIST_NO"));
      
      q.addWhereCondition("DOC_DISTRIBUTION_DEPTS_API.Can_Access_Record(DIST_NO,SEND_DEPT) = 'TRUE'");
      
      q.includeMeta("ALL");
      q.setBufferSize(sub_lay_size);
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,doc_distribution_depts_blk);
      headset.goTo(headrowno);
   }
   
   public void refreshITEM2()
   {
      ASPManager mgr = getASPManager();
      
      if (headset.countRows() == 0)
         return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      
      q = trans.addEmptyQuery(doc_distribution_depts_blk);
      q.addWhereCondition("DIST_NO = ?");
      q.addParameter("DIST_NO", headset.getValue("DIST_NO"));
      
      q.addWhereCondition("DOC_DISTRIBUTION_DEPTS_API.Can_Access_Record(DIST_NO,SEND_DEPT) = 'TRUE'");
      
      q.includeMeta("ALL");
      q.setBufferSize(sub_lay_size);
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,doc_distribution_depts_blk);
      headset.goTo(headrowno);
   }
   
   public void newRowITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;
      
      cmd = trans.addEmptyCommand("ITEM2","DOC_DISTRIBUTION_DEPTS_API.New__",doc_distribution_depts_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM1_DIST_NO", headset.getValue("DIST_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM2/DATA");
      doc_distribution_depts_set.addRow(data);
   }
   
   public void okFindITEM3()
   {
      ASPManager mgr = getASPManager();
      
      if (headset.countRows() == 0)
         return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      
      q = trans.addQuery(doc_distribution_units_blk);
      q.addWhereCondition("DIST_NO = ?");
      q.addParameter("DIST_NO", headset.getValue("DIST_NO"));
      
      q.addWhereCondition("DOC_DISTRIBUTION_UNITS_API.Can_Access_Record(DIST_NO,SEND_UNIT) = 'TRUE'");
      
      q.includeMeta("ALL");
      q.setBufferSize(sub_lay_size);
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,doc_distribution_units_blk);
      headset.goTo(headrowno);
   }
   
   public void refreshITEM3()
   {
      ASPManager mgr = getASPManager();
      
      if (headset.countRows() == 0)
         return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      
      q = trans.addEmptyQuery(doc_distribution_units_blk);
      q.addWhereCondition("DIST_NO = ?");
      q.addParameter("DIST_NO", headset.getValue("DIST_NO"));
      
      q.addWhereCondition("DOC_DISTRIBUTION_UNITS_API.Can_Access_Record(DIST_NO,SEND_UNIT) = 'TRUE'");
      
      q.includeMeta("ALL");
      q.setBufferSize(sub_lay_size);
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,doc_distribution_units_blk);
      headset.goTo(headrowno);
   }
   
   public void newRowITEM3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;
      
      cmd = trans.addEmptyCommand("ITEM3","DOC_DISTRIBUTION_UNITS_API.New__",doc_distribution_units_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM2_DIST_NO", headset.getValue("DIST_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM3/DATA");
      doc_distribution_units_set.addRow(data);
   }
   
   public void okFindITEM4()
   {
      ASPManager mgr = getASPManager();
      
      if (headset.countRows() == 0)
         return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      
      q = trans.addQuery(doc_distribution_callback_blk);
      // String dist_no = headset.getValue("DIST_NO");
      
      /*
      q.addWhereCondition("EXISTS (SELECT 1 FROM DOC_DISTRIBUTION_FILES_INFO ddf " + 
            "WHERE DOC_DISTRIBUTION_CALLBACK.doc_class = ddf.doc_class " + 
            "AND   DOC_DISTRIBUTION_CALLBACK.doc_no = ddf.doc_no" +
            "AND   DOC_DISTRIBUTION_CALLBACK.doc_sheet = ddf.doc_sheet" +
            "AND   DOC_DISTRIBUTION_CALLBACK.rev_no < ddf.rev_no" +
            "AND   ddf.dist_no = ?)");
      q.addWhereCondition("EXISTS (SELECT 1 FROM DOC_DISTRIBUTION_CELLS ddc " + 
            "WHERE DOC_DISTRIBUTION_CALLBACK.callback_cell = ddc.send_cell " +
            "AND   ddc.dist_no = ?)");
      */
      
      q.addWhereCondition("DIST_NO = ?");
      q.addParameter("DIST_NO", headset.getValue("DIST_NO"));
      q.setOrderByClause("SEQ_NO");
      q.includeMeta("ALL");
      q.setBufferSize(sub_lay_size);
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,doc_distribution_callback_blk);
      headset.goTo(headrowno);
   }
   
   public void refreshITEM4()
   {
      ASPManager mgr = getASPManager();
      
      if (headset.countRows() == 0)
         return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      
      q = trans.addEmptyQuery(doc_distribution_callback_blk);
      q.addWhereCondition("DIST_NO = ?");
      q.addParameter("DIST_NO", headset.getValue("DIST_NO"));
      q.setOrderByClause("SEQ_NO");
      q.includeMeta("ALL");
      q.setBufferSize(sub_lay_size);
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,doc_distribution_callback_blk);
      headset.goTo(headrowno);
   }
   
   public void countFindITEM4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      
      int headrowno = headset.getCurrentRowNo();
      
      q = trans.addQuery(doc_distribution_callback_blk);
      q.setSelectList("to_char(count(*)) N");
      q.addWhereCondition("DIST_NO = ?");
      q.addParameter("DIST_NO", headset.getRow().getValue("DIST_NO"));
      mgr.submit(trans);
      doc_distribution_callback_lay.setCountValue(toInt(doc_distribution_callback_set.getRow().getValue("N")));
      doc_distribution_callback_set.clear();
      headset.goTo(headrowno);
   }
   
   public void okFindITEM5()
   {
      ASPManager mgr = getASPManager();
      
      if (headset.countRows() == 0)
         return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      
      q = trans.addQuery(doc_distribution_hist_blk);
      q.addWhereCondition("DIST_NO = ?");
      q.addParameter("DIST_NO", headset.getValue("DIST_NO"));
      q.setOrderByClause("HIST_NO DESC");
      q.includeMeta("ALL");
      q.setBufferSize(sub_lay_size);
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,doc_distribution_hist_blk);
      headset.goTo(headrowno);
   }
   
   public void refreshITEM5()
   {
      ASPManager mgr = getASPManager();
      
      if (headset.countRows() == 0)
         return;
      
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;
      
      q = trans.addEmptyQuery(doc_distribution_hist_blk);
      q.addWhereCondition("DIST_NO = ?");
      q.addParameter("DIST_NO", headset.getValue("DIST_NO"));
      q.setOrderByClause("HIST_NO DESC");
      q.includeMeta("ALL");
      q.setBufferSize(sub_lay_size);
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,doc_distribution_hist_blk);
      headset.goTo(headrowno);
   }
   
   public void countFindITEM5()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      
      int headrowno = headset.getCurrentRowNo();
      
      q = trans.addQuery(doc_distribution_hist_blk);
      q.setSelectList("to_char(count(*)) N");
      q.addWhereCondition("DIST_NO = ?");
      q.addParameter("DIST_NO", headset.getRow().getValue("DIST_NO"));
      mgr.submit(trans);
      doc_distribution_hist_lay.setCountValue(toInt(doc_distribution_hist_set.getRow().getValue("N")));
      doc_distribution_hist_set.clear();
      headset.goTo(headrowno);
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Perform Header and Item functions  ---------------------------
   //-----------------------------------------------------------------------------
   
   
   public void  performHEAD( String command)
   {
      int currow;
      
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      
      
      currow = headset.getCurrentRowNo();
      if(headlay.isMultirowLayout())
         headset.storeSelections();
      else
         headset.selectRow();
      headset.markSelectedRows( command );
      mgr.submit(trans);
      headset.goTo(currow);
      refreshActiveTab();
   }
   
   public void  send()
   {
      performHEAD( "Send__" );
   }
   public void  reverse()
   {
      performHEAD( "Reverse__" );
   }
   public void  untread()
   {
      performHEAD( "Untread__" );
   }
   public void  receive()
   {
      performHEAD( "Receive__" );
   }
   public void  dispose()
   {
      performHEAD( "Dispose__" );
   }
   public void  close()
   {
      performHEAD( "Close__" );
   }
   
   //
   // Document Distribution Department state
   //
   
   public void performDEPT(String command) 
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      
      int currow = headset.getCurrentRowNo();
      if (doc_distribution_depts_lay.isMultirowLayout())
         doc_distribution_depts_set.storeSelections();
      else
         doc_distribution_depts_set.selectRow();
      doc_distribution_depts_set.markSelectedRows(command);
      mgr.submit(trans);
      headset.goTo(currow);
      refreshHeadset(false);
   }
   
   public void deptReverse() 
   {
      performDEPT("Reverse__");
   }
   
   public void deptUntread() 
   {
      performDEPT("Untread__");
   }
   
   public void deptReceive() 
   {
      performDEPT("Receive__");
   }
   
   public void deptDispose() 
   {
      performDEPT("Dispose__");
   }
   
   public void deptClose() 
   {
      performDEPT("Close__");
   }
   
   //
   // Document Distribution Units state
   //
   
   public void performUNIT(String command) 
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      
      int currow = headset.getCurrentRowNo();
      if (doc_distribution_units_lay.isMultirowLayout())
         doc_distribution_units_set.storeSelections();
      else
         doc_distribution_units_set.selectRow();
      doc_distribution_units_set.markSelectedRows(command);
      mgr.submit(trans);
      headset.goTo(currow);
      refreshHeadset(false);
   }
   
   public void unitReverse() 
   {
      performUNIT("Reverse__");
   }
   
   public void unitUntread() 
   {
      performUNIT("Untread__");
   }
   
   public void unitReceive() 
   {
      performUNIT("Receive__");
   }
   
   public void unitDispose() 
   {
      performUNIT("Dispose__");
   }
   
   public void unitClose() 
   {
      performUNIT("Close__");
   }
   
   // -----------------------------------------------------------------------------
   // -------------------------- User functions -------------------------------
   // -----------------------------------------------------------------------------
   
   public void referenceTemplate() throws FndException
   {
      // store selections
      ASPManager mgr = getASPManager();
      ASPContext ctx = mgr.getASPContext();
      headset.store();
      
      ASPBuffer selected_fields = headset.getSelectedRows("DIST_NO,DIST_TYPE");
      
      // save operation
      ctx.writeValue("OPERATION", "CREATE_DEPT");
      
      callNewWindow("DocDistTemplDlg.page", selected_fields);
   }
   
   public void createTemplate() throws FndException
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      
      // store selections
      headset.store();
      
      ASPBuffer buff = headset.getSelectedRows();
      int contRows = headset.countSelectedRows();
      if (contRows == 0)
      {
         mgr.showAlert(mgr.translate("DOCCTWDOCDISTCRETEMPLNOREC: You must select a document distribution record."));
      }
      else
      {
         int i = 0;
         ASPBuffer currRow = buff.getBufferAt(i);
         String dist_no = mgr.isEmpty(currRow.getValue("DIST_NO")) ? "" : currRow.getValue("DIST_NO");
         if (!mgr.isEmpty(dist_no))
         {
            ASPCommand cmd = trans.addCustomCommand("CREATETEMPL" + i, "DOC_DISTRIBUTION_CTL_API.New_Template");
            cmd.addParameter("DIST_NO", dist_no);
            cmd.addParameter("CRED_DIST_NO", "S", "OUT", "");
            trans = mgr.perform(trans);
            String cred_dist_no = trans.getValue("CREATETEMPL" + i + "/DATA/CRED_DIST_NO");
            if (mgr.isEmpty(cred_dist_no))
               mgr.showAlert(mgr.translate("DOCCTWDOCDISTCRETEMPLERR: Create document distribution template failed."));
            else
            {
               mgr.showAlert(mgr.translate("DOCCTWDOCDISTCRETEMPLSUCC: Create document distribution template &1 successfully.", cred_dist_no));
               mgr.redirectTo("DocDistributionTempl.page?DIST_NO=" + mgr.URLEncode(cred_dist_no));
            }
         }
      }
   }
   
   private void callNewWindow(String transfer_page, ASPBuffer buff) throws FndException 
   {
      ASPManager mgr = getASPManager();
      String serialized_data = mgr.pack(buff);
      String url = transfer_page + "?" + TRANSFER_PARAM_NAME + "=" + serialized_data;
      appendDirtyJavaScript("showNewBrowser_('"+ url + "', 550, 550, 'YES'); \n");
   }
   
   public void performRefreshParent() 
   {
      ASPManager mgr = getASPManager();
      ASPContext ctx = mgr.getASPContext();
      
      //
      // Perform any necessary actions before refreshing
      //
      
      if ("DOC_DISTRIBUTION_FILES_API".equals(mgr.readValue("REFRESH_CHILD"))) 
      {
         refreshHeadset(false);
         activateFiles();
      }
      else if ("DOC_DISTRIBUTION_DEPTS_API".equals(mgr.readValue("REFRESH_CHILD")))
      {
         refreshHeadset(false);
         activateDepts();
      }
      else if ("DOC_DISTRIBUTION_UNITS_API".equals(mgr.readValue("REFRESH_CHILD")))
      {
         refreshHeadset(false);
         activateUnits();
      }
   }
   
   private void refreshHeadset(boolean refresh_one) 
   {
      /*ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      int row_no = headset.getCurrentRowNo();
      
      ASPQuery q = trans.addEmptyQuery(headblk);
      
      q.addOrCondition(headset.getRows("DIST_NO"));
      q.setOrderByClause("TO_NUMBER(DIST_NO) DESC");
      
      q.includeMeta("ALL");
      mgr.querySubmit(trans, headblk);
      headset.goTo(row_no);*/
      
      if (headset.countRows() > 0)
         headset.refreshRow();
      
      if (refresh_one)
         refreshActiveTab();
   }
   
   private void refreshActiveTab()
   {
      switch(tabs.getActiveTab())
      {
      case 1:
         refreshITEM1();
         break;
      case 2:
         refreshITEM2();
         break;
      case 3:
         refreshITEM3();
         break;
      case 4:
         refreshITEM4();
         break;
      case 5:
         refreshITEM5();
         break;
      default:
         break;
      }
   }
   
   public void transToDocIssueFiles()
   {
      ASPManager mgr = getASPManager();
      
      headset.store();		
      ASPBuffer buff = headset.getSelectedRows("DIST_TYPE,DIST_SUB_TYPE");
      String dist_type = buff.getValue("DATA/DIST_TYPE");
      String dist_sub_type = buff.getValue("DATA/DIST_SUB_TYPE");
      String url = "../docmaw/" + DocmawConstants.getCorrespondingDocIssuePage(dist_type, dist_sub_type);
      
      if (doc_distribution_files_lay.isMultirowLayout())
         doc_distribution_files_set.storeSelections();
      else
         doc_distribution_files_set.selectRow();
      
      ASPBuffer keys = doc_distribution_files_set.getSelectedRows("DOC_CLASS,DOC_NO,DOC_SHEET,DOC_REV");
      
      if (keys.countItems() > 0) 
      {
         mgr.transferDataTo(url, keys);
      } 
      else 
      {
         mgr.showAlert(mgr.translate("DOCDISTRIBUTIONCTLNORECSEL: No records selected!"));
      }
   }
   
   public void transToDocIssueCallback()
   {
      ASPManager mgr = getASPManager();
      
      headset.store();		
      ASPBuffer buff = headset.getSelectedRows("DIST_TYPE");
      String dist_type = buff.getValue("DATA/DIST_TYPE");
      String url = "../docmaw/" + DocmawConstants.getCorrespondingDocIssuePage(dist_type, null);
      
      if (doc_distribution_callback_lay.isMultirowLayout())
         doc_distribution_callback_set.storeSelections();
      else
         doc_distribution_callback_set.selectRow();
      
      ASPBuffer keys = doc_distribution_callback_set.getSelectedRows("ITEM3_DOC_CLASS,ITEM3_DOC_NO,ITEM3_DOC_SHEET,ITEM3_DOC_REV");
      
      if (keys.countItems() > 0) 
      {
         mgr.transferDataTo(url, keys);
      } 
      else 
      {
         mgr.showAlert(mgr.translate("DOCDISTRIBUTIONCTLNORECSEL: No records selected!"));
      }
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------
   
   public void  preDefine()
   {
      ASPManager mgr = getASPManager();
      
      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
      setHidden();
      
      headblk.addField("OBJVERSION").
      setHidden();
      
      headblk.addField("OBJSTATE").
      setHidden();
      
      headblk.addField("OBJEVENTS").
      setHidden();
      
      headblk.addField("DIST_NO").
      setReadOnly().
      setHidden().
      setDefaultNotVisible().
      setLabel("DOCDISTRIBUTIONCTLDISTNO: Dist No").
      setSize(10);
      
      // line 1
      headblk.addField("DIST_SEQ").
      unsetInsertable().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONCTLDISTSEQ: Dist Seq").
      setSize(20);
      
      headblk.addField("PROJ_NO").
      unsetInsertable().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONCTLPROJNO: Proj No").
      setDynamicLOV("GENERAL_PROJECT").
      setSize(10);
      
      headblk.addField("PROJ_NAME").
      setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC(:PROJ_NO)").
      setLabel("DOCDISTRIBUTIONCTLPROJNAME: Proj Name").
      setReadOnly().
      setSize(10);
      mgr.getASPField("PROJ_NO").setValidation("PROJ_NAME");
      
      // line 2
      headblk.addField("DIST_TYPE").
      setInsertable().
      setMandatory().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONCTLDISTTYPE: Dist Type").
      setDynamicLOV("DOC_CLASS").
      setLOVProperty("WHERE", "COMP_DOC='TRUE'").
      setSize(10);
      
      headblk.addField("DIST_TYPE_NAME").
      setLabel("DOCDISTRIBUTIONCTLDISTTYPENAME: Dist Type Name").
      setFunction("DOC_CLASS_API.Get_Name(:DIST_TYPE)").
      setReadOnly().
      setSize(10);
      mgr.getASPField("DIST_TYPE").setValidation("DIST_TYPE_NAME");
      
      headblk.addField("DIST_SUB_TYPE").
      setInsertable().
      setLabel("DOCDISTRIBUTIONCTLDISTSUBTYPE: Dist Sub Type").
      setDynamicLOV("DOC_SUB_CLASS", "DIST_TYPE DOC_CLASS").
      setSize(10);
      
      headblk.addField("DIST_SUB_TYPE_NAME").
      setLabel("DOCDISTRIBUTIONCTLDISTSUBTYPENAME: Dist Sub Type Name").
      setFunction("DOC_SUB_CLASS_API.Get_Sub_Class_Name(:DIST_TYPE,:DIST_SUB_TYPE)").
      setReadOnly().
      setSize(10);
      mgr.getASPField("DIST_SUB_TYPE").setValidation("DIST_SUB_TYPE_NAME");
      
      // line 3
      headblk.addField("UNDERTAKER").
      unsetInsertable().
      setReadOnly().
      setDynamicLOV("PERSON_INFO_LOV").
      setLabel("DOCDISTRIBUTIONCTLUNDERTAKER: Undertaker").
      setSize(10);
      
      headblk.addField("UNDERTAKER_NAME").
      setLabel("DOCDISTRIBUTIONCTLUNDERTAKERNAME: Undertaker Name").
      setFunction("PERSON_INFO_API.Get_Name(:UNDERTAKER)").
      setReadOnly().
      setSize(10);
      mgr.getASPField("UNDERTAKER").setValidation("UNDERTAKER_NAME");
      
      headblk.addField("DIST_DATE","Date").
      unsetInsertable().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONCTLDISTDATE: Dist Date").
      setSize(10);
      
      headblk.addField("APPROVER").
      setInsertable().
      setLabel("DOCDISTRIBUTIONCTLAPPROVER: Approver").
      setDynamicLOV("PERSON_INFO_LOV").
      setSize(10);
      
      headblk.addField("APPROVER_NAME").
      setLabel("DOCDISTRIBUTIONCTLAPPROVERNAME: Approver Name").
      setFunction("PERSON_INFO_API.Get_Name(:APPROVER)").
      setReadOnly().
      setSize(10);
      mgr.getASPField("APPROVER").setValidation("APPROVER_NAME");
      
      headblk.addField("APPROVAL_DATE","Date").
      setInsertable().
      setLabel("DOCDISTRIBUTIONCTLAPPROVALDATE: Approval Date").
      setSize(10);
      
      headblk.addField("STATE").
      setLabel("DOCDISTRIBUTIONCTLSTATE: State").
      setReadOnly().
      setSize(10);
      
      headblk.addField("NOTE").
      setInsertable().
      // setHeight(3).
      setLabel("DOCDISTRIBUTIONCTLNOTE: Note").
      setSize(30);
      
      headblk.setView("DOC_DISTRIBUTION_CTL");
      headblk.defineCommand("DOC_DISTRIBUTION_CTL_API","New__,Modify__,Remove__,Send__,Reverse__,Untread__,Receive__,Dispose__,Close__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addSecureCustomCommand("CreateFile", "DOCDISTRIBUTIONCTLCREATEFILE: Create File...", "DOC_DISTRIBUTION_FILES_API.CREATE_FILE", "../common/images/toolbar/" + mgr.getLanguageCode() + "/addDocument.gif", true);
      headbar.setCmdProperty("CreateFile", headbar.CMD_PRO_VIEW, "DOC_ISSUE_LOV");
      headbar.setCmdProperty("CreateFile", headbar.CMD_PRO_VIEW_PARAMS, "DIST_TYPE DOC_CLASS,DIST_SUB_TYPE SUB_CLASS");
      headbar.setCmdProperty("CreateFile", headbar.CMD_PRO_PARPA, "DIST_NO");
      headbar.setCmdProperty("CreateFile", headbar.CMD_PRO_FIEPA, "DOC_CLASS,DOC_NO,DOC_SHEET,DOC_REV");
      headbar.setCmdProperty("CreateFile", headbar.CMD_PRO_TARG_FIE, "DOC_CLASS,DOC_NO,DOC_SHEET,DOC_REV");
      headbar.setCmdProperty("CreateFile", headbar.CMD_PRO_TARG_PKG, "DOC_DISTRIBUTION_FILES_API");
      headbar.setCmdProperty("CreateFile", headbar.CMD_PRO_TARG_FUN, "CREATE_FILE");
      headbar.setCmdProperty("CreateFile", headbar.CMD_PRO_ADD_TAR_VIEW, "DOC_DISTRIBUTION_FILES_INFO");
      headbar.removeFromMultirowAction("CreateFile");
      
      headbar.addSecureCustomCommand("CreateDept", "DOCDISTRIBUTIONCTLCREATEDEPT: Create Dept...", "DOC_DISTRIBUTION_DEPTS_API.NEW_DIST_DEPT", "../common/images/toolbar/" + mgr.getLanguageCode() + "/addDepartment.gif", true);
      headbar.setCmdProperty("CreateDept", headbar.CMD_PRO_VIEW, "GENERAL_DEPARTMENT_CU_LOV");
      headbar.setCmdProperty("CreateDept", headbar.CMD_PRO_PARPA, "DIST_NO");
      headbar.setCmdProperty("CreateDept", headbar.CMD_PRO_FIEPA, "ORG_NO");
      headbar.setCmdProperty("CreateDept", headbar.CMD_PRO_TARG_FIE, "SEND_DEPT");
      headbar.setCmdProperty("CreateDept", headbar.CMD_PRO_TARG_PKG, "DOC_DISTRIBUTION_DEPTS_API");
      headbar.setCmdProperty("CreateDept", headbar.CMD_PRO_TARG_FUN, "NEW_DIST_DEPT");
      headbar.setCmdProperty("CreateDept", headbar.CMD_PRO_ADD_TAR_VIEW, "DOC_DISTRIBUTION_DEPTS");
      headbar.removeFromMultirowAction("CreateDept");
      
      headbar.addSecureCustomCommand("CreateUnit", "DOCDISTRIBUTIONCTLCREATEUNIT: Create Unit...", "DOC_DISTRIBUTION_UNITS_API.NEW_DIST_UNIT", "../common/images/toolbar/" + mgr.getLanguageCode() + "/addZone.gif", true);
      headbar.setCmdProperty("CreateUnit", headbar.CMD_PRO_VIEW, "GENERAL_ZONE_LOV");
      headbar.setCmdProperty("CreateUnit", headbar.CMD_PRO_PARPA, "DIST_NO");
      headbar.setCmdProperty("CreateUnit", headbar.CMD_PRO_FIEPA, "ZONE_NO");
      headbar.setCmdProperty("CreateUnit", headbar.CMD_PRO_TARG_FIE, "SEND_UNIT");
      headbar.setCmdProperty("CreateUnit", headbar.CMD_PRO_TARG_PKG, "DOC_DISTRIBUTION_UNITS_API");
      headbar.setCmdProperty("CreateUnit", headbar.CMD_PRO_TARG_FUN, "NEW_DIST_UNIT");
      headbar.setCmdProperty("CreateUnit", headbar.CMD_PRO_ADD_TAR_VIEW, "DOC_DISTRIBUTION_UNITS");
      headbar.removeFromMultirowAction("CreateUnit");
      
      headbar.addCustomCommandSeparator();
      headbar.addSecureCustomCommand("ReferenceTemplate", "DOCDISTRIBUTIONCTLREFTEMP: Reference Template...", "DOC_DISTRIBUTION_CTL_API.Ref_Template");
      headbar.addSecureCustomCommand("CreateTemplate", "DOCDISTRIBUTIONCTLCREATETEMP: Create Template...", "DOC_DISTRIBUTION_CTL_API.New_Template");
      headbar.addCustomCommandSeparator();
      
      headbar.addSecureCustomCommand("Send", "DOCDISTRIBUTIONCTLSEND: Send Doc Distribution",          "DOC_DISTRIBUTION_CTL_API.Promote_To_Send__");
      headbar.addSecureCustomCommand("Receive", "DOCDISTRIBUTIONCTLRECEIVE: Receive Doc Distribution", "DOC_DISTRIBUTION_CTL_API.Promote_To_Receive__");
      headbar.addSecureCustomCommand("Dispose", "DOCDISTRIBUTIONCTLDISPOSE: Dispose Doc Distribution", "DOC_DISTRIBUTION_CTL_API.Promote_To_Dispose__");
      headbar.addSecureCustomCommand("Close", "DOCDISTRIBUTIONCTLCLOSE: Close Doc Distribution",       "DOC_DISTRIBUTION_CTL_API.Promote_To_Close__");
      headbar.addSecureCustomCommand("Untread", "DOCDISTRIBUTIONCTLUNTREAD: Untread Doc Distribution", "DOC_DISTRIBUTION_CTL_API.Promote_To_Untread__");
      headbar.addSecureCustomCommand("Reverse", "DOCDISTRIBUTIONCTLREVERSE: Reverse Doc Distribution", "DOC_DISTRIBUTION_CTL_API.Promote_To_Reverse__");
      
      headbar.addCommandValidConditions("Send",		"OBJSTATE",		"Enable",	"Initialization");
      headbar.addCommandValidConditions("Receive",	"OBJSTATE",		"Enable",	"DocSend");
      headbar.addCommandValidConditions("Dispose",	"OBJSTATE",		"Enable",	"Received");
      headbar.addCommandValidConditions("Close",	"OBJSTATE",		"Enable",	"Received;Disposing");
      headbar.addCommandValidConditions("Untread",	"OBJSTATE",		"Disable",	"Initialization;Closed");
      headbar.addCommandValidConditions("Reverse",	"OBJSTATE",		"Enable",	"Disposing;Closed");
      
      headbar.addCommandValidConditions("CreateFile",       "OBJSTATE", "Enable",   "Initialization");
      headbar.addCommandValidConditions("CreateDept",       "OBJSTATE", "Enable",   "Initialization");
      headbar.addCommandValidConditions("CreateUnit",       "OBJSTATE", "Enable",   "Initialization");
      headbar.addCommandValidConditions("ReferenceTemplate","OBJSTATE", "Enable",   "Initialization");
      
      headbar.removeFromMultirowAction("CreateFile");
      headbar.removeFromMultirowAction("CreateDept");
      headbar.removeFromMultirowAction("CreateUnit");
      headbar.removeFromMultirowAction("ReferenceTemplate");
      headbar.removeFromMultirowAction("CreateTemplate");
      
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("DOCDISTRIBUTIONCTLTBLHEAD: Doc Distribution Ctls");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.SINGLE_LAYOUT);
      // Single field, no label
      headlay.setSimple("UNDERTAKER_NAME");
      headlay.setSimple("DIST_TYPE_NAME");
      headlay.setSimple("DIST_SUB_TYPE_NAME");
      headlay.setSimple("PROJ_NAME");
      headlay.setSimple("APPROVER_NAME");
      
      // Tab commands
      headbar.addCustomCommand("activateFiles", "Files");
      headbar.addCustomCommand("activateDepts", "Depts");
      headbar.addCustomCommand("activateUnits", "Units");
      headbar.addCustomCommand("activateCallback", "Callback");
      headbar.addCustomCommand("activateHistory", "History");
      
      //
      // Files list
      //
      
      doc_distribution_files_blk = mgr.newASPBlock("ITEM1");
      doc_distribution_files_blk.addField("ITEM0_OBJID").
      setHidden().
      setDbName("OBJID");
      
      doc_distribution_files_blk.addField("ITEM0_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      
      doc_distribution_files_blk.addField("ITEM0_DIST_NO").
      setDbName("DIST_NO").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("DOCDISTRIBUTIONFILESITEM0DISTNO: Dist No").
      setSize(20);
      
      doc_distribution_files_blk.addField("SEQ_NO","Number").
      setReadOnly().
      setHidden().
      setLabel("DOCDISTRIBUTIONFILESSEQNO: Seq No").
      setSize(10);
      
      doc_distribution_files_blk.addField("VIEW_FILE").
      setReadOnly().
      unsetQueryable().
      setFunction("''").
      setSize(10).
      setLabel("DOCDISTRIBUTIONFILESVIEWFILE: View File").
      setHyperlink("../docmaw/EdmMacro.page?PROCESS_DB=VIEW&DOC_TYPE=ORIGINAL", "DOC_CLASS,DOC_NO,DOC_SHEET,DOC_REV", "NEWWIN").
      setAsImageField();
      
      doc_distribution_files_blk.addField("IS_ELE_DOC").
      // setCheckBox("FALSE,TRUE").
      setFunction("EDM_FILE_API.Have_Edm_File(:DOC_CLASS,:DOC_NO,:DOC_SHEET,:DOC_REV)").
      setHidden().
      setLabel("DOCDISTRIBUTIONFILESISELEDOC: Is Ele Doc").
      setSize(5);
      
      doc_distribution_files_blk.addField("INNER_DOC_CODE").
      unsetInsertable().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONFILESINNERDOCCODE: Inner Doc Code").
      setSize(20);
      
      doc_distribution_files_blk.addField("DOC_CODE").
      unsetInsertable().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONFILESDOCCODE: Doc Code").
      setSize(20);
      
      doc_distribution_files_blk.addField("REV_TITLE").
      setLabel("DOCDISTRIBUTIONFILESREVTITLE: Rev Title").
      // setHyperlink("../docmaw/EdmMacro.page?PROCESS_DB=VIEW&DOC_TYPE=ORIGINAL", "DOC_CLASS,DOC_NO,DOC_SHEET,DOC_REV", "NEWWIN").
      setReadOnly().
      setSize(50);
      
      doc_distribution_files_blk.addField("PAGES", "Number").
      unsetInsertable().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONFILESPAGES: Pages").
      setSize(10);
      
      doc_distribution_files_blk.addField("DOC_REV").
      setLabel("DOCDISTRIBUTIONFILESDOCREV: Doc Rev").
      setInsertable().
      setMandatory().
      setUpperCase().
      setDynamicLOV("DOC_ISSUE", "DOC_CLASS,DOC_NO,DOC_SHEET").
      setSize(10).
      setMaxLength(6);
      
      doc_distribution_files_blk.addField("DOC_STATE").
      enumerateValues("Doc_Issue_State_API").
      setSelectBox().
      unsetInsertable().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONFILESDOCSTATE: Doc State").
      setSize(10);
      
      doc_distribution_files_blk.addField("ITEM0_NOTE").
      setDbName("NOTE").
      setInsertable().
      setHeight(3).
      setLabel("DOCDISTRIBUTIONFILESITEM0NOTE: Note").
      setSize(50);
      
      doc_distribution_files_blk.addField("DOC_CLASS").
      setLabel("DOCDISTRIBUTIONFILESDOCCLASS: Doc Class").
      setInsertable().
      setMandatory().
      setUpperCase().
      setHidden().
      setDynamicLOV("DOC_CLASS").
      setSize(10).
      setMaxLength(12);
      
      doc_distribution_files_blk.addField("DOC_NO").
      setLabel("DOCDISTRIBUTIONFILESDOCNO: Doc No").
      setInsertable().
      setMandatory().
      setUpperCase().
      setHidden().
      setDynamicLOV("DOC_TITLE","DOC_CLASS").
      setHyperlink("../docmaw/DocIssue.page", "DOC_CLASS,DOC_NO,DOC_SHEET,DOC_REV").
      setSize(30).
      setMaxLength(120);
      
      doc_distribution_files_blk.addField("DOC_SHEET").
      setLabel("DOCDISTRIBUTIONFILESDOCSHEET: Doc Sheet").
      setInsertable().
      setMandatory().
      setUpperCase().
      setHidden().
      setDynamicLOV("DOC_ISSUE_LOV1", "DOC_CLASS,DOC_NO").
      setSize(10).
      setMaxLength(10);
      
      doc_distribution_files_blk.setView("DOC_DISTRIBUTION_FILES_INFO");
      doc_distribution_files_blk.defineCommand("DOC_DISTRIBUTION_FILES_API", "Remove__");
      doc_distribution_files_blk.setMasterBlock(headblk);
      doc_distribution_files_set = doc_distribution_files_blk.getASPRowSet();
      doc_distribution_files_bar = mgr.newASPCommandBar(doc_distribution_files_blk);
      
      doc_distribution_files_bar.enableMultirowAction();
      
      doc_distribution_files_bar.defineCommand(doc_distribution_files_bar.OKFIND, "okFindITEM1");
      doc_distribution_files_bar.defineCommand(doc_distribution_files_bar.NEWROW, "newRowITEM1");
      
      // View document issue menu
      doc_distribution_files_bar.addCustomCommand("transToDocIssueFiles", mgr.translate("DOCDISTRIBUTIONCTLDOCISSUEFILES: Document Info..."));
      
      doc_distribution_files_tbl = mgr.newASPTable(doc_distribution_files_blk);
      doc_distribution_files_tbl.setTitle("DOCDISTRIBUTIONFILESITEMHEAD1: Files");
      doc_distribution_files_tbl.enableRowSelect();
      doc_distribution_files_tbl.setWrap();
      doc_distribution_files_lay = doc_distribution_files_blk.getASPBlockLayout();
      doc_distribution_files_lay.setDefaultLayoutMode(doc_distribution_files_lay.MULTIROW_LAYOUT);
      
      //
      // Send Department List
      //
      
      doc_distribution_depts_blk = mgr.newASPBlock("ITEM2");
      doc_distribution_depts_blk.addField("ITEM1_OBJID").
      setHidden().
      setDbName("OBJID");
      
      doc_distribution_depts_blk.addField("ITEM1_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      
      doc_distribution_depts_blk.addField("ITEM1_OBJSTATE").
      setHidden().
      setDbName("OBJSTATE");
      
      doc_distribution_depts_blk.addField("ITEM1_OBJEVENTS").
      setHidden().
      setDbName("OBJEVENTS");
      
      doc_distribution_depts_blk.addField("ITEM1_DIST_NO").
      setDbName("DIST_NO").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("DOCDISTRIBUTIONDEPTSITEM1DISTNO: Dist No").
      setSize(20);
      
      doc_distribution_depts_blk.addField("SEND_DEPT").
      setMandatory().
      setInsertable().
      setReadOnly().
      setDynamicLOV("GENERAL_DEPARTMENT_CU_LOV").
      setLabel("DOCDISTRIBUTIONDEPTSSENDDEPTNO: Send Dept").
      setSize(10);
      
      doc_distribution_depts_blk.addField("SEND_DEPT_NAME").
      setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc(:SEND_DEPT)").
      setLabel("DOCDISTRIBUTIONDEPTSSENDDEPTNAME: Send Dept Name").
      setReadOnly().
      setSize(20);
      mgr.getASPField("SEND_DEPT").setValidation("SEND_DEPT_NAME");
      
      doc_distribution_depts_blk.addField("PAPER_QTY", "Number").
      unsetInsertable().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONDEPTSPAPERQTY: Paper Qty").
      setSize(10);
      
      doc_distribution_depts_blk.addField("ELEC_QTY", "Number").
      setInsertable().
      setLabel("DOCDISTRIBUTIONDEPTSELECQTY: Elec Qty").
      setSize(10);
      
      doc_distribution_depts_blk.addField("BLUEPRINT_QTY", "Number").
      setInsertable().
      setLabel("DOCDISTRIBUTIONDEPTSBLUEPRINTQTY: Blueprint Qty").
      setSize(10);
      
      doc_distribution_depts_blk.addField("WHITEPRINT_QTY", "Number").
      setInsertable().
      setLabel("DOCDISTRIBUTIONDEPTSWHITEPRINTQTY: Whiteprint Qty").
      setSize(10);
      
      doc_distribution_depts_blk.addField("CONTROLLED_NO").
      setInsertable().
      setLabel("DOCDISTRIBUTIONDEPTSCONTROLLEDNO: Controlled No").
      setSize(20);
      
      doc_distribution_depts_blk.addField("RECEIVER").
      setReadOnly().
      setLabel("DOCDISTRIBUTIONDEPTSRECEIVER: Receiver").
      setDynamicLOV("PERSON_INFO_LOV").
      setSize(10);
      
      doc_distribution_depts_blk.addField("RECEIVER_NAME").
      setLabel("DOCDISTRIBUTIONDEPTSRECEIVERNAME: Receiver Name").
      setFunction("PERSON_INFO_API.Get_Name(:RECEIVER)").
      setReadOnly().
      setSize(10);
      mgr.getASPField("RECEIVER").setValidation("RECEIVER_NAME");
      
      doc_distribution_depts_blk.addField("RECEIVE_DATE","Date").
      setReadOnly().
      setLabel("DOCDISTRIBUTIONDEPTSRECEIVEDATE: Receive Date").
      setSize(10);
      
      doc_distribution_depts_blk.addField("ITEM1_STATE").
      setDbName("STATE").
      setLabel("DOCDISTRIBUTIONDEPTSITEM1STATE: State").
      setReadOnly().
      setSize(10);
      
      doc_distribution_depts_blk.addField("ITEM1_NOTE").
      setDbName("NOTE").
      setInsertable().
      setHeight(3).
      setLabel("DOCDISTRIBUTIONDEPTSITEM1NOTE: Note").
      setSize(50);
      
      doc_distribution_depts_blk.setView("DOC_DISTRIBUTION_DEPTS");
      doc_distribution_depts_blk.defineCommand("DOC_DISTRIBUTION_DEPTS_API","New__,Modify__,Remove__,Receive__,Untread__,Dispose__,Close__");
      doc_distribution_depts_blk.setMasterBlock(headblk);
      doc_distribution_depts_set = doc_distribution_depts_blk.getASPRowSet();
      doc_distribution_depts_bar = mgr.newASPCommandBar(doc_distribution_depts_blk);
      
      doc_distribution_depts_bar.addSecureCustomCommand("DeptReceive", "DOCDISTRIBUTIONDEPTSRECEIVE: Dept Receive", "DOC_DISTRIBUTION_DEPTS_API.Receive__");
      doc_distribution_depts_bar.addSecureCustomCommand("DeptDispose", "DOCDISTRIBUTIONDEPTSDISPOSE: Dept Dispose", "DOC_DISTRIBUTION_DEPTS_API.Dispose__");
      doc_distribution_depts_bar.addSecureCustomCommand("DeptClose", "DOCDISTRIBUTIONDEPTSCLOSE: Dept Close", "DOC_DISTRIBUTION_DEPTS_API.Close__");
      doc_distribution_depts_bar.addSecureCustomCommand("DeptUntread", "DOCDISTRIBUTIONDEPTSUNTREAD: Dept Untread", "DOC_DISTRIBUTION_DEPTS_API.Untread__");
      
      doc_distribution_depts_bar.addCommandValidConditions("DeptReceive",	"OBJSTATE",		"Enable",	"Initialization");
      doc_distribution_depts_bar.addCommandValidConditions("DeptDispose",	"OBJSTATE",		"Enable",	"Received");
      doc_distribution_depts_bar.addCommandValidConditions("DeptClose",		"OBJSTATE",		"Enable",	"Received;Disposing");
      doc_distribution_depts_bar.addCommandValidConditions("DeptUntread",	"OBJSTATE",		"Disable",	"Initialization;Closed");
      
      doc_distribution_depts_bar.defineCommand(doc_distribution_depts_bar.OKFIND, "okFindITEM2");
      doc_distribution_depts_bar.defineCommand(doc_distribution_depts_bar.NEWROW, "newRowITEM2");
      doc_distribution_depts_tbl = mgr.newASPTable(doc_distribution_depts_blk);
      doc_distribution_depts_tbl.setTitle("DOCDISTRIBUTIONDEPTSITEMHEAD2: Depts");
      doc_distribution_depts_tbl.enableRowSelect();
      doc_distribution_depts_tbl.setWrap();
      doc_distribution_depts_lay = doc_distribution_depts_blk.getASPBlockLayout();
      doc_distribution_depts_lay.setDefaultLayoutMode(doc_distribution_depts_lay.MULTIROW_LAYOUT);
      // Single field, no label
      doc_distribution_depts_lay.setSimple("SEND_DEPT_NAME");
      doc_distribution_depts_lay.setSimple("RECEIVER_NAME");
      
      //
      // Send Units List
      //
      
      doc_distribution_units_blk = mgr.newASPBlock("ITEM3");
      doc_distribution_units_blk.addField("ITEM2_OBJID").
      setHidden().
      setDbName("OBJID");
      
      doc_distribution_units_blk.addField("ITEM2_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      
      doc_distribution_units_blk.addField("ITEM2_OBJSTATE").
      setHidden().
      setDbName("OBJSTATE");
      
      doc_distribution_units_blk.addField("ITEM2_OBJEVENTS").
      setHidden().
      setDbName("OBJEVENTS");
      
      doc_distribution_units_blk.addField("ITEM2_DIST_NO").
      setDbName("DIST_NO").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("DOCDISTRIBUTIONUNITSITEM2DISTNO: Dist No").
      setSize(20);
      
      doc_distribution_units_blk.addField("SEND_UNIT").
      setMandatory().
      setInsertable().
      setReadOnly().
      setDynamicLOV("GENERAL_ZONE_LOV").
      setLabel("DOCDISTRIBUTIONUNITSSENDUNITNO: Send Unit").
      setSize(10);
      
      doc_distribution_units_blk.addField("SEND_UNIT_NAME").
      setFunction("GENERAL_ZONE_API.Get_Zone_Desc(:SEND_UNIT)").
      setLabel("DOCDISTRIBUTIONUNITSSENDUNITNAME: Send Unit Name").
      setReadOnly().
      setSize(20);
      mgr.getASPField("SEND_UNIT").setValidation("SEND_UNIT_NAME");
      
      doc_distribution_units_blk.addField("ITEM2_PAPER_QTY","Number").
      setDbName("PAPER_QTY").
      unsetInsertable().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONUNITSITEM2PAPERQTY: Paper Qty").
      setSize(10);
      
      doc_distribution_units_blk.addField("ITEM2_ELEC_QTY","Number").
      setDbName("ELEC_QTY").
      setInsertable().
      setLabel("DOCDISTRIBUTIONUNITSITEM2ELECQTY: Elec Qty").
      setSize(10);
      
      doc_distribution_units_blk.addField("ITEM2_BLUEPRINT_QTY", "Number").
      setDbName("BLUEPRINT_QTY").
      setInsertable().
      setLabel("DOCDISTRIBUTIONUNITSITEM2BLUEPRINTQTY: Blueprint Qty").
      setSize(10);
      
      doc_distribution_units_blk.addField("ITEM2_WHITEPRINT_QTY", "Number").
      setDbName("WHITEPRINT_QTY").
      setInsertable().
      setLabel("DOCDISTRIBUTIONUNITSITEM2WHITEPRINTQTY: Whiteprint Qty").
      setSize(10);
      
      doc_distribution_units_blk.addField("ITEM2_CONTROLLED_NO").
      setDbName("CONTROLLED_NO").
      setInsertable().
      setLabel("DOCDISTRIBUTIONUNITSITEM2CONTROLLEDNO: Controlled No").
      setSize(20);
      
      doc_distribution_units_blk.addField("ITEM2_RECEIVER").
      setDbName("RECEIVER").
      setReadOnly().
      setLabel("DOCDISTRIBUTIONUNITSITEM2RECEIVER: Receiver").
      setDynamicLOV("PERSON_INFO_LOV").
      setSize(10);
      
      doc_distribution_units_blk.addField("ITEM2_RECEIVER_NAME").
      setLabel("DOCDISTRIBUTIONUNITSITEM2RECEIVERNAME: Receiver Name").
      setFunction("PERSON_INFO_API.Get_Name(:ITEM2_RECEIVER)").
      setReadOnly().
      setSize(10);
      mgr.getASPField("ITEM2_RECEIVER").setValidation("ITEM2_RECEIVER_NAME");
      
      doc_distribution_units_blk.addField("ITEM2_RECEIVE_DATE","Date").
      setDbName("RECEIVE_DATE").
      setReadOnly().
      setLabel("DOCDISTRIBUTIONUNITSITEM2RECEIVEDATE: Receive Date").
      setSize(10);
      
      doc_distribution_units_blk.addField("ITEM2_STATE").
      setDbName("STATE").
      setLabel("DOCDISTRIBUTIONUNITSITEM2STATE: State").
      setReadOnly().
      setSize(10);
      
      doc_distribution_units_blk.addField("ITEM2_NOTE").
      setDbName("NOTE").
      setInsertable().
      setHeight(3).
      setLabel("DOCDISTRIBUTIONUNITSITEM2NOTE: Note").
      setSize(50);
      
      doc_distribution_units_blk.setView("DOC_DISTRIBUTION_UNITS");
      doc_distribution_units_blk.defineCommand("DOC_DISTRIBUTION_UNITS_API","New__,Modify__,Remove__,Receive__,Untread__,Dispose__,Close__");
      doc_distribution_units_blk.setMasterBlock(headblk);
      doc_distribution_units_set = doc_distribution_units_blk.getASPRowSet();
      doc_distribution_units_bar = mgr.newASPCommandBar(doc_distribution_units_blk);
      
      doc_distribution_units_bar.addSecureCustomCommand("UnitReceive", "DOCDISTRIBUTIONUNITSRECEIVE: Unit Receive", "DOC_DISTRIBUTION_UNITS_API.Receive__");
      doc_distribution_units_bar.addSecureCustomCommand("UnitDispose", "DOCDISTRIBUTIONUNITSDISPOSE: Unit Dispose", "DOC_DISTRIBUTION_UNITS_API.Dispose__");
      doc_distribution_units_bar.addSecureCustomCommand("UnitClose", "DOCDISTRIBUTIONUNITSCLOSE: Unit Close", "DOC_DISTRIBUTION_UNITS_API.Close__");
      doc_distribution_units_bar.addSecureCustomCommand("UnitUntread", "DOCDISTRIBUTIONUNITSUNTREAD: Unit Untread", "DOC_DISTRIBUTION_UNITS_API.Untread__");
      
      doc_distribution_units_bar.addCommandValidConditions("UnitReceive",	"OBJSTATE",		"Enable",	"Initialization");
      doc_distribution_units_bar.addCommandValidConditions("UnitDispose",	"OBJSTATE",		"Enable",	"Received");
      doc_distribution_units_bar.addCommandValidConditions("UnitClose",		"OBJSTATE",		"Enable",	"Received;Disposing");
      doc_distribution_units_bar.addCommandValidConditions("UnitUntread",	"OBJSTATE",		"Disable",	"Initialization;Closed");
      
      doc_distribution_units_bar.defineCommand(doc_distribution_units_bar.OKFIND, "okFindITEM3");
      doc_distribution_units_bar.defineCommand(doc_distribution_units_bar.NEWROW, "newRowITEM3");
      
      doc_distribution_units_bar.enableMultirowAction();
      
      doc_distribution_units_tbl = mgr.newASPTable(doc_distribution_units_blk);
      doc_distribution_units_tbl.setTitle("DOCDISTRIBUTIONUNITSITEMHEAD3: Units");
      doc_distribution_units_tbl.enableRowSelect();
      doc_distribution_units_tbl.setWrap();
      doc_distribution_units_lay = doc_distribution_units_blk.getASPBlockLayout();
      doc_distribution_units_lay.setDefaultLayoutMode(doc_distribution_units_lay.MULTIROW_LAYOUT);
      // Single field, no label
      doc_distribution_units_lay.setSimple("SEND_UNIT_NAME");
      doc_distribution_units_lay.setSimple("ITEM2_RECEIVER_NAME");
      
      //
      // Document Callback List
      //
      
      doc_distribution_callback_blk = mgr.newASPBlock("ITEM4");
      doc_distribution_callback_blk.addField("ITEM3_OBJID").
      setHidden().
      setDbName("OBJID");
      
      doc_distribution_callback_blk.addField("ITEM3_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      
      doc_distribution_callback_blk.addField("ITEM3_DIST_NO").
      setDbName("DIST_NO").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3DISTNO: Dist No").
      setSize(20);
      
      doc_distribution_callback_blk.addField("ITEM3_SEQ_NO", "Number").
      setDbName("SEQ_NO").
      setReadOnly().
      setHidden().
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3SEQNO: Seq No").
      setSize(10);
      
      doc_distribution_callback_blk.addField("ITEM3_VIEW_FILE").
      setReadOnly().
      unsetQueryable().
      setFunction("''").
      setSize(10).
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3VIEWFILE: View File").
      setHyperlink("../docmaw/EdmMacro.page?PROCESS_DB=VIEW&DOC_TYPE=ORIGINAL", "ITEM3_DOC_CLASS DOC_CLASS,ITEM3_DOC_NO DOC_NO,ITEM3_DOC_SHEET DOC_SHEET,ITEM3_DOC_REV DOC_REV", "NEWWIN").
      setAsImageField();
      
      doc_distribution_callback_blk.addField("ITEM3_IS_ELE_DOC").
      // setCheckBox("FALSE,TRUE").
      setFunction("EDM_FILE_API.Have_Edm_File(:ITEM3_DOC_CLASS,:ITEM3_DOC_NO,:ITEM3_DOC_SHEET,:ITEM3_DOC_REV)").
      setHidden().
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3ISELEDOC: Is Ele Doc").
      setSize(5);
      
      doc_distribution_callback_blk.addField("ITEM3_DOC_CODE").
      setDbName("DOC_CODE").
      unsetInsertable().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3DOCCODE: Doc Code").
      setSize(20);
      
      doc_distribution_callback_blk.addField("ITEM3_INNER_DOC_CODE").
      setDbName("INNER_DOC_CODE").
      unsetInsertable().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3INNERDOCCODE: Inner Doc Code").
      setSize(20);
      
      doc_distribution_callback_blk.addField("ITEM3_REV_TITLE").
      setDbName("REV_TITLE").
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3REVTITLE: Rev Title").
      setReadOnly().
      setSize(50);
      
      doc_distribution_callback_blk.addField("ITEM3_DOC_REV").
      setDbName("DOC_REV").
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3DOCREV: Doc Rev").
      unsetInsertable().
      setMandatory().
      setUpperCase().
      setReadOnly().
      setSize(10);
      
      doc_distribution_callback_blk.addField("CALLBACK_DEPT").
      setInsertable().
      setReadOnly().
      setLabel("DOCDISTRIBUTIONCALLBACKCALLBACKDEPT: Callback Dept").
      setDynamicLOV("GENERAL_DEPARTMENT_CU_LOV").
      setSize(10);
      
      doc_distribution_callback_blk.addField("CALLBACK_DEPT_NAME").
      setLabel("DOCDISTRIBUTIONCALLBACKCALLBACKDEPTNAME: Callback Dept Name").
      setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc(:CALLBACK_DEPT)").
      setReadOnly().
      setSize(20);
      mgr.getASPField("CALLBACK_DEPT").setValidation("CALLBACK_DEPT_NAME");
      
      doc_distribution_callback_blk.addField("CALLBACK_UNIT").
      setInsertable().
      setLabel("DOCDISTRIBUTIONCALLBACKCALLBACKUNIT: Callback Unit").
      setDynamicLOV("GENERAL_ZONE_LOV").
      setReadOnly().
      setSize(10);
      
      doc_distribution_callback_blk.addField("CALLBACK_UNIT_NAME").
      setLabel("DOCDISTRIBUTIONCALLBACKCALLBACKUNITNAME: Callback Unit Name").
      setFunction("GENERAL_ZONE_API.Get_Zone_Desc(:CALLBACK_UNIT)").
      setReadOnly().
      setSize(20);
      mgr.getASPField("CALLBACK_UNIT").setValidation("CALLBACK_UNIT_NAME");
      
      doc_distribution_callback_blk.addField("ITEM3_PAPER_QTY").
      setDbName("PAPER_QTY").
      unsetInsertable().
      setReadOnly().
      setLabel("DOCISSUECALLBACKPAPERQTY: Paper Qty").
      setSize(10);
      
      doc_distribution_callback_blk.addField("ITEM3_BLUEPRINT_QTY", "Number").
      setDbName("BLUEPRINT_QTY").
      setInsertable().
      setLabel("DOCISSUECALLBACKBLUEPRINTQTY: Blueprint Qty").
      setSize(10);
      
      doc_distribution_callback_blk.addField("ITEM3_WHITEPRINT_QTY", "Number").
      setDbName("WHITEPRINT_QTY").
      setInsertable().
      setLabel("DOCISSUECALLBACKWHITEPRINTQTY: Whiteprint Qty").
      setSize(10);
      
      doc_distribution_callback_blk.addField("ITEM3_CONTROLLED_NO").
      setDbName("CONTROLLED_NO").
      setInsertable().
      setLabel("DOCISSUECALLBACKCONTROLLEDNO: Controlled No").
      setSize(20);
      
      doc_distribution_callback_blk.addField("CALLBACKED").
      setInsertable().
      setCheckBox("FALSE,TRUE").
      setLabel("DOCDISTRIBUTIONCALLBACKCALLBACKED: Callbacked").
      setSize(5);
      
      doc_distribution_callback_blk.addField("CALLBACK_DATE","Date").
      setInsertable().
      setLabel("DOCDISTRIBUTIONCALLBACKCALLBACKDATE: Callback Date").
      setSize(10);
      
      doc_distribution_callback_blk.addField("ITEM3_RECEIVER").
      setDbName("RECEIVER").
      setInsertable().
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3RECEIVER: Receiver").
      setDynamicLOV("PERSON_INFO_LOV").
      setSize(10);
      
      doc_distribution_callback_blk.addField("ITEM3_RECEIVER_NAME").
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3RECEIVERNAME: Receiver Name").
      setFunction("PERSON_INFO_API.Get_Name(:ITEM3_RECEIVER)").
      setReadOnly().
      setSize(10);
      mgr.getASPField("ITEM3_RECEIVER").setValidation("ITEM3_RECEIVER_NAME");
      
      doc_distribution_callback_blk.addField("FROM_DIST_NO").
      setLabel("DOCDISTRIBUTIONCALLBACKFROMDISTNO: From Dist No").
      setReadOnly().
      setHidden().
      setHyperlink("DocDistributionCtl.page", "FROM_DIST_NO DIST_NO").
      setSize(10);
      
      doc_distribution_callback_blk.addField("FROM_DIST_SEQ").
      setLabel("DOCDISTRIBUTIONCALLBACKFROMDISTSEQ: From Dist Seq").
      setReadOnly().
      setFunction("DOC_DISTRIBUTION_CTL_API.Get_Dist_Seq(:FROM_DIST_NO)").
      setHyperlink("DocDistributionCtl.page", "FROM_DIST_NO DIST_NO").
      setSize(10);
      
      doc_distribution_callback_blk.addField("ITEM3_NOTE").
      setDbName("NOTE").
      setInsertable().
      setHeight(3).
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3NOTE: Note").
      setSize(50);
      
      // Hidden Fields
      doc_distribution_callback_blk.addField("ITEM3_DOC_CLASS").
      setDbName("DOC_CLASS").
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3DOCCLASS: Doc Class").
      setInsertable().
      setMandatory().
      setUpperCase().
      setHidden().
      setDynamicLOV("DOC_CLASS").
      setSize(10).
      setMaxLength(12);
      
      doc_distribution_callback_blk.addField("ITEM3_DOC_NO").
      setDbName("DOC_NO").
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3DOCNO: Doc No").
      setInsertable().
      setMandatory().
      setUpperCase().
      setHidden().
      setDynamicLOV("DOC_TITLE","ITEM3_DOC_CLASS DOC_CLASS").
      setHyperlink("../docmaw/DocIssue.page", "DOC_CLASS,DOC_NO,DOC_SHEET,DOC_REV").
      setSize(30).
      setMaxLength(120);
      
      doc_distribution_callback_blk.addField("ITEM3_DOC_SHEET").
      setDbName("DOC_SHEET").
      setLabel("DOCDISTRIBUTIONCALLBACKITEM3DOCSHEET: Doc Sheet").
      setInsertable().
      setMandatory().
      setUpperCase().
      setHidden().
      setDynamicLOV("DOC_ISSUE_LOV1", "ITEM3_DOC_CLASS DOC_CLASS,ITEM3_DOC_NO DOC_NO").
      setSize(10).
      setMaxLength(10);
      
      doc_distribution_callback_blk.setView("DOC_DISTRIBUTION_CALLBACK");
      doc_distribution_callback_blk.defineCommand("DOC_ISSUE_CALLBACK_API", "Modify__");
      doc_distribution_callback_blk.setMasterBlock(headblk);
      doc_distribution_callback_set = doc_distribution_callback_blk.getASPRowSet();
      doc_distribution_callback_bar = mgr.newASPCommandBar(doc_distribution_callback_blk);
      doc_distribution_callback_bar.enableMultirowAction();
      doc_distribution_callback_bar.defineCommand(doc_distribution_callback_bar.OKFIND, "okFindITEM4");
      doc_distribution_callback_bar.defineCommand(doc_distribution_callback_bar.COUNTFIND, "countFindITEM4");
      
      // View document issue menu
      doc_distribution_callback_bar.addCustomCommand("transToDocIssueCallback", mgr.translate("DOCDISTRIBUTIONCTLDOCISSUECALLBACK: Document Info..."));
      
      doc_distribution_callback_tbl = mgr.newASPTable(doc_distribution_callback_blk);
      doc_distribution_callback_tbl.setTitle("DOCDISTRIBUTIONCALLBACKITEMHEAD4: Callback");
      doc_distribution_callback_tbl.enableRowSelect();
      doc_distribution_callback_tbl.setWrap();
      doc_distribution_callback_lay = doc_distribution_callback_blk.getASPBlockLayout();
      doc_distribution_callback_lay.setDefaultLayoutMode(doc_distribution_callback_lay.MULTIROW_LAYOUT);
      // Single field, no label
      doc_distribution_callback_lay.setSimple("CALLBACK_DEPT_NAME");
      doc_distribution_callback_lay.setSimple("CALLBACK_UNIT_NAME");
      doc_distribution_callback_lay.setSimple("ITEM3_RECEIVER_NAME");
      
      //
      // Document distribution history
      //
      
      doc_distribution_hist_blk = mgr.newASPBlock("ITEM6");
      doc_distribution_hist_blk.addField("ITEM5_OBJID").
      setHidden().
      setDbName("OBJID");
      
      doc_distribution_hist_blk.addField("ITEM5_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      
      doc_distribution_hist_blk.addField("ITEM5_DIST_NO").
      setDbName("DIST_NO").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("DOCDISTRIBUTIONHISTITEM5DISTNO: Dist No").
      setSize(20);
      
      doc_distribution_hist_blk.addField("HIST_NO", "Number").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("DOCDISTRIBUTIONHISTHISTNO: Hist No").
      setSize(10);
      
      doc_distribution_hist_blk.addField("HIST_OPERATOR").
      setInsertable().
      setLabel("DOCDISTRIBUTIONHISTHISTOPERATOR: Hist Operator").
      setDynamicLOV("PERSON_INFO_LOV").
      setSize(10);
      
      doc_distribution_hist_blk.addField("HIST_OPERATOR_NAME").
      setLabel("DOCDISTRIBUTIONHISTHISTOPERATORNAME: Hist Operator Name").
      setFunction("PERSON_INFO_API.Get_Name(:HIST_OPERATOR)").
      setReadOnly().
      setSize(20);
      mgr.getASPField("HIST_OPERATOR").setValidation("HIST_OPERATOR_NAME");
      
      doc_distribution_hist_blk.addField("HIST_DATE","Datetime").
      setInsertable().
      setLabel("DOCDISTRIBUTIONHISTHISTDATE: Hist Date").
      setSize(10);
      
      doc_distribution_hist_blk.addField("HIST_INFO").
      setInsertable().
      setLabel("DOCDISTRIBUTIONHISTHISTINFO: Hist Info").
      setSize(50);
      
      doc_distribution_hist_blk.setView("DOC_DISTRIBUTION_HIST");
      doc_distribution_hist_blk.defineCommand("DOC_DISTRIBUTION_HIST_API","");
      doc_distribution_hist_blk.setMasterBlock(headblk);
      doc_distribution_hist_set = doc_distribution_hist_blk.getASPRowSet();
      doc_distribution_hist_bar = mgr.newASPCommandBar(doc_distribution_hist_blk);
      
      // Enable sub table find function
      doc_distribution_hist_bar.defineCommand(doc_distribution_hist_bar.OKFIND, "okFindITEM5");
      doc_distribution_hist_bar.defineCommand(doc_distribution_hist_bar.COUNTFIND, "countFindITEM5");
      doc_distribution_hist_tbl = mgr.newASPTable(doc_distribution_hist_blk);
      doc_distribution_hist_tbl.setTitle("DOCDISTRIBUTIONHISTITEMHEAD6: History");
      doc_distribution_hist_tbl.enableRowSelect();
      doc_distribution_hist_tbl.setWrap();
      doc_distribution_hist_lay = doc_distribution_hist_blk.getASPBlockLayout();
      doc_distribution_hist_lay.setDefaultLayoutMode(doc_distribution_hist_lay.MULTIROW_LAYOUT);
      // Simple field
      doc_distribution_hist_lay.setSimple("HIST_OPERATOR_NAME");
      
      //
      // Tab definitions
      //
      
      tabs = mgr.newASPTabContainer();
      tabs.addTab(mgr.translate("DOCDISTRIBUTIONCTLFILES: Files"), "javascript:commandSet('MAIN.activateFiles','')");
      tabs.addTab(mgr.translate("DOCDISTRIBUTIONCTLDEPTS: Send Dept"), "javascript:commandSet('MAIN.activateDepts','')");
      tabs.addTab(mgr.translate("DOCDISTRIBUTIONCTLUNITS: Send Unit"), "javascript:commandSet('MAIN.activateUnits','')");
      tabs.addTab(mgr.translate("DOCDISTRIBUTIONCTLCALLBACK: Callback"), "javascript:commandSet('MAIN.activateCallback','')");
      tabs.addTab(mgr.translate("DOCDISTRIBUTIONCTLHISTORY: History"), "javascript:commandSet('MAIN.activateHistory','')");
      
      tabs.setContainerWidth(700);
      tabs.setLeftTabSpace(1);
      tabs.setContainerSpace(5);
      tabs.setTabWidth(100);
   }
   
   protected String getImageFieldTag(ASPField imageField, ASPRowSet rowset, int rowNum) throws FndException
   {
      ASPManager mgr = getASPManager();
      String imgSrc = mgr.getASPConfig().getImagesLocation();
      
      if (rowset.countRows() > 0)
      {
         if ("VIEW_FILE".equals(imageField.getName()))
         {
            if ("TRUE".equals(rowset.getValueAt(rowNum, "IS_ELE_DOC")))
            {
               imgSrc += "folder.gif";
               return "<img src=\"" + imgSrc + "\" height=\"16\" width=\"16\" border=\"0\">";
            }
         }
         else if ("ITEM3_VIEW_FILE".equals(imageField.getName()))
         {
            if ("TRUE".equals(rowset.getValueAt(rowNum, "ITEM3_IS_ELE_DOC")))
            {
               imgSrc += "folder.gif";
               return "<img src=\"" + imgSrc + "\" height=\"16\" width=\"16\" border=\"0\">";
            }
         }
      }
      return "";
   }
   
   public void activateFiles()
   {
      tabs.setActiveTab(1);
      okFindITEM1();
   }
   
   public void activateDepts()
   {
      tabs.setActiveTab(2);
      okFindITEM2();
   }
   
   public void activateUnits()
   {
      tabs.setActiveTab(3);
      okFindITEM3();
   }
   
   public void activateCallback()
   {
      tabs.setActiveTab(4);
      okFindITEM4();
   }
   
   public void activateHistory()
   {
      tabs.setActiveTab(5);
      okFindITEM5();
   }
   
   public void adjust() throws FndException
   {
      ASPManager mgr = getASPManager();
      super.adjust();
      
      if (headset.countRows() > 0)
      {
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPCommand cmd = trans.addCustomFunction("GETPERSONID", "Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User)", "UNDERTAKER");
         trans = mgr.perform(trans);
         String person_id = trans.getValue("GETPERSONID/DATA/UNDERTAKER");
         if (!mgr.isEmpty(person_id) && !person_id.equalsIgnoreCase(headset.getValue("UNDERTAKER")))
            setPageReadOnly();
      }
      
      //
      // When operating, set some field property below.
      //
      
      if (headset.countRows() > 0)
      {
         if (!mgr.isEmpty(headset.getValue("DIST_TYPE")))
         {
            if (doc_distribution_files_lay.isEditLayout() || doc_distribution_files_lay.isNewLayout())
               mgr.getASPField("DOC_CLASS").setReadOnly();
            if (doc_distribution_callback_lay.isEditLayout() || doc_distribution_callback_lay.isNewLayout())
               mgr.getASPField("ITEM3_DOC_CLASS").setReadOnly();
         }
         
         if (!"Initialization".equals(headset.getValue("OBJSTATE")))
         {
            // Set command bar status
            headbar.disableCommand(headbar.DELETE);
            headbar.disableCommand(headbar.OVERVIEWDELETE);
            //
            // files
            //
            
            doc_distribution_files_bar.disableCommand(doc_distribution_files_bar.NEWROW);
            doc_distribution_files_bar.disableCommand(doc_distribution_files_bar.EDITROW);
            doc_distribution_files_bar.disableCommand(doc_distribution_files_bar.DELETE);
            doc_distribution_files_bar.disableCommand(doc_distribution_files_bar.OVERVIEWEDIT);
            doc_distribution_files_bar.disableCommand(doc_distribution_files_bar.DUPLICATEROW);
            
            //
            // Depts
            //
            
            doc_distribution_depts_bar.disableCommand(doc_distribution_depts_bar.NEWROW);
            doc_distribution_depts_bar.disableCommand(doc_distribution_depts_bar.DELETE);
            doc_distribution_depts_bar.disableCommand(doc_distribution_depts_bar.OVERVIEWEDIT);
            doc_distribution_depts_bar.disableCommand(doc_distribution_depts_bar.DUPLICATEROW);
            mgr.getASPField("PAPER_QTY").setReadOnly();
            mgr.getASPField("ELEC_QTY").setReadOnly();
            
            //
            // Units
            //
            
            doc_distribution_units_bar.disableCommand(doc_distribution_units_bar.NEWROW);
            doc_distribution_units_bar.disableCommand(doc_distribution_units_bar.DELETE);
            doc_distribution_units_bar.disableCommand(doc_distribution_units_bar.OVERVIEWEDIT);
            doc_distribution_units_bar.disableCommand(doc_distribution_units_bar.DUPLICATEROW);
            mgr.getASPField("ITEM2_PAPER_QTY").setReadOnly();
            mgr.getASPField("ITEM2_ELEC_QTY").setReadOnly();
         }
      }
      else
      {
         headbar.removeCustomCommand("CreateFile");
         headbar.removeCustomCommand("CreateDept");
         headbar.removeCustomCommand("CreateUnit");
         headbar.removeCustomCommand("CreateTemplate");
         headbar.removeCustomCommand("ReferenceTemplate");
      }
      
      if (doc_distribution_callback_set.countRows() > 0)
      {
         if (!mgr.isEmpty(doc_distribution_callback_set.getValue("CALLBACK_DEPT")))
         {
            mgr.getASPField("CALLBACK_DEPT").setReadOnly();
         }
         if (!mgr.isEmpty(doc_distribution_callback_set.getValue("CALLBACK_UNIT")))
         {
            mgr.getASPField("CALLBACK_UNIT").setReadOnly();
         }
      }
      
      headbar.removeCustomCommand("activateFiles");
      headbar.removeCustomCommand("activateDepts");
      headbar.removeCustomCommand("activateUnits");
      headbar.removeCustomCommand("activateCallback");
      headbar.removeCustomCommand("activateHistory");
   }
   
   private void setPageReadOnly()
   {
      // 1. disable headbar
//		headbar.disableCommand(headbar.NEWROW);
      headbar.disableCommand(headbar.EDITROW);
      headbar.disableCommand(headbar.DELETE);
      headbar.disableCommand(headbar.OVERVIEWEDIT);
//		headbar.disableCommand(headbar.DUPLICATEROW);
      headbar.removeCustomCommand("CreateFile");
      headbar.removeCustomCommand("CreateDept");
      headbar.removeCustomCommand("CreateUnit");
      headbar.removeCustomCommand("ReferenceTemplate");
      headbar.removeCustomCommand("CreateTemplate");
      
      // 2. disable files
      doc_distribution_files_bar.disableCommand(doc_distribution_files_bar.NEWROW);
      doc_distribution_files_bar.disableCommand(doc_distribution_files_bar.EDITROW);
      doc_distribution_files_bar.disableCommand(doc_distribution_files_bar.DELETE);
      doc_distribution_files_bar.disableCommand(doc_distribution_files_bar.DUPLICATEROW);
      doc_distribution_files_bar.disableCommand(doc_distribution_files_bar.OVERVIEWEDIT);
      
      // 3. disable depts
      doc_distribution_depts_bar.disableCommand(doc_distribution_depts_bar.NEWROW);
      doc_distribution_depts_bar.disableCommand(doc_distribution_depts_bar.EDITROW);
      doc_distribution_depts_bar.disableCommand(doc_distribution_depts_bar.DELETE);
      doc_distribution_depts_bar.disableCommand(doc_distribution_depts_bar.DUPLICATEROW);
      doc_distribution_depts_bar.disableCommand(doc_distribution_depts_bar.OVERVIEWEDIT);
      
      // 4. disable units
      doc_distribution_units_bar.disableCommand(doc_distribution_units_bar.NEWROW);
      doc_distribution_units_bar.disableCommand(doc_distribution_units_bar.EDITROW);
      doc_distribution_units_bar.disableCommand(doc_distribution_units_bar.DELETE);
      doc_distribution_units_bar.disableCommand(doc_distribution_units_bar.DUPLICATEROW);
      doc_distribution_units_bar.disableCommand(doc_distribution_units_bar.OVERVIEWEDIT);
      
      // 5. disable callback
      doc_distribution_callback_bar.disableCommand(doc_distribution_callback_bar.NEWROW);
      doc_distribution_callback_bar.disableCommand(doc_distribution_callback_bar.EDITROW);
      doc_distribution_callback_bar.disableCommand(doc_distribution_callback_bar.DELETE);
      doc_distribution_callback_bar.disableCommand(doc_distribution_callback_bar.DUPLICATEROW);
      doc_distribution_callback_bar.disableCommand(doc_distribution_callback_bar.OVERVIEWEDIT);
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------
   
   protected String getDescription()
   {
      return "DOCDISTRIBUTIONCTLDESC: Doc Distribution Ctl";
   }
   
   
   protected String getTitle()
   {
      return getDescription();
   }
   
   
   protected void printContents() throws FndException 
   {
      super.printContents();
      ASPManager mgr = getASPManager();
      
      printHiddenField("REFRESH_PARENT", "FALSE");
      printHiddenField("REFRESH_CHILD", "");
      
      if (headlay.isVisible())
         appendToHTML(headlay.show());
      else 
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
      
      if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
      {
         appendToHTML(tabs.showTabsInit());
         if (tabs.getActiveTab() == 1) {
            appendToHTML(doc_distribution_files_lay.show());
         } else if (tabs.getActiveTab() == 2) {
            appendToHTML(doc_distribution_depts_lay.show());
         } else if (tabs.getActiveTab() == 3) {
            appendToHTML(doc_distribution_units_lay.show());
         } else if (tabs.getActiveTab() == 4) {
            appendToHTML(doc_distribution_callback_lay.show());
         } else if (tabs.getActiveTab() == 5) {
            appendToHTML(doc_distribution_hist_lay.show());
         }
      }
      appendDirtyJavaScript("function refreshParent()\n");
      appendDirtyJavaScript("{\n");
      appendDirtyJavaScript(" document.form.REFRESH_PARENT.value=\"TRUE\"\n");
      appendDirtyJavaScript(" submit() \n");
      appendDirtyJavaScript("}\n");
   }

   protected ASPBlock getBizWfBlock()
   {
      return headblk;
   }
}
