/*
 *                 IFS Research & Development
 *
 *  This program is protected by copyright law and by international
 *  conventions. All licensing, renting, lending or copying (including
 *  for private use), and all other use of the program, which is not
 *  expressively permitted by IFS Research & Development (IFS), is a
 *  violation of the rights of IFS. Such violations will be reported to the
 *  appropriate authorities.
 *
 *  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
 *  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
 * ----------------------------------------------------------------------------
 * File        : ASPConfigFile.java
 * Description :
 * Notes       :
 * ----------------------------------------------------------------------------
 * Modified    :
 *    Jacek P  1999-Mar-08 - Created.
 *    Marek D  1999-Mar-19 - Added new configuration constants
 *    Jacek P  1999-Apr-01 - Added parameters for handling of user authorization.
 *    Jacek P  1999-May-04 - Added static parameters for control of cache and pool.
 *    Marek D  1999-May-12 - Added new type of LOV tags 'not in assignment'
 *                           Added admin_web_user
 *    Jacek P  1999-Jul-12 - Added background color parameter to the applet tag.
 *    Jacek P  1999-Jul-13 - Added script location.
 *    Jacek P  1999-Jul-19 - Rewritten initLOVHTML().
 *    Jacek P  1999-Jul-21 - Separated call to initAppletTag().
 *    Jacek P  1999-Aug-02 - Added parameter debug_send_js.
 *    Jacek P  1999-Aug-10 - Added tool tip to LOV icon.
 *                           Added new control variable remove_old_context.
 *    Johan S  1999-Aug-18 - Added various constants in initConfigClientScript()
 *                           for hover button functionality.
 *    Jacek P  1999-Aug-23 - Changed default hover to N.
 *    Jacek P  1999-Aug-25 - Removed "-sign for boolean values for HOVER_ENABLED
 *                           in initConfigClientScript().
 *    Jacek P  1999-Sep-01 - Changes in HTML layout generated by initLOVHTML().
 *    Jacek P  1999-Sep-08 - Added new parameters hover_* used in function
 *                           initConfigClientScript(). Changes in generation
 *                           of JavaScript code for hover functionality.
 *                           Added new parameter add_error_info initialized in
 *                           function construct(). Background image replaced with
 *                           color from ASPConfig.ifm in function initBodyTag().
 *    Jacek P  1999-Sep-10 - Added configurable table border width for LOv in
 *                           function initLOVHTML().
 *    Jacek P  1999-Sep-13 - Parameter SURROUNDED_COLOR renamed to SURROUNDING_COLOR.
 *    Stefan M 1999-Dec-21 - Added dynamic_lov_url, and initDynamicLOVURL().
 *    Stefan M 2000-Feb-16 - Added header and footer.
 *    Stefan M 2000-Mar-29 - Removed header and footer. :-) Now simple picture references in ASPConfig.ifm.
 *    Stefan M 2000-May-14 - Added references to Save button.
 *    Jacek P  2000-Aug-03 - Added static parameters for Graphic Server
 *    Jacek P  2000-Aug-14 - Added default value for static param 'STATIC/GS_CACHE/TEMP_LOCATION'.
 *    Johan S  2000-Sep-07 - Added functions for CACHE/METHOD
 *    Stefan M 2000-Sep-25 - Added late_constant_clientscript.
 *    Stefan M 2000-Nov-01 - Now uses ASPManager.getTranslatedImageLocation() for script pics.
 *    Piotr  Z 2000-Nov-27 - Variable new_hover_script contains now definitions only for minimize and mazimize images..
 *    Artur  K               Other images are defined in ASPCommandBar class.
 *    Piotr Z  2001-Feb-15 - Added DB authentication method in construct() (Duy H solution)
 *    Johan S  2000-Mar-02 - Added code to generate client url encode
 *    Kingsly P 2001-Mar-06 - Change lov.asp -> Lov.asp and lookup.asp -> Lookup.asp.
 *    Johan S  2001-Mar-13 - Webkit dictionaries support.
 *    Jacek P  2001-Mar-22 - Log id 660 & 661: Added handling of TM. Changes in methods
 *                           construct() and initAndVerifyStatic().
 *    Jacek P  2001-Mar-29 - Changed .asp to .page
 *    Mangala  2001-Apr-23 - Changed initConfigClientScript() (log id #692)
 *    Suneth M 2001-Sep-12 - Changed duplicate localization tags.
 *    Upul P   2001-Nov-26 - Added ip mask vraiables, config params and ipToInt function
 *    Chandana 2001-Dec-04 - Changes made to call xcape(s) of clientscript.js instead of calling the escape(s)
 *    Chandana 2001-Dec-18 - Renamed xcape(s) as encodeUnicode(s)
 *    Daniel S 2002-Jan-06 - Added a banner height check.
 *    Ramila H 2002-Jan-14 - Added localized address display/edit template coding.
 *    Daniel S 2002-Jan-14 - Added system_name variable and it's init code.
 *    Jacek P  2002-Jan-31 - Changed default authorization method from IIS to FND_DB
 *                           and TM method from NATIVE to ORB. The NATIVE method made obsolete
 *                           (renamed to NATIVE__ for test purpose)
 *    Mangala  2002-Mar-12 - Introduced a new config parameter (base64_enabled) to enable base64 encoding.
 *    ChandanaD2002-Mar-13 - Change the contents of the 'url_encode_function' variable to include
 *                           encodeUnicode() & decodeUnicode() functions according the the 'base64_enabled' variable
 *                           escaping & unescaping is done in encodeUnicode() & decodeUnicode() functions respectively.
 *    ChandanaD2002-Mar-16 - Made chanes to the 'url_encode_function' variable contents.
 *    Mangala  2002-Mar-18 - Changes to avoid visiting history of other users in the browser.
 *    Mangala  2002-Apr-01 - Introduced new config-param "restrict_history" to avoid browser history restriction
 *                           if not applicable
 *    ChandanaD2002-Apr-02 - Fixed minor bugs in javascripts functions, encodeUnicode and decodeUnicode
 *    Rifki R  2002-Apr-08 - Fixed translation problems caused by trailing spaces.
 *    ChandanaD2002-Jun-18 - Added new String variable 'page_mask_tag'.
 *    ChandanaD2002-Jun-20 - Introduced inactivate_page_at_loading flag to enable/disable 'Inactivate Page At Loading'
 *                           feature from ASPConfig.ifm
 *    ChandanaD2002-Jun-25 - Introduced two new javascript function calls for the OnFocus & OnUnLoad events respectively
 *                           of the body tag.(bug # 828)
 *    ChandanaD2002-Jul-09 - Inserts OnFocus & OnUnLoad events to the body tag & sets DEPENDENT attribute according to an
 *                           ASPConfig parameter (ADMIN/LOV_ALWAYS_ON_TOP)
 *    Chandana 2002-Jul-18 - Introduced browser_cache_disabled flag to enable/disable 'Browser Caching' feature from ASPConfig.ifm
 *    Chandana 2002-Jul-22 - Included a call to the ASPManager's generateUnauthorizedAccessPage() method;
 *    Ramila   2002-Jul-30 - Added support for calendar.js. Log Id 875
 *    Daniel S 2002-Aug-08 - removed config for the old context cache.
 *    Chandana 2002-Aug-30 - Added available_data_stores variable.
 *    Mangala  2002-Sep-10 - Minor changes for makeing the page_mask (transparent layer) work on latest IEs.
 *    Sampath  2002-Oct-02 - Added javascript exception handling to js function SelectURLClientEncode(at construct method)
 *    Ramila H 2002-Ocr-04 - added support for Debug tool.
 *    Sampath  2002_Oct-09 - moved JavaScript Functions to ClientScript.js  introduced BASE64_ENABLED variable to pages
 *    Ramila H 2002-Ocr-09 - Changed the order of getting values required for the execution
 *                           of the DebugTool. i.e:.sysid,systype,syssecret,orb_daemon, and orb_port. must be
 *                           initialized be writing to the tool. Specially the dbmon output.
 *    Rifki R  2002-Oct-21 - Log #779. Fetched protocol from request object when its not defined in ASPConfig.ifm.
 *    ChandanaD2002-Oct-21 - Added facility to Enable/Disable action buttons in standard tool bars.
 *    Johan S  2002-Oct-22 - Added support for xml dictionary files.
 *    ChandanaD2002-Nov-05 - Moved AUTH_COOKIE variable to the <head> section.(ASPPage.java)
 *    Ramila H 2002-Dec-02 - Log id 762. Added Javascript constant INVNUMVAL_MSG.
 *    Suneth M 2002-Dec-10 - Log id 1002, Added parameter multichoice_lov_enabled.
 *    ChandanaD2002-Dec-13 - Appends DECIMAL_SEPARATOR and GROUP_SEPARATOR Javascript variables.
 *    Ramila H 2002-Dec-13 - Log id 933. Added translatable msg.
 *    ChandanaD2002-Dec-18 - Log Id 567, Changed initBodyTag() method.
 *    Suneth M 2002-Dec-30 - Log id 1002, Added new parameters iid_lov_url,iid_to_lov_enabled &
 *                           new method initDynamicIidLOVURL().
 *    Mangala  2003-Jan-01 - Log id 595, Common message display.
 *    Ramila H 2003-Jan-02 - Calendar GUI improvements.
 *    Sampath  2003-Jan-10 - made changes to remove the client util applet if necessory
 *    Sampath  2003-Jan-20 - Inserted the method initFieldMasks() to translate the date-time mask
 *    Chandana 2003-Jan-22 - Added new Javascript variable MESSAGE_PAGE_PATH.
 *                         - Call to ASPManager's generateMessagePage() method.
 *    Johan S
 *    Jacek P  2003-Jan-28 - Added support for config files in XML format.
 *    Jacek P  2003-Feb-04 - Reading path for config files from web.xml. Change default method to NATIVE.
 *    chandanaD2003-Feb-11 - Changed hidepage <div> width and height to 100%
 *    Ramila H 2003-Feb-27 - Added Javascript constant PREVIOUSQUERYNAME_MSG.
 *    Jacek P  2003-Feb-28 - Changed FNDAS to FNDEXT. Removed system_name.
 *                           Renamed transactions methods to JAP (old ORB) and RMI (old NATIVE).
 *                           Added functions convertPath().
 *    Chandana 2003-Mar-19 -  getParameter key converted to uppercase.
 *    Mangala  2003-Mar-26 - Added support to enable ClientUtil Applet in pages regardless of config
 *                           parameter.
 *    Sampath  2003-Apr-17 - add parameters to enable more_info in error pages
 *    Sampath  2003-Apr-21 - changed convertPath() to correct erors when trave & log is on.
 *    ChandanaD2003-May-22 - Modified body tag attributes to remove page borders.
 *    ChandanaD2003-Jun-02 - Added an onClick event function to the lov image to place the popups(if any) in a proper place.
 *    ChandanaD2003-Jun-03 - Added options_enabled variable.
 *    ChandanaD2003-Jun-03 - Overloaded initLOVTag2 method and introduced lov_tag_2_pop and lov_tag_2_in_assignment_pop variables.
 *    Ramila H 2003-jul-18 - Log id 1119, Authentication by fndext.
 *    Ramila H 2003-Aug-06 - Log id 853, added method to check if Change password is enabled.
 *    Sampath  2003-Aug-13 - Add new function initLOVTag1Iid()
 *    Ramila H 2003-Aug-27 - Added translatable text for "Calendar" title.
 *    Ramila H 2003-Sep-08 - removed obsolete code for old toolbar images and ORB.
 *    Ramila H 2003-Sep-18 - Log id 1044, got value for Query Hints.
 *    Ramila H 2003-10-20  - Added title HTML attribute for tooltips (NN6 doesnt show alt).
 *    Jacek P  2004-Jan-04 - Bug 41518: web.xml file doesn't accept absolute paths.
 *    Ramila H 2004-Jan-19 - Bug 42101. added script variable __CALENDAR_IMAGE_PATH.
 *    Mangala  2004-Jan-21 - Bug 42131. Remove new line charactors from translated text.
 *    ChandanaD2004-Jan-27 - Bug 42299. Removed remove_applet_for_ie. Modified some code.
 *    ChandanaD2004-May-12 - Removed all usages of the SCHEME section of the webclientconfig.xml.
 *    Ramila H 2004-05-26  - implemented code for multi-language support
 *    Ramila H 2004-05-27  - Made DECIMAL_SEPARATOR, GROUP_SEPARATOR and WEEK_START_DATE language dependent
 *    Ramila H 2004-05-28  - Bug id 42390. Implemented code for backward comptibility
 *    Chandana 2004-Jun-10 - Removed all absolute URLs.
 *    Ramila H 2004-06-29  - Moved translated stuff to ASPConfig to support multi-language
 *    Chandana 2004-07-16  - Introduced and called getMobileModules() to support start menu page in mobile web client.
 *    Chandana 2004-Jul-27 - Further improvements to work with proxy servers.
 *    Chandana 2004-Aug-05 - Proxy support corrections.
 *    Chandana 2004-Aug-20 - Removed getMobileModules().
 *    Mangala  2004-Sep-07 - Move the basedir reading bit more upwords to avoid problems when
 *                           Log enabled.
 *    Mangala  2004-Nov-09 - Changes done for SSO support.
 *    Jacek P  2004-Dec-15 - Added initialization of the new ProfileUtils class.
 *    Jacek P  2006-Feb-21 - Added method getLocalizationSizes() for statisctics.
 * ----------------------------------------------------------------------------
 * New Comments:
 * 2010/10/13 buhilk Bug 93561, Implemented IFS EE links to be open from Federated search results.
 * 2010/05/07 buhilk bug 90507, Added new config parameter iee_dockout_enabled
 * 2010/04/09 rahelk bug 89989, Added auth cookie to prevent weblogic from view back pages after logging out
 * 2010/02/03 amiklk Bug 88050, Changed fetchDomainList() to use SSL.
 * 2010/02/03 sumelk Bug 88795, Changed language_table variable from Hashtable to Hashmap. 
 * 2010/02/03 sumelk Bug 88035, Added new variables cookie_root_domain & COOKIE_DOMAIN.  
 * 2009/03/11 sumelk Bug 80503, Added new variables is_logoff_enabled & logoff_script. 
 * 2008/08/12 buhilk Bug 76287, Added Global switch to enable/disable Aurora features
 * 2008/08/01 rahelk Bug 74809, handled reading of tiff image cache timeout
 * 2008/04/09 sadhlk Bug ID: 67895, Modified construct() to check Hybrid search availability.
 * 2008/02/27 buhilk Bug ID: 71513 - Modified initProxyVariables() to fix extra "/" attached to the returned context path.
 * 2007/12/20 buhilk Bug ID: 70052 - Modified construct(), initConfigClientScript() and added mobilescript location variable and mobile help url.
 * 2007/12/12 sadhlk Bug 67525, Modified construct() to support cookie renaming.
 * 2207712/11 buhilk IID F1PR1472, fixed a bug in default buffer size.
 * 2007/12/03 buhilk IID F1PR1472, Added Mini framework functionality for use on PDA.
 * 2007/05/30 buhilk Bug 65715, Modified construct() to change correctPNGforIE() into setImageType() to fix IE6 crashing error.
 * 2007/05/22 sumelk Merged the corrections for Bug 65469, Added auth_header_name variable. 
 * 2007/04/11 sadhlk Merged Bug 64054, Changed verifyDirPaths() to include server port when creating
 *                              system_temp directory.
 * 2007/04/06 mapelk Removed image generation code
 * 2007/01/30 mapelk Bug 63250, Added theming support in IFS clients.
 * 2006/12/11 buhilk bug 61535 removed common_msg_file_path
 * 2006/11/22 rahelk Bug 61532 retrieved accurate precision from DB
 *                2006/11/02 buhilk
 * Bug 61533 - Added translations to calander by modifying getCalendarConts()
 *                2006/09/29 gegulk 
 * Bug 58618 - Removed the unwanted code as translations are fetched from database
 
 *                2006/09/13 gegulk 
 * Bug 60473 - Added the method initRTLHoverScript() and introduced the variables rtl_images_location & new_rtl_hover_script
 *             to support RTL mode (Right To Left)
 *
 *                2006/05/24 riralk
 * Bug 58262 - Reversed change done for Bug 57841, but continue to use interned strings and parsed 
 *             translation XML files only if the language was active.
 *
 *                2006/05/15 prralk
 * Bug 57841 - Changed DOM parser to use javax and used intern memory
 *                2006/04/27 prralk
 * Bug 55637 Removed send_to_browser option from webclientconfig.xml and set it to false always
 *                2006/04/20 prralk
 * Bug 57417 performance issue with default language extraction
 *                2006/04/20 prralk
 * Bug 57026 'Help On Fields' display issues
 *                2006/01/20 riralk
 * Modified stuffXMLDic() to fill term_display hashtable with display names fetched from translation file.
 *
 *                2006/01/09 riralk
 * Modified stuffXMLDic() to fetch Usage_Version_Id's from translation files and fill the term_usage hashtable.
 *
 *                2005/12/09 rahelk
 * Call id 129728: check whether context_path starts with / before appending it.
 *
 * Revision 1.13  2005/12/09 rahelk
 * Error handling on JAAS logon
 *
 * Revision 1.12  2005/11/08 07:50:54  rahelk
 * core changes for using USAGES in help
 *
 * Revision 1.11  2005/11/06 08:47:06  mapelk
 * Header/Footer Stretch image size no longer taken from Java
 *
 * Revision 1.10  2005/11/06 05:48:48  mapelk
 * Corrected bug: Streatched image is missing in the footer
 *
 * Revision 1.9  2005/11/04 12:15:44  japase
 * Class ConfigFileParser moved from ifs.fnd.asp to ifs.fnd.xml package
 *
 * Revision 1.8  2005/11/02 13:43:49  japase
 * Methods for handling of XML files moved to new class ConfigFileParser
 *
 * Revision 1.7  2005/10/25 11:06:13  mapelk
 * Introduced different validations for Number & Money. Also replaces ASCII 160 with 32 which returns as group seperator for some languages.
 *
 * Revision 1.6  2005/10/20 11:23:17  japase
 * Added handling of encrypted passwords
 *
 * Revision 1.5  2005/10/20 04:14:53  mapelk
 * Fixed bug: "can not get Trace and Log outputs to console".
 *
 * Revision 1.4  2005/10/19 10:16:32  mapelk
 * Added functionality to refresh profile cache in certain time. Also posibility to flush the cache on demand.
 *
 * Revision 1.3  2005/10/13 10:54:01  japase
 * Directory containing translation files renamed from 'dic-files' to 'translation'
 *
 * Revision 1.2  2005/09/19 08:47:22  rahelk
 * Simplified login to complex LDAP structure
 *
 * Revision 1.17  2005/09/14 08:02:07  rahelk
 * password management
 *
 * Revision 1.16  2005/08/26 12:34:48  riralk
 * Modified getCalendarConts() to retrieve week_start_day from Java Locale when not defined in webclientconfig.xml.
 *
 * Revision 1.15  2005/08/18 08:46:46  mapelk
 * Bug fixed: Call 126113: Language HashTable dosen't reload properly when reloading config files.
 *
 * Revision 1.14  2005/08/17 10:46:24  rahelk
 * JAAS AS specific security plugin
 *
 * Revision 1.13  2005/08/08 09:44:03  rahelk
 * Declarative JAAS security restructure
 *
 * Revision 1.12  2005/06/27 10:00:19  riralk
 * Added method verifyDirPaths() to support clustering.
 *
 * Revision 1.11  2005/06/13 10:28:51  mapelk
 * Use two static files instead of generating unautherised msg and ifs-dialog files for each language.
 *
 * Revision 1.10  2005/04/01 13:59:56  riralk
 * Moved Dynamic object cache to session - support for clustering
 *
 * Revision 1.9  2005/04/01 10:51:57  rahelk
 * JAAS: implemented calling EJB's directly
 *
 * Revision 1.8  2005/03/21 09:19:04  rahelk
 * JAAS implementation
 *
 * Revision 1.7  2005/03/12 15:47:24  marese
 * Merged changes made to PKG12 back to HEAD
 *
 * Revision 1.6.2.1  2005/03/04 10:55:01  mapelk
 * bug fix: call 122296, 1222348 and 122422
 *
 * Revision 1.6  2005/02/11 09:12:09  mapelk
 * Remove ClientUtil applet and it's usage from the framework
 *
 * Revision 1.5  2005/02/08 09:38:26  mapelk
 * Remove application path form lov tags
 *
 * Revision 1.4  2005/02/03 11:12:58  mapelk
 * Remove application path form lov tags
 *
 * Revision 1.3  2005/02/02 09:36:26  mapelk
 * bug fix: Lov script error and image generation bug appeared after proxy related changes.
 *
 * Revision 1.2  2005/02/01 10:32:58  mapelk
 * Proxy related bug fix: Removed path dependencies from webclientconfig.xml and changed the framework accordingly.
 *
 * Revision 1.1  2005/01/28 18:07:25  marese
 * Initial checkin
 *
 * Revision 1.7  2005/01/12 12:06:45  mapelk
 * Moved the config_user entry to <admin>. Now we can have one config_user for all alnguages.
 *
 * Revision 1.6  2005/01/06 04:33:04  rahelk
 * bug correction to support standard portlet mode
 *
 * Revision 1.5  2005/01/06 03:36:04  rahelk
 * moved Calendar javascript variables to .js files
 *
 * Revision 1.4  2004/12/20 08:45:07  japase
 * Changes due to the new profile handling
 *
 * Revision 1.3  2004/12/07 06:07:01  mapelk
 * Bug fixed in contruct method.
 *
 * ----------------------------------------------------------------------------
 *
 */

package ifs.fnd.asp;

import ifs.fnd.base.*;
import ifs.fnd.os.*;
import ifs.fnd.util.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.xml.*;
import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.image.*;
import java.net.*;
import java.text.*;
import org.xml.sax.*;
import org.w3c.dom.*;
import javax.xml.parsers.*;

import ifs.fnd.websecurity.SecurityHandler;

/**
 */
public class ASPConfigFile
{
   //==========================================================================
   // Constants and static variables
   //==========================================================================

   public  static       boolean DEBUG   = Util.isDebugEnabled("ifs.fnd.asp.ASPConfigFile");
   private static final String  INCLUDE = "\n@include ";
   static final String CAL_CONS_FILE    = "CalendarConstants-";


   // key   = path to an ASPConfig.ifm file
   // value = an instance of ASPConfigFile class
   private static Hashtable files = new Hashtable();

   static String garbage_limit;
   static int    profile_cache_max_size = -1;
   static int    profile_cache_time_out = -1;
   //static String profile_cache_path;
   static int    page_pool_max_size     = -1;
   static int    page_pool_time_out     = -1;
   static String page_pool_path;
   static int    graph_cache_time_out   = -1;
   static int    tiff_cache_time_out    = -1;
   static String graph_temp_location;
   static String graph_temp_path;
   static Buffer cfg;
   static Buffer thread_buffer;

   static String orb_tm_daemon;
   static String orb_tm_port;

   static String system_type;
   static String system_id;
   static String shared_secret;

   static final String WEB_CONFIG_FILE = "webclientconfig.xml";
   static final String APP_PATH        = "APP_PATH";
   static final String APP_ROOT        = "APP_ROOT";
   static final String COOKIE_PATH     = "COOKIE_PATH";
   static final String CONSOLE         = "CONSOLE";
   static final String COOKIE_ROOT_PATH = "COOKIE_ROOT_PATH";
   static final String COOKIE_PREFIX = "COOKIE_PREFIX";
   static final String COOKIE_DOMAIN = "COOKIE_DOMAIN";
   static final String IFSEE_PATH      = "/client/runtime/Ifs.Fnd.Explorer.application";

   static int ERA= 0;
   static int YEAR = 1;
   static int MONTH_IN_YEAR = 2;
   static int DAY_IN_MONTH = 3;
   static int HOUR_IN_AMPM_112 = 4;
   static int HOUR_IN_DAY_023 = 5;
   static int MINUTE_IN_HOUR = 6;
   static int SECOND_IN_MINUTE = 7;
   static int MILLISECOND = 8;
   static int DAY_IN_WEEK = 9;
   static int DAY_IN_YEAR = 10;
   static int DAY_OF_WEEK_IN_MONTH = 11;
   static int WEEK_IN_YEAR = 12;
   static int WEEK_IN_MONTH = 13;
   static int AMPM_MARKER = 14;
   static int HOUR_IN_DAY_124 = 15;
   static int HOUR_IN_AMPM_011 = 16;
   static int TIME_ZONE = 17;

   static int translation_loading_buffer_size = 30000;
   
   public static HashMap language_table = new HashMap();
   static String is_160_used_in_groupings=",";

   public static String base_directory;

   static ASPBuffer domain_list;

   //==========================================================================
   // Instance variables
   //==========================================================================

   // hashtable with configuration parameters. Will be cloned on creation of an
   // instance of ASPConfig class.
   // key   = parameter name
   // value = parameter value
   Hashtable params;

   // temporary variables
   private Hashtable macros;
   private int       reclevel;
   private AutoString tmpbuf  = new AutoString();
   private ASPPage page;

   //==========================================================================
   // Common parameters
   //==========================================================================

   String          param_file_dir;
   ServerFormatter srv_fmt;
   String          time_zone;
   Factory         factory;
   int             max_pack_len;
   int             def_buffer_size;
   int             def_mobile_buffer_size;
   String          protocol;
   String          mts_progid;
   boolean         buffering_response;

   //String   application_domain;
   String   application_path;
   String   secured_path;
   String   unsecured_path;
   private String[] application_path_arr;
   String   application_phy_path;
   String   application_context_phy_path;
   String   application_id;
   String   application_password;
   String cookie_root_prefix;
   String cookie_root_path;
   String cookie_root_domain;
   //String   dic_entry_code;

   String   config_user;
   String   config_password;

   String   netscape_head_tag;
   String   explorer_head_tag;
   String   body_tag;
   String   mobile_body_tag;
   String   page_mask_tag;

   String   generic_client_script;
   String   constant_client_script;
   String   late_constant_client_script;
   String   config_client_script_netscape;
   String   config_client_script_explorer;
   String   png_correction_script;
   String   iframe_tag;
   String   lov_url;
   String   dynamic_lov_url;
   String   iid_lov_url;
   String[] lov_html;
   String   temp_path;
   static   String   language_code;
   //String   language_code;
   String   validation_url;
   String   basedir;

   String   head_tag_error_ie;
   String   head_tag_error_nn;

   String   page_error_image;
   String   page_warning_image;
   String   page_info_image;
   String   page_body_image;

   //Header tool bar images
   String header_refresh;
   String header_navigator;
   String header_navigator_pop;
   String header_options;
   String header_configure;
   String header_help;
   String header_whatsthis;
   String header_home;
   String header_home_pop;
   String header_ifs_logo;
   //---------------

   String   column_return_image;

   boolean  alert_box_on_error_nn;
   boolean  alert_box_on_error_ie;
   boolean  alert_box_ifs_dialog_ie;
   boolean  alert_box_ifs_dialog_nn;
   boolean  add_error_info;

   boolean  count_db_rows;
   String   images_location;
   String   mobile_images_location;
   String   rtl_images_location;
   String   icon_location;
   String   translated_images_location;
   String   stylesheets_location;
   String   scripts_location;
   String   mobile_scripts_location;
   String   generic_clientscript_file_name;
   String   clientscript_file_name;
   String   late_clientscript_file_name;
   String   portal_location;
   String   navigator_location;
   String   addlink_location;
   String   webhelp_location;
   String   portalhelp_location;

   int      lov_window_width;
   int      lov_window_height;
   String   lov_pop_image;
   String   lov_image;
   String   lov_image_properties;

   String   row_status_image_new;
   String   row_status_image_modify;
   String   row_status_image_remove;
   String   row_status_image_normal;

   String   navigator_root_image;
   String   navigator_node_image;
   String   navigator_item_image;

   boolean  iis_user_authorization;
   boolean  restrict_history;
   String   auth_method;
   int      user_authorization_method;
   String   authorization_method;
   String   auth_header_name;
   static final String FORM            = "FORM";             //JAAS form based auth
   static final String EXTERNAL        = "EXTERNAL";         //web server
   static final String STANDARD_PORTAL = "STANDARD_PORTAL";  //ex: SSO JSR168 authentication
   static final String PLUGIN          = "PLUGIN";           //authentication done by a plugin class

   int      user_auto_logoff_time;
   String   auth_user_cookie_name;
   String   logon_url;
   String   logon_error_url;
   String   logon_server_name;
   boolean  fnd_db_orb;
   boolean  available_data_stores;

   boolean gzip_enabled;

   String   display_layout;
   String   edit_layout;

   boolean  encode_translations;
   boolean  send_context_cache;
   boolean  remove_old_context;

   String   web_user;
   String   debug_cookie_script;
   boolean  debug_page_id;
   boolean  debug_mgr_reference;
   boolean  debug_send_js;
   String   new_hover_script;

   String   url_encode_function;
   boolean  inactivate_page_at_loading;
   boolean  browser_cache_disabled;

   boolean  hover_enabled;
   String   hover_script;
   boolean  initialized;

   int tm_method = ASPConfig.TM_RMI;

   String lb_group;

   boolean webkit_dic;

   //String upper_banner_height;
   //String lower_banner_height;

   int ip_disable_masks[] = null;
   int ip_enable_masks[] = null;
   int min_zipped_size = 0;

   String localized_address_class;

   String calendar_week_start_day;

   String calendar_tag1;
   String calendar_tag2;
   String calendar_tag3;
   String calendar_tag4;
   //String calendar_script;

   boolean home_enabled;
   boolean options_enabled;
   boolean navigate_enabled;
   boolean help_enabled;
   boolean portal_config_enabled;
   boolean portlet_config_enabled;
   boolean iee_dockout_enabled;
   boolean multichoice_lov_enabled;
   boolean iid_to_lov_enabled;
   boolean show_client_util_frame;

   String   validation_timeout_time;
   //String   common_msg_file_path;
   //String   common_msg_bullet_tag;

   String[] timemask = new String[19];

   //String access_point;
   //boolean externally_identified;
   boolean use_authentication;
   boolean change_password_enabled;
   boolean query_hints_on;

   boolean is_hybrid_search_available;
   String validation_method_ie;
   String validation_method_netscape7;

   public static boolean multi_language_enabled;
   String   language_url;
   String application_compatibility;

   HashMap requesting_hosts = new HashMap();
   HashMap hosts = new HashMap();

   //boolean identified_by_jsr168_portal;
   //boolean identified_by_plugin;
   String  auth_plugin_class_name;

   String security_realm;
   String config_realm;

   int precision = 10; //number of decimal precisions to preserve in accurate data

   String[][] themes = new String[10][3]; //theme data read from the webclientconfig.xml
   String mobilecssfile;
   boolean aurora_features;

   boolean is_logoff_enabled;
   String logoff_script;
   //==========================================================================
   // Construction and initialization
   //==========================================================================

   private ASPConfigFile( String config_dir )
   {
      this.macros = new Hashtable();
      this.params = new Hashtable();
      this.param_file_dir = config_dir;
   }

   void construct( ASPPage page ) throws FndException
   {
      if( initialized ) return;
      this.page       = page;
      ASPManager mgr = page.getASPManager();
      //cfg = readFile(param_file);
      cfg = readXMLConfigFiles(mgr);

      if(DEBUG) Util.debug("\nConfig file contents:\n"+Buffers.listToString(cfg)+"\n\n");

      basedir       = mgr.getServlet().getServletConfig().getServletContext().getRealPath("");

      verifyDirPaths(cfg, mgr); //should be called after fetching base_dir

//      parseBuffer(cfg, cfg, null);
      ConfigFileParser.parseConfigBuffer(cfg, params, macros);

      thread_buffer = fetchThreadBuffer(cfg);
      //Bug id 42390, start
      application_compatibility = getParameter("ADMIN/APPLICATION_COMPATIBILITY","");
      //Bug id 42390, end

      system_type   = getParameter("ADMIN/FNDEXT/TYPE","APPL_USER");
      system_id     = getParameter("ADMIN/FNDEXT/ID","SYSTEM");
      shared_secret = getParameter("ADMIN/FNDEXT/SECRET","");

      initAndVerifyStatic();

      profile_cache_max_size = Integer.parseInt(getParameter("ADMIN/PROFILE_CACHE/MAX_SIZE","100"));
      profile_cache_time_out = Integer.parseInt(getParameter("ADMIN/PROFILE_CACHE/TIME_OUT","30"));

      translation_loading_buffer_size = Integer.parseInt(getParameter("ADMIN/TRANSLATION_LOADING_BUFFER_SIZE","30000"));
      
      //looking for allowed hosts
      String requesting_names = "";
      String returned_name = "";
      String returned_context_path = "";
      String returned_protocol = "";
      String allowed_hosts_list = "";
      String cookie_prefix = "";
      String cookie_path = "";
      StringTokenizer host_names = null;
      int count = 1;

      while(!"END".equals(requesting_names = getParameter("APPLICATION/REQUESTING_HOSTS/HOST"+count+"/REQUESTING_NAMES","END")))
      {
          returned_name = getParameter("APPLICATION/REQUESTING_HOSTS/HOST"+count+"/RETURNED_NAME","NONE");
          returned_context_path = getParameter("APPLICATION/REQUESTING_HOSTS/HOST"+count+"/RETURNED_CONTEXT_PATH","NONE");
          if("NONE".equals(returned_context_path))
              returned_context_path = getParameter("APPLICATION/PATH");
          else if("/".equals(returned_context_path))
              returned_context_path = "";
          cookie_prefix = getParameter("APPLICATION/REQUESTING_HOSTS/HOST"+count+"/COOKIE_PREFIX","NONE");
          cookie_path   = getParameter("APPLICATION/REQUESTING_HOSTS/HOST"+count+"/COOKIE_PATH","NONE");
          returned_protocol = getParameter("APPLICATION/REQUESTING_HOSTS/HOST"+count+"/PROTOCOL","NONE");
          host_names = new StringTokenizer(requesting_names,",");
          // key=host_no name value=protocol,returned name,returned context path
          hosts.put(count+"",returned_protocol+","+returned_name+","+returned_context_path+","+cookie_prefix+","+cookie_path);
          // key=host_name name value=host_no
          while(host_names.hasMoreTokens())
             requesting_hosts.put(host_names.nextToken(),count+"");
          count++;
      }

      if(!"NONE".equals(allowed_hosts_list = getParameter("APPLICATION/ALLOWED_HOST_NAMES","NONE")))
      {
          StringTokenizer allowed_hosts = new StringTokenizer(allowed_hosts_list,",");
          while(allowed_hosts.hasMoreTokens())
          {
             String host = allowed_hosts.nextToken();
             if(!requesting_hosts.containsKey(host))
                requesting_hosts.put(host,"0");
          }
      }

      inactivate_page_at_loading = getParameter("ADMIN/INACTIVATE_PAGE_AT_LOADING").equalsIgnoreCase("Y");

      cookie_root_prefix = getParameter("APPLICATION/MODIFIED_COOKIE/COOKIE_PREFIX","");
      cookie_root_path   = getParameter("APPLICATION/MODIFIED_COOKIE/COOKIE_PATH","");
      cookie_root_domain = getParameter("APPLICATION/MODIFIED_COOKIE/COOKIE_DOMAIN","");
      //application_domain   = getParameter("APPLICATION/DOMAIN");
      secured_path     = getParameter("APPLICATION/SECURED_PATH");
      unsecured_path   = getParameter("APPLICATION/UNSECURED_PATH");
      application_path = mgr.getAspRequest().getContextPath(); //"/" + getParameter("APPLICATION/PATH");

      application_context_phy_path = mgr.getPhyPath("/");
      application_phy_path = mgr.getPhyPath("/"+secured_path+"/"); //mapPath()
      if(DEBUG) Util.debug("ASPConfigFile: context path="+application_context_phy_path);
      if(DEBUG) Util.debug("ASPConfigFile: phypath="+application_phy_path);

      // system parameters
      try
      {
         if(DEBUG) Util.debug("ASPConfigFile: trying to create Factory...");
         factory = (Factory)Class.forName(getParameter("ADMIN/FACTORY_CLASS_NAME","ifs.fnd.service.StandardFactory")).newInstance();
      }
      //catch( Exception x )
      catch( Throwable x )
      {
         throw new FndException(x);
      }

      //multi language stuff
      Buffer lang_buff = cfg.getBuffer("LANGUAGE");
      language_table.clear();

      // 0th item is the dic_path entry
      // 1th item is the language_url entry      
      for (int i=2; i<lang_buff.countItems(); i++)
      {
         Buffer item_buff = (Buffer)lang_buff.getItem(i).getValue();
         String lang_active = (String)item_buff.getItem("ACTIVE").getValue();
         if ("Y".equalsIgnoreCase(lang_active))
         {
            String lang_desc = (String)item_buff.getItem("DESCRIPTION").getValue();
            String lang_code = (String)lang_buff.getItem(i).getName();
            language_table.put(lang_code,lang_desc);
            if (item_buff.getItem("GROUP_SEPARATOR",null)==null)
            {
               try
               {
                  int sep = (int)(new DecimalFormatSymbols(new Locale(lang_code))).getGroupingSeparator();
                  if (sep==160)
                     is_160_used_in_groupings += lang_code.toUpperCase() + ",";
               }
               catch (Exception e)
               {

               }

            }

         }
      }
      multi_language_enabled = (language_table.size()>1);
      if(DEBUG) Util.debug("ASPConfigFile: Continuing with other system parameters...");

      if("Y".equals(getParameter("ADMIN/HTML_RESPONSE/GZIP/ENABLE","N")))
      {
         gzip_enabled = true;

         ip_enable_masks = createIPMask(getParameter("ADMIN/HTML_RESPONSE/GZIP/MASK/ENABLED/IP",""));
         ip_disable_masks = createIPMask(getParameter("ADMIN/HTML_RESPONSE/GZIP/MASK/DISABLED/IP",""));
         min_zipped_size = Integer.parseInt(getParameter("ADMIN/HTML_RESPONSE/GZIP/MIN_SIZE","0"));
      }
      application_password = getParameter("APPLICATION/PASSWORD",null);
      application_id       = getParameter("APPLICATION/ID",null);

      debug_page_id       = "Y".equals(getParameter("AUDIT/__DEBUG/SHOW_PAGE_ID",  "N"));
      debug_mgr_reference = "Y".equals(getParameter("AUDIT/__DEBUG/SHOW_REFERENCE","N"));
      debug_send_js       = "Y".equals(getParameter("AUDIT/__DEBUG/SEND_JS",       "N"));

      srv_fmt            = new ServerFormatter(getParameter("ADMIN/TIME_ZONE/SERVER",null),IfsNames.serverDateMask);
      time_zone          = getParameter("ADMIN/TIME_ZONE/CLIENT",null);
      max_pack_len       = Integer.parseInt(getParameter("ADMIN/MAX_PACK_LEN","1024"));
      def_buffer_size    = Integer.parseInt(getParameter("ADMIN/BUFFER_SIZE","100"));
      def_mobile_buffer_size    = Integer.parseInt(getParameter("ADMIN/MOBILE_BUFFER_SIZE","10"));
      
      protocol           = getParameter("APPLICATION/PROTOCOL","http");
      mts_progid         = getParameter("ADMIN/MTS_PROGID","IFS.MTSManager");
      buffering_response = "Y".equals(getParameter("ADMIN/BUFFERING_RESPONSE","N"));

      language_code      = getParameter("APPLICATION/DEFAULT_LANGUAGE","en");
      config_user        = getParameter("ADMIN/CONFIG_USER",null);

      String passwdkey = "ADMIN/CONFIG_PASSWORD";
      config_password  = getParameter(passwdkey,null);
      if( "Y".equals(getParameter("ADMIN/IS_PASSWORD_ENCRYPTED","Y")) )
      {
         try
         {
            config_password = FndEncryption.decrypt(config_password);
         }
         catch( Exception any )
         {
            throw (new FndException("FNDCFFERRPASSWD: Failed while decrypting password")).addCaughtException(any);
         }
         this.params.put(passwdkey, config_password);
      }

      String tmmetname = getParameter("ADMIN/TRANSACTION_MANAGER","RMI");
      if("JAP".equals(tmmetname))
         tm_method = ASPConfig.TM_JAP;
      else if("RMI".equals(tmmetname))
         tm_method = ASPConfig.TM_RMI;
      else if("SOCKET__".equals(tmmetname))
         tm_method = ASPConfig.TM_SOCKET;
      else
         throw new FndException("FNDCFFEXCMIS: Transaction Manager method '&1' not defined or is obsolete!",tmmetname);
      lb_group = (application_id==null?"":application_id+"-") + language_code;

      netscape_head_tag = getParameter("ADMIN/HEAD_TAG/DEFAULT/MOZILLA_FAMILY","");
      explorer_head_tag = getParameter("ADMIN/HEAD_TAG/DEFAULT/IE","");

      mobile_images_location  = getParameter("APPLICATION/LOCATION/MOBILE_IMAGES", "common/images/mobile/");
      images_location  = getParameter("APPLICATION/LOCATION/IMAGES", "common/images/");
      rtl_images_location  = getParameter("APPLICATION/LOCATION/RTL_IMAGES", "common/images/rtl");
      
      icon_location    = getParameter("APPLICATION/LOCATION/ICONS", images_location + "/icons");
      translated_images_location  = getParameter("APPLICATION/LOCATION/TRANSLATED_IMAGES", images_location+"translated/");
      stylesheets_location  = getParameter("APPLICATION/LOCATION/STYLESHEETS", "common/stylesheets/");
      scripts_location = getParameter("APPLICATION/LOCATION/SCRIPTS","common/scripts/");
      mobile_scripts_location = getParameter("APPLICATION/LOCATION/MOBILESCRIPTS","common/mobilescripts/");
      language_url = getParameter("LANGUAGE/LANGUAGE_URL",scripts_location+"LanguageSelector.page");
      show_client_util_frame = "Y".equals(getParameter("AUDIT/__DEBUG/SHOW_CLIENT_UTIL_FRAME","N"));
      validation_timeout_time = getParameter("ADMIN/VALIDATION/TIMEOUT_TIME","100");

      portal_location      = getParameter("APPLICATION/LOCATION/PORTAL","Default.page");
      navigator_location   = getParameter("APPLICATION/LOCATION/NAVIGATOR","Navigator.page?MAINMENU=Y&amp;NEW=Y");
      addlink_location     = getParameter("APPLICATION/LOCATION/ADDLINK",scripts_location+"AddLink.page");
      webhelp_location     = getParameter("APPLICATION/LOCATION/WEBHELP","webhelp.htm");
      portalhelp_location  = getParameter("APPLICATION/LOCATION/PORTALHELP","webhelp.htm");
      page_error_image     = getParameter("PAGE/IMAGE/ERROR","stopsign.gif");
      page_warning_image   = getParameter("PAGE/IMAGE/WARNING","warningsign.gif");
      page_info_image      = getParameter("PAGE/IMAGE/INFO","stopsign.gif");
      page_body_image      = getParameter("PAGE/IMAGE/BODY","back.gif");

      header_refresh           = getParameter("PAGE/HEADER/REFRESH", "refresh.gif");
      header_navigator         = getParameter("PAGE/HEADER/NAVIGATE", "navigator.gif"); 
      header_navigator_pop     = getParameter("PAGE/HEADER/NAVIGATE_POP", "navigator_pop.gif"); 
      header_options    = getParameter("PAGE/HEADER/OPTION", "options.gif");  
      header_configure  = getParameter("PAGE/HEADER/CONFIG_PORTAL", "configure.gif");
      header_help       = getParameter("PAGE/HEADER/HELP", "help.gif");
      header_whatsthis  = getParameter("PAGE/HEADER/WHATSTHIS", "whatsthis.gif");
      header_home       = getParameter("PAGE/HEADER/HOME", "home.gif");
      header_home_pop   = getParameter("PAGE/HEADER/HOME_POP", "home_pop.gif");
      header_ifs_logo  = getParameter("PAGE/HEADER/IFSLOGO", "ifslogo.gif");

      debug_cookie_script           = initDebugCookieScript();
      generic_client_script         = readGenericClientScriptFile();
      constant_client_script        = readClientScriptFile();
      late_constant_client_script   = readLateClientScriptFile();

      validation_method_ie = getParameter("ADMIN/VALIDATION/METHOD/IE", page.ACTIVEX_VALIDATION);
      if(!(page.ACTIVEX_VALIDATION.equalsIgnoreCase(validation_method_ie)||page.IFRAME_VALIDATION.equalsIgnoreCase(validation_method_ie)))
         throw new FndException("FNDVALIDATIONMETHODERRIE: '&1' is not a valid validation method for Internet Explorer. Method should be either 'ActiveX' or 'IFrame'. Please correct the <validation_method><ie> in your webclientconfig.xml", validation_method_ie);

      validation_method_netscape7 = page.SCRIPT_VALIDATION;//getParameter("ADMIN/VALIDATION_METHOD/MOZILLA_FAMILY", page.SCRIPT_VALIDATION);
      //if(!(page.SCRIPT_VALIDATION.equalsIgnoreCase(validation_method_netscape7)))
      //   throw new FndException("FNDVALIDATIONMETHODERRNE: '&1' is not a valid validation method for Netscape Navigator. Method should be 'Script'. Please correct the <validation_method><netscape7> value in your webclientconfig.xml", validation_method_netscape7);
      generic_clientscript_file_name = getParameter("ADMIN/GENERIC_JAVASCRIPT_FILE_NAME","genericclientscript.js");
      clientscript_file_name = getParameter("ADMIN/JAVASCRIPT_FILE_NAME","clientscript.js");
      late_clientscript_file_name = getParameter("ADMIN/LATE_JAVASCRIPT_FILE_NAME","late_clientscript.js");

      body_tag              = initBodyTag();
      mobile_body_tag       = initMobileBodyTag();
      iframe_tag            = initIFRAMETag();
      lov_url               = initLOVURL();
      dynamic_lov_url       = initDynamicLOVURL();
      iid_lov_url           = initDynamicIidLOVURL();
      lov_html              = initLOVHTML();
      temp_path             = convertPath(getParameter("APPLICATION/TEMP_PATH",
                                                       OSInfo.getOSType()==OSInfo.OS_NT ? "C:\\" : "/"));
      validation_url        = initValidationURL();

      count_db_rows = "Y".equals(getParameter("ADMIN/COUNT_DB_ROWS","Y"));

      row_status_image_new    = getParameter("ROW_STATUS/IMAGE/NEW","row_new.gif");
      row_status_image_modify = getParameter("ROW_STATUS/IMAGE/MODIFY","row_modify.gif");
      row_status_image_remove = getParameter("ROW_STATUS/IMAGE/REMOVE","row_remove.gif");
      row_status_image_normal = getParameter("ROW_STATUS/IMAGE/NORMAL","row_normal.gif");

      lov_window_width      = Integer.parseInt(getParameter("LOV/WINDOW/WIDTH","500"));
      lov_window_height     = Integer.parseInt(getParameter("LOV/WINDOW/HEIGHT","500"));
      lov_image             = getParameter("LOV/IMAGE/FILE",images_location + "lov.gif");
      lov_pop_image         = getParameter("LOV/IMAGE/POPUP_FILE",images_location + "lovpop.gif");
      lov_image_properties  = " width=" + getParameter("LOV/IMAGE/WIDTH","13") + " height=" + getParameter("LOV/IMAGE/HEIGHT","15") + " border=" + getParameter("LOV/IMAGE/BORDER","0");

      //initLOVTags();

      navigator_root_image = getParameter("NAVIGATOR/IMAGE/ROOT","navigator_root.gif");
      navigator_node_image = getParameter("NAVIGATOR/IMAGE/NODE","navigator_folder.gif");
      navigator_item_image = getParameter("NAVIGATOR/IMAGE/ITEM","navigator_web_window.gif");

      head_tag_error_ie    = getParameter("ADMIN/HEAD_TAG/ERROR/IE","");
      head_tag_error_nn    = getParameter("ADMIN/HEAD_TAG/ERROR/MOZILLA_FAMILY","");

      column_return_image  = getParameter("TABLE/COLUMN/STATUS/RETURN/IMAGE","ClickIndicator.gif");

      alert_box_on_error_ie = ("ALERT".equals(getParameter("ADMIN/DISPLAY_ERROR/IE","PAGE")) || "IFS_DIALOG".equals(getParameter("ADMIN/DISPLAY_ERROR/IE","PAGE")));
      alert_box_on_error_nn = ("ALERT".equals(getParameter("ADMIN/DISPLAY_ERROR/MOZILLA_FAMILY","PAGE")) || "IFS_DIALOG".equals(getParameter("ADMIN/DISPLAY_ERROR/MOZILLA_FAMILY","PAGE")));
      alert_box_ifs_dialog_ie = "IFS_DIALOG".equals(getParameter("ADMIN/DISPLAY_ERROR/IE","PAGE"));
      alert_box_ifs_dialog_nn = "IFS_DIALOG".equals(getParameter("ADMIN/DISPLAY_ERROR/MOZILLA_FAMILY","PAGE"));
      add_error_info        = "Y".equals(getParameter("ADMIN/SHOW_ERROR_STACK","Y"));

      security_realm = getParameter("ADMIN/USER_AUTHENTICATION/SECURITY_REALM","IFSApplications");
      config_realm   = getParameter("ADMIN/USER_AUTHENTICATION/CONFIG_REALM","client-login");
      authorization_method = getParameter("ADMIN/USER_AUTHENTICATION/AUTH_METHOD",FORM);
      auth_header_name     = getParameter("ADMIN/USER_AUTHENTICATION/AUTH_HEADER_NAME","");

      //externally_identified = "Y".equals(getParameter("ADMIN/USER_AUTHENTICATION/EXTERNALLY_IDENTIFIED","N"));
      use_authentication = "Y".equals(getParameter("ADMIN/USER_AUTHENTICATION/AUTHENTICATE","Y"));

      user_auto_logoff_time = Integer.parseInt(getParameter("ADMIN/USER_AUTHENTICATION/AUTO_LOGOFF_TIME","0"));
      auth_user_cookie_name = getParameter("ADMIN/USER_AUTHENTICATION/COOKIE_NAME","__Authorized_User__");
      logon_url             = getParameter("ADMIN/USER_AUTHENTICATION/LOGON_URL",scripts_location+"Logon.page");
      logon_error_url       = getParameter("ADMIN/USER_AUTHENTICATION/ERROR_URL",scripts_location+"Error.page");
      //logon_server_name   = getParameter("ADMIN/USER_AUTHORIZATION/SERVER_NAME",null);
      web_user              = getParameter("ADMIN/USER_AUTHENTICATION/WEB_USER",null);

      //identified_by_jsr168_portal = "Y".equals(getParameter("ADMIN/USER_AUTHENTICATION/EXTERNAL_IDENTIFICATION/IDENTIFIED_BY_JSR168_PORTAL","N"));
      //identified_by_plugin        = "Y".equals(getParameter("ADMIN/USER_AUTHENTICATION/EXTERNAL_IDENTIFICATION/IDENTIFIED_BY_PLUGIN/ENABLE","N"));
      auth_plugin_class_name      = getParameter("ADMIN/USER_AUTHENTICATION/AUTH_PLUGIN_CLASS","");

      is_logoff_enabled = "Y".equals(getParameter("EXTERNALLY_IDENTIFIED/ENABLE_LOGOFF","N"));
      logoff_script = getParameter("EXTERNALLY_IDENTIFIED/SCRIPT","");

      available_data_stores = Str.isEmpty(getParameter("ADMIN/FNDEXT/AVAILABLE_DATA_STORES",""))? false:true;
      restrict_history      = "Y".equals(getParameter("ADMIN/RESTRICT_BROWSER_HISTORY","N"));

      encode_translations = "Y".equals(getParameter("ADMIN/ENCODE_TRANSLATIONS","N"));
      send_context_cache  = false;
      remove_old_context  = "Y".equals(getParameter("ADMIN/CONTEXT/REMOVE_OLD","N"));

      url_encode_function = "";

      localized_address_class = getParameter("ENTERW/LOCALIZE_ADDRESS_CLASS","ifs.fnd.asp.LocalizedAddressField");
      display_layout = getParameter("ADMIN/ADDRESS_LAYOUT/DISPLAY_LAYOUT","");
      edit_layout = getParameter("ADMIN/ADDRESS_LAYOUT/EDIT_LAYOUT","");

      files.put(param_file_dir,this);
      //initAndVerifyStatic();

      if(getParameter("ADMIN/BROWSER_CACHE_DISABLED","Y").equalsIgnoreCase("Y"))
          browser_cache_disabled = true;
      else
          browser_cache_disabled = false;

      initProxyVariables();
      config_client_script_netscape = initConfigClientScript(false);
      config_client_script_explorer = initConfigClientScript(true);
      png_correction_script = "function setImageType(img, imgName) // correctly handle PNG/GIF transparency in Win IE 5.5 & 6.\n"+
                    "{\n" +
                    "   var arVersion = navigator.appVersion.split('MSIE');\n"+
                    "   var version = parseFloat(arVersion[1]);\n" + 
                    "   if (!img) return;" +
                    "   if ((version < 7))\n"+
                    "      img.src = imgName+'.gif';\n"+
                    "   else\n"+
                    "      img.src = imgName+'.png';\n"+
                    "}\n";


      new_hover_script = initHoverScript();
      //new_rtl_hover_script = initRTLHoverScript();

      if(inactivate_page_at_loading)
        page_mask_tag = "<div id=\"hidepage\" style=\"position: absolute; left:0px;top:0px; height: 100%; width: 100%;\">\n<table width=100% height=100%> <tr><td></td></tr> </table></div>\n";
      else
        page_mask_tag = "";

      page = null;

      calendar_week_start_day = getParameter("CALENDAR/WEEK_START_DAY","0");

      initCalendarTags();

      home_enabled = "Y".equalsIgnoreCase(getParameter("ADMIN/ENABLE_ACTION_BUTTONS/HOME","Y"));
      options_enabled = "Y".equalsIgnoreCase(getParameter("ADMIN/ENABLE_ACTION_BUTTONS/OPTIONS","Y"));
      navigate_enabled = "Y".equalsIgnoreCase(getParameter("ADMIN/ENABLE_ACTION_BUTTONS/NAVIGATE","Y"));
      help_enabled = "Y".equalsIgnoreCase(getParameter("ADMIN/ENABLE_ACTION_BUTTONS/HELP","Y"));
      portal_config_enabled = "Y".equalsIgnoreCase(getParameter("ADMIN/ENABLE_ACTION_BUTTONS/PORTAL_CONFIGURATION","Y"));
      portlet_config_enabled = "Y".equalsIgnoreCase(getParameter("ADMIN/ENABLE_ACTION_BUTTONS/PORTLET_CONFIGURATION","Y"));
      iee_dockout_enabled = "Y".equalsIgnoreCase(getParameter("AURORA/ENABLE_DOCKOUT","Y"));
      multichoice_lov_enabled = "Y".equals(getParameter("ADMIN/MULTI_CHOICE_LOV","Y"));
      iid_to_lov_enabled      = "Y".equals(getParameter("ADMIN/FIND_MODE_IID_TO_LOV","Y"));

      //common_msg_file_path  = convertPath(getParameter("IFS_COMMON_MESSAGES/MESSAGE_FILE_PATH",""));
      //common_msg_bullet_tag = getParameter("IFS_COMMON_MESSAGES/MESSAGE_BULLET_IMAGE","blue-ball-small.gif") + "'>&nbsp;";//getCommonMessagesBulletTag(images_location);
      initFieldMasks();

      //initialize security handler
      SecurityHandler.init(params);

      //Bug id 42390, start
      query_hints_on = false;

      ASPCommand cmd = new ASPCommand(mgr).construct();
      cmd.defineCustomFunction("Fnd_Setting_API.Get_Value");
      cmd.addParameter("HINTS","S","OUT",null);
      cmd.addParameter("PARAM_","S","IN","QUERY_HINTS");

      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      trans.addCommand("QUERY_HINTS", cmd);

      ASPCommand cmd2 = new ASPCommand(mgr).construct();
      cmd2.defineCustomFunction("Fnd_Setting_API.Get_Value");
      cmd2.addParameter("RESULT","S","OUT",null);
      cmd2.addParameter("PARAM_","S","IN","IFS_CURR_PRECISION");
      trans.addCommand("CURR_PRECISION", cmd2);
      
      ASPCommand cmd3  = (new ASPCommand(mgr)).construct();
      cmd3.defineCustomFunction("Application_Search_Sys.Is_Hybrid_Search_Available__");
      cmd3.addParameter("RESULT", "S", null, null);  
      trans.addCommand("HYBRIDSERC", cmd3);

      trans = mgr.performConfig(trans);

      query_hints_on = ("ON".equals(trans.getValue("QUERY_HINTS/DATA/HINTS")));
      String sPrecision = trans.getValue("CURR_PRECISION/DATA/RESULT");

      String result = trans.getValue("HYBRIDSERC/DATA/RESULT");
      if(!mgr.isEmpty(result))
         is_hybrid_search_available = Boolean.parseBoolean(result);

      if (!mgr.isEmpty(sPrecision))
         precision = Integer.parseInt(sPrecision);

      //both ProfileUtil and ManageUserPassword must b called after the above mgr.performConfig
      // prepare new profile utilities
      ProfileUtils.initProfileUtils(params);

      try
      {
         ManageUserPassword password_manager = ManageUserPassword.getInstance(mgr.getASPConfig());
         change_password_enabled = password_manager.isChangePasswordEnabled();
      }
      catch (Exception e)
      {
         e.printStackTrace(System.out);
         throw new FndException(e);
      }

      domain_list = fetchDomainList(mgr);

      collectThemeData();
      aurora_features = "Y".equalsIgnoreCase(getParameter("AURORA/ENABLE_FEATURES","Y"));

      // Please do not add anything after the following line. The reason is that
      // if your code failed after you setting the initialized true it will not
      // initialize again.
      initialized = true;
   }

   private ASPBuffer fetchDomainList(ASPManager mgr)
   {
      ASPBuffer buf = mgr.newASPBuffer();
      try
      {
         String fndext_url = getParameter("ADMIN/FNDEXT/URL");
         URL domain_url = new URL(fndext_url+"/ldap-domain-config.xml");

         BufferedReader br = new BufferedReader(new InputStreamReader(domain_url.openStream()));

         StringBuffer sdoc = new StringBuffer();
         String temp = null;
         while ( (temp = br.readLine()) != null ) 
            sdoc.append(temp);

         if ( sdoc.indexOf("400 Bad Request")==-1 && sdoc.length() > 0)
         {
            DocumentBuilder docb = DocumentBuilderFactory.newInstance().newDocumentBuilder();

            Document doc = docb.parse(new InputSource(new java.io.StringReader(sdoc.toString())));
            
            NodeList lst = doc.getDocumentElement().getElementsByTagName("domain");

            int lst_len = lst.getLength();
            for (int i=0; i<lst_len; i++ )
            {
               Element node = (Element)lst.item(i);
               NodeList elet = node.getElementsByTagName("display-name");
               String display_name = elet.item(0).getFirstChild().getNodeValue();

               elet = node.getElementsByTagName("configuration");
               String config = elet.item(0).getFirstChild().getNodeValue();

               ASPBuffer row = buf.addBuffer("DATA");
               row.addItem("CONFIGURATION", config);
               row.addItem("DISPLAY_NAME",display_name);

            }
         }
      }
      catch(Exception e)
      {
      }

      return buf;
   }

   private void initProxyVariables()throws FndException
   {
       String quote = "\"";
       String quote_in_assignment = "\\\"";

       int host_count = hosts.size();
       application_path_arr = new String[host_count];
       for(int i=0; i<host_count; i++)
       {
           String[] data = Str.split((String)hosts.get((i+1)+""),",");
           String returned_context_path = data[2];
           if("".equals(returned_context_path)) // '/' entered in webclientconfig
               application_path_arr[i] = returned_context_path;
           else
               application_path_arr[i] = (returned_context_path.startsWith("/")?"":"/")+returned_context_path;
               //application_path_arr[i] = "/"+returned_context_path;
       }
   }

   /**
    Returns the ip address of 999.999.999.999 format in four byte hex format.
    */
   int ipToInt(String s_ip)
   {
      if(DEBUG) Util.debug("ASPConfigFile.ipToInt " + s_ip);

      int num_ip = 0;
      char ip;
      String str_ip;

      StringTokenizer st_ip = new StringTokenizer(s_ip, ".");
      if (st_ip.countTokens() == 4)
      {
         num_ip = 0;
         for (int i = 3; i >= 0; i--)
         {
            str_ip = st_ip.nextToken();
            if (str_ip.equals("*"))
               ip = (char)255;
            else
            {
               Integer n = new Integer(str_ip);
               ip = (char)n.intValue();
            }
            num_ip = num_ip + (ip << (i * 8));
         }
      } else if (s_ip.equals("*"))
         num_ip = 0xFFFFFFFF;

      if(DEBUG) Util.debug("ASPConfigFile.ipToInt 0x" + Integer.toHexString(num_ip));

      return num_ip;
   }

   private int [] createIPMask(String str_mask)
   {
      if(DEBUG) Util.debug("ASPConfigFile.createIPMask");

      int ip_mask_count = 0;
      if (str_mask.length() > 0)
      {
         StringTokenizer st = new StringTokenizer(str_mask, ";");
         ip_mask_count = st.countTokens();

         int ip_masks[] = new int [ip_mask_count];
         int num_ip, tokens = 0;
         String str_ip_mask, str_ip;

         while (st.hasMoreTokens())
         {
            num_ip = ipToInt(st.nextToken());
            if (num_ip != 0)
               ip_masks[tokens++] = num_ip;
         }
         ip_mask_count = tokens;

         return ip_masks;
      }
      return null;
   }


   /**
    * Reads all theme information in a loop. Stored in a 2D array
    **/
   private void collectThemeData() throws FndException 
   {
      //themes
      int i = 1;
      String css_file;
      while (!"END".equals(css_file = getParameter("THEMES/THEME"+i+"/CSS_FILE","END")))
      {
         themes[i-1][0] = getParameter("THEMES/THEME"+i+"/NAME","Theme " + i);;
         themes[i-1][1] = css_file; 
         if (DEBUG)
         {
            Util.debug(" Theme " + i + " found: " + themes[i-1][0] + " - " + themes[i-1][1]);
         }
         i++;
      }
      mobilecssfile = getParameter("THEMES/MOBILE/CSS_FILE","styles-mobile.css");
   }


   static ASPConfigFile getDir( String config_dir ) throws FndException
   {
      ASPConfigFile file = (ASPConfigFile)files.get(config_dir);
      if (file==null) file = new ASPConfigFile(config_dir);
      return file;
   }

   String convertPath( String path )
   {
      if(Str.isEmpty(path)) return path;
      return convertPath(path, basedir);
   }

   static String convertPath( String path, String basedir )
   {
      if(DEBUG) Util.debug("ASPConfigFile.convertPath("+path+","+basedir+")");

      if(Str.isEmpty(path)) return path;

      if( path.indexOf("/")>=0 && File.separatorChar!='/' )
      {
         path = Str.replace(path, "/", File.separator);
         if(DEBUG) Util.debug("  file separators converted: "+path);
      }

      //Bug 41518, start
      File pathfile = new File(path);
      if(pathfile.isAbsolute() )
         path = pathfile.getAbsolutePath();
      else
      //Bug 41518, end
         path = (new File(basedir, path)).getAbsolutePath();

      if(!path.endsWith(File.separator))
         path += File.separator;

      if(DEBUG) Util.debug("  absolute path="+path);
      return path;
   }

   /**
    * Clear the config file pool
    */
   static void clear()
   {
      files.clear();
   }

   //==========================================================================
   //  Init methods
   //==========================================================================

   private String initBodyTag() throws FndException
   {
      // Modified by Terry 20131009
      // Addtional body tag
      // Original:
      // return "topmargin=\"0\" leftmargin=\"0\" marginheight=\"0\" marginwidth=\"0\" class=\"pageBody"+
      // "\" OnLoad=\"javascript:onLoad()\" OnFocus=\"javascript:OnFocus()\" OnUnLoad=\"javascript:OnUnLoad()\"";
      String body_tag_addtional = getParameter("PAGE/BODY_TAG_ADDTIONAL", "");
      return body_tag_addtional + " topmargin=\"0\" leftmargin=\"0\" marginheight=\"0\" marginwidth=\"0\" class=\"pageBody"+
      "\" OnLoad=\"javascript:onLoad()\" OnFocus=\"javascript:OnFocus()\" OnUnLoad=\"javascript:OnUnLoad()\"";
      // Modified end
   }

   private String initLOVURL() throws FndException
   {
      return getParameter("LOV/URL", scripts_location+"Lov.page");
   }

   private String initDynamicLOVURL() throws FndException
   {
      return getParameter("LOV/DYNAMIC_URL", scripts_location+"DynamicLov.page");
   }

   private String initDynamicIidLOVURL() throws FndException
   {
      return getParameter("LOV/DYNAMIC_IID_LOV_URL", scripts_location+"DynamicIIDLov.page");
   }

   private String initValidationURL() throws FndException
   {
      return  getParameter("ADMIN/VALIDATION/URL", scripts_location+"Lookup.page?");
   }

   private String initDebugCookieScript() throws FndException
   {
      if ("Y".equals(getParameter("AUDIT/__DEBUG/SHOW_COOKIES","N")))
      {
         tmpbuf.clear();
         tmpbuf.append("<INPUT type=button class='button' value=\"Show cookie\" name=\"SHCOOKIE\" onClick=\"javascript:onClickShowCookie()\">\n");
         tmpbuf.append("<INPUT type=button class='button' value=\"Show coded cookie\" name=\"SHCODCOOKIE\" onClick=\"javascript:onClickShowCodedCookie()\">\n");
         tmpbuf.append(ASPPage.BEGIN_SCRIPT_TAG);
         tmpbuf.append("function onClickShowCookie(){alert( \"COOKIE:\\n\"+unescape(document.cookie));}\n");
         tmpbuf.append("function onClickShowCodedCookie(){alert( \"COOKIE:\\n\"+document.cookie);}\n");
         tmpbuf.append(ASPPage.END_SCRIPT_TAG);
         return tmpbuf.toString();
      }
      return null;
   }

   private String readGenericClientScriptFile() throws FndException
   {
      if(DEBUG) Util.debug("ASPConfigFile.initGenericClientScript()");
      tmpbuf.clear();
      if(debug_send_js)
      {

         String fname = getParameter("ADMIN/GENERIC_JAVASCRIPT_FILE_NAME","genericclientscript.js");
         tmpbuf.append(ASPPage.BEGIN_SCRIPT_TAG);
         String path = unsecured_path +"/"+ scripts_location;
         if(DEBUG) Util.debug("  path="+path);

         String phypath = page.getASPManager().getPhyPath(path); //mapPath()
         if(DEBUG) Util.debug("  phypath="+phypath);

         String jsfile = Util.readAndTrimFile(phypath+fname);
         tmpbuf.append(jsfile,ASPPage.END_SCRIPT_TAG);
      }

      return tmpbuf.toString();
   }


   private String readClientScriptFile() throws FndException
   {
      if(DEBUG) Util.debug("ASPConfigFile.initConstantClientScript()");
      tmpbuf.clear();
      if(debug_send_js)
      {

         String fname = getParameter("ADMIN/JAVASCRIPT_FILE_NAME","clientscript.js");
         tmpbuf.append(ASPPage.BEGIN_SCRIPT_TAG);
         //String path = _scripts_location.substring(_root_location.length());
         String path = secured_path +"/"+ scripts_location;
         if(DEBUG) Util.debug("  path="+path);

         String phypath = page.getASPManager().getPhyPath(path); //mapPath()
         if(DEBUG) Util.debug("  phypath="+phypath);

         String jsfile = Util.readAndTrimFile(phypath+fname);
         tmpbuf.append(jsfile,ASPPage.END_SCRIPT_TAG);
      }
      //else
      //{
         //tmpbuf.append(ASPPage.SRC_SCRIPT_TAG_LEFT);
         //tmpbuf.append( scripts_location, fname );
         //tmpbuf.append(ASPPage.SRC_SCRIPT_TAG_RIGHT);
      //}

      return tmpbuf.toString();
   }

   private String readLateClientScriptFile() throws FndException
   {
      if(DEBUG) Util.debug("ASPConfigFile.initLateConstantClientScript()");
      tmpbuf.clear();

      if(debug_send_js)
      {
         String fname = getParameter("ADMIN/LATE_JAVASCRIPT_FILE_NAME","late_clientscript.js");
         tmpbuf.append(ASPPage.BEGIN_SCRIPT_TAG);
         //String path = _scripts_location.substring(_root_location.length());
         String path = secured_path +"/"+scripts_location;
         if(DEBUG) Util.debug("  path="+path);

         String phypath = page.getASPManager().getPhyPath(path); //mapPath()
         if(DEBUG) Util.debug("  phypath="+phypath);

         String jsfile = Util.readAndTrimFile(phypath+fname);
         tmpbuf.append(jsfile,ASPPage.END_SCRIPT_TAG);
      }
      else
      {
         //tmpbuf.append(ASPPage.SRC_SCRIPT_TAG_LEFT);
         //tmpbuf.append( _scripts_location, fname );
         //tmpbuf.append(ASPPage.SRC_SCRIPT_TAG_RIGHT);
      }

      return tmpbuf.toString();
   }

   private String initConfigClientScript( boolean is_explorer) throws FndException
   {
      tmpbuf.clear();
      tmpbuf.append(ASPPage.BEGIN_SCRIPT_TAG);
      tmpbuf.append("ADD_MSG = \"_ADD_MSG\";\n");
      //moved stuff to ASPConfig.getConfigClientScript
      tmpbuf.append("VALIDATION_TIMEOUT_TIME = \""+ validation_timeout_time +"\";\n");

      tmpbuf.append("IS_EXPLORER = "+is_explorer+";\n");
      int lov_window_left = Integer.parseInt( getParameter("LOV/WINDOW/LEFT","100") );
      int lov_window_top  = Integer.parseInt( getParameter("LOV/WINDOW/TOP", "100") );
      tmpbuf.append("LOV_POSITION = \""+
                      ( is_explorer ?
                        (",left="+lov_window_left+",top="+lov_window_top) :
                        (",screenx="+lov_window_left+",screeny="+lov_window_top) )+"\";\n" );

      tmpbuf.append("HELP_URL =" + APP_ROOT + "+\""+ scripts_location+"Help.page\";\n" );
      tmpbuf.append("MOBILE_HELP_URL =" + APP_ROOT + "+\""+ mobile_scripts_location+"Help.page\";\n" );

      tmpbuf.append("HELP_FEATURES =\""+getParameter("PAGE/HELP_WINDOW/FEATURES","status,resizable,scrollbars")+"\";\n");
      tmpbuf.append("HELP_WIDTH =\""+getParameter("PAGE/HELP_WINDOW/WIDTH","800")+"\";\n");
      tmpbuf.append("HELP_HEIGHT =\""+getParameter("PAGE/HELP_WINDOW/HEIGHT","600")+"\";\n");

      int help_left = Integer.parseInt( getParameter("PAGE/HELP_WINDOW/LEFT","100") );
      int help_top  = Integer.parseInt( getParameter("PAGE/HELP_WINDOW/TOP", "100") );
      tmpbuf.append("HELP_POS =\""+
                  ( is_explorer ?
                    (",left="   +help_left+",top="    +help_top) :
                    (",screenx="+help_left+",screeny="+help_top) ) +"\";\n");

      tmpbuf.append("NEWWIN_FEATURES =\""+ getParameter("PAGE/NEW_BROWSER/FEATURES","status,resizable,scrollbars") +"\";\n");
      tmpbuf.append("NEWWIN_WIDTH =\""+getParameter("PAGE/NEW_BROWSER/WIDTH","800")+"\";\n");
      tmpbuf.append("NEWWIN_HEIGHT =\""+getParameter("PAGE/NEW_BROWSER/HEIGHT","600")+"\";\n");

      int newwin_left = Integer.parseInt( getParameter("PAGE/NEW_BROWSER/LEFT","100") );
      int newwin_top  = Integer.parseInt( getParameter("PAGE/NEW_BROWSER/TOP", "100") );
      tmpbuf.append("NEWWIN_POS =\""+
                  ( is_explorer ?
                    (",left="   +newwin_left+",top="    +newwin_top) :
                    (",screenx="+newwin_left+",screeny="+newwin_top) ) +"\";\n");

      tmpbuf.append("IIS_AUTHENTICATION =",EXTERNAL.equals(authorization_method)+ ";\n");
      tmpbuf.append("AUTH_COOKIE=\"", auth_user_cookie_name + "\";\n");
      tmpbuf.append("LOG_ON_URL = " + APP_ROOT + "+\"", logon_url+ "\";\n");
      tmpbuf.append("RESTRICT_HISTORY =", restrict_history  + ";\n");
      tmpbuf.append("DEPENDENT =", (getParameter("ADMIN/LOV_ALWAYS_ON_TOP").equalsIgnoreCase("Y")?"\"dependent,\"":"''")+ ";\n");
      tmpbuf.append("BROWSER_CACHE_DISABLED =", browser_cache_disabled + ";\n");
      tmpbuf.append("LOV_ALWAYS_ON_TOP =", (getParameter("ADMIN/LOV_ALWAYS_ON_TOP").equalsIgnoreCase("Y")?"true":"false")+ ";\n");

      if((is_explorer && "IFS_DIALOG".equals(getParameter("ADMIN/DISPLAY_ERROR/IE","PAGE")))||(!is_explorer && "IFS_DIALOG".equals(getParameter("ADMIN/DISPLAY_ERROR/MOZILLA_FAMILY","PAGE"))))
         tmpbuf.append("MESSAGE_PAGE_PATH =APP_ROOT + '"+scripts_location+"ifs_alert.htm';\n");
      else
         tmpbuf.append("MESSAGE_PAGE_PATH =null;\n");

      //Add parameters for hoverbuttons
      hover_enabled = "Y".equals(getParameter("COMMAND_BAR/HOVER_ENABLED","N"));
      hover_script  = "";

      if ( "Y".equals(getParameter("AUDIT/__DEBUG/CONFIRM_ON_RELOAD","N")) )
      {
         tmpbuf.append("function reloadPage()\n");
         tmpbuf.append("{\n");
         tmpbuf.append("  if( confirm(NEW_PAGE?RELOAD_MSG:EXPIRE_MSG) )\n");
         tmpbuf.append("  {\n");
         tmpbuf.append("    if ( IS_EXPLORER )\n");
         tmpbuf.append("      location.replace(CURRENT_URL);\n");
         tmpbuf.append("    else\n");
         tmpbuf.append("      location.reload(true);\n");
         tmpbuf.append("  }\n");
         tmpbuf.append("}\n\n");
      }

      tmpbuf.append(ASPPage.END_SCRIPT_TAG);
      tmpbuf.append(debug_cookie_script);
      return tmpbuf.toString();
   }

   private String initHoverScript() throws FndException
   {
       return "<script language=javascript>\n"+
              "IMAGES_PATH       = " + APP_ROOT +"+\""+images_location+"\";\n"+
              "RTL_IMAGES_PATH       = " + APP_ROOT +"+\""+rtl_images_location+"\";\n"+
              "OTHER_IMAGES_PATH = " + APP_ROOT +"+\""+images_location+"\";\n"+

              "MINIMIZE_FLAT =\""+getParameter("COMMAND_BAR/ICONS/MINIMIZE/NORMAL","min.gif")+"\";\n"+
              "MAXIMIZE_FLAT =\""+getParameter("COMMAND_BAR/ICONS/MAXIMIZE/NORMAL","max.gif")+"\";\n"+
              "loadImages();\n"+
              "</script>\n";
   }


   private String initIFRAMETag() throws FndException
   {
      tmpbuf.clear();
      if(show_client_util_frame)
         tmpbuf.append("<IFRAME  ID='__CUIF'  SRC='' NAME='__ClientUtilIFrame' WIDTH='200' HEIGHT='100' SCROLLING='yes' FRAMEBORDER='0'></IFRAME>");
      else
         tmpbuf.append("<IFRAME  ID='__CUIF'  SRC='' NAME='__ClientUtilIFrame' WIDTH='1' HEIGHT='1' SCROLLING='no' FRAMEBORDER='0'></IFRAME>");
      return tmpbuf.toString();
   }


   private String[] initLOVHTML() throws FndException
   {
      String[] html = new String[15];


      html[0]  = "<html><head>\n";
      html[1]  = //"<style type=\"text/css\">\n"+
//                 " table.main { border-left:   2px solid rgb(255,255,255);\n"+
//                 "              border-right:  2px solid rgb(0,0,0);\n"+
//                 "              border-top:    2px solid rgb(255,255,255);\n"+
//                 "              border-bottom: 2px solid rgb(0,0,0); }\n"+
//                 "</style>\n
                 "<link rel=STYLESHEET href=\""+ stylesheets_location+
                 "standard.css\" Type=\"text/css\">\n<title>IFS/Applications - List of values" +
                 "</title>\n</head>\n<body ";
      html[2]  = ">\n<form ";
      html[3]  = ">\n <table border="+getParameter("PAGE/FORM/BORDER_WIDTH","1")+" width=";
      html[4]  = " cellspacing=0 bgcolor=\""+
                 //getParameter("SCHEME/FORM/BGCOLOR","#C0C0C0")+
                 "\" class=main>\n"+
                 "  <tr>\n"+
                 "   <td width=\"100%\">\n"+
                 "    <table border=0 cellspacing=0 width=\"100%\" height=\"100%\" cellpadding=0>\n"+
                 "     <tr>\n"+
                 "      <td width=\"100%\" bgcolor=\""+
                 //getParameter("SCHEME/TITLE_BAR/BGCOLOR","#000000")+
                 "\" height=";
      html[5]  = ">&nbsp;<img src=\""+ images_location+"webwindow.gif\" align=absmiddle width=15 height=13> ";
      html[6]  = " <font face="+
                 //getParameter("SCHEME/TITLE_BAR/FONT/FACE","Arial")+
                 " color=\""+
                 //getParameter("SCHEME/TITLE_BAR/FONT/COLOR","#FFFF00")+
                 "\"><strong><em><small>";
      html[7]  = " List of&nbsp;";
      html[8]  = "</small></em></strong></font></td>\n"+
                 "     </tr>\n"+
                 "     <tr>\n"+
                 "      <td width=\"100%\" height=";
//      html[9]  = " valign=top align=center>\n";
      html[9]  = " valign=top align=left>\n";
      html[10] = "       <hr>\n"+
                 "        <table border=0 width=\"100%\" cellpadding=10 cellspacing=0><tr><td width=100%>\n";
      html[11] = "        </td></tr></table>\n"+
                 "      </td>\n"+
                 "     </tr>\n"+
                 "     <tr>\n"+
                 "      <td width=\"100%\" height=";
      html[12] = " valign=top align=left><strong><small><font face="+
                 //getParameter("SCHEME/FORM/FONT/FACE","Arial")+
                 ">&nbsp;";
      html[13] = "</font></small></strong>\n";
      html[14] = "\n"+
                 "      </td>\n"+
                 "     </tr>\n"+
                 "    </table>\n"+
                 "   </td>\n"+
                 "  </tr>\n"+
                 " </table>\n"+
                 "</form>\n</body>\n</html>\n";

      return html;
   }


   private void initAndVerifyStatic() throws FndException
   {
      String parname;
      int par;
      String spar;

      /*parname = "ADMIN/PROFILE_CACHE/MAX_SIZE";
      par = Integer.parseInt( getParameter(parname,"50") );
      if( profile_cache_max_size == -1 )
         profile_cache_max_size = par;
      else if( profile_cache_max_size != par )
         throw staticParamError(parname);

      parname = "ADMIN/PROFILE_CACHE/TIME_OUT";
      par = Integer.parseInt( getParameter(parname,"30") );
      if( profile_cache_time_out == -1 )
         profile_cache_time_out = par;
      else if( profile_cache_time_out != par )
         throw staticParamError(parname);*/


      parname = "STATIC/ADMIN_THREAD/EMPTY_GARBAGE/LIMIT";
      spar = getParameter(parname,"");
      if( garbage_limit == null )
         garbage_limit = spar;
      else if( !garbage_limit.equals(spar) )
         throw staticParamError(parname);

      parname = "STATIC/PAGE_POOL/MAX_SIZE";
      par = Integer.parseInt( getParameter(parname,"200") );
      if( page_pool_max_size == -1 )
         page_pool_max_size = par;
      else if( page_pool_max_size != par )
         throw staticParamError(parname);

      parname = "STATIC/PAGE_POOL/TIME_OUT";
      par = Integer.parseInt( getParameter(parname,"120") );
      if( page_pool_time_out == -1 )
         page_pool_time_out = par;
      else if( page_pool_time_out != par )
         throw staticParamError(parname);

      parname = "STATIC/GS_CACHE/TEMP_LOCATION";
      spar = getParameter(parname,"/"+secured_path+"/images");
      if( graph_temp_location == null )
         graph_temp_location = spar;
      else if( !graph_temp_location.equals(spar) )
         throw staticParamError(parname);

      graph_temp_path = page.getASPManager().getPhyPath(graph_temp_location); //mapPath()

      parname = "STATIC/GS_CACHE/TIME_OUT";
      par = Integer.parseInt( getParameter(parname,"60") );
      if( graph_cache_time_out == -1 )
         graph_cache_time_out = par;
      else if( graph_cache_time_out != par )
         throw staticParamError(parname);

      parname = "STATIC/TIFF_CACHE/TIME_OUT";
      par = Integer.parseInt( getParameter(parname,"5") );
      if( tiff_cache_time_out == -1 )
         tiff_cache_time_out = par;
      else if( tiff_cache_time_out != par )
         throw staticParamError(parname);

   }


   private FndException staticParamError( String param )
   {
      return new FndException("FNDCFFSTPAR: The static parameter '&1' has different definitions.",param);
   }


   private String translate( String text )
   {
      return page.getASPManager().translateJavaText(text);
   }

   //==========================================================================
   // Private methods used for reading and parsing configuration files
   //==========================================================================

   /**
    * Read the Web Client configuration file from disk to an instance of Buffer class.
    */
   private void listBuffer( Buffer buf, String indent )
   {
      if(DEBUG) Util.debug(indent+"!"+Str.nvl(buf.getHeader(),""));
      BufferIterator iter = buf.iterator();
      int i=0;

      while( iter.hasNext() )
      {
         Item item = iter.next();
         if( item.isCompound() )
         {
            if(DEBUG) Util.debug(indent+i+":"+item.toString());
            listBuffer(item.getBuffer(),indent+"   ");
         }
         else
            if(DEBUG) Util.debug(indent+i+":"+item.toString());
         i++;
      }
   }


   private Buffer readXMLConfigFiles(ASPManager mgr) throws FndException
   {
      if(DEBUG) Util.debug("ASPConfigFile: Reading xml configuration files");

      String cfgdir = mgr.getASPConfigFileDir();
      if(DEBUG) Util.debug("ASPConfigFile: Configuration directory set to: "+cfgdir);

      // reading and parsing all configuration files
      File webconfigdir = new File(cfgdir);
      Buffer cfgbuf     = new StandardBuffer(); // ToDo: Factory should be used
      try
      {
         if(webconfigdir.isDirectory())
         {
            boolean webcfgfile_read = false;
            File[] files = webconfigdir.listFiles();
            for(int i=0;i<files.length;i++)
            {
               File config_file = files[i];
               String file_name = config_file.getName();
               if( config_file.isFile() && file_name.endsWith(".xml") )
               {
                  if( WEB_CONFIG_FILE.equals(file_name) )
                     webcfgfile_read = true;
//                  copyXML(config_file,cfgbuf);
                  ConfigFileParser.parseXMLFile(config_file, cfgbuf, false);
               }
            }
            if(!webcfgfile_read)
               throw new FndException("FNDCFFWEBFILEMIS: The Web Client configuration file [&1] is missing from the directory &2",WEB_CONFIG_FILE, cfgdir);
         }
         else
            throw new FndException("FNDCFFNODIR: '&1' is not a directory!",cfgdir);
      }
      catch( Exception e )
      {
         throw new FndException(e);
      }

      Buffers.mergeDuplicates(cfgbuf);
      if(DEBUG) Util.debug("Final config buffer: "+cfgbuf);
      //listBuffer(cfgbuf,"");
      return cfgbuf;
   }

   /*
   public void copyXML(File cfg_file, Buffer dest) throws FndException
   {
      try
      {
         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
         DocumentBuilder builder = factory.newDocumentBuilder();
         Document doc = builder.parse(cfg_file);

         copyXML(doc, dest);
      }
      catch(SAXException e)
      {
         if(DEBUG) Util.debug("Caught exception:\n" + Str.getStackTrace(e));
         String msg = e.getMessage();
         if(e instanceof SAXParseException)
         {
            SAXParseException spe = (SAXParseException)e;
            int col    = spe.getColumnNumber();
            int line   = spe.getLineNumber();
            String pid = spe.getPublicId();
            String sid = spe.getSystemId();
            if(DEBUG) Util.debug("Line: "+line+", Column: "+col+", Public ID: '"+pid+"', System ID: '"+sid+"'");
            if(col<0)
               throw new FndException("FNDCFFCFGSAX1: Error '&1' in line &2, while parsing file '&3'",
                                      msg, line+"", cfg_file.getName() );
            else
               throw new FndException("FNDCFFCFGSAX2: Error '&1' in line/column &2, while parsing file '&3'",
                                      msg, line+"/"+col, cfg_file.getName() );
         }
         else
            throw new FndException("FNDCFFCFGSAX3: Parsing of configuration file '&1' failed with message '&2'",
                                   cfg_file.getName(), msg );
      }
      catch(IOException e)
      {
         if(DEBUG) Util.debug("Caught exception:\n" + Str.getStackTrace(e));
         throw new FndException("FNDCFFCFGIOERR: Could not read configuration file '&1'",cfg_file.getName());
      }
      catch(ParserConfigurationException e)
      {
         if(DEBUG) Util.debug("Caught exception:\n" + Str.getStackTrace(e));
         throw new FndException("FNDCFFCFGPARSE: Could not obtain an XML parser!");
      }
   }

   public void copyXML(Document doc, Buffer dest)
   {
      if(DEBUG) Util.debug("ASPConfigFile.copyXML()");

      NodeList nodes = doc.getElementsByTagName("webclientconfig");
      Node n = nodes.item(0); //there should only be one!
      if(DEBUG)
      {
         for(int i=0;i<nodes.getLength();i++)
            Util.debug("Found node:"+nodes.item(i).getNodeName());
         if(n==null)
            Util.debug("ASPConfigFile: File is not a Web Client configuration file.");
      }

      search_level = 0;
      depthSearchXML(n,dest);
      if(DEBUG) Util.debug("\nBuffer contents:\n"+Buffers.listToString(dest)+"\n\n");
   }

   private int search_level;  // used only for debugging

   private void parseDebug( String line )
   {
      for(int i=0; i<search_level; i++)
         line = "  " + line;
      Util.debug(line);
   }

   private void depthSearchXML(Node node, Buffer dest)
   {
      if(DEBUG)
      {
         search_level++;
         parseDebug("ASPConfigFile.depthSearchXML(): search_level="+search_level);
      }

      NodeList nodes = node.getChildNodes();
      if(DEBUG) parseDebug("Nested nodes:\n"+nodes);

      int len = nodes.getLength();
      if(DEBUG) parseDebug("Nodes length: "+len);

      for(int i=0; i<len; i++)
      {
         Node next_node = nodes.item(i);
         String node_name = next_node.getNodeName();
         if(DEBUG) parseDebug("Found node("+i+"): '"+ node_name + "', value:\""+
                              Str.replace(Str.replace(next_node.getNodeValue(),"\r","\\r"),"\n","\\n")+"\"");

         if(next_node.getNodeType()==Node.COMMENT_NODE)
         {
            if(DEBUG) parseDebug(" - Comment node. Continuing.");
            continue;
         }

         if(next_node.hasChildNodes())
         {
            NodeList child_nodes = next_node.getChildNodes();
            Node     first_child = child_nodes.item(0);

            // ASSUMPTION:
            // A node is a leaf only if it has only one child and the type of the child is '#text'
            // Then the value of the child node is the value of the leaf
            if(child_nodes.getLength()==1 && "#text".equals(first_child.getNodeName()) )
            {
               if(DEBUG) parseDebug(" - '"+node_name+"' is a leaf.");
               String value = first_child.getNodeValue();
               if(DEBUG) parseDebug(" - Adding '"+node_name.toUpperCase()+"="+value+"'");
               dest.addItem(new Item(node_name.toUpperCase(),value));
            }
            else
            {
               Buffer buf = dest.newInstance();
               if(DEBUG) parseDebug(" - Adding '"+node_name.toUpperCase()+"=!'");
               dest.addItem(new Item(node_name.toUpperCase(), buf));
               depthSearchXML(next_node, buf);
            }
         }
         else
         {
            if(DEBUG) parseDebug(" - '"+node_name+"' doesn't have children. Continuing.");
            continue;
         }
      }
   }
   */

   /**
    * Read the ASP configuration file from disk to an instance of Buffer class.
    * obsolete from version 3.6.0
    */
   private Buffer readFile( String cfg_file ) throws FndException
   {
      if(DEBUG) Util.debug("ASPConfigFile: Reading configuration file: '"+cfg_file+"'");

      Hashtable files = new Hashtable();
      String pfile = Util.readAndTrimFile(cfg_file);
      int p = cfg_file.lastIndexOf(ifs.fnd.os.OSInfo.OS_SEPARATOR);
      String path = p<0 ? "" : cfg_file.substring(0,p+1);
      files.put(cfg_file.toLowerCase(), "*");

      while ( (p = pfile.indexOf(INCLUDE)) > 0 )
      {
         p += INCLUDE.length();
         String f = pfile.substring(p, pfile.indexOf("\n",p) );

         if ( files.get(f.toLowerCase())!=null )
            throw new FndException("FNDCFFRCFG: Recursiv reference of the included configuration file '&1'.",f);
         files.put(f.toLowerCase(),"*");

         String incfile = ( f.indexOf(":")<0 && !f.startsWith(ifs.fnd.os.OSInfo.OS_SEPARATOR_STRING) ) ? path + f : f;

         if(DEBUG) Util.debug("ASPConfigFile: Including configuration file: '"+incfile+"'");
         pfile = Str.replace(pfile, INCLUDE+f, "\n"+Util.readAndTrimFile(incfile) );
      }

      Buffer cfgbuf = new StandardBuffer();
      try
      {
         Buffers.copy(new Message(pfile), cfgbuf);
      }
      catch( Exception e )
      {
         throw new FndException(e);
      }
      Buffers.mergeDuplicates(cfgbuf);

      return cfgbuf;
   }


   private static void list( Buffer buf, String indent, AutoString out )
   {
      BufferIterator iter = buf.iterator();

      while( iter.hasNext() )
      {
         Item item = iter.next();
         String name = item.getName().toLowerCase();
         System.out.println("Item: "+name);
         if( item.isCompound() )
         {
            out.append(indent,"<",name,">\r\n");
            list(item.getBuffer(),indent+"  ",out);
            out.append(indent,"</",name,">\r\n");
         }
         else
         {
            out.append(indent,"<",name,">");
            out.append(Str.replace(item.getString(),"&","&amp;"));
            out.append("</",name,">\r\n");
         }
      }
   }

   /**
    * This method can be used from command prompt for converting of ASPConfig.ifm
    * file to the XML format. Use with caution!
    */
   public static void main( String[] args ) throws Exception
   {
      if(args.length != 2)
      {
         System.out.println("Syntax: java ASPConfigFile <in:cfg_file> <out:xml_file>");
         return;
      }

      ASPConfigFile cfgfile = new ASPConfigFile(args[0]);
      Buffer buf = cfgfile.readFile(args[0]);

      if( buf==null )
      {
         System.out.println("Buffer is null!");
         return;
      }

      AutoString xml = new AutoString();
      String name = "webclientconfig";
      xml.append("<",name,">\r\n");
      list(buf,"  ",xml);
      xml.append("</",name,">\r\n");

      Util.writeFile(args[1], xml.toString());
   }


   /**
    * Scan the configuration buffer and create corresponding entries in the hash table
    * 'params' with all parameters.
    * Do NOT insert parameters with empty ("") values.
    */
   /*
   private void parseBuffer( Buffer cfgbuf, Buffer buf, String entry ) throws FndException
   {
      for (int i=0; i<buf.countItems(); i++)
      {
         Item   item = buf.getItem(i);
         String key;

         if ( Str.isEmpty(entry) )
            key = item.getName();
         else
            key = entry+"/"+item.getName();

         if (item.isCompound())
            parseBuffer( cfgbuf, item.getBuffer(), key );
         else
         {
            String value = replaceMacroReferences( cfgbuf, item.getString() );
            if (DEBUG) Util.debug("ASPConfigFile: Found item ["+key+"] = '"+value+"'");
            if( !Str.isEmpty(value) ) this.params.put( key, value );
         }
      }
   }
   */

  /**
   * Make sure that temp,trace and log directories exist during runtime.
   * If the paths have not been defined in the config file or the defined paths don't exist
   * the relevant dirs will be created in the systems temp directory as denoted by the property
   * "java.io.tmpdir"
   **/
   private void verifyDirPaths(Buffer cfg, ASPManager mgr)
   {
      String port = mgr.getPortString();
      if(!Str.isEmpty(port))
         port = formatServerPortString(port);
      else
         port = "80";
      String sys_temp_dir = System.getProperty("java.io.tmpdir");
      if (Str.isEmpty(sys_temp_dir))
         sys_temp_dir = OSInfo.getOSType()==OSInfo.OS_NT ? "C:\\" : "/";

      //String app_path = (String)(cfg.findItem("APPLICATION/PATH").getValue());

      String app_path = page.getASPManager().getAspRequest().getContextPath();
      Item  app_temp_path_item  = cfg.findItem("APPLICATION/TEMP_PATH");
      if (app_temp_path_item==null)
      {
        String app_temp_path = sys_temp_dir + File.separator + "ifs" + File.separator + port + File.separator + app_path + File.separator + "temp";
        File temp_dir = new File(app_temp_path);
        boolean dir_exists = temp_dir.isDirectory();
        if (!dir_exists)
          dir_exists=temp_dir.mkdirs();
        try{
            if (dir_exists) cfg.getBuffer("APPLICATION").addItem("TEMP_PATH", app_temp_path);
        }
        catch(ItemNotFoundException e){}  //should this throw FndException and stop the flow?
      }
      else
      {
          String app_temp_path  = (String)app_temp_path_item.getValue();
          if (Str.isEmpty(app_temp_path) || !(new File(convertPath(app_temp_path)).isDirectory()) )
          {
            app_temp_path = sys_temp_dir + File.separator + "ifs" + File.separator + port + File.separator + app_path + File.separator + "temp";
            File temp_dir = new File(app_temp_path);
            boolean dir_exists = temp_dir.isDirectory();
            if (!dir_exists)
              dir_exists=temp_dir.mkdirs();
            if (dir_exists) app_temp_path_item.setValue( app_temp_path );
          }
      }

      Item log_path_item  = cfg.findItem("AUDIT/LOG/PATH");
      if (log_path_item==null)
      {
         String log_path = sys_temp_dir + File.separator + "ifs" + File.separator + port + File.separator + app_path + File.separator + "log";
         File log_dir = new File(log_path);
         boolean dir_exists = log_dir.isDirectory();
         if (!dir_exists)
             dir_exists=log_dir.mkdirs();
         try{
             if (dir_exists) cfg.getBuffer("AUDIT").getBuffer("LOG").addItem("PATH", log_path);
         }
         catch(ItemNotFoundException e){}
      }
      else
      {
          String log_path = (String)log_path_item.getValue();
          if (!CONSOLE.equalsIgnoreCase(log_path))
             if (Str.isEmpty(log_path) || !(new File(convertPath(log_path)).isDirectory()) )
             {
               log_path = sys_temp_dir + File.separator + "ifs" + File.separator + port + File.separator + app_path + File.separator + "log";
               File log_dir = new File(log_path);
               boolean dir_exists = log_dir.isDirectory();
                if (!dir_exists)
                 dir_exists=log_dir.mkdirs();
               if (dir_exists) log_path_item.setValue( log_path );
             }
      }

      Item trace_path_item  = cfg.findItem("AUDIT/TRACE/PATH");
      if (trace_path_item==null)
      {
          String trace_path = sys_temp_dir + File.separator + "ifs" + File.separator + port + File.separator + app_path + File.separator + "trace";
          File trace_dir = new File(trace_path);
          boolean dir_exists = trace_dir.isDirectory();
          if (!dir_exists)
            dir_exists=trace_dir.mkdirs();
          try{ if (dir_exists) cfg.getBuffer("AUDIT").getBuffer("TRACE").addItem("PATH", trace_path);
         }
         catch(ItemNotFoundException e){}
      }
      else
      {
          String trace_path = (String)trace_path_item.getValue();
          if (!CONSOLE.equalsIgnoreCase(trace_path))
             if (Str.isEmpty(trace_path) || !(new File(convertPath(trace_path)).isDirectory()) )
             {
               trace_path = sys_temp_dir + File.separator + "ifs" + File.separator + port + File.separator + app_path + File.separator + "trace";
               File trace_dir = new File(trace_path);
               boolean dir_exists = trace_dir.isDirectory();
               if (!dir_exists)
                 dir_exists=trace_dir.mkdirs();
               if (dir_exists) trace_path_item.setValue( trace_path );
             }
      }
  }

  private Buffer fetchThreadBuffer(Buffer org)
    {

        Buffer buff1;
        Buffer buff2;
        try{
            buff1 = org.getBuffer("STATIC");
            buff2 = buff1.getBuffer("ADMIN_THREAD");
        }
        catch(ItemNotFoundException e){return null;}
        return buff2;
    }

   /**
    * Resolve a macro reference to another parameter.
    */
   /*
   private String replaceMacroReferences( Buffer buf, String text ) throws FndException
   {
      if ( Str.isEmpty(text) ) return "";
      try
      {
         String old = text; // only for debug

         int i;
         while ( (i = text.indexOf("&(") ) >= 0 )
         {
            int j = text.indexOf(")", i+2);
            if ( j<0 )
               throw new FndException("FNDCFFSYNERRCONF: Syntax error in configuration file for value '&1'.",text);
            String key = text.substring(i+2,j);

            if ( macros.get(key)!=null )
               throw new FndException("FNDCFFRCALL: Recursive reference in configuration file for value '&1'.",text);
            macros.put(key,"*");
            String repl = findParameter(buf, key);
            text = text.substring(0,i)+repl+text.substring(j+1);
            macros.remove(key);
         }
         if (DEBUG)
            if ( !Str.isEmpty(old) && !old.equals(text) )
               Util.debug("ASPConfigFiles: "+sep()+"String with macros '"+old+"' replaced with '"+text+"'.");
         return text;
      }
      catch( FndException any )
      {
         macros.clear();
         throw (FndException)(any.fillInStackTrace());
      }
   }


   private String sep()
   {
      String sep = "  ";
      for( int i=0; i<reclevel; i++)
         sep = sep + ". ";
      return sep;
   }
   */

   /**
    * Find a parameter in the 'params' hash table or, if not found,
    * in the configuration buffer.
    */
   /*
   private String findParameter( Buffer buf, String name )  throws FndException
   {
      reclevel++;
      String value = (String)this.params.get(name);
      if ( value!=null )
      {
         reclevel--;
         if (DEBUG)
            Util.debug("ASPConfigFile: "+sep()+"Parameter ["+name+"] found in cache: '"+value+"'.");
         return value;
      }

      Item item = buf.findItem(name);
      value = item==null ? "" : replaceMacroReferences( buf, item.getString() );

      if ( Str.isEmpty(value) )
         throw new FndException("FNDCFFPARNFOUND: Parameter '&1' not found in the confiugauration file.",name);
      else if (DEBUG)
         Util.debug("ASPConfigFile: "+sep()+"Parameter ["+name+"] found: '"+value+"'.");
      reclevel--;
      return value;
   }
   */
   //==========================================================================
   // Private methods used for for initialization (after the config file has been read)
   //==========================================================================

   /**
    */
   private String getParameter( String name ) throws FndException
   {
      name = name.toUpperCase();

      if ("APPLICATION/PATH".equals(name))
         return page.getASPManager().getAspRequest().getContextPath();

      String value = (String)this.params.get(name);
      if( !Str.isEmpty(value) )
      {
         if (DEBUG) Util.debug("ASPConfigFile: Parameter "+name+" = "+value);
         return value;
      }

      throw new FndException("FNDCFFPARNF: Parameter &1 not found in any of config files located in &2",
                                           name, param_file_dir);
   }

   /**
    * Return the value of the named parameter, or the specified default value,
    * if such parameter does not exist. Search only in 'params' hash table.
    */
   private String getParameter( String name, String default_value ) throws FndException
   {
      name = name.toUpperCase();

      String value = (String)this.params.get(name);
      if( !Str.isEmpty(value) )
      {
         if (DEBUG) Util.debug("ASPConfigFile: Parameter "+name+" = "+value);
         return value;
      }

      value = replaceMacroReferences(default_value);

      ASPLog log = page.getASPLog();
      if( log.isLogOn() )
         log.put("Parameter ["+name+"] not found in any config file from "+param_file_dir+". Set to default value: '"+value+"'.");

      if (DEBUG) Util.debug("ASPConfigFile: Parameter ["+name+"] set to default value: '"+value+"'.");
      return value;
   }

   private String replaceMacroReferences( String text ) throws FndException
   {
      if ( Str.isEmpty(text) ) return "";
      String old = text; // only for debug

      int i;
      while ( (i = text.indexOf("&(") ) >= 0 )
      {
         int j = text.indexOf(")", i+2);
         if ( j<0 )
            throw new FndException("FNDCFFSYNERRMAC: Syntax error in macro for value '&1'.",text);
         ASPConfig cfg = page.getASPManager().getASPConfig();
         String repl = getParameter( text.substring(i+2,j) );
         text = text.substring(0,i)+repl+text.substring(j+1);
      }
      if (DEBUG && !old.equals(text) )
            Util.debug("ASPConfigFile: String with macros '"+old+"' replaced with '"+text+"'.");
      return text;
   }


   String getCalendarConts( ASPManager mgr ) throws FndException
   {
      String key = mgr.getLanguageCode();
      tmpbuf.clear();
      tmpbuf.append("__CALENDAR_IMAGE_PATH = " + APP_ROOT + "+ \""+images_location+"\";\n");
      //tmpbuf.append("__CALENDAR_STYLESHEET = \"" + mgr.getStyleSheetTag(),"\";\n");//APP_ROOT + "+ \"../"+unsecured_path+"/"+stylesheets_location+"/"+mgr.getCSSFileName()+"\";\n");
      tmpbuf.append("__CALENDAR_SCRIPT_LOC = " + APP_ROOT + "+ \""+scripts_location+"\";\n");

      String window_width = getParameter("CALENDAR/WINDOW/WIDTH","230");
      String window_height = getParameter("CALENDAR/WINDOW/HEIGHT","200");

      tmpbuf.append("__CALENDAR_WINDOW_WIDTH = \""+window_width+"\";\n");
      tmpbuf.append("__CALENDAR_WINDOW_HEIGHT = \""+window_height+"\";\n");

      String week_start = getParameter("LANGUAGE/"+key+"/WEEK_START_DAY",null);
      int week_start_int = 0;
      if (Str.isEmpty(week_start))
      {
        week_start_int= new GregorianCalendar(new Locale(key)).getFirstDayOfWeek()-1;
        week_start = ""+week_start_int;
      }
      tmpbuf.append("__WEEK_START_DAY = "+week_start+";\n");

      tmpbuf.append("__CALENDAR_TITLE = \""+mgr.translate("FNDCFFCALENDARTITLE: Calendar")+"\";\n");
      tmpbuf.append("__CALENDAR_CURR_TIME = \""+mgr.translate("FNDCFFCURRTIME: Current Time")+"\";\n");
      tmpbuf.append("__CALENDAR_TODAY = \""+mgr.translate("FNDCFFTODAY: Today")+"\";\n");
      tmpbuf.append("__CALENDAR_TIME = \""+mgr.translate("FNDCFFTIME: Time")+"\";\n");
      tmpbuf.append("__LANG_CODE = \""+key+"\";\n");

      tmpbuf.append("__JANUARY = \""+mgr.translate("FNDCFFJANUARY: January")+"\";\n");
      tmpbuf.append("__FEBRUARY = \""+mgr.translate("FNDCFFFEBRUARY: February")+"\";\n");
      tmpbuf.append("__MARCH = \""+mgr.translate("FNDCFFMARCH: March")+"\";\n");
      tmpbuf.append("__APRIL = \""+mgr.translate("FNDCFFAPRIL: April")+"\";\n");
      tmpbuf.append("__MAY = \""+mgr.translate("FNDCFFMAY: May")+"\";\n");
      tmpbuf.append("__JUNE = \""+mgr.translate("FNDCFFJUNE: June")+"\";\n");
      tmpbuf.append("__JULY = \""+mgr.translate("FNDCFFJULY: July")+"\";\n");
      tmpbuf.append("__AUGUST = \""+mgr.translate("FNDCFFAUGUST: August")+"\";\n");
      tmpbuf.append("__SEPTEMBER = \""+mgr.translate("FNDCFFSEPTEMBER: September")+"\";\n");
      tmpbuf.append("__OCTOBER = \""+mgr.translate("FNDCFFOCTOBER: October")+"\";\n");
      tmpbuf.append("__NOVEMBER = \""+mgr.translate("FNDCFFNOVEMBER: November")+"\";\n");
      tmpbuf.append("__DECEMBER = \""+mgr.translate("FNDCFFDECEMBER: December")+"\";\n");

      tmpbuf.append("__SUNDAY = \""+mgr.translate("FNDCFFSUNDAY: S")+"\";\n");
      tmpbuf.append("__MONDAY = \""+mgr.translate("FNDCFFMONDAY: M")+"\";\n");
      tmpbuf.append("__TUESDAY = \""+mgr.translate("FNDCFFTUESDAY: T")+"\";\n");
      tmpbuf.append("__WEDNESDAY = \""+mgr.translate("FNDCFFWEDNESDAY: W")+"\";\n");
      tmpbuf.append("__THURSDAY = \""+mgr.translate("FNDCFFTHURSDAY: T")+"\";\n");
      tmpbuf.append("__FRIDAY = \""+mgr.translate("FNDCFFFRIDAY: F")+"\";\n");
      tmpbuf.append("__SATURDAY = \""+mgr.translate("FNDCFFSATURDAY: S")+"\";\n");

      tmpbuf.append("__CALENDAR_YEAR_INCREASE = \""+mgr.translate("FNDCFFYEARINCREASE: Increase Year")+"\";\n");
      tmpbuf.append("__CALENDAR_YEAR_DECREASE = \""+mgr.translate("FNDCFFYEARDECREASE: Decrease Year")+"\";\n");
      tmpbuf.append("__CALENDAR_CLOSE = \""+mgr.translate("FNDCFFCALENDARCLOSE: Close Calendar")+"\";\n");

      return tmpbuf.toString();

   }


   private void initCalendarTags() throws FndException
   {
       calendar_tag1 = initCalendarTag1();
       calendar_tag2 = initCalendarTag2();
       calendar_tag3 = initCalendarTag3();
       calendar_tag4 = initCalendarTag4();
   }

   private String initCalendarTag1() throws FndException
   {
      tmpbuf.clear();
      tmpbuf.append("> <a href=\"","javascript:showCalendar('");
      return tmpbuf.toString();
   }

   private String initCalendarTag2() throws FndException
   {
      tmpbuf.clear();
      tmpbuf.append("','','',");
      return tmpbuf.toString();
   }

   private String initCalendarTag4() throws FndException
   {
      tmpbuf.clear();
      tmpbuf.append(");\">");
      return tmpbuf.toString();
   }

   private String initCalendarTag3() throws FndException
   {
      //String cal_image_file   = _application_path+"/common/images/calendar.gif";
      String cal_image_border = getParameter("CALENDAR/IMAGE/BORDER","0");
      String cal_image_width  = getParameter("CALENDAR/IMAGE/WIDTH","13");
      String cal_image_height = getParameter("CALENDAR/IMAGE/HEIGHT","15");

      tmpbuf.clear();
      //tmpbuf.append("<img src=\"",cal_image_file,"\"");
      tmpbuf.append(" width=");
      tmpbuf.append(cal_image_width);
      tmpbuf.append(" height=");
      tmpbuf.append(cal_image_height);
      tmpbuf.append(" border=");
      tmpbuf.append(cal_image_border);
      tmpbuf.append(" ");
      //moved to ASPConfig.getCalendarTag3()
      return tmpbuf.toString();
   }

   private void initFieldMasks()
   {
      //move to ASPConfig.getTranslatedDateTimeMask()
   }

   String getApplicationPath(int index)
   {
      if (index == -1)
         return application_path;
      else
         return application_path_arr[index];
   }

   String[] getApplicationPathArr()
   {
      return application_path_arr;
   }

   String getIFSEEPath(){
       return IFSEE_PATH;
   }
   
   boolean is160UsedInGroupings(String language)
   {
      return is_160_used_in_groupings.indexOf(language.toUpperCase())>0;
   }

   /*int[] getLocalizationSizes()
   {
      int[] sizes = new int[3];

      sizes[0] = getObjectSize(dictionary);
      sizes[1] = getObjectSize(term_usage);
      //sizes[2] = getObjectSize(term_display);

      return sizes;
   }*/

   private static int getObjectSize( Object obj )
   {
      try
      {
         ByteArrayOutputStream bout = new ByteArrayOutputStream();
         ObjectOutputStream    out  = new ObjectOutputStream(bout);

         out.writeObject(obj);
         out.close();

         byte[] bytes = bout.toByteArray();

         return bytes.length;
      }
      catch( IOException x )
      {
         String msg = "Exception while debugging localization hashtable:\n"+Str.getStackTrace(x);
         Util.debug(msg);
         Alert.add(msg);
         return -1;
      }
   }
   
   private String formatServerPortString(String port){
      
      int i = port.indexOf(':');
      if(i >= 0)
         port = port.substring(i+1);
      return port;
   }
      
   // ===================================================================================================
   // Mobile Framework
   // ===================================================================================================

   private String initMobileBodyTag() throws FndException
   {
       return "topmargin=\"0\" leftmargin=\"0\" marginheight=\"0\" marginwidth=\"0\" class=\"pageBody\" OnLoad=\"javascript:onLoad()\"";
   }      
}
