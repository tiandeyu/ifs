/*
 *                 IFS Research & Development
 *
 *  This program is protected by copyright law and by international
 *  conventions. All licensing, renting, lending or copying (including
 *  for private use), and all other use of the program, which is not
 *  expressively permitted by IFS Research & Development (IFS), is a
 *  violation of the rights of IFS. Such violations will be reported to the
 *  appropriate authorities.
 *
 *  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
 *  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
 * ----------------------------------------------------------------------------
 * File        : DynamicObjectCache.java
 * Description : Static cache which contains dynamic objects such as business
 *               graphics(images) and dynamic javascript generated at runtime.
 * Notes       :
 * ----------------------------------------------------------------------------
 * New Comments:
 * 13-06-2008 buhilk Bug id 69812- Changed scope of put(String, String, String, ASPmanager, boolean) method to public.
 * 19-12-2006 rahelk Bug id 62533- Added debug information
 *
 * Revision 1.1  2006/07/06 09:46:27  buhilk
 * Bug Id: 58985, Possible cause for NullPointerException handled in get() method
 *
 * Revision 1.2  2005/11/07 08:16:33  mapelk
 * Introduced "persistant" att to Dynamic Objects and remove non persistent objects from the DynamicObjectCache in the first get.
 *
 * Revision 1.1  2005/09/15 12:38:00  japase
 * *** empty log message ***
 *
 * Revision 1.4  2005/06/27 10:04:43  riralk
 * Added method remove() to support data transfer. This method is called from ASPManger.unpack()
 *
 * Revision 1.3  2005/04/07 13:53:23  riralk
 * Changes for cluster support in web components and other improvements.
 *
 * Revision 1.2  2005/04/01 13:59:57  riralk
 * Moved Dynamic object cache to session - support for clustering
 *
 * Revision 1.1  2005/01/28 18:07:26  marese
 * Initial checkin
 *
 * Revision 1.2  2004/12/17 09:55:03  riralk
 * Minor fixes for caching support for clustered environments when used with proxy servers
 *
 * Revision 1.1  2004/12/15 11:13:00  riralk
 * Support for clustered environments by caching business graphics and generated javascript files in memory
 *
 * ----------------------------------------------------------------------------
 */


//TODO: Cleaning the cache, 
package ifs.fnd.asp;

import java.util.*;
import javax.servlet.http.*;
import java.io.*;

import ifs.fnd.service.*;
import ifs.fnd.ap.*;
import ifs.fnd.util.*;

/**
 * Implements a cache of dynamic objects generated by the web client framework
 * Only one static instance of the class is created. It contains a hashtable 
 * of dynamic objects (i.e  images, dynamic js) which are accessed via a key. 
 * This cache is used by the RequestHandler servlet to serve requests for such 
 * dynamic objects from memory and hence avoids the need for storing 
 * them on disk as files.
 */

public class DynamicObjectCache implements java.io.Serializable {

    public static final String URL_INDICATOR = "dynacache";
    private static String SESSION_ATTR_NAME = "DynamicObjectCache";
    public static boolean DEBUG     = Util.isDebugEnabled("ifs.fnd.asp.DynamicObjectCache");
    
    private Hashtable objects; 
      
    private DynamicObjectCache() 
    {        
       objects = new Hashtable();       
    }            
        
    //called only by RequestHandler (when sending response) and ASPPage (when appending java scripts)
    public static DynamicObject get(String key, HttpSession session)
    {       
       if (DEBUG) Util.debug("DynamicObjectCache.get("+key+")\n");        
       DynamicObjectCache cache = (DynamicObjectCache)session.getAttribute(SESSION_ATTR_NAME);
       if (cache==null)
          return null; 
       DynamicObject dobj;
       synchronized(cache)
       { 
          dobj = (DynamicObject)(cache.objects.get(key));
          if (dobj == null) return null; //Bug Id: 58985
          if (DEBUG) Util.debug("Persistent = " + dobj.isPersistent());
          if (!dobj.isPersistent())
             remove(key,session);
       }
       if (DEBUG) Util.debug("returned ("+dobj+")\n");               
       return dobj;
    }             
              
     
    public static void put(String key, String data, String mime, ASPManager mgr, boolean persistent )
    { 
       put(key, data, mime, false, mgr,persistent);
    }
         
    static void put(String key, String data, String mime, boolean use_streamer_class, ASPManager mgr, boolean persistent)
    {                     
       if (DEBUG) Util.debug("DynamicObjectCache.put("+key+",mime="+mime+")\n");       
       
       HttpSession session = mgr.getAspSession(); 
       DynamicObjectCache cache = (DynamicObjectCache)session.getAttribute(SESSION_ATTR_NAME);        
       if (cache == null)       
         cache =  new DynamicObjectCache();
       
       DynamicObject d = new DynamicObject(data,mime,use_streamer_class,persistent);
       cache.objects.put( key, d );       
       session.setAttribute(SESSION_ATTR_NAME,cache);  
       if (DEBUG) 
       {
          Util.debug("**************************************************\n");
          Util.debug("Current content in dynacache\n");
          showContents(mgr);
          Util.debug("Accumilated Total Dynamic cache size:"+cache.getCacheContentSize(cache)+"KB\n");
          Util.debug("**************************************************\n");
       }
    }
    
   private int getCacheContentSize(DynamicObjectCache cache) 
   {
      int cache_size = 0;
      if (cache!=null)
      {
         Enumeration keys = cache.objects.keys();
         while (keys.hasMoreElements())
         {
            String key = (String)keys.nextElement();
            cache_size += getObjectSize(cache.objects.get(key));
         }
      }
      return cache_size/1024;
   } 
    
    private static int getObjectSize(Object object){
      if(object==null){        
        return -1;
      }
      try{
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         ObjectOutputStream oos = new ObjectOutputStream(baos);
         oos.writeObject(object);
         byte[] bytes = baos.toByteArray();
         oos.close();
         baos.close();
         return bytes.length;
      }
      catch(Exception e){
        e.printStackTrace();
      }
    return -1;
  }  
   
    
    /*
     * For caching binary data (i.e. business graphics)
     */
    public static void put(String key, byte[] data, String mime, ASPManager mgr)
    {               
       if (DEBUG) Util.debug("DynamicObjectCache.put("+key+",mime="+mime+")\n");         
       
       HttpSession session = mgr.getAspSession(); 
       DynamicObjectCache cache = (DynamicObjectCache)session.getAttribute(SESSION_ATTR_NAME);        
       if (cache == null)       
         cache =  new DynamicObjectCache();   
                  
       DynamicObject d = new DynamicObject(data,mime,false);              
       cache.objects.put(key, d);       
       session.setAttribute(SESSION_ATTR_NAME,cache);  
       if (DEBUG)
       {
          Util.debug("**************************************************\n");
          Util.debug("Current content in dynacache\n");
          showContents(mgr);
          Util.debug("Accumilated Total Dynamic cache size:"+cache.getCacheContentSize(cache)+"KB\n");
          Util.debug("**************************************************\n");
       }
    }
    
    static void remove(String key, HttpSession session) 
    {
      if (DEBUG) Util.debug("DynamicObjectCache.remove("+key+")\n");         
      DynamicObjectCache cache = (DynamicObjectCache)session.getAttribute(SESSION_ATTR_NAME);        
      if (cache != null)
      {
        DynamicObject dobj = (DynamicObject)cache.objects.remove(key);
        dobj=null;
      }      
    }
   

   /*
    * Called from ASPPage.doActivate() to check if object already exists in cache
    */    
    static boolean itemExists(String key, ASPManager mgr)
    {
       HttpSession session = mgr.getAspSession(); 
       DynamicObjectCache cache = (DynamicObjectCache)session.getAttribute(SESSION_ATTR_NAME);        
       if (cache == null)
          return false;
       else
          return cache.objects.containsKey(key); 
    }
    
    static void showContents(ASPManager mgr)
    {
      HttpSession session = mgr.getAspSession(); 
      DynamicObjectCache cache = (DynamicObjectCache)session.getAttribute(SESSION_ATTR_NAME);         
      Util.debug("DynamicObjectCache Contents ["+cache.objects.size()+"] =");      
      if (cache!=null)
      {
         Enumeration keys = cache.objects.keys();
         while (keys.hasMoreElements())
         {
            String key = (String)keys.nextElement();
            Util.debug(key + " -> " + cache.objects.get(key).toString());      
         }
      }
      Util.debug("\n");                   
    }         
   
   
}
