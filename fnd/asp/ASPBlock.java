/*
 *                 IFS Research & Development
 *
 *  This program is protected by copyright law and by international
 *  conventions. All licensing, renting, lending or copying (including
 *  for private use), and all other use of the program, which is not
 *  expressively permitted by IFS Research & Development (IFS), is a
 *  violation of the rights of IFS. Such violations will be reported to the
 *  appropriate authorities.
 *
 *  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
 *  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
 * ----------------------------------------------------------------------------
 * File        : ASPBlock.java
 * Description : An ASPObject that represents a group of HTML fields
 * Notes       :
 * ----------------------------------------------------------------------------
 * Modified    :
 *    Marek D  1998-Feb-10 - Created
 *    Marek D  1998-Mar-30 - substring() instead of charAt() in checkStatus_()
 *    Marek D  1998-Apr-05 - RadioButtons and CheckBox generation
 *    Marek D  1998-May-01 - Added implementation of Bufferable interface
 *    Marek D  1998-May-30 - Implemented ASPBufferable interface
 *    Marek D  1998-Jun-04 - Use Global Connection while generating assignments
 *                           Added generateHiddenFields()
 *    Marek D  1998-Jun-04 - Added method defineCustomCommand(id,ASPCommand)
 *    Jacek P  1998-Jul-29 - Introduced FndException concept
 *    Jacek P  1998-Aug-07 - Added try..catch block to each public function
 *                           which can throw exception
 *    Marek D  1998-Aug-19 - Removed dummy tag <X> from generated HTML code
 *    Marek D  1998-Sep-17 - Added unsetMandatory() and unsetReadOnly()
 *    Marek D  1998-Sep-30 - Use ASPField.getJavaScriptName() for JS generation
 *    Jacek P  1998-Oct-14 - New package function tryFindField() that does not
 *                           generate exception.
 *    Jacek P  1998-Oct-21 - Added call to Util.trimLine() in
 *                           appendAnyAssignment() (Bug: #2816).
 *    Jacek P  1999-Feb-10 - Utilities classes moved to util directory.
 *    Jacek P  1999-Feb-17 - Extends ASPPageElement instead of ASPObject.
 *    Marek D  1999-Mar-02 - Implementation of ASPPoolElement state diagram
 *    Marek D  1999-Apr-27 - Added verify() and scan()
 *    Marek D  1999-May-11 - Included SelectBoxes in generateAssignments()
 *    Marek D  1999-Jun-01 - Deactivate LOV for ReadOnly fields
 *                           No Valiadtion in Query Mode
 *    Marek D  1999-Jun-03 - Removed extra _DB-field for RadioButtons
 *    Marek D  1999-Jun-07 - Added method countFields()
 *    Jacek P  1999-Jun-07 - Added method forceDirty().
 *    Jacek P  1999-Jul-21 - Added read-only handling in appendRadioButtonsAssignment()
 *    Jacek P  1999-Aug-02 - Added block name to the '_ROWSTATUS' hidden field.
 *    Jacek P  1999-Aug-09 - Added control of the new row status 'QueryMode__'
 *                           in generateHiddenFields().
 *    Jacek P  1999-Sep-06 - Added input parameter to JavaScript function
 *                           check<blkname>Fields() generated by appendCheckFieldsFunction().
 *    Jacek P  2000-Jan-21 - Implementation of portal:
 *                           call to ASPManager.readValue() replaced with ASPPage.readValue()
 *                           in appendFieldAssignment(), appendRadioButtonsAssignment(),
 *                           appendCheckBoxAssignment(), appendSelectBoxAssignment()
 *    Johan S  2000-Feb-Gui  Added functions: setMasterBlock(), getMasterBlock(), getASPBlockLayout().
 *    Johan S  2000-May-15   Added setIALView(String).
 *    Stefan M 2000-Jun-06   setTitle() now translates the title.
 *    Johan S  2000-Jul-13   Changed the null-value handling in generateAssignments.
 *    Stefan M 2000-Dec-19   Added Document Management functions, initDocMan(), appendDocMan(), isDocMan().
 *    Jacek P  2000-Oct-31 - Changed handling of assignments for support of Java pages.
 *    Jacek P  2001-Jan-08 - Upgraded to latest version.
 *    Jacek P  2001-Jan-25 - Changed handling of the quotation mark assignment for Java pages.
 *    Jacek P  2001-Feb-01 - Fixed problems with quotation mark in assignments.
 *    Jacek P  2001-May-30 - Fixed bug #737: URL for document connection has an extra slash. Changes in appendDocMan().
 *    Chandana 2001-Jul-03 - Improved comments.
 *    Jacek P  2001-Sep-07 - Changed URL to Document Management.
 *    Suneth M 2001-Sep-12 - Changed localization tags according to standard.
 *    Suneth M 2001-Oct-11 - Added findDbField() to enable DocMan RMB when OBJID has a different field name.
 *    Jacek P  2002-Jan-25 - Added URLEncode() on OBJID in connection to DOCMAW in appendDocMan().
 *    Ramila H 2002-Jul-30 - Log Id 875. Added support for calendar tag generation.
 *    Ramila H 2002-Dec-13 - Log id 933. Added support to save queries in block profile.
 *    ChandanaD2003-Mar-17 - Added support for uploading files.
 *    Rifki R  2003-Jun-26 - Log id 1081, Fixed Bug in Auto Security when ALIAS is used with view name.
 *                           Added new method getDBView().
 *    Ramila H 2003-Sep-18 - Log id 1044, Implemented code to get suitable columns for query hints.
 *    Ramila H 2004-01-20  - Bug Id 42102. Added try catch clause to generateQueryHints.
 *    ChandanaD2004-Mar-23 - Merged with SP1.
 *    Chandana 2004-Jun-10 - Removed all absolute URLs.
 *    Chandana 2004-Jun-28 - Added support for viewing history.
 *    Mangala  2004-Oct-06 - Remove History if any key is missing in the field list.
 *    Chandana 2004-Nov-10 - Introduced new APIs to support Activity API calls.
 *    Jacek P  2004-Nov-11 - Added method newProfile() due to new profile handling.
 * ----------------------------------------------------------------------------
 * New Comments:
 * 2009/09/29 sumelk - Bug 85807, Added new addFileUploadField() method with upload file type as a parameter.
 * 2009/02/13 buhilk - Bug id 80265, F1PR454 - Templates IID.
 * 2008/10/24 rahelk Bug id 78024, introduced new method to set KEY_REF for Documents
 * 2008/09/24 dusdlk - Bug 77095, Updated save() and Load() to include the variable isMasterBlock, updated the setMasterBlock(ASPBlock mblk) to set the value of isMasterBlock to true, added the function isMasterBlock(). 
 * 2008/09/10 sadhlk Bug 76949, F1PR461 - Notes feature in Web client, Added immutable attribute sorted_lu_keys and getSortedLUKeys().
 *                                        Modified save(), load(), clone() and setView()
 * 2008/07/09 buhilk - Bug 75668, IID F1PR432 - Workflow/My Todo functionality .
 * 2008/07/08 buhilk - Bug 74852, Changed scope of addToRow() from public to package level.
 * 2008/07/01 buhilk - Bug 74852, Added addToRow() method.
 * 2008/06/26 mapelk - Bug 74852, Programming Model for Activities. 
 *               2008/04/21           buhilk
 * Bug 72855, Added new APIs to support rich menus/table cells.
 *               2008/04/03           sadhlk
 * Bug 72361, Modified clone() to register Long year fields.
 * 				  2007/12/03 			  buhilk 
 * IID F1PR1472, Added Mini framework functionality for use on PDA.
 *               2006/06/22           gegulk
 * Bug 57581, Modified the setView method to get the state_encode_method, 
 * if such method is available for the LU, and there is a field named STATE in the block
 *               2006/04/26           prralk
 * Bug 56440, a choice to right align number fields
 * Revision 1.8  2006/02/20           prralk
 * Removed calls to deprecated functions
 *
 * Revision 1.7  2006/02/13           prralk
 * B133429 fixed check fields fn to work with check boxes
 *
 * Revision 1.6  2006/01/17           mapelk
 * Fixed bug 130687: ignore checking mandaotry for check box fields.
 *
 * Revision 1.5  2006/01/05           mapelk
 * Fixed bug 130720: Script error on saving when group are defined.
 *
 * Revision 1.4  2005/11/17 09:17:53  japase
 * Added cloning of pre_profile if profile not set
 *
 * Revision 1.3  2005/11/15 11:34:04  japase
 * ASPProfile.save() takes 'this' as argument.
 *
 * Revision 1.2  2005/10/14 09:08:12  mapelk
 * Added common profile elements. And removed language specific formats and read from locale.
 *
 * Revision 1.1  2005/09/15 12:38:00  japase
 * *** empty log message ***
 *
 * Revision 1.9  2005/07/06 11:05:31  rahelk
 * CSL: added get defaults functionality to "defaults" tab
 *
 * Revision 1.8  2005/07/05 13:28:32  riralk
 * Fixed deleteQuery problem.
 *
 * Revision 1.7  2005/06/15 11:15:03  rahelk
 * CSL 2: bug fix: default values
 *
 * Revision 1.6  2005/06/09 09:40:35  mapelk
 * Added functionality to "Show pages in default layout mode"
 *
 * Revision 1.5  2005/06/06 07:29:02  rahelk
 * Restructured BlockProfile to handle both queries and default values
 *
 * Revision 1.4  2005/05/04 03:18:34  sumelk
 * Added new methods disableHistory() & isHistoryDisabled() to give the possibility of disabling the History menu item.
 *
 * Revision 1.3  2005/02/11 10:09:02  riralk
 * More changes for new profile. Called the correct ASPProfile.save() method from removeProfile()
 *
 * Revision 1.2  2005/02/03 12:40:36  riralk
 * Adapted BlockProfile (saved queries) functionality to new profile changes.
 *
 * Revision 1.1  2005/01/28 18:07:25  marese
 * Initial checkin
 *
 * Revision 1.5  2005/01/21 10:40:54  rahelk
 * Bug 48132 merged, Added ASPField.appendTooltipTag to methods appendFieldAssignment and appendCheckBoxAssignment
 *
 * Revision 1.4  2004/12/20 08:45:07  japase
 * Changes due to the new profile handling
 *
 * Revision 1.3  2004/11/22 10:34:35  chdelk
 * Removed activities (HashMap) variable and introduced String variable instead. Introduced getActivityHandler(String mode).
 *
 * Revision 1.2  2004/11/22 04:55:58  chdelk
 * Modified/Added APIs to support Activities in Master-Detail pages.
 *
 * ----------------------------------------------------------------------------
 */

package ifs.fnd.asp;

import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.util.*;
import ifs.fnd.record.*;
import ifs.fnd.webfeature.*;
import ifs.fnd.webmobile.web.MobileBlockLayout;
import ifs.fnd.webmobile.web.MobilePageProvider;
import ifs.fnd.internal.FndAttributeInternals;

import java.util.*;
import java.io.*;

/**
 * An instance of this class represents a set of HTML fields on an ASP page.
 * Each field has a name, a data type, a format mask and other properties.
 * An ASPBlock can have an optional name.
 * <p>
 * An ASPManager object is used to instantiate this class.
 * newASPBlock(String name) method of ASPManager class will return a new ASPBlock object.<br>
 * Note: In the following codefragment blk is a reference variable of the type ASPBlock.
 * <p>
 * <b>Example:</b><p>
 * <pre>
 *       ASPManager mgr = getASPManager();
 *       blk = mgr.newASPBlock("MAIN");
 * </pre>
 * 'MAIN' is an optional name given to the block
 * @see ifs.fnd.asp.ASPManager
 */
public class ASPBlock extends ASPPageElement implements ASPBufferable
{
   //==========================================================================
   //  Persistent immutable attributes
   //==========================================================================

   private String connect_fields;
   private ASPField[] fields;
   private String block_name;
   private String view_name;
   private String state_encode_method;
   private boolean is_state_available = false;
   private String lu_name;
   // Added by Terry 20130927
   // Fixed lu name
   private String blk_lu_name;
   // Added end
   private String lu_keys;
   private String sorted_lu_keys;

   private int count;
   private Buffer defined_commands;
   private String masterblock_name;
   private static  String realJSnull = "''"; //could have be 'null', if it didn't mess up the Jscript->Java conversion of values;
   private static  String emptynull ="";
   private boolean doc_man;           // Automatically set
   private boolean doc_man_disabled;  // Manually disabling docman
   private String doc_man_view_name;
   private String doc_man_key_ref;
   private boolean history_disabled;
   private boolean sendto_disabled;
   private boolean number_alignment;
   
   private int expandable_fields = 0;
   
   // attributes for new Programing Model for Activities
   private FndDataAdapter adapter;
   private FndAbstractRecord template;
   private FndAttribute master_reference;   
   
   //new field param array
   private Vector param_fields;
   
   //list of popup fields
   private Vector popup_field_list;
   private Vector my_popups;
   private Vector my_popup_labels;
           
   private boolean isMasterBlock = false;
           
   //==========================================================================
   //  Transient immutable attributes
   //==========================================================================

   private transient ASPRowSet       rowset;
   private transient ASPCommandBar   cmdbar;
   private transient ASPBlockLayout  lay;
   private transient ASPBlock        masterblock;
   private transient String          escseq = "\\";

   //==========================================================================
   //  Transient mutable attributes
   //==========================================================================

   private transient boolean debug_hidden_fields;
   private transient boolean pre_debug_hidden_fields;
   private transient boolean hideable;
   private transient boolean pre_hideable;
   private transient String title;
   private transient String pre_title;
   private transient int assignment_generated = ASSIGNMENT_NOT_GENERATED;
   private transient int expandable_tabs = 0;
   private transient int pre_expandable_tabs = 0;
   
   // Added by Terry 20131023
   // Set function fields to non-select
   private transient boolean func_fields_non_select;
   private transient boolean pre_func_fields_non_select;
   // Added end

   //==========================================================================
   //  Transient Dirty-Flags
   //
   //  JavaScript function check<name>Fields() depends on 'hidden' flag
   //  of all fields.
   //==========================================================================

   private transient boolean dirty_check_fields;
   private transient boolean perform_written;

   //==========================================================================
   //  Cache Attributes
   //
   //  Transient, immutable attributes with late initialization
   //  (just before the first use).
   //==========================================================================

   private transient String field_list;
   private transient String select_list;

   //==========================================================================
   //  Transient temporary variables
   //==========================================================================

   private AutoString tmpbuf    = new AutoString();
   private AutoString tmpsubbuf = new AutoString();

   //==========================================================================
   //  Static constants
   //==========================================================================

   public static boolean DEBUG = Util.isDebugEnabled("ifs.fnd.asp.ASPBlock");

   static final int ASSIGNMENT_NOT_GENERATED   = 0;
   static final int ASSIGNMENT_GENERATED       = 1;
   static final int ASSIGNMENT_REGENERATED     = 2;
   static final int ASSIGNMENT_GENERATED_EMPTY = 3;

   public static final int UPLOAD_TO_DB = 0;
   public static final int UPLOAD_TO_DISK = 1;
   public static final int UPLOAD_TEMP = 4;

   static final String QUERY   = "Q";
   static final String PREPARE = "P";
   static final String SAVE    = "S";

   public static final String UPLOAD_PICTURE = "PICTURE";

   transient BlockProfile profile;     transient BlockProfile pre_profile;
   private transient boolean    user_profile_prepared;

   private boolean file_upload;
   private boolean post_function;
   private int upload_mode;
   private String upload_id;
   private String upload_url;
   private String upload_text;
   private String upload_destination;
   private String upload_function;
   private String upload_type;

   private Attribute[] index_attr;
   private Attribute[] func_attr;

   //==========================================================================
   //  ASPBufferable interface
   //==========================================================================

   /**
    * Store the internal state of this ASPBlock in a specified ASPBuffer
    * @param intobuf Referance to the ASPBuffer object where this block should be saved.
    */
   public void save( ASPBuffer intobuf )
   {
      try
      {
         Buffer into = intobuf.getBuffer();
         saveClass(into);
         Buffers.save( into, "BLOCK_NAME", block_name );
         Buffers.save( into, "VIEW_NAME", view_name );
         Buffers.save( into, "STATE_ENCODE_METHOD", state_encode_method  );
         Buffers.save( into, "IS_STATE_AVAILABLE", is_state_available  );
         Buffers.save( into, "COUNT", count );
         Buffers.save( into, "DEFINE", defined_commands );
         Buffers.save( into, "LU_NAME", lu_name );
         // Added by Terry 20130927
         // Fixed lu name
         Buffers.save( into, "BLK_LU_NAME", blk_lu_name);
         // Added end
         Buffers.save( into, "LU_KEYS", lu_keys );
         Buffers.save( into, "SORTED_LU_KEYS", sorted_lu_keys );
         Buffers.save( into, "HISTORY_DISABLED", history_disabled );
         Buffers.save( into, "SENDTO_DISABLED" , sendto_disabled);
         Buffers.save( into, "EXPANDABLE_FIELDS", expandable_fields);
         Buffers.save( into, "IS_MASTER_BLOCK", isMasterBlock);

         for( int i=0; i<count; i++ )
         {
            Buffer sub = into.newInstance();
            fields[i].save(sub);
            into.addItem("FIELD",sub);
         }
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Retrieve the internal state of this ASPBlock and all its ASPFields
    * from a specified ASPBuffer.
    * @param frombuf Referance to the ASPBuffer object where the block is saved.
    */
   public void load( ASPBuffer frombuf )
   {
      if(DEBUG)
      {
         debug("ASPBlock.load()");
         frombuf.traceBuffer("'frombuf'");
      }
      try
      {
         setLoaded();
         Buffer from = frombuf.getBuffer();
         block_name = Buffers.loadString(from,"BLOCK_NAME");
         view_name  = Buffers.loadString(from,"VIEW_NAME");
         state_encode_method   = Buffers.loadString(from,"STATE_ENCODE_METHOD");
         is_state_available    = Buffers.loadBoolean(from,"IS_STATE_AVAILABLE");
         defined_commands = Buffers.loadBuffer(from,"DEFINE");
         lu_name  = Buffers.loadString(from,"LU_NAME");
         // Added by Terry 20130927
         // Fixed lu name
         blk_lu_name  = Buffers.loadString(from, "BLK_LU_NAME");
         // Added end
         lu_keys  = Buffers.loadString(from,"LU_KEYS");
         sorted_lu_keys  = Buffers.loadString(from,"SORTED_LU_KEYS");
         history_disabled  = Buffers.loadBoolean(from,"HISTORY_DISABLED");
         sendto_disabled  = Buffers.loadBoolean(from,"SENDTO_DISABLED");
         expandable_fields = Buffers.loadInt(from,"EXPANDABLE_FIELDS");
         isMasterBlock = Buffers.loadBoolean(from,"IS_MASTER_BLOCK");
         
         BufferIterator iter = from.iterator();

         while( iter.hasNext() )
         {
            Item item = iter.next();
            if( "FIELD".equals(item.getName()) )
            {
               Buffer sub = item.getBuffer();
               ASPField f = new ASPField(this);
               appendField(f);
               f.load(sub);
            }
         }
         if( count != from.getInt("COUNT") )
            throw new FndException("FNDBLKLERR: Cannot load ASPBlock. Invalid value for COUNT: &1", ""+count);
      }
      catch(Throwable e)
      {
         error(e);
      }
   }

   //==========================================================================
   //  Construction
   //==========================================================================

   ASPBlock( ASPPage page )
   {
      super(page);
      if(page instanceof ASPPageProvider)
         escseq = "";
      rowset = new FndDataSetFactory().createDataSet(page,this);
      if (page instanceof MobilePageProvider)
         lay = new MobileBlockLayout(this);
      else
         lay = new ASPBlockLayout(this);
      fields = new ASPField[10];
   }

   ASPBlock construct( String block_name ) throws FndException
   {
      defined_commands = getASPManager().getFactory().getBuffer();
      this.block_name = block_name;
      return construct();
   }

   ASPBlock construct() throws FndException
   {
      rowset.construct();
      return this;
   }

   private ASPBlock( ASPPage page, Object dummy )
   {
      super(page);
   }

   //==========================================================================
   //  ASPPoolElement logic
   //==========================================================================

   void forceDirty() throws FndException
   {
      rowset.forceDirty();
   }

   /**
    * Resets this block and all included elements: row set, command bar and fields.
    */
   protected void doReset() throws FndException
   {
      debug_hidden_fields = pre_debug_hidden_fields;

      hideable = pre_hideable;
      title = pre_title;

      dirty_check_fields = false;

      for( int i=0; i<count; i++ )
         fields[i].reset();

      rowset.reset();
      lay.reset(); //!!!
      if( cmdbar!=null ) cmdbar.reset();

      user_profile_prepared = false;
      profile = pre_profile;

      expandable_tabs = pre_expandable_tabs;
      // Added by Terry 20131023
      // Set function fields to non-select
      func_fields_non_select = pre_func_fields_non_select;
      // Added end
   }


   /**
    * Freeze this block and all included elements: row set, command bar and fields.
    */
   protected void doFreeze() throws FndException
   {
      createBaseProfile();
      pre_debug_hidden_fields = debug_hidden_fields;

      pre_hideable = hideable;
      pre_title = title;

      dirty_check_fields = false;

      for( int i=0; i<count; i++ )
         fields[i].freeze();

      ASPField[] f = new ASPField[count];
      System.arraycopy(fields,0,f,0,count);
      fields = f;

      rowset.freeze();
      lay.freeze();
      if( cmdbar!=null ) cmdbar.freeze();

      doc_man = true;//isDocManActive();

      pre_expandable_tabs = expandable_tabs;
      // Added by Terry 20131023
      // Set function fields to non-select
      pre_func_fields_non_select = func_fields_non_select;
      // Added end
   }

   /**
    * Clone this block into a new block included in the specified page.
    * The state of the new block is DEFINED.
    *
    * @param page The page in which this ASPBlock should be included.
    */
   protected ASPPoolElement clone( Object page ) throws FndException
   {
      ASPPage p = (ASPPage)page;
      ASPBlock b = new ASPBlock(p,null);

      if(page instanceof ASPPageProvider)
         b.escseq = "";

      b.debug_hidden_fields = b.pre_debug_hidden_fields = pre_debug_hidden_fields;

      b.hideable            = b.pre_hideable            = pre_hideable;
      b.title               = b.pre_title               = pre_title;

      // Added by Terry 20131023
      // Set function fields to non-select
      b.func_fields_non_select = b.pre_func_fields_non_select = pre_func_fields_non_select;
      // Added end
      
      b.defined_commands = defined_commands;
      b.block_name = block_name;
      b.view_name = view_name;
      b.state_encode_method = state_encode_method;
      b.is_state_available  = is_state_available;

      b.lu_name = lu_name;
      // Added by Terry 20130927
      // Fixed lu name
      b.blk_lu_name = blk_lu_name;
      // Added end
      b.lu_keys = lu_keys;
      b.sorted_lu_keys = sorted_lu_keys;

      b.field_list  = field_list;
      b.select_list = select_list;

      b.count = count;
      b.fields = new ASPField[b.count];
      for( int i=0; i<b.count; i++ )
      {
         b.fields[i] = (ASPField)fields[i].clone(b);
         p.register(b.fields[i]);
         if(b.fields[i].isLongYear())
            p.registerLongYearField(b.fields[i]);
      }

      b.rowset = (ASPRowSet)rowset.clone(b);

      b.masterblock_name = masterblock_name;

      b.isMasterBlock = isMasterBlock;

      b.lay = (ASPBlockLayout)lay.clone(b);
      if( cmdbar!=null )
         b.cmdbar = (ASPCommandBar)cmdbar.clone(b);

      b.doc_man = doc_man;
      b.doc_man_disabled = doc_man_disabled;
      b.doc_man_view_name = doc_man_view_name;

      b.history_disabled = history_disabled;

      b.profile  = b.pre_profile = pre_profile;

      b.file_upload = file_upload;
      b.post_function = post_function;
      b.upload_mode = upload_mode;
      b.upload_id = upload_id;
      b.upload_text = upload_text;
      b.upload_url = upload_url;
      b.upload_destination = upload_destination;
      b.upload_function = upload_function;
      b.upload_type = upload_type;

      b.index_attr = index_attr;
      b.func_attr = func_attr;

      b.connect_fields = connect_fields;
      b.expandable_fields = expandable_fields;

      b.template = template;
      b.master_reference = master_reference;

      b.expandable_tabs  = b.pre_expandable_tabs   =  pre_expandable_tabs;
      b.param_fields    = param_fields;
      b.popup_field_list  = popup_field_list;
      b.my_popups        = my_popups;
      b.my_popup_labels  = my_popup_labels;
      b.setCloned();
      return b;
   }

   /**
    * Initiate the instance for the current request.
    * Called by activate() in the super class after check of state.
    *
    * @see ifs.fnd.asp.ASPPoolElement#activate
    */
   protected void doActivate() throws FndException
   {
      if (DEBUG) debug(this+": doActivate()");
      assignment_generated = ASSIGNMENT_NOT_GENERATED;
      for( int i=0; i<count; i++ )
         fields[i].activate();
      rowset.activate();
      lay.doActivate(); ///!!!
      if( cmdbar!=null ) cmdbar.activate();

      perform_written = false;
   }

   /**
    * Inherited interface.
    * Create and return new instance of corresponding profile class.
    * Return null if the class doesn't support profile handling.
    */
   protected ASPPoolElementProfile newProfile()
   {
      return new BlockProfile();
   }

   /**
    * Returns the String representation of this ASPBlock object.
    */
   public String toString()
   {
      return super.toString()+" "+getName()+" ("+count+")";
   }

   protected void verify( ASPPage page ) throws FndException
   {
      this.verifyPage(page);

      for( int i=0; i<count; i++ )
         fields[i].verifyPage(page);

      rowset.verifyPage(page);

      if( cmdbar!=null ) cmdbar.verifyPage(page);

      if( getASPTable()!=null ) getASPTable().verifyPage(page);
   }

   protected void scan( ASPPage page, int level ) throws FndException
   {
      scanAction(page,level);

      for( int i=0; i<count; i++ )
         fields[i].scan(page,level+1);

      rowset.scan(page,level+1);

      if( cmdbar!=null ) cmdbar.scan(page,level+1);
   }

   //==========================================================================
   //  ASPTable
   //==========================================================================

   /**
    * Return the reference to the ASPTable that has the same name as this ASPBlock.
    *
    * @return Reference to the ASPTable.
    */
   public ASPTable getASPTable()
   {
      return getASPPage().getASPTable(getName());
   }

   //==========================================================================
   //  ASPRowSet
   //==========================================================================

   /**
    * Return the reference to the ASPRowSet instance that corresponds to this ASPBlock.
    *
    * @return Reference to the ASPRowSet.
    */
   public ASPRowSet getASPRowSet()
   {
      return rowset;
   }
   //==========================================================================
   //  ASPBlockLayout !!!
   //==========================================================================

   /**
    * Return the reference to the ASPBlockLayout instance that corresponds to this ASPBlock.
    *
    * @return Reference to the ASPBlockLayout.
    */
   public ASPBlockLayout getASPBlockLayout()
   {
      return lay;
   }

   /**
    * Sets the ASPBlock that will act as a Master for this block.
    *
    * @param mblk Referance to the ASPBlock that will act as the Master block.
    */
   public void setMasterBlock(ASPBlock mblk)
    {
      try
      {
        modifyingImmutableAttribute("MASTERBLOCK");
        masterblock = mblk;
        masterblock_name = masterblock.getName();
        masterblock.isMasterBlock = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
    }

   /**
    * Returns the ASPBlock acting as Master for this block
    *
    * @return Referance to the ASPBlock acting as Master for this block
    */
   public ASPBlock getMasterBlock()
    {
        if(masterblock==null)
            {
                if(masterblock_name==null)
                    return null;
                masterblock = getASPPage().findASPBlock(masterblock_name);
            }
        return masterblock;
    }

    /*
    * Returns true if the ASPBlock is a Master block. 
    */
   public boolean isMasterBlock()
   {
      return isMasterBlock;
   }
   
   /**
    * Sets the title of this block, visible in the commandbar.
    *
    * @param newTitle Text to be set as the title.
    */
   public void setTitle(String newTitle)
   {
      try
      {
         modifyingMutableAttribute("TITLE");
         title = getASPManager().translate(newTitle);
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Returns true if this block has a Title set.
    *
    * @return If the block has a title true is returned. Else false is returned.
    */
   public boolean hasTitle()
   {
      if(title == null)
         return false;
      else
         return true;
   }

   /**
    * Return the Title of this Block.
    *
    * @rturn Title of this ASPBlock as a String.
    */
   public String getTitle()
   {
      return title;
   }
   
   /**
    * Set number of columns that the framework should skip for this 
    * block before appending the expandable field content.
    *
    * @param tabs number of table cell to tab.
    * @see #getExpandableTabs
    */
   public void setExpandableTabs(int tabs)
   {
      try
      {
         modifyingMutableAttribute("EXPANDABLE_TABS");
         if(expandable_tabs < tabs)
            expandable_tabs = tabs;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }
   
   public int getExpandableTabs()
   {
      return expandable_tabs;
   }
   
   /**
    * Sets the expandable filds availability.
    */
   void increaseExpandableFields()
   {
      try
      {
         modifyingImmutableAttribute("EXPANDABLE_FIELD_COUNT");
         this.expandable_fields++;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }
   
   /**
    * Sets the expandable filds availability.
    */
   void decreaseExpandableFields()
   {
      try
      {
         if(hasExpandableFields())
         {
            modifyingImmutableAttribute("EXPANDABLE_FIELD_COUNT");
            this.expandable_fields--;
         }
      }
      catch( Throwable any )
      {
         error(any);
      }
   }  
   
   boolean hasExpandableFields()
   {
      return (this.expandable_fields>0)?true:false;
   }
   
   int getExpandableFieldCount()
   {
      return this.expandable_fields;
   }

   //==========================================================================
   //  ASPCommandBar
   //==========================================================================

   /**
    * Return the reference to a new instance of ASPCommandBar class
    * attached to this ASPBlock.
    * <b>The block must be in state UNDEFINED to call this method.</b>
    * <br>
    * @return Reference to a new instance of ASPCommadbar.
    * @see ifs.fnd.asp.ASPCommandBar
    */
   public ASPCommandBar newASPCommandBar()
   {
      try
      {
         //raiseNotUndefined();
         if (!isNotDefined() )
            throw new FndException("FNDBLKNUNDEF: The block is not in UNDEFINED or LOADED_DIRTY state!");

         if( cmdbar!=null )
            throw new FndException("FNDBLKDUPCMDB: Duplicate command bar on block: &1", getName());

         cmdbar = new ASPCommandBar(this);
         cmdbar.construct();
      }
      catch( Throwable any )
      {
         error(any);
      }
      return cmdbar;
   }


   /**
    * Return the reference to an instance of ASPCommandBar class
    * attached to this ASPBlock.
    *
    * @return Reference to the ASPCommandBar object atttached to this ASPBlock.
    *
    * @see ifs.fnd.asp.ASPCommandBar
    */
   public ASPCommandBar getASPCommandBar()
   {
      try
      {
         if( cmdbar==null )
            throw new FndException("FNDBLKNOCMDB: There is no ASPCommandBar on block '&1'", getName());
      }
      catch( Throwable any )
      {
         error(any);
      }
      return cmdbar;
   }

   /**
    * Checks whether this block has a command bar.
    *
    * @return 'true' if this block has a command bar, 'false' otherwise.
    */
   public boolean hasCommandBar()
   {
      return cmdbar==null?false:true;
   }

   /**
    * Enable 'Favorite' button on command bar connected to this block
    * and set given search URL.
    *
    * @param search_url Search URL as a String.
    *
    * @see ifs.fnd.asp.ASPCommandBar
    */
   void setCmdBarSearchURL( String search_url )
   {
      cmdbar.enableCommand(cmdbar.FAVORITE);
      cmdbar.setSearchURL(search_url);
   }

   //==========================================================================
   //  ASPFields
   //==========================================================================

   /**
    * Define a new field having the specified name, default type ("String") and
    * no format mask.
    * The specified name can contain a comma-separated list of field names.
    * Return a reference to the last created field.
    * <br>
    * <b>Example:</b><br>
    * <pre>
    *       ASPManager mgr = getASPManager();
    *       blk = mgr.newASPBlock("MAIN");
    *       blk.addField("ORDER_ID");
    *
    *       Note: blk is a ASPBlock type reference.
    * </pre>
    *
    * @param name Field name or list of Names seperated by commas as a String.
    *
    * @return Reference to the last created field.
    *
    * @see ifs.fnd.asp.ASPBlock#addField(String, String)
    * @see ifs.fnd.asp.ASPBlock#addField(String, String,String)
    */
   public ASPField addField( String name )
   {
      return addField(name,"String",null);
   }

   /**
    * Define a new field having the specified name, the specified type
    * and default format mask.
    * The specified name can contain a comma-separated list of field names.
    * Return a reference to the last created ASPField.
    * <br>
    * <b>Example:</b><br>
    * <pre>
    *       ASPManager mgr = getASPManager();
    *       blk = mgr.newASPBlock("MAIN");
    *       blk.addField("WO_NO","Number");
    *
    *       Note: blk is a ASPBlock type reference.
    *             Second argument should be on of the following:
    *                "Integer"
    *                "Money"
    *                "Datetime"
    *                "Time"
    *                "Date"
    *                "Number"
    * </pre>
    * @param name Field name or list of Names seperated by commas as a String.
    * @param type Type of the ASPField.
    *
    * @return Reference to the last created ASPField.
    *
    * @see ifs.fnd.asp.ASPBlock#addField(String)
    * @see ifs.fnd.asp.ASPBlock#addField(String, String,String)
    */
   public ASPField addField( String name, String type )
   {
      return addField(name,type,null);
   }

   /**
    * Define a new field having the specified name, type and format mask.
    * The specified name can contain a comma-separated list of field names.
    * Return a reference to the last created field.<br>
    * <b>The block must be in state UNDEFINED to call this method.</b>
    * <br>
    * <b>Example:</b><br>
    * <pre>
    *       ASPManager mgr = getASPManager();
    *       blk = mgr.newASPBlock("MAIN");
    *       blk.addField("ORDER_DATE","Datetime","yyyy-MM-dd HH:mm:ss");
    *
    *       Note: blk is a ASPBlock type reference.
    *             Second parameter should be on of the following:
    *                "Integer"
    *                "Money"
    *                "Datetime"
    *                "Time"
    *                "Date"
    *                "Number"
    *             Third parameter will be in one of the following formats:
    *                Integer - "###############"
    *                Money   - "############0.00"
    *                DAtetime- "yyyy-MM-dd HH:mm:ss"
    *                Time    - "HH:mm"
    *                Date    - "yyyy-MM-dd"
    *                number  - "############0.##"
    * </pre>
    * @param name Field name or list of Names seperated by commas as a String.
    * @param type Type of the ASPField.
    * @param mask The format mask to be used for this ASPField.
    *
    * @return Reference to the last created ASPField.
    *
    * @see ifs.fnd.asp.ASPBlock#addField(String,String)
    * @see ifs.fnd.asp.ASPBlock#addField(String, String)
    */
   public ASPField addField( String name,
                             String type,
                             String mask )
   {
      try
      {
         modifyingImmutableAttribute("FIELDS");
         return defineField(name,DataFormatter.getTypeId(type),mask,null);
      }
      catch(Throwable e)
      {
         error(e);
         return null;
      }
   }

   /**
    * Add ASPField for the given FndAttribute. FndAttribute name is taken as the ASPField name. 
    * And this method should only be called from "Activity Programing Model". 
    * @param template FndAttribute to be bound to the ASPField
    *
    * @see ifs.fnd.asp.ASPBlock#addField(FndAttribute,String)
    * @see ifs.fnd.asp.ASPBlock#addField(String,FndAttribute)
    * @see ifs.fnd.asp.ASPBlock#addField(String,FndAttribute,String)
    */
   public ASPField addField(FndAttribute template)
   {
      return addField(template,null);
   }

   /**
    * Add ASPField for the given FndAttribute. And this method should only be called from 
    * "Activity Programing Model". 
    * @param name Name for the ASPField
    * @param template FndAttribute to be bound to the ASPField
    *
    * @see ifs.fnd.asp.ASPBlock#addField(FndAttribute,String)
    * @see ifs.fnd.asp.ASPBlock#addField(FndAttribute)
    * @see ifs.fnd.asp.ASPBlock#addField(String,FndAttribute,String)
    */   
   public ASPField addField(String name, FndAttribute template)
   {
      return addField(name, template,null);
   }

   /**
    * Add ASPField for the given FndAttribute. FndAttribute name is taken as the ASPField name.
    * You can specify the MASK here. And this method should only be called from 
    * "Activity Programing Model". 
    * @param template FndAttribute to be bound to the ASPField
    * @param mask MASK to be used to format client values
    *
    * @see ifs.fnd.asp.ASPBlock#addField(FndAttribute)
    * @see ifs.fnd.asp.ASPBlock#addField(String,FndAttribute)
    * @see ifs.fnd.asp.ASPBlock#addField(String,FndAttribute,String)
    */  
   public ASPField addField(FndAttribute template,String mask)
   {
      return addField(template.getName(),template, mask);
   }
      
   /**
    * Add ASPField for the given FndAttribute with the given mask.
    * And this method should only be called from "Activity Programing Model". 
    * @param name Name for the ASPField
    * @param template FndAttribute to be bound to the ASPField
    * @param mask MASK to be used to format client values
    *
    * @see ifs.fnd.asp.ASPBlock#addField(FndAttribute,String)
    * @see ifs.fnd.asp.ASPBlock#addField(String,FndAttribute)
    * @see ifs.fnd.asp.ASPBlock#addField(FndAttribute)
    */    
 
   public ASPField addField(String name, FndAttribute template,String mask)
   {
      FndAttributeType type = template.getType();
      int temp_type;
      //todo - should support all FndAttributeTypes in the future
  
      if (type.equals(FndAttributeType.DECIMAL) || type.equals(FndAttributeType.NUMBER))
         temp_type = DataFormatter.NUMBER;
      else if (type.equals(FndAttributeType.INTEGER))
         temp_type = DataFormatter.INTEGER;
      else if (type.equals(FndAttributeType.BOOLEAN))
         temp_type = DataFormatter.BOOLEAN;
      else if (type.equals(FndAttributeType.DATE))
         temp_type = DataFormatter.DATE; 
      else if (type.equals(FndAttributeType.TIME))
         temp_type = DataFormatter.TIME;
      else if (type.equals(FndAttributeType.TIMESTAMP))
         temp_type = DataFormatter.DATETIME;
      else
         temp_type = DataFormatter.STRING;      
      try
      {
         modifyingImmutableAttribute("FIELDS");
         return defineField(name,temp_type,mask,template);
      }
      catch(Throwable e)
      {
         error(e);
         return null;
      }      
      
   }

   private ASPField defineField( String names,
                                 int type_id,
                                 String mask,
                                 FndAttribute template)
   {
      try
      {
         ASPField field = null;
         ASPManager mgr = getASPManager();
         boolean mask_given = (mask!=null);

         if( mask==null )
            mask = mgr.getFormatMask(DataFormatter.getTypeName(type_id), false);

         StringTokenizer st = new StringTokenizer(names,", \n\r\t");
         while( st.hasMoreTokens() )
         {
            String name = st.nextToken();
            field = new ASPField(this);
            field.construct(name,type_id,mask,template);
            field.setMaskGivenProperty(mask_given);
            if(type_id == DataFormatter.NUMBER || type_id == DataFormatter.INTEGER || type_id == DataFormatter.MONEY)
               field.setAlignment("RIGHT");
            appendField(field);
            if ((!is_state_available) && (name.equalsIgnoreCase("STATE")))
               is_state_available = true;
         }
         return field;
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }
   }

   private void appendField( ASPField field ) throws Exception
   {
      if(DEBUG) debug("ASPBlock.appendField()");
      if( count==fields.length )
      {
         ASPField[] newfields = new ASPField[2*count];
         System.arraycopy(fields,0,newfields,0,fields.length);
         fields = newfields;
      }
      fields[count++] = field;
   }

   void applyProfilesFormatter(String[] number_formats, String[] currency_formats, String[] date_formats)
   {
      for (int i=0; i<fields.length; i++)
         fields[i].applyProfilesFormatter(number_formats, currency_formats, date_formats);
   }

   void notifyHiddenFlagDirty()
   {
      dirty_check_fields = true;
   }

   /**
    * Returns the number of ASPFields in this ASPBlock
    *
    * @return The number of ASPFields added to this ASPBlock
    */
   public int countFields()
   {
      return count;
   }

   //==========================================================================
   //  Assignment of simple HTML fields (not in ASPTable)
   //==========================================================================

   private String returnAssignments( AutoString value )
   {
      return (getASPPage() instanceof ASPPageProvider) ? null : value.toString();
   }

   int assignmentsGenerated()
   {
      return assignment_generated;
   }

   /**
    * This method calls generateAssignments(ASPBuffer) passing the current
    * row from the ASPRowSet corresponding to this ASPBlock.
    *
    * @return JScript code as a String that assigns a value to
    * each HTML field included in this ASPBlock
    *
    * @see #generateAssignments(ASPBuffer)
    */
   public String generateAssignments()
   {
      try
      {
         AbstractDataRow data = getASPRowSet().getDataRow();
         return data==null ?
                generateEmptyAssignments() :
                generateAssignments(data,getASPRowSet().getRowStatus());
      }
      catch(Throwable e)
      {
         error(e);
         return null;
      }
   }

   /**
    * Generate JScript code that assigns a value to each HTML field included
    * in this ASPBlock. The values are fetched from the matching items
    * in the specified buffer. Each value is converted to the client format
    * using the field specific type and mask.
    * Fields, that don't have matching items, are skipped.
    * <p>
    * This method generates also assignments for tag-variables associated with
    * every ASPField in this block. It includes HTML tags and
    * attributes that trigger the JavaScript code for Validation, Check and
    * LOV functionality.
    * <p>
    * The string returned from this method should be passed to the JScript
    * function eval(), for example:
    * <p>
    * <code>   eval(blk.generateAssignments(data));</code>
    * <p>
    * @param
    * @see ifs.fnd.asp.ASPField.setLOV
    * @see ifs.fnd.asp.ASPField.setValidation
    * @see ifs.fnd.asp.ASPField.setMandatory
    * @see ifs.fnd.asp.ASPField.setUpperCase
    * @see ifs.fnd.asp.ASPField.setReadOnly
    * @see ifs.fnd.asp.ASPManager.generateClientScript
    */
   public String generateAssignments( ASPBuffer data )
   {
      return generateAssignments(new BufferedDataRow(data,getASPPage()),null);
   }

   String generateAssignments( AbstractDataRow data, String row_status )
   {
      assignment_generated = ASSIGNMENT_GENERATED;
      try
      {
         tmpbuf.clear();
         for( int i=0; i<count; i++ )
            appendAssignment(tmpbuf,fields[i],data,row_status,false,true);
         return returnAssignments(tmpbuf);
      }
      catch(Throwable e)
      {
         error(e);
         return null;
      }
   }


   /**
    * Generate JScript code that assigns a value to each HTML field included
    * in this ASPBlock. Fetch field values from the ASP Request object,
    * without performing any Client-Server conversion.
    */
   public String regenerateAssignments()
   {
      assignment_generated = ASSIGNMENT_REGENERATED;
      try
      {
         tmpbuf.clear();
         for( int i=0; i<count; i++ )
            appendAssignment(tmpbuf,fields[i],null,null,true,true);
         return returnAssignments(tmpbuf);
      }
      catch(Throwable e)
      {
         error(e);
         return null;
      }
   }


   /**
    * Generate JScript code that assigns values to the selected HTML fields from
    * this ASPBlock. The values are fetched from the matching items
    * in the specified buffer. Each value is converted to the client format
    * using the field specific type and mask.
    * Fields, that don't have matching items, are cleared.
    * <p>
    * This method generates also assignments for tag-variables associated with
    * every selected ASPField. It includes HTML tags and
    * attributes that trigger the JavaScript code for Validation, Check and
    * LOV functionality.
    * <p>
    * @see ifs.fnd.asp.ASPField.setLOV
    * @see ifs.fnd.asp.ASPField.setValidation
    * @see ifs.fnd.asp.ASPField.setMandatory
    * @see ifs.fnd.asp.ASPField.setUpperCase
    * @see ifs.fnd.asp.ASPField.setReadOnly
    * @see ifs.fnd.asp.ASPManager.generateClientScript
    */
   public String generateAssignments( String field_names,
                                      ASPBuffer data )
   {
      assignment_generated = ASSIGNMENT_GENERATED;
      try
      {
         tmpbuf.clear();
         StringTokenizer st = new StringTokenizer(field_names,", \n\r\t");

         while( st.hasMoreTokens() )
         {
            ASPField field = findField(st.nextToken());
            appendAssignment(tmpbuf,field,new BufferedDataRow(data,getASPPage()),null,false,false);
         }
         return returnAssignments(tmpbuf);
      }
      catch(Throwable e)
      {
         error(e);
         return null;
      }
   }


   private void appendAssignment( AutoString code,
                                  ASPField field,
                                  AbstractDataRow data,
                                  String row_status,
                                  boolean from_asp_request,
                                  boolean skip_unexisting ) throws Exception
   {
      if( field.isRadioButtons() )
         appendRadioButtonsAssignment (code,field,data,row_status,from_asp_request);
      else if( field.isCheckBox() )
         appendCheckBoxAssignment     (code,field,data,row_status,from_asp_request);
      else if( field.isSelectBox() )
         appendSelectBoxAssignment    (code,field,data,row_status,from_asp_request);
      else
         appendFieldAssignment        (code,field,data,row_status,from_asp_request,skip_unexisting);
   }

   private void appendAssignmentCode( AutoString code, String name, Object value )
   {
      code.append(name);
      code.append('=');
      if( value==null )
         code.append(realJSnull);
      else
      {
         code.append('"');
         if( value instanceof String )
            code.append((String)value);
         else
            code.append((AutoString)value);
         code.append('"');
      }
      code.append(";\n");
   }

   //==========================================================================
   //  Text Field
   //==========================================================================

   private void appendFieldAssignment( AutoString code,
                                       ASPField field,
                                       AbstractDataRow data,
                                       String row_status,
                                       boolean from_asp_request,
                                       boolean skip_unexisting ) throws Exception
   {
      if(DEBUG) debug("ASPBlock.appendFieldAssignment()");

      ASPManager mgr = getASPManager();
      String cstr;

      if( field.hasGlobalConnection() )
         cstr = field.getGlobalValue();
      else if( data==null )
         cstr = from_asp_request ? Util.trimLine( getASPPage().readValue(field.getName()) ) : null; //JAPA
      else
         cstr = data.convertToClientString(field);
      cstr = mgr.JScriptEncode(mgr.HTMLEncode(cstr));
      appendAssignmentCode(code,field.getVariableName(),cstr);

      tmpsubbuf.clear();
      if( data==null || (cmdbar!=null && cmdbar.getLayoutMode()==cmdbar.FIND_LAYOUT))
      {
         //
         //  Query Mode - clear() or regenerate()
         //
         if( field.isUpperCase() )
         {
            tmpsubbuf.append(" OnChange=",escseq,"\"toUpper_('",field.getName(),"',-1)");
            tmpsubbuf.append(escseq,"\"");
         }

         if( !field.isQueryable() )
            tmpsubbuf.append(" READONLY ");

         //field.appendValidationTag(tmpsubbuf,-1,true);

         if( field.hasLOV() && field.isLOVActive() )
            field.appendLOVTag(tmpsubbuf,-1,true);

         if( field.isDateTime())
            field.appendCalendarTag(tmpsubbuf,-1);

      }
      else
      {
         //
         //  Edit Mode - generate()
         //
         field.appendReadOnlyTag(tmpsubbuf,true,row_status);
         field.appendValidationTag(tmpsubbuf,-1,true);
         field.appendTooltipTag(tmpsubbuf,-1,true);

         if( field.hasLOV() && field.isLOVActive(row_status) )
            field.appendLOVTag(tmpsubbuf,-1,true);

         if( field.isDateTime() && !field.isReadOnly(row_status))
            field.appendCalendarTag(tmpsubbuf,-1);
      }
      if(DEBUG) debug("  appendFieldAssignment(): tmpsubbuf="+tmpsubbuf);
      field.setTagAssignment(tmpsubbuf.toString());
      appendAssignmentCode(code,field.getTagVariableName(),tmpsubbuf);
   }

   //==========================================================================
   //  Radio Buttons
   //==========================================================================

   private void appendRadioButtonsAssignment( AutoString code,
                                              ASPField field,
                                              AbstractDataRow data,
                                              String row_status,
                                              boolean from_asp_request ) throws Exception
   {
      if(DEBUG) debug("ASPBlock.appendRadioButtonsAssignment()");
      //JAPA: ASPManager mgr = getASPManager();

      String valarr[] = field.getIidClientValues();

      String value;
      if( field.hasGlobalConnection() )
         value = field.getGlobalValue();
      else if(data==null )
         value = from_asp_request ? getASPPage().readValue(field.getName()) : null; //JAPA
      else
         value = data.getString(field,null);

      String varname = field.getVariableName();
      code.append(varname," = new Array(");
      code.appendInt(valarr.length);
      code.append(");\n");

      String tagvarname = field.getTagVariableName();
      code.append(tagvarname," = new Array(");
      code.appendInt(valarr.length);
      code.append(");\n");

      for( int i=0; i<valarr.length; i++ )
      {
         tmpsubbuf.clear();
         tmpsubbuf.append(varname);
         tmpsubbuf.append('[');
         tmpsubbuf.appendInt(i);
         tmpsubbuf.append(']');
         appendAssignmentCode( code, tmpsubbuf.toString(), valarr[i] );

         tmpsubbuf.clear();
         tmpsubbuf.append(tagvarname);
         tmpsubbuf.append('[');
         tmpsubbuf.appendInt(i);
         tmpsubbuf.append(']');

         String s = null;
         if( (data==null && !field.isQueryable()) || field.isReadOnly(row_status) || (cmdbar!= null && cmdbar.getLayoutMode()==cmdbar.FIND_LAYOUT))
            s = "OnClick="+escseq+"\"javascript:resetRadioButtons(this)"+escseq+"\"";
         if( valarr[i].equals(value) )
            s = s + " CHECKED";

         if(DEBUG) debug("  appendRadioButtonsAssignment(): i="+i+",s="+s);
         field.setTagAssignment(i,s);
         appendAssignmentCode( code, tmpsubbuf.toString(), s );
//         appendAssignmentCode( code, tmpsubbuf.toString(),
//                                     valarr[i].equals(value) ? "CHECKED" : null );
      }
   }

   //==========================================================================
   //  Check Box
   //==========================================================================

   private void appendCheckBoxAssignment( AutoString code,
                                          ASPField field,
                                          AbstractDataRow data,
                                          String row_status,
                                          boolean from_asp_request ) throws Exception
   {
      if(DEBUG) debug("ASPBlock.appendCheckBoxAssignment()");

      String value;
      if( field.hasGlobalConnection() )
         value = field.getGlobalValue();
      else if( data==null )
         value = from_asp_request ? getASPPage().readValue(field.getName()) : null; //JAPA
      else
         value = data.getString(field,null);

      tmpsubbuf.clear();

      field.appendTooltipTag(tmpsubbuf,-1,true);

      if( field.getCheckedValue().equals(value) )
         tmpsubbuf.append("CHECKED");
      if( (data==null && !field.isQueryable()) || field.isReadOnly(row_status) || (cmdbar!=null && cmdbar.getLayoutMode()==cmdbar.FIND_LAYOUT))
         tmpsubbuf.append(" OnClick=",escseq,"\"checked=defaultChecked",escseq,"\"");

      appendAssignmentCode(code,field.getVariableName(),value);

      if(DEBUG) debug("  appendCheckBoxAssignment(): tmpsubbuf="+tmpsubbuf);
      field.setTagAssignment(tmpsubbuf.toString());
      appendAssignmentCode(code,field.getTagVariableName(),tmpsubbuf);
   }

   //==========================================================================
   //  Select Box
   //==========================================================================

   private void appendSelectBoxAssignment( AutoString code,
                                           ASPField field,
                                           AbstractDataRow data,
                                           String row_status,
                                           boolean from_asp_request ) throws Exception
   {
      if(DEBUG) debug("ASPBlock.appendSelectBoxAssignment()");

      String value ;
      if( field.hasGlobalConnection() )
         value = field.getGlobalValue();
      else if( data==null )
         value = from_asp_request ? getASPPage().readValue(field.getName()) : null; //JAPA
      else
         value = data.getString(field,null);

      tmpsubbuf.clear();
      getASPPage().getASPHTMLFormatter().populateListBox( tmpsubbuf,
                                                          field.getIidClientValues(),
                                                          value,
                                                          data!=null && field.isMandatory(),
                                                          true );
      appendAssignmentCode(code,field.getVariableName(),tmpsubbuf);

      tmpsubbuf.clear();
      if( data!=null )
         field.appendValidationTag(tmpsubbuf,-1,true);
      if( field.hasLOV() && field.isLOVActive(row_status) )
         field.appendLOVTag(tmpsubbuf,-1,true);
      if( field.isDateTime() && !field.isReadOnly(row_status))
         field.appendCalendarTag(tmpsubbuf,-1);

      if(DEBUG) debug("  appendSelectBoxAssignment(): tmpsubbuf="+tmpsubbuf);
      field.setTagAssignment(tmpsubbuf.toString());
      appendAssignmentCode(code,field.getTagVariableName(),tmpsubbuf);
   }


   //==========================================================================
   //  Empty Assignments - Clear
   //==========================================================================

   /**
    * Generate JScript code that assigns a null value to each HTML field included
    * in this ASPBlock.
    *<p>
    * This method generates also assignments for tag-variables associated with
    * every ASPField in this block. It includes HTML tags and
    * attributes that trigger the JavaScript code for Validation, Check and
    * LOV functionality.
    *<p>
    * The string returned from this method should be passed to the JScript
    * function eval(), for example:
    *<p>
    * <code>   eval(blk.generateEmptyAssignments());</code>
    *<p>
    * <b>Note!</b> The generated code does not include the ReadOnly functionality.
    *
    * @see ifs.fnd.asp.ASPField.setLOV
    * @see ifs.fnd.asp.ASPField.setValidation
    * @see ifs.fnd.asp.ASPField.setMandatory
    * @see ifs.fnd.asp.ASPField.setUpperCase
    * @see ifs.fnd.asp.ASPManager.generateClientScript
    */
   public String generateEmptyAssignments()
   {
      assignment_generated = ASSIGNMENT_GENERATED_EMPTY;
      try
      {
         tmpbuf.clear();
         for( int i=0; i<count; i++ )
         {
            ASPField field = fields[i];
            appendEmptyAssignment(tmpbuf,field);
         }
         return returnAssignments(tmpbuf);
      }
      catch(Throwable e)
      {
         error(e);
         return null;
      }
   }

   /**
    * Generate JScript code that assigns a null value to each selected HTML field
    * from this ASPBlock.
    *<p>
    * This method generates also assignments for tag-variables associated with
    * every selected ASPField. It includes HTML tags and
    * attributes that trigger the JavaScript code for Validation, Check and
    * LOV functionality.
    *<p>
    * <b>Note!</b> The generated code does not include the ReadOnly functionality.
    *
    * @see ifs.fnd.asp.ASPField.setLOV
    * @see ifs.fnd.asp.ASPField.setValidation
    * @see ifs.fnd.asp.ASPField.setMandatory
    * @see ifs.fnd.asp.ASPField.setUpperCase
    * @see ifs.fnd.asp.ASPManager.generateClientScript
    */
   public String generateEmptyAssignments( String field_names )
   {
      assignment_generated = ASSIGNMENT_GENERATED_EMPTY;
      try
      {
         tmpbuf.clear();
         StringTokenizer st = new StringTokenizer(field_names,", \n\r\t");

         while( st.hasMoreTokens() )
         {
            ASPField field = findField(st.nextToken());
            appendEmptyAssignment(tmpbuf,field);
         }
         return returnAssignments(tmpbuf);
      }
      catch(Throwable e)
      {
         error(e);
         return null;
      }
   }


   private void appendEmptyAssignment( AutoString code, ASPField field ) throws Exception
   {
      if( field.isRadioButtons() )
         appendRadioButtonsAssignment (code,field,null,null,false);
      else if( field.isCheckBox() )
         appendCheckBoxAssignment     (code,field,null,null,false);
      else if( field.isSelectBox() )
         appendSelectBoxAssignment    (code,field,null,null,false);
      else
         appendFieldAssignment        (code,field,null,null,false,true);
   }

   //==========================================================================
   //  add/read ToBuffer
   //==========================================================================

   /**
    * Append, to the specified buffer, new items based on all fields
    * from this block. Fetch field values from the ASP Request object.
    * Mark each item as changed (status="*"),
    * if the old_dest-buffer has been specified and
    * if the current value differs from the old one retrieved from the
    * old_dest-buffer. Convert each value to the server format using the
    * field specific type and format mask.
    * Return true if at least one item value has been changed.
    *
    * @see ifs.fnd.asp.ASPBuffer
    */
   public boolean readToBuffer( ASPBuffer dest,
                                ASPBuffer old_dest )
   {
      try
      {
         Buffer buf = dest.getBuffer();
         Buffer old = old_dest==null ? null : old_dest.getBuffer();
         boolean changed = false;

         for( int i=0; i<count; i++ )
            if( fields[i].readToBuffer(buf,old) )
               changed = true;
         return changed;
      }
      catch(Throwable e)
      {
         error(e);
         return false;
      }
   }


   /**
    * Append, to the specified buffer, new items based on all fields
    * from this block. Fetch field values from the ASP Request object.
    * Convert each value to the server format using the
    * field specific type and format mask.
    *
    * @see ifs.fnd.asp.ASPBuffer
    */
   public void readToBuffer( ASPBuffer dest )
   {
      try
      {
         Buffer buf = dest.getBuffer();
         for( int i=0; i<count; i++ )
            fields[i].readToBuffer(buf,null);
      }
      catch(Throwable e)
      {
         error(e);
      }
   }


   /**
    * Append, to the specified buffer, new items based on all fields
    * from this block. Fetch field values from the specified source buffer,
    * which must contain items in server format.
    * Mark each item as changed (status="*"),
    * if the old_dest-buffer has been specified and
    * if the current value differs from the old one retrieved from the
    * old_dest-buffer.
    * Do not perform any client-server conversion.
    * Return true if at least one item value has been changed.
    *
    * @see ifs.fnd.asp.ASPBuffer
    */
   public boolean addToBuffer( ASPBuffer dest,
                               ASPBuffer source,
                               ASPBuffer old_dest )
   {
      try
      {
         Buffer destbuf = dest.getBuffer();
         Buffer sourcebuf = source==null ? null : source.getBuffer();
         Buffer oldbuf = old_dest==null ? null : old_dest.getBuffer();
         boolean changed = false;

         for( int i=0; i<count; i++ )
            if( fields[i].copyToBuffer(destbuf,sourcebuf,oldbuf) )
               changed = true;
         return changed;
      }
      catch(Throwable e)
      {
         error(e);
         return false;
      }
   }

   /*
	 * Appends to the destination row the new values based on all the fields 
	 * from this block.
	 * @param dest destination FndDataRow object
	 * @param src source FndDataRow object
	 * @param write_changes flag to enable/disable of writing new values into row
	 * @return true row is modified, else false
    */
   boolean addToRow (FndDataRow dest,
                            FndDataRow src,
                            boolean write_changes)
   {
      try{
         boolean change =  false;
         FndAbstractRecord dest_rec = dest.rec;
         FndAbstractRecord src_rec  = src.rec;
         for(int i=0; i<fields.length; i++)
         {
            ASPField f = fields[i];
            String curr_val = f.readValue();
            String src_val  = src.getValue(f);
            
            if(curr_val!=null && !curr_val.equals(src_val))
            {
               String dbName = f.getDbName();
               int pos = dbName.indexOf(".");
               FndAttribute attr = null;
               if(pos!=-1)
               {
                  FndCompoundAttribute comAttr = (FndCompoundAttribute) dest_rec.getAttribute(dbName.substring(0,pos));
                  attr = FndAttributeInternals.internalGetRecord((FndAbstractAggregate)comAttr).getAttribute(dbName.substring(pos+1));
               }
               else
                  attr = dest_rec.getAttribute(dbName);
               
               if(!write_changes)
                  attr = (FndAttribute)attr.clone();
               
               attr = ActivityUtils.setAttributeValue(attr, f, curr_val);
               if(attr.isDirty())
                  change =  true;
            }
         }
         return change;
      }
      catch(Throwable e)
      {
         error(e);
         return false;
      }
   }
   
   /**
    * Append, to the specified buffer, new items based on all fields
    * from this block. Fetch field values from the specified source buffer,
    * which must contain items in server format.
    * Do not perform any client-server conversion.
    *
    * @see ifs.fnd.asp.ASPBlock#addToBuffer(ASPBuffer,ASPBuffer,ASPBuffer)
    * @see ifs.fnd.asp.ASPBuffer
    */
   public void addToBuffer( ASPBuffer dest,
                            ASPBuffer source )
   {
      addToBuffer(dest,source,null);
   }

   //==========================================================================
   //  Miscellaneous
   //==========================================================================

   /**
    * Disables the History functionality.
    */
   public void disableHistory()
   {
      try
      {
         modifyingImmutableAttribute("HISTORY_DISABLED");
         history_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   boolean isHistoryDisabled()
   {
      return history_disabled;
   }

   public void disableSendTo()
   {
      try
      {
         modifyingImmutableAttribute("SENDTO_DISABLED");
         sendto_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }
      
   boolean isSendToDisabled()
   {
      return sendto_disabled;
   }

   /**
    * Disables the Document Management functionality.
    * Note that this is automatically disabled if a DOCMAW/DOC_REF_URL has not been
    * defined in ASPConfig.ifm, or if the URL is invalid.
    */
   public void disableDocMan()
   {
      doc_man_disabled = true;
   }

   /**
    * Sets the View for the Document Management functionality.
    * <p>
    * <b>The block must be in state UNDEFINED to call this method.</b>
    *
    * @param view Name of the view to be set.
    */
   public void setDocManView(String view)
   {
      try
      {
         modifyingImmutableAttribute("DOC_MAN_VIEW_NAME");
         this.doc_man_view_name = view;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   // Modified by Terry 20130902
   // Change visibility
   // Original:
   // private String getDocManView()
   protected String getDocManView()
   // Modified end
   {
      return (doc_man_view_name != null ? doc_man_view_name : view_name);
   }

   /**
    * Sets the Key Ref for the Document Management functionality.
    *
    * @param key_ref key_ref name value pairs separated by ^ as required for Document query where condition.
    * ex: COMPANY=10^IDENTITY=1-INDI^INVOICE_ID=211552^PARTY_TYPE_DB=CUSTOMER^
    * For IIDs remember to send DB value and not client values as translations will effect client values.
    */
   public void setDocManKeyRef(String key_ref)
   {
      doc_man_key_ref = key_ref;
   }
   
   boolean isDocMan()
   {
      return doc_man_disabled ? false : doc_man;
   }

   /**
    * Sets the default view for this ASPBlock.
    * <p>
    * For example:
    * <br>
    * <code> blk.setView("DEMO_ORDER");</code>
    * <p>   where <b>blk</b> is the reference to the ASPBlock object.
    * <br>
    * @param view_name Name of the view to be set.
    */
   public void setView( String view_name )
   {
      try
      {
         modifyingImmutableAttribute("VIEW");
         this.view_name = view_name;
         if(getASPPage() instanceof ASPPageProvider)
         {
            generateQueryHints(view_name);

            //History stuff   (should be re-written with a single mgr.performConfig(trans) )
            ASPManager mgr = getASPManager();
            ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();

            ASPCommand cmd = (new ASPCommand(mgr)).construct();

            //Get the LU Name
            cmd.defineCustomFunction("dictionary_sys.get_logical_unit");
            cmd.addParameter("LU_NAME", "S", null, null);
            cmd.addParameter("VIEW_NAME","S","IN", view_name);
            cmd.addParameter("TYPE","S","IN", "VIEW");

            trans.addCommand("LU_NAME_CMD", cmd);
            trans = mgr.performConfig(trans);

            lu_name = trans.getValue("LU_NAME_CMD/DATA/LU_NAME");
            // Added by Terry 20130927
            // Fixed lu name
            blk_lu_name = lu_name;
            // Added end

            //Get the LU Keys
            cmd.defineCustom("dictionary_sys.get_logical_unit_keys_");
            cmd.addParameter("NAME","S","OUT",null);
            cmd.addParameter("VALUE","S","OUT",null);
            cmd.addParameter("LU_NAME","S","IN",lu_name);
            cmd.addParameter("OBJID","S","IN",null);

            trans.clear();
            trans.addCommand("LU_KEYS", cmd);
            trans = mgr.performConfig(trans);

            lu_keys = trans.getValue("LU_KEYS/DATA/NAME");

            //check all keys are defined as ASPFields
            //this is a quick fix for pkg 8. Should move to doFreeze later. //Mangala

            if (!mgr.isEmpty(lu_keys))
            {
               StringTokenizer keys = new StringTokenizer(lu_keys, "^");
               String tmp_fields_str = ","+getFieldList()+",";
               while(keys.hasMoreTokens())
               {
                  if (tmp_fields_str.indexOf(","+keys.nextToken()+",")==-1)//no History
                  {
                     lu_keys="";
                     lu_name="";
                     break;
                  }
               }
            }

            if (is_state_available) //Get the state_encode_method 
            {                           
               cmd.defineCustomFunction("Dictionary_SYS.Get_State_Encode_Method__");
               cmd.addParameter("METHOD", "S",null,null);
               cmd.addParameter("VIEW", "S", "IN", view_name);
               trans.clear();
               trans.addCommand("ENC",cmd);
               trans = mgr.performConfig(trans);

               modifyingImmutableAttribute("STATE_ENCODE_METHOD");
               state_encode_method = trans.getValue("ENC/DATA/METHOD");
            }
            
            // Sort Lu Keys for Page Notes ------------------------------------------------------
            if(!Str.isEmpty(lu_keys))
            {
               if(Str.isEmpty(sorted_lu_keys)) sorted_lu_keys = "";
               Vector sort_key_list = new Vector();
               StringTokenizer st = new StringTokenizer(lu_keys, "^");
               while (st.hasMoreTokens())
               {
                  sort_key_list.add(st.nextToken());
               }
               sort_key_list.trimToSize();
               if(sort_key_list.size()>=2)
               {
                  Collections.sort(sort_key_list);
                  ListIterator it = sort_key_list.listIterator();
                  while(it.hasNext())
                  {
                     sorted_lu_keys = sorted_lu_keys + it.next().toString() + "^";
                  }
               }
               else
                  sorted_lu_keys = lu_keys;
               
               if(sorted_lu_keys.startsWith("^"))
                  sorted_lu_keys = sorted_lu_keys.substring(1);
               if(sorted_lu_keys.endsWith("^"))
                  sorted_lu_keys = sorted_lu_keys.substring(0, sorted_lu_keys.length()-1);
            }
            // ----------------------------------------------------------------------------------

         }
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   private void generateQueryHints(String view_name)
   {
      try
      {

         ASPManager mgr = getASPManager();
         ASPCommand cmd = (new ASPCommand(mgr)).construct();

         cmd.defineCustom("QUERY_HINT_UTILITY_API.get_query_hints__");
         cmd.addParameter("INDICES","S","OUT",null);
         cmd.addParameter("FUNCTIONS","S","OUT",null);
         cmd.addParameter("VIEW_NAME","S","IN",view_name);

         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         trans.addCommand("QUERY_HINTS", cmd);
         trans = mgr.performConfig(trans);

         String indices = trans.getValue("QUERY_HINTS/DATA/INDICES");
         String functions = trans.getValue("QUERY_HINTS/DATA/FUNCTIONS");

         Message msg_ = new Message(indices);
         index_attr = msg_.getAttributes();

         msg_ = new Message(functions);
         func_attr = msg_.getAttributes();
      }
      catch(Exception any)
      {
      }
   }

   
   /**
    * Return true if this ASPField is suitable for querying.
    * @param field_name Name of the field.
    *
    * @see ifs.fnd.asp.ASPBlock#isNotSuitableForQuerying
    */
   public boolean isSuitableForQuerying(String field_name)
   {
      try
      {
         for (int i=0; i<index_attr.length; i++)
            if ((index_attr[i].name).equals(field_name) && (index_attr[i].value).equals("1"))
               return true;
      }
      catch( Exception e)
      {
         //error(e);
      }
      return false;
   }


   /**
    * Return true if this ASPField is not suitable for querying.
    * @param field_name Name of the field.
    *
    * @see ifs.fnd.asp.ASPBlock#isSuitableForQuerying
    */
   public boolean isNotSuitableForQuerying(String field_name)
   {
      try
      {
         for (int i=0; i<func_attr.length; i++)
            if ((func_attr[i].name).equals(field_name))
               return true;
      }
      catch( Exception e)
      {
         //error(e);
      }
      return false;
   }


   /**
    * Set the default view for this ASPBlock, accessed by the IAL USER.
    */
   public void setIALView( String view_name)
   {
      try
      {
         ASPPage page = getASPPage();
         if (view_name.indexOf(".")>0)
             throw new FndException("FNDBLKDNIDIN: VIEW NAME IN setIALView(String view_name) SHOULD NOT INCLUDE USER");
         String user;
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPCommand cmd = mgr.newASPCommand();
         cmd.defineCustomFunction("FND_SETTING_API.Get_Value");
         cmd.addParameter("INFO_USER", "S", null, null);
         cmd.addParameter("IAL_USER",  "S", null, "IAL_USER");

         trans.addCommand("IAL_INFO", cmd);

         if (page instanceof ASPPortletProvider)
             trans = ((ASPPortletProvider) page).performConfig(trans);
         else
             trans = mgr.performConfig(trans);
         user = trans.getValue("IAL_INFO/DATA/INFO_USER");
         if(user.equals("*"))
             throw new FndException("FNDBLKIANDFT: NO IAL USER HAS BEEN DEFINED");
         modifyingImmutableAttribute("VIEW");
         this.view_name = user+"."+view_name;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Return the default view defined for this ASPBlock.
    *
    * @return Name of the default view defined for this ASPBlock.
    */
   public String getView()
   {
      return view_name;
   }

  /**
    * Return the "state_encode_method" for view associated with this ASPBlock.
    *    
    */
   public String getStateEncodeMethod ()
   {
      return state_encode_method ;
   }

  /**
    * Return the default database view defined for this ASPBlock.
    * Aliases are removed. If more than one view is defined for the
    * block, then a comma seperated list of db views is returned.
    *
    */
   String getDBView()
   {
     String views = getView();

     if (Str.isEmpty(views))  // dummy block no view defined
        return null;

     String dbviews="";
     StringTokenizer st = new StringTokenizer(views,",");

     while (st.hasMoreTokens())
     {
       StringTokenizer st2 = new StringTokenizer(st.nextToken());
       dbviews += st2.hasMoreTokens()?st2.nextToken()+",":"";
     }

     dbviews = dbviews.substring(0,dbviews.length()-1);

     return dbviews;
   }



   /**
    * Return the comma-separated list of names of all fields in this block
    *
    * @return A list of names of all fields in this block, seperated by commas as a String.
    */
   public String getFieldList()
   {
      try
      {
         if( field_list!=null ) return field_list;

         tmpbuf.clear();
         for( int i=0; i<count; i++ )
         {
            if( i>0 ) tmpbuf.append(',');
            tmpbuf.append(fields[i].getName());
         }
         String list = tmpbuf.toString();
         if( !isNotDefined() ) field_list = list;
         return list;
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }
   }


   /**
    * Return the SQL select-list of all fields in this block.
    * The list will inclue an alias for each field having the database name
    * not equal to the field name.
    *
    * @return The SQL select-list of all fields in this block.
    */
   public String getSelectList()
   {
      try
      {
         if( select_list!=null ) return select_list;

         tmpbuf.clear();
         for( int i=0; i<count; i++ )
         {
            ASPField field = fields[i];
            if(field.isImageField() && !field.hasTemplate()) continue;
            if( i>0 ) tmpbuf.append(',');
            String dbname = field.getDbName();

            if( field.isComputable() )
               tmpbuf.append(field.getSelectExpression());
            else/* if( name.equals(dbname) )
               auto.append(name);
            else*/
               tmpbuf.append(dbname); //+" "+name);
         }
         String list = tmpbuf.toString();
         if( !isNotDefined() ) select_list = list;
         return list;
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }
   }


   /**
    * Return the name of this block.
    *
    * @return Name of this block.
    */
   public String getName()
   {
      return block_name;
   }


   /**
    * Turn off the Mandatory flag for all ASPFields included in this ASPBlock
    */
   public void unsetMandatory()
   {
      try
      {
         modifyingMutableAttribute("MANDATORY");
         for( int i=0; i<count; i++ )
            fields[i].unsetMandatory();
      }
      catch( Throwable any )
      {
         error(any);
      }
   }


   /**
    * Turn off the ReadOnly flag for all ASPFields included in this ASPBlock
    */
   public void unsetReadOnly()
   {
      try
      {
         modifyingMutableAttribute("READ_ONLY");
         for( int i=0; i<count; i++ )
            fields[i].unsetReadOnly();
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Turn off the Hidden flag for all ASPFields included in this ASPBlock
    */
   public void unsetHidden()
   {
      try
      {
         modifyingMutableAttribute("HIDDEN");
         for( int i=0; i<count; i++ )
            fields[i].unsetHidden();
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Set the Hidden flag for all ASPFields included in this ASPBlock
    */
   public void setHidden()
   {
      try
      {
         modifyingMutableAttribute("HIDDEN");
         for( int i=0; i<count; i++ )
            fields[i].setHidden();
      }
      catch( Throwable any )
      {
         error(any);
      }
   }



   /**
    * Return an array with all ASPFields included in this ASPBlock
    *
    */
   public ASPField[] getFields()
   {
      if( isNotDefined() )
      {
         ASPField[] f = new ASPField[count];
         System.arraycopy(fields,0,f,0,count);
         return f;
      }
      else
         return fields;
   }

   public ASPField getASPField(String field_name) throws FndException
   {
      return findField(field_name);
   }


   /**
    * Throw an Exception if the specified name is already used
    * as a DbName in this ASPBlock.
    */
   void checkDbName( ASPField field, String db_name ) throws Exception
   {
      if( db_name==null ) return;
      for( int i=0; i<count; i++ )
         if( db_name.equals(fields[i].getDbName()) )
            throw new FndException("FNDBLKDUPNAM: Duplicate DbName &1 in the same ASPBlock for fields &2 and &3",
                                   db_name, fields[i].getName(), field.getName() );
   }

   //==========================================================================
   //  Define Commands
   //==========================================================================

   /**
    * Define one or more stadarad commands for this ASPBlock.
    * For example:
    *<pre>
    *    blk.defineCommand("DEMO_ORDER_API","New__,Modify__,Cancel__");
    *</pre>
    *
    * The defined commands will be automatically appended to the Transaction
    * Buffer sent to the MTS server by the ASPManager's submit() method.
    *
    * @see ifs.fnd.asp.ASPManagerr.submit
    */
   public void defineCommand( String package_name,
                              String method_names )
   {
      try
      {
         modifyingImmutableAttribute("DEFINED_COMMANDS");
         ASPManager mgr = getASPManager();
         StringTokenizer st = new StringTokenizer(method_names,", \n\r\t");
         while( st.hasMoreTokens() )
         {
            String method_name = st.nextToken();
            ASPCommand aspcmd = mgr.newASPCommand();
            Buffer cmd = aspcmd.getBuffer();
            cmd.addItem( "METHOD", package_name+"."+method_name );
            cmd.addItem("CATEGORY","Standard");

            if( !method_name.equals(ASPRowSet.REMOVE) )
            {
               boolean force = true;
               aspcmd.addStandardNestedCommands(this,force);
            }

            defined_commands.addItem(method_name,cmd);
         }
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Enables standard commands (New, Modify and Remove).
    * @param commands A comma separated list of standrd commands which should be enabled.
    *                 eg: blk.enableStandardCommands("New,Modofy,Rmove");
    */
   public void enableStandardCommands(String commands)
   {
       String methods = "";
       StringTokenizer st = new StringTokenizer(commands,", \n\r\t");
       while( st.hasMoreTokens() )
       {
           methods += st.nextToken()+"__,";
       }
       defineCommand("",methods.substring(0,methods.length()-1));
   }

   /**
    * Define a custom command for this ASPBlock.
    * The command will be performed once for every DATA row
    * (in the Current State of this block) marked with the specified method ID.
    *<p>
    * The specified ASPCommand may be any ASPCommand, but most often it will contain
    * Local References to items in a DATA row attached to this ASPBlock.
    *<p>
    * The defined command will be automatically appended to the Transaction
    * Buffer sent to the transaction server by the ASPManager's submit() method.
    * <p>
    * @see ifs.fnd.asp.ASPCommand.addLocalReference
    * @see ifs.fnd.asp.ASPManagerr.submit
    */
   public void defineCustomCommand( String method_id, ASPCommand command )
   {
      try
      {
         modifyingImmutableAttribute("DEFINED_COMMANDS");
         Buffer cmd = command.getBuffer();
         if( "Standard".equals(cmd.getString("CATEGORY",null)) )
            cmd.removeItem("DATA");
         defined_commands.addItem(method_id,cmd);
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   Buffer getDefinedCommands()
   {
      return defined_commands;
   }

   public boolean isCommandDefined( String cmd )
   {
        Buffer commands = getDefinedCommands();
        for(int i=0;i<commands.countItems();i++)
        {
            if((commands.getItem(i)).getName().equals(cmd))
               return true;
        }
        return false;
   }


   //==========================================================================
   //  HTML generation
   //==========================================================================

   /**
    * Return the HTML field "__BLOCKNAME_PERFORM" for this ASPBlock.
    * Called by ASPTable, ASPCommandBar, ASPBlockLayout.
    */
   void appendPerformField(AutoString buf)
   {
      if(!perform_written)
      {
         perform_written = true;
         buf.append("<input type=hidden name=\"",getASPPage().addProviderPrefix(),"__",block_name,"_" + ASPCommandBar.PERFORM + "\">");
      }
   }

   void appendPageClientScript( AutoString code ) throws FndException
   {
      appendCheckFieldsFunction(code);

      for( int i=0; i<count; i++ )
         fields[i].appendPageClientScript(code);
   }

   void appendDirtyClientScript( AutoString code ) throws FndException
   {
      if( dirty_check_fields ) appendCheckFieldsFunction(code);

      for( int i=0; i<count; i++ )
         fields[i].appendDirtyClientScript(code);
   }

   /**
    * Return HTML code containg all hidden fields in this ASPBlock.
    * The values will be fetched from the current row of the ASPRowSet
    * that corresponds to this ASPBlock.
    */
   public String generateHiddenFields()
   {
      try
      {
         ASPManager mgr = getASPManager();
         AbstractDataRow data = getASPRowSet().getDataRow();
         tmpbuf.clear();

         String rowstatus = getASPRowSet().getRowStatus();
         tmpbuf.append("  <input type=");
         tmpbuf.append( debug_hidden_fields ? "input" : "hidden" );
         tmpbuf.append(" name=\"");
         tmpbuf.append("__",block_name,"_ROWSTATUS");
         tmpbuf.append("\" value=\"");
         if (cmdbar!=null && cmdbar.getLayoutMode()==cmdbar.FIND_LAYOUT)
             tmpbuf.append("QueryMode__");
         else if( !Str.isEmpty(rowstatus) )
            tmpbuf.append(rowstatus);
         else if(data.isNULL())
            tmpbuf.append("QueryMode__");
         tmpbuf.append("\">\n");

         for( int i=0; i<count; i++ )
         {
            ASPField f = fields[i];
            if( !f.isHidden() ) continue;

            String value = null;
            if( !data.isNULL() && data.countColumns()>0 )
               value = data.convertToClientString(f);
            else if( f.hasGlobalConnection() )
               value = f.getGlobalValue();

            tmpbuf.append("  <input type=");
            tmpbuf.append( debug_hidden_fields ? "input" : "hidden" );
            tmpbuf.append(" name=");
            tmpbuf.append(f.getName());
            tmpbuf.append(" value=\"");
            if( value!=null ) tmpbuf.append(mgr.HTMLEncode(value));
            tmpbuf.append("\">\n");
         }
         return tmpbuf.toString();
      }
      catch(Throwable e)
      {
         error(e);
         return null;
      }
   }


   /**
    * Make all hidden fields visible for debugging.
    * It does NOT change the Hidden flag of ASPFields.
    */
   public void debugHiddenFields()
   {
      try
      {
         modifyingImmutableAttribute("DEBUG_HIDDEN_FIELDS");
         debug_hidden_fields = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Generate check<blkname>Fields() JavaScript function for all
    * non Hidden fields in this ASPBlock.
    */
   private void appendCheckFieldsFunction( AutoString code )
   {
      code.append("function check");
      code.append(IfsNames.dbToAppName(block_name));
      code.append("Fields(i)\n");
      code.append("{\n");
      boolean first = true;
      
      for( int i=0; i<count; i++ )
      {
         ASPField f = fields[i];
         if( (f.isImageField() && !f.hasTemplate()) || f.isHidden() || (getASPBlockLayout().hasDefinedGroups() && (f.getGroupId()==-1))) continue;
         //if (f.isCheckBox()) continue;
         if( first )
            code.append("\treturn ");
         else
            code.append(" &&\n\t");
         code.append(f.isCheckBox()?"true": "check"+f.getJavaScriptName()+"(i)");
         first = false;
      }
      code.append(";\n}\n\n");
   }

   //==========================================================================
   //  Private
   //==========================================================================

   private ASPField findField( String name ) throws FndException
   {
      for( int i=0; i<count; i++ )
      {
         ASPField field = fields[i];
         int pos = name.indexOf(".");
         String _aggr = null;
         String _name = null;
         if(pos>0){
            if(!field.hasAggregateReference()) continue;
            _aggr = name.substring(0,pos);
            _name = name.substring(pos+1);
            if( field.getName().equals(_name) && field.getAggregateReference().equals(_aggr))
               return field;
         }
         else if( field.getName().equals(name) )
            return field;
      }
      throw new FndException("FNDBLKFNEX: Field &1 does not exist", name);
   }

   private ASPField findDbField( String name ) throws Exception
   {
      for( int i=0; i<count; i++ )
      {
         ASPField field = fields[i];
         if( field.getDbName().equals(name) )
            return field;
      }
      throw new FndException("FNDBLKFNEX: Field &1 does not exist", name);
   }

   void initDocMan()
   {
      ASPManager mgr = getASPManager();
      doc_man = false;

      String url = mgr.getConfigParameter("DOCMAW/DOC_REF_URL","");
      if(url.equals(""))
         return;
      try
      {
         findDbField("OBJID");
      } catch (Exception e) {return;}

      if(mgr.isPresentationObjectInstalled(url))
         doc_man = true;
   }

   void appendDocMan(AutoString tmp)
   {
      try
      {
         if (!doc_man || rowset.countRows() == 0)
            return;

         ASPManager mgr = getASPManager();
         ASPConfig  cfg = mgr.getASPConfig();
         String obj_id = "";

         obj_id = rowset.getSafeValueAt(rowset.getCurrentRowNo(),"OBJID");

         tmp.append("\n<SCRIPT language=JavaScript>\n");
         tmp.append("function ",block_name,"DocMan()\n");
         tmp.append("{\n");
         tmp.append("\tshowNewBrowser('",cfg.getApplicationPath());
         tmp.append("/",cfg.getParameter("DOCMAW/DOC_REF_URL"));

         if (mgr.isEmpty(doc_man_key_ref))
         {
            tmp.append("?view=", mgr.URLEncode(getDocManView()));
            tmp.append("&objid=",mgr.URLEncode(obj_id));
         }
         else
         {
            ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
            ASPCommand cmd = mgr.newASPCommand();
            
            cmd.defineCustomFunction("dictionary_sys.get_logical_unit");
            cmd.addParameter("LU_NAME", "S", null, null);
            cmd.addParameter("VIEW_NAME","S","IN", getDocManView());
            cmd.addParameter("TYPE","S","IN", "VIEW");

            trans.addCommand("LU_NAME_CMD", cmd);
            trans = mgr.perform(trans);

            String lu_name = trans.getValue("LU_NAME_CMD/DATA/LU_NAME");
            
            tmp.append("?KEY_REF=",mgr.URLEncode(doc_man_key_ref));
            tmp.append("&LU_NAME=",mgr.URLEncode(lu_name));
         }

         tmp.append("');","\n}\n</SCRIPT>\n");
      }
      catch (Throwable e)
      {
      }  // This function can not result in an error
   }

   /**
    * Store the specified profile information in the database.
    * Given buffer must have the same structure as the buffer returned
    * from getProfile().
    *
    * @see ifs.fnd.asp.ASPBlock.getQueryProfile
    */
   public void saveQueryProfile(ASPBuffer info)
   {
      if(DEBUG) debug("ASPBlock.saveQueryProfile()");
      try
      {
         profile = new BlockProfile();
         profile.queryLoad(this,info.getBuffer());
         modifyingMutableAttribute("PROFILE");
         user_profile_prepared = false;

         ASPProfile prf = getASPPage().getASPProfile();
         if(DEBUG) debug("  profile="+prf);
         prf.update(this,profile);
         //prf.save(getASPPage());
         prf.save(this);
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /*
    * removes the saved query given by query_name from the profile
    */
   void removeSavedQuery(String query_name) throws FndException
   {
      prepareProfileInfo();
      if( profile==pre_profile ) //JAPA: is it ok?
      {
         profile = (BlockProfile)pre_profile.clone();
         modifyingMutableAttribute("PROFILE");   // do we need this too?
      }
      profile.removeQuery(query_name);
   }

   public void saveFieldProfile(ASPBuffer info)
   {
      saveFieldProfile(info, true);
   }

   public void updateFieldProfileBuffer(ASPBuffer info)
   {
      //called by CSL page to update all profile entries and save at once
      saveFieldProfile(info, false);
   }

   /**
    * Called to update/save template entries at once.
    * @param template ASPBuffer containing the template
    * @param info ASPBuffer of template contents
    */
   public void updateTemplateProfileBuffer(ASPBuffer template, ASPBuffer info)
   {
      saveTemplateProfile(template, info, false);
   }
   
   private void saveTemplateProfile(ASPBuffer template, ASPBuffer info, boolean save_it) 
   {
      if(DEBUG) debug("ASPBlock.saveTemplateProfile()");
      try
      {
         profile = new BlockProfile();
         profile.templateLoad(this,template.getBuffer());   
         if(info!=null)
            profile.fieldLoad(this,info.getBuffer());
         modifyingMutableAttribute("PROFILE");
         user_profile_prepared = false;

         ASPProfile prf = getASPPage().getASPProfile();
         if(DEBUG) debug("  profile="+prf);
         prf.update(this,profile);
         //prf.save(getASPPage());
         if (save_it)
            prf.save(this);
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   public void saveFieldProfile(ASPBuffer info, boolean save_it)
   {
      if(DEBUG) debug("ASPBlock.saveFieldProfile()");
      try
      {
         profile = new BlockProfile();
         profile.fieldLoad(this,info.getBuffer());
         modifyingMutableAttribute("PROFILE");
         user_profile_prepared = false;

         ASPProfile prf = getASPPage().getASPProfile();
         if(DEBUG) debug("  profile="+prf);
         prf.update(this,profile);
         //prf.save(getASPPage());
         if (save_it)
            prf.save(this);
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /*
    * removes the FEILD_SECTION sub-buffer from the profile
    */
   public void removeFieldProfile()throws FndException
   {
      prepareProfileInfo();
      if( profile==pre_profile ) //JAPA: is it ok?
      {
         profile = (BlockProfile)pre_profile.clone();
         modifyingMutableAttribute("PROFILE");   // do we need this too?
      }
      profile.fieldRemove();

      //ASPProfile prf = getASPPage().getASPProfile();
      //if(DEBUG) debug("  profile="+prf);
      //prf.update(this,profile);
   }

   /*
    * Removes a specified template from the profile.
    * @param template_id identifier of the template to be removed.
    * @param is_default flag value to indicate whether the template removed is the default template.
    */
   public void removeTemplate(String template_id, boolean is_default) throws FndException
   {
      prepareProfileInfo();
      if( profile==pre_profile )
      {
         profile = (BlockProfile)pre_profile.clone();
         modifyingMutableAttribute("PROFILE");
      }
      profile.templateRemove(this, template_id);
      if(is_default)
         profile.fieldRemove();      
   }

   /**
    * Return an ASPBuffer containing profile information corresponding to
    * this ASPBlock. The buffer may be modified and then stored by calling
    * the method saveProfile().
    *
    * @see ifs.fnd.asp.ASPBlock.saveQueryProfile
    */
   public ASPBuffer getQueryProfile()
   {
      try
      {
         if(DEBUG) debug("ASPBlock.getQueryProfile()");
         user_profile_prepared = false; // ????
         prepareProfileInfo();
         ASPBuffer info = getASPManager().newASPBuffer();
         if( profile==pre_profile ) //JAPA: is it ok?
         {
            profile = (BlockProfile)pre_profile.clone();
            modifyingMutableAttribute("PROFILE");   // do we need this too?
         }
         profile.querySave(this,info.getBuffer());
         return info;
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }
   }

   public ASPBuffer getFieldProfile(boolean formatted)
   {
      try
      {
         if(DEBUG) debug("ASPBlock.getFieldProfile()");
         user_profile_prepared = false; // ????
         prepareProfileInfo();
         ASPBuffer info = getASPManager().newASPBuffer();
         if( profile==pre_profile ) //JAPA: is it ok?
         {
            profile = (BlockProfile)pre_profile.clone();
            modifyingMutableAttribute("PROFILE");   // do we need this too?
         }
         profile.fieldSave(this,info.getBuffer(), formatted);
         return info;
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }
   }
   
   /**
    * returns the details of a given template from the user profile.
    * @param template name of the template to be fetched.
    * @param formatted flag to format the template details.
    * @return ASPBuffer containing the template contents.
    */
   public ASPBuffer getTemplateDetailProfile(String template, boolean formatted)
   {
      try
      {
         if(DEBUG) debug("ASPBlock.getTemplateDetailProfile()");
         user_profile_prepared = false;
         prepareProfileInfo();
         ASPBuffer info = getASPManager().newASPBuffer();
         if( profile==pre_profile )
         {
            profile = (BlockProfile)pre_profile.clone();
            modifyingMutableAttribute("PROFILE");
         }
         profile.templateDetailSave(this,info.getBuffer(), template, formatted);
         return info;
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }
   }
   
   /**
    * Creates a new blank template according to the underlying blocks field structure.
    */
   public ASPBuffer getNewTemplateDetail()
   {
      try
      {
         if(DEBUG) debug("ASPBlock.getNewTemplateDetail()");
         user_profile_prepared = false;
         prepareProfileInfo();
         ASPBuffer info = getASPManager().newASPBuffer();
         if( profile==pre_profile )
         {
            profile = (BlockProfile)pre_profile.clone();
            modifyingMutableAttribute("PROFILE");
         }
         profile.templateDetailNew(this,info.getBuffer());
         return info;
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }      
   }
   
   /**
    * Fetch the template profile from the user profile. 
    * This contains all the active templates in the current users profile.
    */
   public ASPBuffer getTemplateProfile()
   {
      try
      {
         if(DEBUG) debug("ASPBlock.getTemplateProfile()");
         user_profile_prepared = false;
         prepareProfileInfo();
         ASPBuffer info = getASPManager().newASPBuffer();
         if( profile==pre_profile )
         {
            profile = (BlockProfile)pre_profile.clone();
            modifyingMutableAttribute("PROFILE");   // do we need this too?
         }
         profile.templateSave(this,info.getBuffer());
         return info;
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }
   }

   void prepareProfileInfo() throws FndException
   {
      if( user_profile_prepared ) return;
      if(DEBUG) debug("ASPBlock.prepareProfileInfo():");

      if( pre_profile==null ) createBaseProfile();

      if (!getASPManager().isDefaultLayout())
      {
         ASPProfile aspprf = getASPPage().getASPProfile();
         if(DEBUG) debug("   getASPProfile() = "+aspprf);
         profile = (BlockProfile)aspprf.get(this,pre_profile);
         if(DEBUG){
             AutoString out = new AutoString();
             profile.showContents(out);
             debug("prepareProfileInfo():"+
                   "\n\t\t  profile["+profile+"]="+out.toString());
         }
      }
      else
        profile = pre_profile;

      modifyingMutableAttribute("PROFILE");
      user_profile_prepared = true;
   }

   private void createBaseProfile() throws FndException
   {
      profile = new BlockProfile();
      profile.construct(this);
      user_profile_prepared = false;
      pre_profile = profile;
   }

   ASPBuffer setDefaultValues(String template) throws FndException
   {
      ASPBuffer info = getASPManager().isEmpty(template)
                       ? getFieldProfile(true)
                       : getTemplateDetailProfile(template,true);

      ASPRowSet rowset = getASPRowSet();
      int count = info.countItems();
      ASPBuffer buff = getASPManager().newASPBuffer();

      for (int i=0; i<count; i++)
      {
         ASPBuffer buf  = info.getBufferAt(i);
         String name    = buf.getValue("NAME");
         String def_val = buf.getValue("DEFAULT_VALUE");

         if (!Str.isEmpty(def_val))
         {
            //rowset.setValue(name, def_val);
            ASPBuffer row = getASPManager().newASPBuffer();

            ASPField fld = getASPField(name);

            row.addItem("NAME", name);
            row.addItem("DEF_VAL", def_val);
            row.addItem("METHOD",fld.getValidateFunction());

            buff.addBuffer("DETAILS",row);
         }
      }

      return buff;
   }

   /**
    * Remove profile information from database for this ASPBlock.
    *
    * @see ifs.fnd.asp.ASPManager.saveProfile
    */
   public void removeProfile()
   {
      /*
      if(DEBUG) debug("ASPBlock.removeProfile()");
      try
      {
         ASPPage    page    = getASPPage();
         ASPProfile profile = page.getASPProfile();
         profile.remove(this);
         //profile.save(page);
         profile.save();
      }
      catch( Throwable any )
      {
         error(any);
      }
       */
   }

   /**
    * Read from a text file the profile information corresponding to this ASPBlock.
    *
    * @see ifs.fnd.asp.ASPManager.exportProfile
    * @deprecated
    */
   public void importProfile( String filename )
   {
      /*
      try
      {
         ASPBuffer info = getASPManager().newASPBuffer();
         String ifm = Util.readAndTrimFile(filename);
         Buffers.copy(new Message(ifm), info.getBuffer());
         saveProfile(info);
      }
      catch( Throwable any )
      {
         error(any);
      }
       */

   }

   /**
    * Write to a text file the profile information corresponding to this ASPBlock.
    *
    * @see ifs.fnd.asp.ASPManager.importProfile
    * @deprecated
    */
   public void exportProfile( String filename )
   {
      /*
      try
      {
         ASPBuffer info = getProfile();
         Message ifm = Buffers.toMessage(info.getBuffer());
         Util.writeFile(filename,ifm.format());
      }
      catch( Throwable any )
      {
         error(any);
      }
       */
   }

   /**
    * Adds a file upload link to the block.
    * @param mode Can have one of the two values: ASPBlock.UPLOAD_TO_DISK,  ASPBlock.UPLOAD_TO_DB
    * @param text Text to be displayed as upload link.
    * @param name Referance to an ASPField where the Blob ID/File Name will be saved with the record.
    */
   public void addFileUploadField(int mode, String text, ASPField name)
   {
       ASPManager mgr = getASPManager();
       String dest =  mgr.getASPConfig().getParameter("admin/file_upload/target", "../server/uploaded_files");
       addFileUploadField(mode, text, dest, name);
   }

   /**
    * Adds a file upload link to the block.
    * @param mode Can have one of the two values: ASPBlock.UPLOAD_TO_DISK,  ASPBlock.UPLOAD_TO_DB
    * @param text Text to be displayed as upload link.
    * @param name Referance to an ASPField where the Blob ID/File Name will be saved with the record.
    * @param type Can have one the value: ASPBlock.UPLOAD_PICTURE to upload a picture.
    */
   public void addFileUploadField(int mode, String text, ASPField name, String type)
   {
       upload_type = type;
       addFileUploadField(mode, text, name);
   }

   /**
    * Adds a file upload link to the block.
    * @param mode Can have one of the two values: ASPBlock.UPLOAD_TO_DISK,  ASPBlock.UPLOAD_TO_DB
    * @param text Text to be displayed as upload link.
    * @param dest If the mode is ASPBlock.UPLOAD_TO_DISK, then file will be saved in this destination.
    * @param name Referance to an ASPField where the Blob ID/File Name will be saved with the record.
    */
   public void addFileUploadField(int mode, String text, String dest, ASPField name)
   {
       file_upload = true;
       upload_text = getASPManager().translate(text);
       upload_mode = mode;
       upload_url = getASPManager().getURL();
       upload_id = name.getName();
       upload_destination = dest;
   }

   /**
    * Defines a javascript function which will be called immediately after uploading.
    * This function should have a decleration like: function function_name(file_name, file_path, file_size).
    * Developer have to write this function as desired.
    * @param name Javascript function name.
    */
   public void definePostUploadFunction(String name)
   {
       post_function = true;
       upload_function = name;
   }

   /**
    * Returns file upload destination when the upload mode is UPLOAD_TO_DISK.
    * Developer have to write this function as desired.
    * @return File upload destination.
    */
   public String getFileUploadDestination()
   {
       return upload_destination;
   }

   String getPostUploadFunction()
   {
       return upload_function;
   }

   boolean hasFileUpload()
   {
       return  file_upload;
   }

   int getFileUploadMode()
   {
       return upload_mode;
   }

   String getFileUploadId()
   {
       return upload_id;
   }

   String getFileUploadUrl()
   {
       return upload_url;
   }

   String getFileUploadText()
   {
       return upload_text;
   }

   String getFileUploadType()
   {
       return upload_type;
   }

   public String getLUName()
   {
      return lu_name;
   }
   
   // Added by Terry 20130927
   // Fixed lu name
   public String getBlkLUName()
   {
      return blk_lu_name;
   }
   // Added end
   
   String getLUKeys()
   {
      if(getASPPage() instanceof FndWebFeature)
      {
         lu_keys = "";
         FndCompoundReference pks = getDataAdapter().getTemplate().getPrimaryKey();
         FndAttribute.Iterator it = pks.iterator();
         while (it.hasNext())
            lu_keys += it.next().getName()+"^";         
      }
      return lu_keys;
   }

   public String getSortedLUKeys()
   {
      return sorted_lu_keys;
   }

   /**
    * Returns 'true' if this Block has an ASPTable else returns 'false'.
   */
   public boolean hasASPTable()
   {
       return getASPPage().hasASPTable(getName());
   }

//========================================================================================
// Depricated Methods: These methods are introduced to use Activities in FNDWEB and 
// never used. Due to New Programing model, all these methods are now obsolete. Please 
// use new Programing model instead
//========================================================================================
   /**
    * @deprecated - use new programing model instead.
    */
   public void setEntity(String entity){}
   /**
    * @deprecated - use new programing model instead.
    */
   public void setDefaultActivityHandler(String handler){}
   /**
    * @deprecated - use new programing model instead.
    */
   public void setQueryOperation(String operation){}
   /**
    * @deprecated - use new programing model instead.
    */
   public void setQueryOperation(String handler, String operation){}
   /**
    * @deprecated - use new programing model instead.
    */
   public void setPrepareOperation(String operation){}
   /**
    * @deprecated - use new programing model instead.
    */
   public void setPrepareOperation(String handler, String operation){}
   /**
    * @deprecated - use new programing model instead.
    */
   public void setSaveOperation(String operation){}
   /**
    * @deprecated - use new programing model instead.
    */
   public void setSaveOperation(String handler, String operation){}
   /**
    * @deprecated - use new programing model instead.
    */
   String getEntity(){return null;}
   /**
    * @deprecated - use new programing model instead.
    */
   String getActivityHandler(String mode){return null;}
   /**
    * @deprecated - use new programing model instead.
    */
   String getActivityOperation(String mode){return null;}
//========================================================================================

   /**
    * Sets the common field name which connect the detail block with tha master block.
    * @param connect_fields Name of a field which is common for both master and detail blocks.
    */
   public void setMasterConnection(String connect_fields)
   {
       this.connect_fields = connect_fields;
   }

   String getMasterConnection()
   {
       return connect_fields;
   }
   
   /**
   * Set the alignment of Number, Integer and Money fields to RIGHT
   * in single row layout for edit, new, single modes. 
   */
   public void setNumbersToRightAlign()
   {
      try
      {
         modifyingImmutableAttribute("NUMBER_ALIGNMENT");
         this.number_alignment = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }
   
   /**
   * Reset the alignment of Number, Integer and Money fields from RIGHT
   * to LEFT in single row layout for edit, new, single modes  
   */
   public void unsetNumbersToRightAlign()
   {
      try
      {
         modifyingImmutableAttribute("NUMBER_ALIGNMENT");
         this.number_alignment = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }
   
   /**
   * get whether right align number property in single layout mode
   * is set or not
   */
   public boolean isAlignNumbersToRight()
   {
       return number_alignment;
   }

   /**
    * Set the FndRecord corresponding to this block. This is only allowed from FndWebFeatures.
    * @param  template to be set.
    * @see #getTemplate
    */   
   public void setTemplate(FndAbstractRecord template) throws FndException
   {
      modifyingImmutableAttribute("TEMPLATE");
      this.template = template;
   }
   
   /**
    * Returns the assigned template for this ASPBlock. If the template is null then it will return the template assigned to the perticular page.
    * @see #setTemplate
    */
   public FndAbstractRecord getTemplate()
   {
      return template;
   }
   
   /**
    * This shoul be called from Item Blocks in FndWebFeatures. The reference should be FndAttribute from the master record.
    * <PRE><CODE>
    *   eg:
    *      itemblk.setMasterBlock(blk);
    *      itemblk.setMasterReference(person_info.addresses);   
    * </CODE></PRE>
    */
   public void setMasterReference(FndAttribute reference) throws FndException
   {
      modifyingImmutableAttribute("MASTER_REFERENCE");
      master_reference = reference;
   }
   
   /**
    * Returns the FndAttribute set as a reference in master block.
    */   
   public FndAttribute getMasterReference()
   {
      return master_reference;
   }   

   
   /**
    * Set the FndDataAdapter for the ASPBlock. You should implement your adapter from different adapters in ifs.fnd.webfeature.*.
    * @param adapter FndDataAdapter to be connected to this block.
    * @see ifs.fnd.webfeature.FndPopulateDataAdapter
    * @see ifs.fnd.webfeature.FndQueryDataAdapter
    * @see ifs.fnd.webfeature.FndSaveDataAdapter
    * @see #getDataAdapter
    */
   public void setDataAdapter(FndDataAdapter adapter)
   {
      this.adapter = adapter;
   }
   
   /**
    * Returns the FndDataAdapter of the ASPBlock.
    * @return FndDataAdapter connected to this ASPBlock.
    * @see #setDataAdapter
    */
   public FndDataAdapter getDataAdapter()
   {
      return adapter;
   }

   void setParamFields(String paramFields) throws FndException
   {
      StringTokenizer fields = new StringTokenizer(paramFields,",;");
      try
      {
         while(fields.hasMoreTokens())
         {
            ASPField pField = getASPField(fields.nextToken().trim());
            setParamField(pField);
         }
      }catch(Throwable any)
      {
         throw new FndException(any);
      }
   }
   
   void setParamField(ASPField pField) throws FndException
   {
      try
      {
         if(param_fields==null) param_fields = new Vector();
         if(pField!=null && !param_fields.contains(pField))
            param_fields.addElement(pField);
      }catch(Throwable any)
      {
         throw new FndException(any);
      }
   }   
   
   Object[] getParamFields()
   {
      return (param_fields==null || param_fields.isEmpty())? null: param_fields.toArray();
   }
   
   void setPopupField(ASPField popupField) throws FndException
   {
      try
      {
         if(popup_field_list==null) popup_field_list = new Vector();
         if(!popup_field_list.contains(popupField))
            popup_field_list.addElement(popupField);
      }catch(Throwable any)
      {
         throw new FndException(any);
      }
   }
   
   Object[] getPopupFields()
   {
      return (popup_field_list==null || popup_field_list.isEmpty())? null: popup_field_list.toArray();
   }
   
   void generateBlockParams() throws FndException
   {
      if(param_fields!=null && !param_fields.isEmpty()) return;
      
      Object SentToMenu[] = getSendToMenu();
      String pfields = (SentToMenu!=null)? ((ASPPopup)SentToMenu[1]).getParameterFields(): null;
      if(!getASPManager().isEmpty(pfields))
      {
         StringTokenizer st = new StringTokenizer(pfields,",;");
         while(st.hasMoreTokens())
         {
            ASPField f = getASPField(st.nextToken().trim());
            if(f!=null)
               setParamField(f);
         }
      }
      
      Object pf[] = getPopupFields();
      if(pf!=null)
         for(int i=0; i<pf.length; i++)
         {
            pfields = ((ASPField)pf[i]).getCustomPopupMenu().getParameterFields();
            if(getASPManager().isEmpty(pfields)) continue;
            StringTokenizer st = new StringTokenizer(pfields,",;");
            while(st.hasMoreTokens())
            {
               ASPField f = getASPField(st.nextToken().trim());
               if(f!=null)
                  setParamField(f);
            }
         }
      
      Object bp[] = getPopupMenus();
      if(bp==null) return;
      for(int i=0; i<bp.length; i++)
      {
         pfields = ((ASPPopup)bp[i]).getParameterFields();
         if(getASPManager().isEmpty(pfields)) continue;
         StringTokenizer st = new StringTokenizer(pfields,",;");
         while(st.hasMoreTokens())
         {
            ASPField f = getASPField(st.nextToken().trim());
            if(f!=null)
               setParamField(f);
         }
      }
   }

   String getParamArrayName() 
   {
      return "__"+getName()+"_PFArray";
   }
   
   String getParamValueArrayName() 
   {
      return "__"+getName()+"_PVArray";
   }

   void addPopupMenu(String label, ASPPopup s) throws FndException
   {
      try
      {
         if(my_popups==null)
         {
            my_popups = new Vector();
            my_popup_labels = new Vector();
         }
         if(!my_popups.contains(s))
         {
            my_popup_labels.addElement(label);
            my_popups.addElement(s);
         }
      }catch(Throwable any)
      {
         throw new FndException(any);
      }
   }
   
   Object[] getPopupMenus()
   {
      if(my_popups==null) return new Object[0];
      Vector pops = (Vector) my_popups.clone();
      pops.remove(pops.lastElement()); // remove send to
      return pops.toArray();
   }
   
   Object[] getPopupMenuLabels()
   {
      if(my_popup_labels==null) return new Object[0];
      Vector labels = (Vector) my_popup_labels.clone();
      labels.remove(labels.lastElement()); // remove send to
      return labels.toArray();
   }
   
   Object[] getSendToMenu()
   {
      if( my_popups==null || getASPPage() instanceof ifs.fnd.web.features.managemytodo.MyToDoTask) return null;
      Object sm[] = new Object[2];
      sm[0] = getASPManager().translate((String)my_popup_labels.lastElement());
      sm[1] = my_popups.lastElement();
      return sm;
   }
   
   /**
    * Get the logical unit name for the block.
    * @return logical unit name as a string
    */
   String searchLUName(){
      String view_name = getView();
      generateQueryHints(view_name);
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();

      ASPCommand cmd = (new ASPCommand(mgr)).construct();

      //Get the LU Name
      cmd.defineCustomFunction("dictionary_sys.get_logical_unit");
      cmd.addParameter("LU_NAME", "S", null, null);
      cmd.addParameter("VIEW_NAME","S","IN", view_name);
      cmd.addParameter("TYPE","S","IN", "VIEW");

      trans.addCommand("LU_NAME_CMD", cmd);
      trans = mgr.perform(trans);

      return trans.getValue("LU_NAME_CMD/DATA/LU_NAME");
   }
   
   // Added by Terry 20120822
   // enable history menu.
   public void enableHistory()
   {
      try
      {
         modifyingImmutableAttribute("HISTORY_DISABLED");
         history_disabled = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }
   
   public void setFileUpload(boolean tag)
   {
      file_upload = tag;
   }
   
   public String getWfDescription()
   {
      ASPManager mgr = getASPManager();
      String wf_description = "";
      int field_count = fields.length;
      Vector<SortWfField> field_vec = new Vector<SortWfField>();
      for (int i = 0; i < field_count; i++)
      {
         ASPField field = fields[i];
         if (field.getWfTitle())
         {
            String desc_temp = "";
            if (field.getWfTitleValueOnly())
               desc_temp = field.getValue();
            else
               desc_temp = mgr.translate(field.getLabel()) + ": " + getASPRowSet().getValue(field.getName());
            
            SortWfField sortWfField = new SortWfField(field.getWfTitleOrder(), desc_temp);
            field_vec.add(sortWfField);
         }
      }
      
      field_vec.trimToSize();
      if (field_vec.size() >= 2)
      {
         Collections.sort(field_vec);
         ListIterator<SortWfField> it = field_vec.listIterator();
         while(it.hasNext())
         {
            wf_description = wf_description + it.next().getDescription() + "; ";
         }
         wf_description = wf_description.substring(0, wf_description.length() - 2);
      }
      else if (field_vec.size() == 1)
         wf_description = field_vec.get(0).getDescription();
      
      field_vec.clear();
      return wf_description;
   }
   
   class SortWfField implements Comparable<SortWfField>
   {
      int order;
      String description;
      
      public SortWfField(int order, String description)
      {
         this.order = order;
         this.description = description;
      }
      
      public int compareTo(SortWfField other)
      {
         return order - other.order;
      }
      
      public int getOrder()
      {
         return order;
      }
      
      public String getDescription()
      {
         return description;
      }
   }
   // Added end
   
   // Added by Terry 20130923
   // Get package from defined commands
   public String getPackage()
   {
      Buffer commands = getDefinedCommands();
      try
      {
         for(int i = 0; i < commands.countItems(); i++)
         {
            if ("Standard".equals(commands.getItem(i).getBuffer().getString("CATEGORY")))
            {
               String cmd = commands.getItem(i).getBuffer().getString("METHOD");
               int index = cmd.indexOf(".");
               if (index != -1)
                  return cmd.substring(0, index);
            }
         }
         return null;
      }
      catch (Exception e)
      {
         return null;
      }
   }
   // Added end
   
   // Added by Terry 20131023
   // Set function fields to non-select
   public void enableFuncFieldsNonSelect()
   {
      try
      {
         modifyingMutableAttribute("FUNC_FIELDS_NON_SELECT");
         func_fields_non_select = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }
   
   public void disableFuncFieldsNonSelect()
   {
      try
      {
         modifyingMutableAttribute("FUNC_FIELDS_NON_SELECT");
         func_fields_non_select = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }
   
   public boolean getFuncFieldsNonSelect()
   {
      return func_fields_non_select;
   }
   // Added end
}
