/*
 *                 IFS Research & Development
 *
 *  This program is protected by copyright law and by international
 *  conventions. All licensing, renting, lending or copying (including
 *  for private use), and all other use of the program, which is not
 *  expressively permitted by IFS Research & Development (IFS), is a
 *  violation of the rights of IFS. Such violations will be reported to the
 *  appropriate authorities.
 *
 *  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
 *  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
 * ----------------------------------------------------------------------------
 * File        : ASPPage.java
 * Description : A container for all page-specific ASP classes
 * Notes       :
 * ----------------------------------------------------------------------------
 * Modified    :
 *    Marek D  1999-Feb-16 - Created.
 *    Jacek P  1999-Feb-17 - Implements ASPPoolable interface.
 *    Jacek P  1999-Mar-01 - Interface ASPPoolable replaced with an abstarct
 *                           class ASPPoolElement.
 *    Jacek P  1999-Mar-05 - Added methods doActivate() and refresh().
 *    Jacek P  1999-Mar-31 - Removed ThreadEvent.
 *    Jacek P  1999-Apr-27 - New way of verifying poolable objects.
 *    Marek D  1999-May-07 - Added method getASPProfile()
 *    Jacek P  1999-May-27 - Added inner class Compatibility.
 *    Jacek P  1999-May-31 - Added method activateProfile() automatically
 *                           called from getASPProfile()
 *    Jacek P  1999-Jun-07 - Added method forceDirty().
 *    Jacek P  1999-Jun-08 - Late initializing of user profile. Call to
 *                           activateProfile() removed from functions
 *                           construct() and doActivate().
 *    Jacek P  1999-Jul-21 - LOV activation performed at the end of doActivate().
 *                           Added new defineLOV() without parameters.
 *    Jacek P  1999-Aug-02 - Added handling of the new debug flag SEND_JS
 *                           in function appendPageClientScript().
 *    Jacek P  1999-Sep-01 - Added check of not allowed call to perform() in
 *                           setDefined().
 *    Jacek P  1999-Sep-06 - Added input parameter to JavaScript function
 *                           checkAllFields() generated by appendCheckAllFieldsFunction().
 *    Jacek P  2000-Jan-17 - Implementation of the portal concept. Handling of the
 *                           new class ASPPortal. 'undefined_perform' concept moved
 *                           from ASPManager. Changes in constructor. New functions
 *                           newASPLog(), newASPContext(). New functions readValue*()
 *                           and getQueryString(). New public function findASPBlock().
 *                           Better debugging. Some client script functions changed to
 *                           package or protected.
 *    Stefan M 2000-Jan-25 - Added newASPPopup(), popups vector, and associated functions.
 *    Johan S  2000-Feb-Gui  Added getVersion(), and a version attribute in the compatibility class. and saveLayout().
 *    Jacek P  2000-Mar-20 - New concept for page pool key (variable pool_key).
 *    Stefan M 2000-Mar-28 - Added getHeadTag(), which writes Javascript needed for new version of
 *                           ASPPopups. All "system" popups are now populated just before freeze,
 *                           in setDefined().
 *    Johan S  2000-Mar-28 - Extended saveLayout() to include querybuffer.
 *    Jacek P  2000-Apr-13 - Minor changes.
 *    Jacek P  2000-Apr-27 - Added new version of appendContents().
 *    Stefan M 2000-Apr-28 - Added enable/disable functions for the standard toolbar buttons. New mutable attributes
 *                           navigate_disabled, configuration_disabled, help_disabled.
 *    Jacek P  2000-May-02 - Removed call to addProviderPrefix() from *ASPPopup() functions.
 *                           Added call to setAndLockPageHandle() in setDefined().
 *    Stefan M 2000-May-15 - Changes in getHeadTag(), to support portlets.
 *    Jacek P  2000-May-17 - Changed module name to 'WEBKIT'
 *    Stefan M 2000-Jul-13 - Improved JS "showMenu()" in getHeadTag().
 *    Jacek P  2000-Jul-26 - Call to log.freeze() only if undefined (portal).
 *    Stefan M 2000-Sep-18 - Changes to getHeadTag(), to accomodate hierarchical menus.
 *    Stefan M 2000-Sep-25 - Main part of clientscript.js is now attached in getHeadTag().
 *    Stefan M 2000-Oct-13 - enable/disableRepositioning() added - mutable attribute repositioning.
 *    Stefan M 2000-Nov-02 - Changes in ASPPopup code generation - now only prints the
 *                           definitions of those menus used in the request. Appended to
 *                           generateClientScript() instead of getHeadTag(). Order in
 *                           generateClientScript() changed too.
 *    Artur K  2000-Nov-23 - Necessary changes for ASPPageProfile(global profile)
 *    Piotr Z                handling.
 *    Jacek P  2000-Sep-04 - Added support for Java pages.
 *    Jacek P  2000-Oct-30 - Handling of variable master_has_rows moved from JScript
 *                           to Java.
 *    Artur K  2001-Feb-16 - Removed jsp_url variable and changed form_tag.
 *    Artur K  2001-Mar-20 - Necessary changes for handling multiple portal pages - added setPortalPages()
 *                           and getPortalPages() methods.
 *    Piotr Z  2001-Mar-20 - Autocomplete functionality turned off for whole form.
 *    Jacek P  2001-Mar-29 - Changed implementation of generateFormTag().
 *    Jacek P  2001-Apr-04 - Changed algorithm for building of script path and page name.
 *    Artur K  2001-Apr-20 - Changes for handling global variables and in setViewName() function
 *    Piotr Z  2001-Apr-25 - Changed setPortalViews() and getPortalView() methods.
 *    Jacek P  2001-Jun-07 - Log #756: Added protocol to script file specification.
 *    Artur K  2001-Jun-12 - Changes for handling slimed portal version (log id 575);
 *                           enableConfiguration() is now called from the Default class.
 *    Suneth M 2001-Jul-16 - Changed appendPopupShowMenu(), for display popup menu correctly
 *                           on y-axis in Netscape (Log #478) & when there are large no of
 *                           disabled menu items in multirow mode. (Log #783)
 *    Suneth M 2001-Sep-12 - Changed duplicate localization tags.
 *    Suneth M 2002-Jan-30 - Added createDefKeyScriptFileName() & overloaded method for construct()
 *                           with a parameter.
 *    Mangala  2002-Mar-12 - Include ClientUtil applet to the Client Script regardless of it is dissabled
 *                           or not if Base64 encoding is enabled.
 *    Suneth M 2002-May-10 - Changed generateFormTag() to add _CACHE variable to the action url.
 *    Mangala  2002-Jun-28 - Cache solution is comented out.
 *    Ramila H  2002-Jul-17 - Added support for Netscape 6
 *    Chandana 2002-Jul-18 - Used correctURL(url) to append an ID to the URL.
 *    Chandana 2002-Jul-22 - Added getRestrictHistoryScript() method and a call to that in the getHeadTag() method.
 *    Ramila H 2002-Jul-30 - Added support for datetime entering. Log id 875
 *    Daniel S 2002-Aug-28 - Added support for a new smart Reset/Clone handling. This inludes some new methods, smartReset
 *                           smartClone, frameworkClone etc. But also a new inner class IceCube that holds information about
 *                           fields in a page from the freeze moment. The array "ice_dispenser" holds the IceCubes.
 *    Chandana 2002-Aug-28 - Added disableHomeIcon() & isHomeIconDisabled() methods. Log Id 974.
 *    Jacek P  2002-Sep-24 - Call to setCloned() after smartClone() in frameworkClone(). Better debuging and error handling
 *                           of IceCube constructor and thawn(). Improved thawning algorithm for some classes.
 *    Sampath  2002-Oct-09 - Moved JavaScript functions to ClientScript.js
 *    Mangala  2002-Oct-09 - Make disableHomeIcon() method Mutable.
 *    Sampath  2002-oct-18 - called hidemenus() js function when page is clicked in netscape
 *    ChandanaD2002-Oct-21 - Added CURRENT_USER to the HTML <head> section.
 *    ChandanaD2002-Oct-28 - Made compatible with NE6 and above.
 *    ChandanaD2002-Nov-05 - Inserts AUTH_COOKIE variable to the <head> section.
 *    ChandanaD2002-Dec-18 - Log Id 567, Added sevaral methods.
 *    ChandanaD2002-Dec-30 - Added two methods.
 *    Suneth M 2003-Jan-09 - Log id 1002, Added new method appendBlockModeVariables().
 *    Rifki R  2003-Jan-08 - Added checkObjectAccess() and isObjectAccessible() for automatic security check.
 *    Sampath  2003-Jan-21 - inclided the iframe to pages even if the applet is disabled
 *    ChandanaD2003-Feb-11 - Added getActiveCommand() method.
 *    Johan S  2003-Mar-06 - Added support for primitive[][], String[][], char[], char, Autostring and
 *                           ASPField[] in IceCube.
 *    ChandanaD2003-Mar-17 - Added public method isPopupExist(String popup_name).
 *    ChandanaD2003-Mar-24 - Added new public method addFileUploadLink(ASPBlock blk).
 *    Mangala  2003-Mar-26 - Added support to enable applet from the page.
 *    ChandanaD2003-Mar-27 - Changed getActiveCommand() method.
 *    ChandanaD2003-May-08 - Added getFormTagAction() method.
 *    ChandanaD2003-May-22 - Updated updatePopups() method for updating the "more_views" popup.
 *    ChandanaD2003-May-29 - "options" popup handled in the updatePopups() mehod.
 *    Ramila H 2003-May-30 - added config_views popup for portal configuration.
 *    ChandanaD2003-Jun-03 - Added enableOptions(), disableOptions() & isOptionsDisabled().
 *    ChandanaD2003-Jun-03 - All lov_popup_ items removed from the popups Vector in the doReset method.
 *    Rifki R  2003-Jun-26 - Log id 1081, Fixed Bug in Auto Security when ALIAS is used with view name.
 *                           used getDBView() in checkObjectAccess().
 *    Jacek P  2003-Jul-03 - Added support for level 4 proxies (Bug 38326).
 *    Ramila H 2003-jul-18 - Log id 1119, Authentication by fndext.
 *    Jacek P  2003-Aug-26 - Wrong error handling in URL check in construct()
 *    Rifki R  2003-Oct-12 - Added useLovContextSlot(), which should be overridden in pages only when required.
 *    ChandanaD2003-Dec-15 - Fixed Bug 40908.
 *    Rifki R  2003-Dec-30 - Fixed Bug 41837 - NullPointerException in isObjectAccessible()
 *    Jacek P  2004-Jan-04 - Bug# 40931. Better debugging possibilities of Page Pool
 *    ChandanaD2004-Jan-27 - Bug 42299. Modified getValidationMethod() and generateClientScript()
 *    ChandanaD2004-Mar-23 - Merged with SP1.
 *    ChandanaD2004-May-12 - Updated for the new style sheets.
 *    ChandanaD2004-May-19 - Changed mgr.isNetscape6() to mgr.isMozilla().
 *    Ramila H 2004-05-26  - Suffixed language code to js filename
 *    Chandana 2004-Jun-10 - Removed all absolute URLs.
 *    Rifki R  2004-Jun-29 - changed constant FND_CLI to "FND" to work with ASPManager.isPresentationObjectInstalled()
 *    Chandana 2004-Jul-27 - Further improvements to work with proxy servers.
 *    Ramila H 2004-08-02  - Added dynamic lov views to check for PO secuirty.
 *    Chandana 2004-Aug-05 - Proxy support corrections.
 *    Ramila H 2004-08-18  - introduced method getLanguageSuffix()
 *    Suneth M 2004-Aug-19 - Added new method isASPField().
 *    Ramila H 2004-10-18  - Implemented JSR168 support.
 *    Ramila H 2004-10-21  - Corrected bug when cfg.debugSendJS is true.
 *    Ramila H 2004-10-22  - Added method getProfilePoolKey to remove language suffix for profiles.
 *    Ramila H 2004-11-03  - Implemented code for popups in standard portal mode.
 *    Chandana 2004-Nov-10 - Added enableActivityCalls() and isActivityCallsEnabled() to support Activity API calls.
 *    Jacek P  2004-Nov-11 - Added method newProfile(). Added profile_key.
 * ----------------------------------------------------------------------------
 * New Comments:
 * 2010/09/03 buhilk Bug 92381, Changed appendNoteBookTag() to draw Notes in a new structure.
 * 2010/08/06 sumelk Bug 92332, Changed IFRAME tag in appendNoteBookTag() to avoid IE security warning for secured sites.
 * 2010/06/28 buhilk Bug 91498, Changed groupParams to decode CSV's
 * 2010/06/28 buhilk Bug 91645, Added groupParams from MyLinks.java
 * 2010/05/07 buhilk Bug 90507, Added mutable attribute iee_dockout_enabled and methods enableIEEDockout(), disableIEEDockout() and isDockoutEnabled().
 * 2010/03/10 sumelk Bug 89421, Changed readGlobalTemplateProfileBuffer() to avoid the errors with templates which have no description.
 * 2010/02/03 sumelk Bug 88035, Changed getHeadTag(), getMobileHeadTag() and generateClientScript(). 
 * 2009/09/29 sumelk Bug 85807, Changed addFileUploadLink() to add the file type to the query string.
 * 2009/08/13 buhilk Bug 85018, Changed readProfileItem() to return null if no real user is found.
 * 2009/07/14 buhilk Bug 84808, Changed saveLayout() and removed the writing of SEARCHPARAM into context.
 * 2009/03/05 rahelk Bug 81146, Added DIVs to hold note user name and date
 * 2009/02/13 buhilk Bug 80265, F1PR454 - Templates IID.
 * 2008/10/22 buhilk Bug 77966, removed onUnload trigger for Notes. and added it to unLoad() method in clientscript.js
 * 2008/10/15 dusdlk Bug 77769, added has_tab_containers and has_block_layouts and set and get methods to those variables and updated the method register( ASPTabContainer tbcnt ).
 * 2008/09/24 dusdlk Bug 77095, Made getComponent(), getPageName() and getAspBlock as public functions and updated Register() to assign default tab container name to any un named tab containers and created disablePageProperties(), enablePageProperties() and isPagePropertiesDisabled() functions.
 * 2008/09/10 sadhlk Bug 76949, F1PR461 - Notes feature in Web client, Added appendNoteBookTag() and Modified generateClientScript().
 * 2008/08/15 buhilk Bug 76288, Added support for Context Sensitive Task Pane feature.
 * 2008/07/09 buhilk Bug 75668, IID F1PR432 - Workflow/My Todo functionality, bypass security for FndWebFeatures.
 * 2008/07/09 sadhlk Bug 73745, Added code to check DEBUG condition before calling debug() method.
 * 2008/06/26 mapelk Bug 74852, Programming Model for Activities. 
 * 2008/04/21 buhilk Bug 72855, Added new APIs to support rich menus/table cells.
 * 2008/03/27 sadhlk Bug 72361, Added applyLongYearFormatter(), registerLongYearField() and immutable attribute 'is_long_year'.
 * 2008/01/11 sadhlk Bug 70489, Modified appendApplicationSearchHelpTag().
 * 2008/01/04 sumelk Bug 70238, Changed appendBlockModeVariables() to append the variable __CURRENT_BLOCK_NAME.
 * 2008/01/02 sadhlk Bug 70240, Modified appendApplicationSearchHelpTag() to remove the non-secure warning msg in IE
 * 2007/12/12 sadhlk Bug 67525, Modified getHeadTag() and generateClientScript() to support cookie renaming.
 * 2007/12/03 buhilk IID F1PR1472, Added Mini framework functionality for use on PDA.
 * 2007/11/30 sumelk Bug 67898, Changed getActiveCommand().
 * 2007/11/16 sadhlk Bug id 69140, Modified  added Immutable attribute multiple_frame_error and added enableMultiFrameError()
 *                                 and isMultiFrameError().
 * 2007/11/01 sadhlk Merged Bug 68311, Modified getHeadTag().
 * 2007/09/03 sadhlk Modified setProfilePoolKey() to set the pool key value correctly.
 * 2007/08/07 buhilk Fixed ui error in progress dialog when using FireFox. Modified appendProgressBarTag(). 
 * 2007/07/03 sadhlk Merged Bug id 64669, Modified writeGlobalProfileBuffer(), writeGlobalProfileValue(), writeGlobalProfileFlag().
 * 2007/06/29 buhilk Bug id 66378, Modified generateFormTag() to append query string to form action.
 * 2007/06/22 buhilk Bug id 66223, Call id 143140, fixed appendApplicationSearchHelpTag() to load the loading.page using scripts
 * 2007/05/16 rahelk Call id 143888, fixed proxy related bugs
 * 2007/05/14 sadhlk Bug id 65359, Changed the method access to default of writeGlobalProfileValueForDelete()
 * 2007/05/04 sadhlk Bug id 64337, Added writeGlobalValueForDelete() and Modified removeGlobalProfileItem(), setPortalViews(). 
 * 2007/05/04 buhilk Bug id 65098, Added appendMessageWindowTag()
 * 2007/05/03 sadhlk Bug id 64887, Overloaded setUrlToDynamicFile() to provide ability to add non-persistent values to dynacache.
 * 2007/04/17 buhilk Bug id 64771, Modified generateClientScript() to call appendCalendarTag() even from the portal page.
 * 2007/04/11 buhilk Bug id 64117, Enter key for application search now works for all pages. 
 * 2007/04/05 rahelk F1PR458 - Application Search Improvements
 * 2007/03/07 buhilk Bug id 64029, Disabled Application Search when header is disabled
 * 2007/03/06 buhilk Bug id 63950, Modified generateClientScript() and getActiveCommand() to improve application search GUI
 * 2007/02/20 rahelk Bug id 58590, Added Application Search support
 * 2007/02/15 sadhlk Bug 63229, Modified appendDirtyHelpFields() to improve what's this functionality in child frames.
 * 2007/02/07 sadhlk Bug 61419, changed appendFieldHelpTag() to avoid displaying vertical scrollbar when it's not needed.
 * 2007/01/30 buhilk Bug 63250, improved theming support in IFS clients. 
 * 2007/01/30 mapelk Bug 63250, Added theming support in IFS clients.
 * 2007/01/17 sadhlk Bug id 61627, Issues with 'Help on this page'. Added new immutable variable child_frame_help_ref to set
 *                                 help page reference of a multi frame page.
 * 2006/12/08 buhilk Bug id 62316, Modified getActiveCommand() to replace deprecated captureEvent() js method.
 *                                 Modified appendFieldHelpTag() to fix html style errors.
 * 2006/12/05 rahelk Bug id 60629, Modified allowedHost name to accept an IP address
 * 2006/11/13 buhilk Bug id 61420, Modified appendPageClientScript() to fix appending a non-existing js file to Logon.page
 * 2006/11/01 buhilk Bug id 61533, Added method appendCalendarTag() and modified method generateClientScript() append calendar
 * 2006/10/18 riralk Bug id 57025, Modified setPortalViews() to consider Position of portal views.
 * 2006/10/13 gegulk Added the method appendProgressBarTag() and the call to it from generateClientScript()
 * 2006/10/13 rahelk Bug id 61127, Modified substring length in setProfilePoolKey to remove lang suffix
 * 2006/10/05 riralk Bug id 60980, Modified setPortalViews(), sorted the buffer 'portal_views'
 * 2006/09/24 mapelk Bug Id 59842, Improved CSV code 
 * 2006/09/19 buhilk Bug id 59842, Modified readValue() method and Added readAbsoluteValue() methods
 *                                 to handle context substitution variables
 * 2006/09/13 gegulk Bug id 60473, Modified the methods getHeadTag(),generateClientScript() to append the
 *                   variable IS_RTL to the javascript
 * 2006/09/11 rahelk Bug id 60409, Added methods to validate host name and check if allowed
 * 2006/08/28 gegulk Bug id 59985, Removed the usages of the word "enum" as variable names
 * 2006/07/04 gegulk Bug 58188; Improve What's this more
 * 2006/05/16 mapelk Improved "What's This?" functionality to show help as a tool tip
 * 2006/04/26 prralk Bug 57027 issues with 'help on fields'. Added new immutable var 
 *                   parent_frame_pagename to set the name of the parent page of multi frame
 *                   page. 
 * 2006/04/20 prralk Bug 57026 'Help On Fields' display issues
 * 2006/03/06 PRRALK B136321 Tool tip display errors. Added 'nowrap' to <div>
 * 2006/02/14 MAPELK Added support for masks with no separators
 *                2006/02/20           prralk
 * Removed calls to deprecated functions
 *
 *                2006/01/12           prralk
 * Modified the check for Logon page and error page. If Logon page, do not 
 * include the late_clientscript.js
 *                2006/01/09           riralk
 * Replaced TreeSet variables with Set for "Help on Fields" functionality.
 *
 *                2006/01/09           mapelk
 * Improved regional settings support in the profile
 *
 *                2006/01/02 prralk
 * Added a flag, which when set to true will convert a GET request to a POST request
 *                2005/12/09 rahelk
 * Error handling on JAAS standard logon
 *
 *                2005/11/23 mapelk
 * Bug fix: Wrong date validation when profile mask taken.
 *
 * Revision 1.10  2005/11/15 11:36:51  japase
 * ASPProfile.save() takes 'this' as argument.
 *
 * Revision 1.9  2005/11/09 04:19:48  sumelk
 * Merged the corrections for Bug 54040, Changed doActivate().
 *
 * Revision 1.8  2005/11/08 07:50:54  rahelk
 * core changes for using USAGES in help
 *
 * Revision 1.7  2005/11/07 08:16:28  mapelk
 * Introduced "persistant" att to Dynamic Objects and remove non persistent objects from the DynamicObjectCache in the first get.
 *
 * Revision 1.6  2005/10/20 06:00:33  mapelk
 * Removed method ASPPage.existsASPPopup and it's usage
 *
 * Revision 1.5  2005/10/14 09:08:13  mapelk
 * Added common profile elements. And removed language specific formats and read from locale.
 *
 * Revision 1.4  2005/09/29 13:56:11  japase
 * Changed handling of ASPPopup - changes in register() and doReset()
 *
 * Revision 1.3  2005/09/28 13:01:17  japase
 * Added cloning of is_logon_page. Keep track of the current page for better error handling.
 *
 * Revision 1.2  2005/09/27 11:18:02  mapelk
 * Fixed bug: Trying to connect database with user id null in the login page
 *
 * Revision 1.1  2005/09/15 12:38:00  japase
 * *** empty log message ***
 *
 * Revision 1.22  2005/09/14 04:27:03  mapelk
 * Fixed null pointer exception when useing not-allowed host name.
 *
 * Revision 1.21  2005/08/16 05:57:28  riralk
 * Removed "secured" from profile key and eventually from profile structure. Used ASPConfig.getApplicationContext() to get the site name when constructing the profile key.
 *
 * Revision 1.20  2005/08/11 09:44:34  riralk
 * Modified setProfilePoolKey(), used getApplicationPath() when creating profile key.
 *
 * Revision 1.19  2005/08/08 09:44:04  rahelk
 * Declarative JAAS security restructure
 *
 * Revision 1.18  2005/08/04 13:41:21  riralk
 * Fixed/Removed profile related Q&D's and removed obsolete code.
 *
 * Revision 1.17  2005/07/27 12:22:12  riralk
 * Modified setProfilePoolKey() added "#view_name" to key for dynamic lov's.
 *
 * Revision 1.16  2005/06/15 10:19:02  mapelk
 * introduced PO Securities to enable/disable CSL tabs
 *
 * Revision 1.15  2005/06/13 10:28:51  mapelk
 * Use two static files instead of generating unautherised msg and ifs-dialog files for each language.
 *
 * Revision 1.14  2005/06/09 11:30:28  rahelk
 * CSL 2: private settings
 *
 * Revision 1.13  2005/04/08 06:05:36  riralk
 * Merged changes made to PKG12 back to HEAD
 *
 * Revision 1.12  2005/04/07 13:51:28  riralk
 * Added public method ASPPage.setUrlToDynamicFile() for cluster support in web components. (i.e. DOCMAW)
 *
 * Revision 1.11  2005/04/01 13:59:56  riralk
 * Moved Dynamic object cache to session - support for clustering
 *
 * Revision 1.10  2005/03/12 15:47:24  marese
 * Merged changes made to PKG12 back to HEAD
 *
 * Revision 1.9.2.1  2005/03/04 10:55:01  mapelk
 * bug fix: call 122296, 1222348 and 122422
 *
 * Revision 1.9  2005/02/25 07:26:34  mapelk
 * Bug fixed in temporary sec cache
 *
 * Revision 1.8  2005/02/24 13:48:58  riralk
 * Adapted Portal profiles to new profile algorithm. Removed some obsolete code.
 *
 * Revision 1.7  2005/02/24 08:53:51  mapelk
 * Improved automatic security checks
 *
 * Revision 1.6  2005/02/11 09:12:10  mapelk
 * Remove ClientUtil applet and it's usage from the framework
 *
 * Revision 1.5  2005/02/03 11:12:59  mapelk
 * Remove application path form lov tags
 *
 * Revision 1.4  2005/02/02 09:21:49  riralk
 * New profile changes. Fixed writeGlobalProfileFlag() and readGlobalProfileFlag()
 *
 * Revision 1.3  2005/02/02 08:22:18  riralk
 * Adapted global profile functionality to new profile changes
 *
 * Revision 1.2  2005/02/01 10:32:59  mapelk
 * Proxy related bug fix: Removed path dependencies from webclientconfig.xml and changed the framework accordingly.
 *
 * Revision 1.1  2005/01/28 18:07:26  marese
 * Initial checkin
 *
 * Revision 1.11  2005/01/20 09:31:40  sumelk
 * Added new method appendTooltipTag(). Changed generateClientScript().
 *
 * Revision 1.10  2005/01/14 09:33:35  mapelk
 * bug fix: changed setProfilePoolKey method.
 *
 * Revision 1.9  2005/01/06 04:33:04  rahelk
 * bug correction to support standard portlet mode
 *
 * Revision 1.8  2004/12/20 08:45:07  japase
 * Changes due to the new profile handling
 *
 * Revision 1.7  2004/12/17 09:55:02  riralk
 * Minor fixes for caching support for clustered environments when used with proxy servers
 *
 * Revision 1.6  2004/12/15 11:04:03  riralk
 * Support for clustered environments by caching business graphics and generated javascript files in memory
 *
 * Revision 1.5  2004/12/10 08:54:28  mapelk
 * Added electronic signature support
 *
 * Revision 1.4  2004/11/25 06:23:17  mapelk
 * Make getPoolKey method protected. Fixed a bug when supporting dynamic def keys.
 *
 * Revision 1.3  2004/11/25 05:58:01  chdelk
 * Added support for Activity APIs based LOVs.
 *
 * Revision 1.2  2004/11/23 09:51:26  riralk
 * Merged Bug id 47934, escaped backslash for javascript variable 'CURRENT_USER' in getHeadTag().
 *
 * ----------------------------------------------------------------------------
 *
 */

package ifs.fnd.asp;

import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.util.*;
import ifs.fnd.webfeature.*;

import java.util.*;
import java.io.*;
import java.lang.reflect.*;

import javax.servlet.http.HttpSession;


/**
 * A container for all page-specific ASP classes. An instance of
 * this class can be stored in the pool.
 */
public class ASPPage extends ASPPoolElement implements ASPManageable
{
   //==========================================================================
   // instances created on page creation (immutable attributes)
   //==========================================================================

   public  Compatibility compatibility = new Compatibility();

   private ASPLog     log;
   private ASPConfig  config;
   private ASPContext context;

   private ASPForm          form;
   private ASPHTMLFormatter formatter;
   private ASPInfoServices  info_services;
   private ASPNavigator     navigator;
   private ASPLov        lov;
   private ASPPortal        portal;

   private Vector    blocks;
   private Vector    tables;
   private Vector    tab_containers;
   private Vector    popups;
   private Hashtable fields;
   private HashSet   long_year_fields;

   private int anonym_blk_cnt  = 0;
   private int anonym_tbl_cnt  = 0;
   private int anonym_tabc_cnt = 0;
   private int local_def_key_value = -1;

   private String page_path;
   private String url;
   private String pool_key;
   private String profile_key;
   private String form_tag1;
   private String form_tag2;
   private String form_tag_action;
   private String script_file_name;
   private String dic_page_key;
   private String module;
   private String page_name;
   private String java_script; //contains the generated javascript for this page (for clustering supp.)
   private String parent_frame_pagename;
   private String child_frame_help_ref;

   private boolean   footer_disabled;
   private boolean   disable_validation;
   private boolean   slim_mode;
   boolean   convert_gettopost;
   private boolean   multiple_frame_error = false;


   private int block_count;
   private String default_command;
   private String client_function;
   private String default_block;
   private String hover_image;
   private String unhover_image;

   private int tab_count;

   private boolean is_logon_page;
   private boolean is_error_page;
   
   private boolean is_parent_page = false;
   private boolean is_iframe_parent = false;
   private String child_frame_names;

   private boolean is_progressbar_enabled = false;
   private boolean has_tab_containers = false;
   private boolean has_block_layouts = false;
   //==========================================================================
   //  Mutable attributes
   //==========================================================================
   // Modified by Terry 20131016
   // Change to mutable attributes
   private boolean bar_disabled;                private boolean pre_bar_disabled;
   private boolean header_disabled;             private boolean pre_header_disabled;
   // Modified end
   private boolean options_disabled;            private boolean pre_options_disabled;
   private boolean navigate_disabled;           private boolean pre_navigate_disabled;
   private boolean configuration_disabled;      private boolean pre_configuration_disabled;
   private boolean help_disabled;               private boolean pre_help_disabled;
   private boolean   setting_disabled;          private boolean pre_setting_disabled;
   private boolean   signout_disabled;          private boolean pre_signout_disabled;   
   private boolean   sub_header_disabled;       private boolean pre_sub_header_disabled;
   private boolean   cstpane_disabled;          private boolean pre_cstpane_disabled;
   private transient ASPPageProfile profile;
   private boolean repositioning;               private boolean pre_repositioning;
   private boolean   home_icon_disabled;        private boolean pre_home_icon_disabled;
   private boolean application_search_disabled; private boolean pre_application_search_disabled;
   private boolean default_command_disabled;    private boolean pre_default_command_disabled;
   private boolean page_properties_disabled;     private boolean pre_page_properties_disabled;   
   private boolean portlet_conf_disabled    = false;
   private boolean modifying_views_disabled = false;
   private boolean iee_dockout_enabled = true;

   private IceCube[] ice_dispenser;
   //private Set page_usage = new HashSet();
   private Set page_keys = new HashSet();

   //==========================================================================
   //  Transient temporary variables (never cloned)
   //==========================================================================

   private TraceEvent gen_script_event = null;
   private AutoString tmpbuf  = new AutoString();
   private AutoString tmpbuf2 = new AutoString();
   private ASPProfile asp_profile;
   private ASPProfile page_prf;
   private boolean    undefined_perform; // Used by perform() and performConfig() in ASPManager
   private transient boolean  user_profile_prepared;
   //private transient boolean  profile_modified;
   private transient Buffer  portal_views;
   private transient String  portlet_name;
   private transient int     portlet_state;

   //==========================================================================
   //  Static constants
   //==========================================================================

   public static boolean DEBUG = Util.isDebugEnabled("ifs.fnd.asp.ASPPage");

   public  static final String BEGIN_SCRIPT_TAG     = "\n<script language=javascript>\n";
   public  static final String END_SCRIPT_TAG       = "</script>\n";
   public  static final String SRC_SCRIPT_TAG_LEFT  = "\n<script language=\"javascript\" src=\"";
   public  static final String SRC_SCRIPT_TAG_RIGHT = "\"></script>\n";

   private static TraceEventType gen_script_event_type = new TraceEventType("ASPPage.gen.script");

   private static final String FND_COMMON = "COMMON";
   private static final String FND_CLIENT = "FND"; //WEBKIT";//"FNDCLI";
   private static final String PO_SECURITY = "PRES_OBJECT_SECURITY";

   private static final String PRF_CUSTOM_VALUES              = "CustomValues/"; //identifies a sub-buffer in global profile for custom values
   private static final String PRF_REGIONAL_SETTINGS_NUMERIC  =  "Regional Settings/NumberFormats^Numeric";
   private static final String PRF_REGIONAL_SETTINGS_CURRENCY =  "Regional Settings/NumberFormats^Currency";
   private static final String PRF_REGIONAL_SETTINGS_DATE     =  "Regional Settings/DateTimeFormats^DateTime";
   //Bug 42299, start
   static final String IFRAME_VALIDATION  = "IFRAME";
   static final String ACTIVEX_VALIDATION = "ACTIVEX";
   static final String APPLET_VALIDATION  = "APPLET"; // not supported
   static final String SCRIPT_VALIDATION  = "SCRIPT";
   //Bug 42299, end

   //==========================================================================
   //  Static variables
   //==========================================================================

   private static int def_key_value;

   //==========================================================================
   //  Construction
   //==========================================================================

   /**
    * Package constructor that will be called by ASPManager.
    */
   protected ASPPage( ASPManager mgr, String page_path )
   {
      super(mgr);

      if(DEBUG) debug(this+": ASPPage.<init>: "+mgr+","+page_path);

      if( page_path != null )
      {
         this.page_path = page_path;
         log            = newASPLog();
         config         = new ASPConfig(this);
         context        = newASPContext();
         form           = new ASPForm(this);
         formatter      = new ASPHTMLFormatter(this);
         info_services  = new ASPInfoServices(this);
         navigator      = new ASPNavigator(this);
      }
      
      // Added by Terry 20120822
      // Add frameset in IFS.
      // Hide bar, settings link and sign out options.
      if (!mgr.isEmpty(page_path) && !page_path.contains("Default.page"))
      {
         this.disableBar();
         this.disableHomeIcon();
         this.disableOptions();
         this.disableConfiguration();
         this.disableNavigate();
         this.disableSettingsLink();
         this.disableSignoutLink();
      }
      // Added end
   }


   /**
    * Create a new instance of ASPLog connected to the this page.
    * Called from the constructor.
    */
   protected ASPLog newASPLog()
   {
      if(DEBUG) debug(this+": ASPPage.newASPLog()");
      return (new ASPLog(this)).construct();
   }


   /**
    * Create a new instance of ASPContext connected to this page.
    * Called from the constructor.
    */
   protected ASPContext newASPContext()
   {
      if(DEBUG) debug(this+": ASPPage.newASPContext()");
      return new ASPContext(this);
   }


   protected ASPPage construct() throws FndException
   {
      if(DEBUG) debug(this+": ASPPage.construct()");
      config.construct();

      blocks           = new Vector();
      tables           = new Vector();
      tab_containers   = new Vector();
      fields           = new Hashtable();
      long_year_fields = new HashSet();
      popups           = new Vector();

      ASPManager mgr = getASPManager();

      String path       = config.getDefaultApplicationPath();
      String phypath    = config.getApplicationContextPhyPath();
      String port       = mgr.getPortString();

      //host should be available under requesting_hosts or allowed_host_names in the webclientconfig.xml
      String curr_host = mgr.getCurrentHost();

      if (!validHostName(curr_host))
         throw new FndException("FNDWEBNOTVALIDHOSTNAME: Hostname '&1' is not a valid DNS name (RFC 1034, 3490).",curr_host);
      
      //if(!config.getRequestingHosts().containsKey(curr_host))
      if(!allowedHost(curr_host))
         throw new FndException("FNDWEBUNKNOWNHOSTERR: Host &1 is not allowed to access the application.",curr_host);

      
      int qstr_index = page_path.indexOf("?");
      String page_url = qstr_index>0 ? page_path.substring(0,qstr_index): page_path;
      String tmp_page_url = page_url.toLowerCase();
      is_logon_page  = tmp_page_url.endsWith(config.getLogonPage().toLowerCase());
      is_error_page  = tmp_page_url.endsWith(config.getErrorPage().toLowerCase());
      url = page_path;
      int len = path.length()+1;

      int end = page_path.indexOf("/",len);

      if ( end > 0 )
      {
         module = page_path.substring( len, end ).toUpperCase();
         if ( FND_COMMON.equals(module) )
            module = FND_CLIENT;
      }
      else
         module = FND_CLIENT;

      int pos1 = page_path.lastIndexOf('/');
      int pos2 = page_path.lastIndexOf('.');

      if(pos2>pos1)
         dic_page_key = module +"."+ page_path.substring(pos1+1, pos2);
      else
         dic_page_key = module +"."+ page_path.substring(pos1+1);
      if(DEBUG) debug("ASPPage: Current file to translate : "+dic_page_key);

      if(pos2>=0)
         page_name = page_path.substring(pos1>=0?pos1+1:0,pos2);
      else
         page_name = page_path.substring(pos1>=0?pos1+1:0);

      if(DEBUG) debug("ASPPage: Module/Page name: '"+module+"."+page_name+"'");

      if(phypath.endsWith("\\") || phypath.endsWith("/"))
         phypath = phypath.substring(0,phypath.length()-1);

      String script_path = ( pos2>=0 ? page_path.substring(0,pos2) : page_path ) +getLanguageSuffix()+ ".js";
      len = path.lastIndexOf('/')+1;
      script_file_name = phypath + script_path.substring(len-1).replace('/',ifs.fnd.os.OSInfo.OS_SEPARATOR);

      if(DEBUG) debug("ASPPage: Current URL: "+url+" [ID:"+mgr.getPageId()+"]");

      if( config.isResponseBuffered() )
         getASPManager().setAspResponseBuffered(true);

      //Bug 40908, start
      form_tag1       = "name=\"form\" method=\"POST\" action=\"";
      //Bug 40908, end
      //form_tag_action = page_path;
      //form_tag_action = getCurrentPagePath();
      form_tag2       = "\" OnSubmit=\"javascript:return onSubmit()\"";

      context.construct();
      form.construct();

      formatter.construct();
      info_services.construct();
      navigator.construct();

//      activateProfile();

      disableConfiguration();

      return this;
   }
   
   private boolean validHostName(String hostname)
   {
      // label begins with a letter 
      // label middle consists of letters, digits and hyphen 
      // label ends with a letter or an digit       
      // label is no longer than 63 characters 
      String pattern_label = "[a-zA-Z][-a-zA-Z0-9]{0,61}[a-zA-Z0-9]";
      
      // dns name is a series of . separated labels
      String pattern_dnsname = pattern_label + "(\\." + pattern_label + ")*";
      
      // 4 numbers with dots between them, e.g. 127.0.0.1
      String pattern_ipv4digits = "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}";

      //hostname is either a IP number or a DNS name
      String pattern = "("+pattern_ipv4digits+")|("+pattern_dnsname+")";

      int index = hostname.indexOf(":");
      if (index > -1)
         hostname = hostname.substring(0,index);
      
      if ( ! hostname.matches("^"+ pattern +"$") )
         return false;

      return true;
   }
   
   private boolean allowedHost(String host_name) throws FndException
   {
      if (config.getRequestingHosts().containsKey("*"))
         return true;
      
      if (config.getRequestingHosts().containsKey(host_name))
         return true;
      
      return false;
   }

   String getLanguageSuffix()
   {
      return "-"+getASPManager().getUserLanguage();
   }

   protected ASPPage construct(String dynamic_def_key) throws FndException
   {
       construct();
       createDefKeyScriptFileName();
       return this;
   }

   private synchronized void createDefKeyScriptFileName()
   {
       String file_name = getScriptFileName();
       local_def_key_value = def_key_value;

       script_file_name = file_name.substring(0,file_name.indexOf(".js")) +
           def_key_value + ".js";

       file_name  = script_file_name.substring(script_file_name.lastIndexOf(ifs.fnd.os.OSInfo.OS_SEPARATOR)+1,script_file_name.length());

       def_key_value++;
   }

   void setPoolKey( String key )
   {
      pool_key = key;
   }

   /**
    * Returns the pool key. All the ASPPage instances are pooled by the framework to improve
    * performances. This key uses by the framework to get the page pooled page object from the
    * pool. Developers don't have to worry about this mechanism. But very seldom they need the
    * pool key. This is why this method access modifier is protected (instead of private).
    */

   protected String getPoolKey()
   {
      return pool_key;
   }

   private void setProfilePoolKey()
   {
      ASPManager mgr = getASPManager();

      //int len = pool_key.lastIndexOf(ASPPagePool.getPoolKeyLangSuffix(mgr));
      int len = pool_key.length() - 3; // 3 characters for lang suffix '-xx'
     // String app_path = getApplicationPath().substring(1);
      //String app_path = pool_key.substring(1);
      //app_path = app_path.substring(0,app_path.indexOf('/'));

      String secure_path = getASPConfig().getSecuredPath();

      String tmp_key = pool_key.substring( pool_key.indexOf(secure_path)+secure_path.length()+1,len); //remove language suffix
     // String tmp_key = pool_key.substring( app_path.length()+2,len); //remove language suffix

      int copy_index = tmp_key.indexOf(""+mgr.PAGE_COPY_SEPARATOR);
      String copy_key = "";

      if (copy_index > -1)
      {
         copy_key = tmp_key.substring(copy_index);   //extract #COPY
         tmp_key = tmp_key.substring(0,copy_index);  //remove #COPY from pool_key
      }

      int def_index = tmp_key.indexOf(""+mgr.DEF_KEY_SEPARATOR);
      String def_key = "";

      if (def_index > -1)
      {
         def_key = tmp_key.substring(def_index);     //extract def_key
         tmp_key = tmp_key.substring(0, def_index);  //remove def_key from key
      }

      tmp_key = tmp_key.substring(0,tmp_key.lastIndexOf('.'));  //remove ext(.page)

      //profile_key = Str.replace(tmp_key,"/",".").toLowerCase();
      //profile_key = Str.replace(tmp_key,"/",".").toLowerCase();
      profile_key = tmp_key.replaceAll("/",".").toLowerCase();
      profile_key = Str.replace(profile_key, "common.scripts.", "fndweb.");

      if( profile_key.indexOf('.')<0 )
         profile_key = "fndweb."+profile_key;

      profile_key += def_key + copy_key;

      //app_path = getASPConfig().getApplicationContext().substring(1); //get application path without 'secured'
      String app_path = mgr.getAspRequest().getContextPath().substring(1); //get application path without 'secured'
      
      profile_key =  app_path + "/Pages/" + profile_key;
      String lov_view = mgr.readValue("__DYNAMIC_LOV_VIEW");
      // Modified by Terry 20130910
      // Original:
      // if (!Str.isEmpty(lov_view) && "DynamicLov".equalsIgnoreCase(page_name))
      if (!Str.isEmpty(lov_view) && ("DynamicLov".equalsIgnoreCase(page_name) || "DynamicSel".equalsIgnoreCase(page_name)))
      // Modified end
          profile_key = profile_key +"#"+lov_view.toLowerCase();
      if(DEBUG) debug("ASPPage: profile_key set to '"+profile_key+"' (for pool_key="+pool_key+")");
   }

   /**
    * Returns a key used for obtaining user profile for this page.
    */
   String getProfilePoolKey()
   {
      if( Str.isEmpty(profile_key) )
         setProfilePoolKey();
      return profile_key;
   }

   /*
    * Returns the component name to which this page belongs.
	 * @return String component name.
    */
   public String getComponent()
   {
      return module;
   }

   /*
    * Returns the name of the page.
	 * @return String page name.
    */
   public String getPageName()
   {
      return page_name;
   }

   protected boolean useLovContextSlot()
   {
      return false;
   }
   //==========================================================================
   //
   //==========================================================================

   /**
    * Called by ASPManager, after successful execution of the submit() method.
    */
   void refresh() throws FndException
   {
      if(DEBUG) debug(this+": ASPPage.refresh()");

      for( int i=0; i<blocks.size(); i++ )
         ((ASPBlock)(blocks.elementAt(i))).getASPRowSet().refresh();
      verify();
   }


   /**
     * Read one value from the ASP Request object. Return the value of:
     * <pre>
     *  1. the named QueryString parameter, or if it does not exist
     *  2. the named HTML field in the current ASP Request
     * </pre>
     * Return null, if no such parameter and no such field has been found. 
     * Evaluate for Context Substitutation Variable.
     * @see readAbsoluteValue(String)
     * @see readAbsoluteValue(String,String)
     */
   public String readValue( String name )
   {
      return readValue(name,null);
   }

   /**
     * Read one value from the ASP Request object. Return the value of:
     * <pre>
     *  1. the named QueryString parameter, or if it does not exist
     *  2. the named HTML field in the current ASP Request
     * </pre>
     * Return null, if no such parameter and no such field has been found. 
     * Do not evaluate for Context Substitutation Variable.
     * @see readValue(String)
     * @see readValue(String,String)
     * @see readAbsoluteValue(String, String)
     */   
   public String readAbsoluteValue( String name )
   {
      return readAbsoluteValue(name,null);
   }

   /**
     * Read one value from the ASP Request object. Return the value of:
     * <pre>
     *  1. the named QueryString parameter, or if it does not exist
     *  2. the named HTML field in the current ASP Request
     * </pre>
     * Return the specified default value, if no such parameter and no such
     * field has been found.
     * Evaluate for Context Substitutation Variable.
     * @see readAbsoluteValue(String)
     * @see readAbsoluteValue(String,String)
     */
   public String readValue( String name, String default_value )
   {
      if(DEBUG) debug(this+": ASPPage.readValue("+name+","+default_value+")");
      return getASPManager().readValue( addProviderPrefix() + name, default_value, false, this );
   }

   /**
     * Read one value from the ASP Request object. Return the value of:
     * <pre>
     *  1. the named QueryString parameter, or if it does not exist
     *  2. the named HTML field in the current ASP Request
     * </pre>
     * Return the specified default value, if no such parameter and no such field has been found. 
     * Do not evaluate for Context Substitutation Variable.
     * @see readValue(String)
     * @see readValue(String,String)
     * @see readAbsoluteValue(String)
     */   
   
   public String readAbsoluteValue( String name, String default_value )
   {
      if(DEBUG) debug(this+": ASPPage.readAbsoluteValue("+name+","+default_value+")");
      return getASPManager().readAbsoluteValue( addProviderPrefix() + name, default_value );
   }

   /**
    * Return the value at the specified position (0,1,2,...) in the value list
    * for the the named HTML field in the current ASP Request.
    */
   public String readValueAt( String name, int position )
   {
      if(DEBUG) debug(this+": ASPPage.readValueAt("+name+","+position+")");
      return getASPManager().readValueAt( addProviderPrefix() + name, position );
   }

   /**
    * Return an array with all values of the named HTML field/column
    * in the current ASP Request,
    */
   public String[] readValues( String name )
   {
      if(DEBUG) debug(this+": ASPPage.readValues("+name+")");
      return getASPManager().readValues( addProviderPrefix() + name );
   }

   /**
    * Return the value of the named QueryString parameter, or null if it does not exist.
    */
   public String getQueryString( String name )
   {
      if(DEBUG) debug(this+": ASPPage.getQueryString("+name+")");
      return getASPManager().getQueryStringValue( prefixWithId() + name );
   }

   /*
   * @see ifs.fnd.asp.ASPPortletProvider#addProviderPrefix
   */
   protected String addProviderPrefix()
   {
      return "";
   }


   /*
   * @see ifs.fnd.asp.ASPPortletProvider#getID
   */
   protected String getId()
   {
      return "";
   }

   protected String prefixWithId()
   {
      return "";
   }

   private boolean master_has_rows;

   String masterHasRows( boolean has_rows )
   {
      master_has_rows = has_rows;
      return null;
   }

   boolean doesMasterHaveRows()
   {
      return master_has_rows;
   }

   //==========================================================================
   //  Public functions that return references to the stored instances
   //==========================================================================

   /**
    * Return the reference to the only one instance (per page) of ASPLog class.
    */
   public ASPLog getASPLog()
   {
      if(DEBUG) debug(this+": ASPPage.getASPLog(): "+log);
      return log;
   }


   /**
    * Return the reference to the only one instance (per page) of ASPConfig class.
    */
   public ASPConfig getASPConfig()
   {
      if(DEBUG) debug(this+": ASPPage.getASPConfig(): "+config);

      if ( config==null )
         error(new FndException("FNDPAGCFGNULL: Fatal Error - configuration information not accessible!"));
      return config;
   }


   /**
    * Return the reference to the only one instance (per page) of ASPContext class.
    */
   public ASPContext getASPContext()
   {
      if(DEBUG) debug(this+": ASPPage.getASPContext(): "+context);
      return context;
   }


   /**
    * Return the reference to the only one instance (per page) of ASPHTMLFormatter class.
    */
   public ASPHTMLFormatter getASPHTMLFormatter()
   {
      if(DEBUG) debug(this+": ASPPage.getASPHTMLFormatter(): "+formatter);
      return formatter;
   }


   /**
    * Return the reference to the only one instance (per page) of ASPForm class.
    */
   public ASPForm getASPForm()
   {
      if(DEBUG) debug(this+": ASPPage.getASPForm(): "+form);
      return form;
   }


   /**
    * Return reference to the only one instance of ASPInfoServices.
    */
   public ASPInfoServices getASPInfoServices()
   {
      return info_services;
   }


   /**
    * Return the reference to the only one instance (per page) of ASPNavigator class.
    */
   public ASPNavigator getASPNavigator()
   {
      return navigator;
   }

   /**
   * Returns reference to the instance of ASPProfile class, which refers
   * to the profile for current URL and userid.
   */
   public ASPProfile getASPProfile()
   {
      if(DEBUG) debug(this+": ASPPage.getASPProfile()");

      try
      {
         if(asp_profile==null)
            activateProfile();
      }
      catch( Throwable any )
      {
         error(any);
      }
      if(DEBUG) debug(this+": ASPPage.getASPProfile(): asp_profile="+asp_profile);
      return asp_profile;
   }

   /**
   * Returns reference to the instance of ASPProfile class, which refers to the global profile.
   */
   public ASPProfile getPageProfile()
   {
      if(DEBUG) debug(this+": ASPPage.getPageProfile()");

      try
      {
         if(page_prf==null)
            activatePageProfile();
      }
      catch( Throwable any )
      {
         error(any);
      }
      if(DEBUG) debug(this+": ASPPage.getPageProfile(): page_prf="+page_prf);
      return page_prf;
   }

   public String getName()
   {
      return "PAGE";
   }


   //==========================================================================
   //  URL
   //==========================================================================

   /**
    * Return the application domain.
    */
   public String getApplicationDomain()
   {
      if(DEBUG) debug(this+": ASPPage.getApplicationDomain()");
      return getASPConfig().getApplicationDomain();
   }


   /**
    * Return the application path.
    */
   public String getApplicationPath()
   {
      if(DEBUG) debug(this+": ASPPage.getApplicationPath()");
      return getASPConfig().getApplicationPath();
   }


   /**
    * Return the path to the page.
    */
   public String getPagePath()
   {
      if(DEBUG) debug(this+": ASPPage.getPagePath()");
      return page_path;
   }

   /**
    * Return name of the current ASP script prefixed with the module name in uppercase.
    */
   String getDicPageKey()
   {
      return dic_page_key;
   }

   /**
    * Return a complete URL for the current page without query string.
    */
   public String getURL()
   {
      if(DEBUG) debug(this+": ASPPage.getURL()");
      //return url;
      return getCurrentPagePath();
   }


   String getScriptFileName()
   {
      return script_file_name;
   }

   /*
    * Returns a key to retrieve the javascript for this page from the DynamicObjectCache.
    */
   String getScriptCacheKey()
   {
      String str_def_key = ((local_def_key_value>-1)?(local_def_key_value+""):"");
      int pos = getCurrentPagePath().lastIndexOf('.');
      String script_url = ( pos>=0 ? getCurrentPagePath().substring(0,pos) : getCurrentPagePath() ) + getLanguageSuffix()+ str_def_key + ".js";
      String appl_path = getApplicationPath();
      String key="";
      if (!Str.isEmpty(appl_path))   //remove app path from url to get the cache key
      {
        int pnt = script_url.indexOf(appl_path)+appl_path.length();
        key = script_url.substring(pnt+1,script_url.length());
      }
      else
        key = script_url.substring(1);  //app path not present in url, only remove the leading "/"

      return key;
   }

   //==========================================================================
   //  Functions for disabling/enabling the standard toolbar buttons.
   //==========================================================================

   /**
    * Disables the Options button in the toolbar.
    */
   public void disableOptions()
   {
      try
      {
         modifyingMutableAttribute("OPTIONS_DISABLED");
         options_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Enables the Options button in the toolbar.
    */
   public void enableOptions()
   {
      try
      {
         modifyingMutableAttribute("OPTIONS_DISABLED");
         options_disabled = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Disables the Navigate button in the toolbar.
    */
   public void disableNavigate()
   {
      try
      {
         modifyingMutableAttribute("NAVIGATE_DISABLED");
         navigate_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Enables the Navigate button in the toolbar.
    */
   public void enableNavigate()
   {
      try
      {
         modifyingMutableAttribute("NAVIGATE_DISABLED");
         navigate_disabled = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Disables the Configuration button in the toolbar.
    */
   public void disableConfiguration()
   {
      try
      {
         modifyingMutableAttribute("CONFIGURATION_DISABLED");
         configuration_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Enables the Configuration button in the toolbar.
    */
   public void enableConfiguration()
   {
      try
      {
         modifyingMutableAttribute("CONFIGURATION_DISABLED");
         configuration_disabled = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Disables the settings link in the header.
    */
   public void disableSettingsLink()
   {
      try
      {
         modifyingMutableAttribute("SETTING_DISABLED");
         setting_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }
   
   /**
    * Disables the signout link in the header.
    */
   public void disableSignoutLink()
   {
      try
      {
         modifyingMutableAttribute("SIGNOUT_DISABLED");
         signout_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }
   
   /**
    * Disables the sub header in which Broadcast Messages is displayed.
    */
   public void disableSubHeader()
   {
      try
      {
         modifyingMutableAttribute("SUB_HEADER_DISABLED");
         sub_header_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Disables the context sensitive task pane link above the master block.
    */
   public void disableContextSensitiveTaskPane()
   {
      try
      {
         modifyingMutableAttribute("CONTEXT_SESITIVE_TASK_PANE");
         cstpane_disabled = true;
      }
      catch( Throwable any)
      {
         error(any);
      }
   }

   
   /**
    * Disables the Help button in the toolbar.
    */
   public void disableHelp()
   {
      try
      {
         modifyingMutableAttribute("HELP_DISABLED");
         help_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Enables the Help button in the toolbar.
    */
   public void enableHelp()
   {
      try
      {
         modifyingMutableAttribute("HELP_DISABLED");
         help_disabled = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
   * Disables the Configuration button on the portlet header.
   */
   public void disablePortletConfiguration()
   {
      try
      {
         modifyingMutableAttribute("CONFIGURATION_DISABLED");
         portlet_conf_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
   * Disables the New, Copy and Remove Portal View options on the portal configuration page.
   */
   public void disableModifyingPortalViews()
   {
      try
      {
         modifyingMutableAttribute("CONFIGURATION_DISABLED");
         modifying_views_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   boolean isOptionsDisabled()
   {
      return options_disabled;
   }
   boolean isNavigateDisabled()
   {
      return navigate_disabled;
   }
   boolean isConfigurationDisabled()
   {
      return configuration_disabled;
   }
   boolean isHelpDisabled()
   {
      return help_disabled;
   }
   boolean isPortletConfigurationDisabled()
   {
      return portlet_conf_disabled;
   }
   boolean isModifyingPortalViewsDisabled()
   {
      return modifying_views_disabled;
   }

   /**
    * Disables the Home Icon.
    */
   public void disableHomeIcon()
   {
      try
      {
         modifyingMutableAttribute("HOME_ICON_DISABLED");
         home_icon_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   public boolean isHomeIconDisabled()
   {
      return home_icon_disabled;
   }

   /**
    * Disables the Application wide search.
    */
   public void disableApplicationSearch()
   {
      try
      {
         modifyingMutableAttribute("APPLICATION_SEARCH_DISABLED");
         application_search_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * check if application wide search is disabled
    */
   public boolean isApplicationSearchDisabled()
   {
      return application_search_disabled;
   }

   
   /**
    * Enables the header logo.
    */
   public void enableHeader()
   {
      try
      {
         // Modified by Terry 20131016
         // Change to mutable attributes
         modifyingMutableAttribute("HEADER_DISABLED");
         // Modified end
         header_disabled = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Disables the header logo.
    */
   public void disableHeader()
   {
      try
      {
         // Modified by Terry 20131016
         // Change to mutable attributes
         modifyingMutableAttribute("HEADER_DISABLED");
         // Modified end
         header_disabled = true;
         disableApplicationSearch();
         disableSubHeader(); //common msgs
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   public void enableMultiFrameError()
   {
      try
      {
         modifyingImmutableAttribute("MULTIPLE_FRAME_ERROR");
         multiple_frame_error = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }
   
   boolean isMultiFrameError()
   {
      return multiple_frame_error;
   }
   
   /**
    * Enables the header bar.
    */
   public void enableBar()
   {
      try
      {
         modifyingImmutableAttribute("BAR_DISABLED");
         bar_disabled = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Disables the header bar.
    */
   public void disableBar()
   {
      try
      {
         modifyingImmutableAttribute("BAR_DISABLED");
         bar_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Enables the footer logo.
    */
   public void enableFooter()
   {
      try
      {
         modifyingImmutableAttribute("FOOTER_DISABLED");
         footer_disabled = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Disables the footer logo.
    */
   public void disableFooter()
   {
      try
      {
         modifyingImmutableAttribute("FOOTER_DISABLED");
         footer_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   boolean isBarDisabled()
   {
      return bar_disabled;
   }

   boolean isHeaderDisabled()
   {
      return header_disabled;
   }
   boolean isFooterDisabled()
   {
      return footer_disabled;
   }

   boolean isSignoutLinkDisabled()
   {
      return signout_disabled;
   }
   
   boolean isSettingLinkDisabled()
   {
      return setting_disabled;
   }
   
   boolean isSubHeaderDisabled()
   {
      return sub_header_disabled;
   }

   boolean isContextSensitiveTaskPaneDisabled()
   {
      if(!getASPConfig().getConfigFile().aurora_features)
         return true;
      return cstpane_disabled;
   }
   
   /**
    * Enables page repositioning. The pixel position is saved when the user switches
    * to Edit/Find/New from multi/single mode, and restored when re-entering multi/single
    * mode. May not work on all pages, especially if you manually change modes.
    */
   public void enableRepositioning()
   {
      try
      {
         modifyingMutableAttribute("REPOSITIONING");
         repositioning = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
   * Disables page repositioning.
   */
   public void disableRepositioning()
   {
      try
      {
         modifyingMutableAttribute("REPOSITIONING");
         repositioning = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   boolean isRepositioningEnabled()
   {
      return repositioning;
   }


   //==========================================================================
   //  ASPLov functions
   //==========================================================================

   /**
   * Returns the reference to the new instance of ASPLov class. The page must be in the UNDEFINED state.
   */
   public ASPLov defineLOV()
   {
      return defineLOV(50,90);
   }

   /**
    * Returns the reference to the new instance of ASPLov class. The page must be in the UNDEFINED state.
    * Used for LOVs created using activity APIs.
    * @param width Width of the LOV.
    * @param height Height of the LOV.
    * @return Instance of an ASPLov.
    */
   public ASPLov defineLOV( int width, int height )
   {
      if(DEBUG) debug(this+": ASPPage.defineLOV()");
      try
      {
         if (lov!=null)
            throw new FndException("FNDPAGLOVALDEF: LOV for this page is already defined");
         lov = new ASPLov(this);
         modifyingImmutableAttribute("LOV");
         return lov.construct(width,height);
      }
      catch( Throwable any )
      {
         error(any);
      }
      return null;
   }

   /**
   * Returns the reference to the instance of ASPLov class.
   */
   public ASPLov getASPLov()
   {
      return lov;
   }

   /**
    * Disables the clientutil applet. Used by DynamicLov.page.
    * @deprecated Applet is no longer released with the framework. use disableValidation()
    * instead.
    * @see disableValidation
    */
   public void disableApplet()
   {
      disableValidation();
   }

   /**
    * Disable the validation on this page. When the validation method
    * is IFRAME, the IFRAME used for the validation will not add to the
    * page.
    */
   public void disableValidation()
   {
      try
      {
         modifyingImmutableAttribute("VALIDATION_DISABLED");
         disable_validation = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   //==========================================================================
   //  ASPPortal functions
   //==========================================================================

   //public
   ASPPortal newASPPortal()
   {
      if(DEBUG) debug(this+": ASPPage.newASPPortal()");

      try
      {
         if (portal!=null)
            throw new FndException("FNDPAGPORALDEF: This page is already defined as portal.");
         portal = new ASPPortal(this);
         //enableConfiguration();
         portal.construct();
//         portal.doActivate();
         modifyingImmutableAttribute("PORTAL");
         return portal;
      }
      catch( Throwable any )
      {
         error(any);
      }
      return null;
   }

   /*
   * Returns the reference to the only one instance of ASPPortal class.
   */
   public ASPPortal getASPPortal()
   {
      if(DEBUG) debug(this+": ASPPage.getASPPortal()");
      return portal;
   }

   private void setPortalViews()
   {
      ASPBuffer aspbuf = readGlobalProfileBuffer(ASPPortal.AVAILABLE_VIEWS,false);
      ASPBuffer delbuf = readGlobalProfileBuffer(ASPPortal.DELETED_VIEWS,false);

      if(aspbuf==null)
         portal_views = null;
      else
      {
                 
         portal_views = getASPManager().getFactory().getBuffer();
         ProfileBuffer portal_views_with_position = new ProfileBuffer();
         for( int p=0; p<aspbuf.countItems(); p++)
         {
            String name = aspbuf.getNameAt(p);
            String desc = aspbuf.getValue(name+"/"+ASPPortal.PORTAL_DESC);
            
            if(delbuf != null)
            {
               int pos = delbuf.getItemPosition(name);
               if(pos >= 0)
                  continue;
            }
            if (aspbuf.itemExists(name+"/"+ASPPortal.PORTAL_POSITION))
            {
              String pos = aspbuf.getValue(name+"/"+ASPPortal.PORTAL_POSITION);  
              name = name.substring(0,name.indexOf(ASPPortal.PAGE_NODE)); //remove '^Page Node' from portal name  
              try{
              ProfileUtils.findOrCreateNestedItem(portal_views_with_position, name+"/"+ASPPortal.PORTAL_DESC).setValue(desc);
              ProfileUtils.findOrCreateNestedItem(portal_views_with_position, name+"/"+ASPPortal.PORTAL_POSITION).setValue(pos);
              }catch(Exception e){}
            }
            else    
            {
            name = name.substring(0,name.indexOf(ASPPortal.PAGE_NODE)); //remove '^Page Node' from portal name
            portal_views.addItem(name,desc);
         }
         }
                  
         try{             
             //sort alphabetically since the buffer has no position field.
              Buffers.sort_(portal_views, new SimpleComparator(true));  //Bug id 60980                          
              if (DEBUG) debug("ASPPage.setPortalViews() - > Sorted Available views buffer without positions:\n"+Buffers.listToString(portal_views));
              //now sort the buffer which has the Position item              
              ProfileBuffer tosort = ProfileBuffer.bufferToProfileBuffer(portal_views_with_position);
              PositionComparator comp = new PositionComparator(ASPPortal.PORTAL_POSITION);              
              tosort.sort(comp);               
              if (DEBUG) ProfileUtils.debug("ASPPage.setPortalViews() - > Sorted Available views buffer with positions:\n",tosort);
              for (int i=0; i<tosort.countItems(); i++)
              {
                 Item item = tosort.getItem(i);
                 String name = item.getName();
                 Buffer buf     = item.getBuffer();
                 String desc   = buf.getString(ASPPortal.PORTAL_DESC); 
                 portal_views.addItem(name,desc);
              }
              if (DEBUG) debug("ASPPage.setPortalViews() - > Merged Available views buffer:\n"+Buffers.listToString(portal_views));              
         }
         catch(Exception e){}
      }
   }

   /**
   * Returns buffer with all user's portal views (contains name and description of each view).
   */
   public Buffer getPortalViews()
   {
      if(portal_views==null) setPortalViews();
      return portal_views;
   }

   /**
   * Called from ifs.fnd.pages.DefaultSlim class.
   */
   protected void setSlimMode()
   {
      slim_mode = true;
   }

   /**
   * Returns 'TRUE' if the portal is run in the slim mode.
   */
   public boolean isSlimMode()
   {
      return slim_mode;
   }


   void setStdPortlet( String name, int state)
   {
      portlet_name = name;
      portlet_state = state;
   }

   String getStdPortletName()
   {
      return portlet_name;
   }

   int getStdPortletState()
   {
      return portlet_state;
   }

   //==========================================================================
   //  ASPBlock functions
   //==========================================================================

   /**
    * Return a new anonymous ASPBlock.
    * The page must be in state UNDEFINED.
    */
   public ASPBlock newASPBlock()
   {
      return newASPBlock(null);
   }


   /**
    * Return a new ASPBlock having the specified name.
    * The page must be in state UNDEFINED.
    */
   public ASPBlock newASPBlock( String name )
   {
      if(DEBUG) debug(this+": ASPPage.newASPBlock("+name+")");

      try
      {
         ASPBlock blk = new ASPBlock(this);
         blk.construct(name);
         return register(blk);
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }
   }

   ASPBlock register( ASPBlock block ) throws FndException
   {
      if (DEBUG) debug(this+": ASPPage.register("+block+")");

      modifyingImmutableAttribute("BLOCKS");

      String name = block.getName();
      if( name==null )
         anonym_blk_cnt++;
      else
         for( int i=0; i<blocks.size(); i++ )
            if (name.equals(((ASPBlock)(blocks.elementAt(i))).getName()))
               throw new FndException("FNDPAGDUPBLK: Duplicate block name: &1", name);

      blocks.addElement(block);
      return block;
   }

   /**
    * Return the only one anonymous ASPBlock.
    */
   public ASPBlock getASPBlock()
   {
      return getASPBlock(null);
   }


   /**
    * Return named ASPBlock.
    */
   public ASPBlock getASPBlock( String name )
   {
      if(DEBUG) debug(this+": ASPPage.getASPBlock("+name+")");

      try
      {
         if( blocks.size()==1 )
            return (ASPBlock)(blocks.elementAt(0));

         if ( name==null && anonym_blk_cnt>1 )
            throw new FndException("FNDPAGANBLK: There are more then one anonymous blocks.");

         for( int i=0; i<blocks.size(); i++ )
         {
            ASPBlock blk = (ASPBlock)(blocks.elementAt(i));
            String blkname = blk.getName();
            if ( ( name!=null && name.equals(blkname) ) ||
                 ( name==null && blkname==null ) )
               return blk;
         }
         if (name==null)
            throw new FndException("FNDPAGNOANBLK: There is no anonymous ASPBlock");
         throw new FndException("FNDPAGNOBLK: There is no ASPBlock '&1'", name);
      }
      catch( Throwable any )
      {
         error(any);
      }
      return null;
   }

   /*
    * Returns all the blocks in the ASPPage
	 * @return Vector ASPBlocks.
    */
   public Vector getASPBlocks()
   {
      return blocks;
   }

   void applyProfileFormatter()
   {
      ASPManager mgr = getASPManager();
      if (fields.size()==0)
         return;
      String mask_number=null,mask_currency=null, mask_integer=null;
      int decimal_size=-1;
      
      String group_sizes = readGlobalProfileGroupingSize(DataFormatter.NUMBER);

      try 
      {   
         decimal_size= Integer.parseInt(readGlobalProfileDecimalDigitSize(DataFormatter.NUMBER));
      }
      catch (NumberFormatException e) {}
      
      if (group_sizes!=null && decimal_size!=-1)
      {
         mask_number = mgr.getNumericFormatMask(group_sizes, decimal_size, DataFormatter.NUMBER);
         mask_integer = mgr.getNumericFormatMask(group_sizes, decimal_size, DataFormatter.INTEGER);
      }
      
      group_sizes = readGlobalProfileGroupingSize(DataFormatter.MONEY);
      try 
      {   
         decimal_size= Integer.parseInt(readGlobalProfileDecimalDigitSize(DataFormatter.MONEY));
      }
      catch (NumberFormatException e) {decimal_size=-1;}
      
      if (group_sizes!=null && decimal_size!=-1)
         mask_currency = mgr.getNumericFormatMask(group_sizes, decimal_size, DataFormatter.MONEY);
      
      String number_formats[] = new String[] {readGlobalProfileDecimalSeperator(DataFormatter.NUMBER),
                             readGlobalProfileGroupSeperator(DataFormatter.NUMBER),
                             mask_number,mask_integer};

      String currency_formats[] = new String[] {readGlobalProfileDecimalSeperator(DataFormatter.MONEY),
                             readGlobalProfileGroupSeperator(DataFormatter.MONEY),
                             mask_currency};

      String date_formats[] = new String[] {readGlobalProfileMask(DataFormatter.DATE),
                             readGlobalProfileMask(DataFormatter.TIME),
                             readGlobalProfileMask(DataFormatter.DATETIME)};

      if (DEBUG)
         debug("============ Applying profile Formats");

      boolean profile_format_found = false;
      for (int j=0; j<3;j++)
      {
         if (number_formats[j]!=null || currency_formats[j]!=null || date_formats[j]!=null)
         {
            profile_format_found=true;
            break;
         }
      }
      if (number_formats[3]!=null)
         profile_format_found=true;

      if (DEBUG)
         debug(profile_format_found?" Profile format found. ": "Profile format NOT found. ");

      if (profile_format_found)
         for (int i=0; i<blocks.size(); i++)
            ((ASPBlock)blocks.elementAt(i)).applyProfilesFormatter(number_formats,currency_formats,date_formats);
   }
   
   /*
    * Disables the PageProperties option from the options drop down menu.
    * @Disable PageProperties option.
    */
   public void disablePageProperties()
   {
      try
      {
         modifyingMutableAttribute("DISABLE_PAGEPROPERTIES");
         page_properties_disabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }
    
   /*
    * @Return true if PageProperties option id disabled.
    */
   boolean isPagePropertiesDisabled()
   {
      return page_properties_disabled;
   }
   
   
   void applyLongYearFormatter()
   {
      Iterator it = long_year_fields.iterator();
      while(it.hasNext())
      {
         ((ASPField)it.next()).repalceWithLongYear();
      }
   }

   /**
    * Return named ASPBlock.
    */
   public ASPBlock findASPBlock( String name )
   {
      if(DEBUG) debug(this+": ASPPage.findASPBlock("+name+")");

      try
      {
         if( blocks.size()==1 )
            return (ASPBlock)(blocks.elementAt(0));

         if ( name==null && anonym_blk_cnt>1 )
            throw new FndException("FNDPAGANBLK: There are more then one anonymous blocks.");

         for( int i=0; i<blocks.size(); i++ )
         {
            ASPBlock blk = (ASPBlock)(blocks.elementAt(i));
            String blkname = blk.getName();
            if ( ( name!=null && name.equals(blkname) ) ||
                 ( name==null && blkname==null ) )
               return blk;
         }
         return null;
      }
      catch( Throwable any )
      {
         error(any);
      }
      return null;
   }


   /**
    *
    */
   void generateBlockCommands( ASPTransactionBuffer trans ) throws Exception
   {
      for( int i=0; i<blocks.size(); i++ )
      {
         ASPBlock blk = (ASPBlock)(blocks.elementAt(i));
         trans.generateBlockCommands(blk);
      }
   }

   boolean isAnyBlockInDialog()
   {
      for(int i=0;i<blocks.size();i++)
      {
         int mode = ((ASPBlock) blocks.elementAt(i)).getASPBlockLayout().getLayoutMode();
         if(mode == ASPBlockLayout.FIND_LAYOUT || mode == ASPBlockLayout.NEW_LAYOUT || mode == ASPBlockLayout.EDIT_LAYOUT)
            return true;
      }
      return false;
   }

   //==========================================================================
   //  ASPPopup functions
   //==========================================================================

   /**
    * Return a reference to the newly created named instance of ASPPopup class.
    *
    * The page must be in state UNDEFINED.
    */
   public ASPPopup newASPPopup( String name )
   {
      try
      {
//         ASPPopup pop = new ASPPopup(this,addProviderPrefix() + name);
         ASPPopup pop = new ASPPopup(this,name);
         return register(pop);
      }
      catch( Throwable e)
      {
         error(e);
         return null;
      }
   }

   public ASPPopup newASPPopup( String name, ASPPoolElement parent )
   {
      try
      {
//         ASPPopup pop = new ASPPopup(this,addProviderPrefix() + name,parent);
         ASPPopup pop = new ASPPopup(this,name,parent);
         return register(pop);
      }
      catch( Throwable e)
      {
         error(e);
         return null;
      }
   }


   ASPPopup register( ASPPopup pop ) throws FndException
   {
      //modifyingImmutableAttribute("POPUPS");
      modifyingMutableAttribute("POPUPS");

      String name = pop.getName();
      for( int i=0; i<popups.size(); i++ )
         if (name.equals(((ASPPopup)(popups.elementAt(i))).getName()))
            throw new FndException("FNDPAGDUPPOP: Duplicate popup name: &1", name);

      popups.addElement(pop);
      return pop;
   }

   /**
    * Checks whether a given popup exists.
    */
   public boolean isPopupExist(String popup_name)
   {
      for( int i=0; i<popups.size(); i++ )
         if(popup_name.equals(((ASPPopup)(popups.elementAt(i))).getName()))
             return true;
      return false;
   }

   /**
    * Return the reference to a named instance of ASPPopup.
    * Throw an Exception if there is no such popup.
    */

   public ASPPopup getASPPopup( String name )
   {
      if(DEBUG) debug(this+": ASPPage.getASPPopup("+name+")");
      try
      {
         if( popups.size()==1 )
         {
            return (ASPPopup)(popups.elementAt(0));
            }
         for( int i=0; i<popups.size(); i++ )
         {

            ASPPopup pop = (ASPPopup)(popups.elementAt(i));
            String popname = pop.getName();
//            if( (name==null && popname==null) || name!=null && (addProviderPrefix() + name).equals(popname) )
            if( (name==null && popname==null) || name!=null && name.equals(popname) )
            {
               return pop;
            }
         }

         throw new FndException("FNDPAGNOPOP: There is no ASPPopup '&1'", name);
      }
      catch( Throwable any )
      {
         error(any);
      }
      return null;
   }

   /**
    * Return if the specified ASPPopup exists or not.
    */

   /* mapelk: removed. should use isPopupExist. Search on all modules and no one else is calling this.
    public boolean existsASPPopup( String name )
   {
      try
      {
         for( int i=0; i<popups.size(); i++ )
         {
            ASPPopup pop = (ASPPopup)(popups.elementAt(i));
            String popname = pop.getName();
//            if( (name==null && popname==null) || name!=null && (addProviderPrefix() + name).equals(popname) )
            if( (name==null && popname==null) || name!=null && name.equals(popname) )
               return true;
         }
       }
       catch(Throwable any){error(any);}

         return false;
   }*/



   //==========================================================================
   //  ASPTable functions
   //==========================================================================

   /**
    * Return a reference to the newly created anonymous instance of ASPTable class.
    * The page must be in state UNDEFINED.
    */
   public ASPTable newASPTable()
   {
      return newASPTable(null, null);
   }

   /**
    * Return a reference to the newly created anonymous instance of ASPTable class
    * based on all fields from the specified ASPBlock.
    * The page must be in state UNDEFINED.
    */
   public ASPTable newASPTable( ASPBlock block )
   {
      return newASPTable(block, null);
   }


   /**
    * Return a reference to the newly created named instance of ASPTable class
    * based on all fields from the specified ASPBlock.
    * The page must be in state UNDEFINED.
    * The first argument may be null and then an empty named table will be created.
    */
   public ASPTable newASPTable( ASPBlock block, String name )
   {
      if(DEBUG) debug(this+": ASPPage.newASPTable("+block+","+name+")");

      try
      {
         ASPTable tbl = new ASPTable(this);
         tbl.construct(block,name);
         return register(tbl);
      }
      catch( Throwable e)
      {
         error(e);
         return null;
      }
   }

   ASPTable register( ASPTable tbl ) throws FndException
   {
      if(DEBUG) debug(this+": ASPPage.register("+tbl+")");

      modifyingImmutableAttribute("TABLES");

      String name = tbl.getName();
      if (name==null)
         anonym_tbl_cnt++;
      else
         for( int i=0; i<tables.size(); i++ )
            if (name.equals(((ASPTable)(tables.elementAt(i))).getName()))
               throw new FndException("FNDPAGDUPTBL: Duplicate table name: &1", name);

      tables.addElement(tbl);
      return tbl;
   }


   /**
    * Return the reference to the only one, anonymous instance of ASPTable.
    * Throw an Exception if there is no such table or if there are more then
    * one anonymous table.
    */
   public ASPTable getASPTable()
   {
      return getASPTable(null);
   }


   /**
    * Return the reference to named instance of ASPTable.
    * Throw an Exception if there is no such table.
    */
   public ASPTable getASPTable( String name )
   {
      if(DEBUG) debug(this+": ASPPage.getASPTable("+name+")");

      try
      {
         if( tables.size()==1 )
            return (ASPTable)(tables.elementAt(0));

         if( name==null && anonym_tbl_cnt>1 )
            throw new FndException("FNDPAGANTBL: There are more then one anonymous tables.");

         for( int i=0; i<tables.size(); i++ )
         {
            ASPTable tbl = (ASPTable)(tables.elementAt(i));
            String tblname = tbl.getName();
            if( (name==null && tblname==null) || name!=null && name.equals(tblname) )
               return tbl;
         }

         if( name==null )
            throw new FndException("FNDPAGNOANTBL: There is no anonymous ASPTable");
         throw new FndException("FNDPAGNOTBL: There is no ASPTable '&1'", name);
      }
      catch( Throwable any )
      {
         error(any);
      }
      return null;
   }


   /**
    * Return the number of ASPTables created for this page.
    */
   int getTableCount()
   {
      return tables.size();
   }

   Vector getASPTables()
   {
      return tables;
   }

   //==========================================================================
   //  ASPTabContainer functions
   //==========================================================================

   /**
    * Returns the reference to a new, anonymous instance of ASPTabContainer class.
    * The page must be in state UNDEFINED.
    */
   public ASPTabContainer newASPTabContainer()
   {
      return newASPTabContainer(null);
   }


   /**
    * Returns the reference to a new, named instance of ASPTabContainer class.
    * The page must be in state UNDEFINED.
    */
   public ASPTabContainer newASPTabContainer( String name )
   {
      if(DEBUG) debug(this+": ASPPage.newASPTabContainer("+name+")");

      try
      {
         ASPTabContainer tbcnt = new ASPTabContainer(this);
         tbcnt.construct(name);
         return register(tbcnt);
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }
   }

   ASPTabContainer register( ASPTabContainer tbcnt ) throws FndException
   {
      if(DEBUG) debug(this+": ASPPage.register()");

      modifyingImmutableAttribute("TAB_CONTAINERS");

      String name = tbcnt.getName();
     
      if( name==null )
      {
         anonym_tabc_cnt++;
         tbcnt.setName("__TabContainer"+anonym_tabc_cnt);
         name = tbcnt.getName();
      }
      else
         for( int i=0; i<tab_containers.size(); i++ )
            if (name.equals(((ASPTabContainer)(tab_containers.elementAt(i))).getName()))
               throw new FndException("FNDPAGDUPTABC: Duplicate name of tab container: &1", name);

      tab_containers.addElement(tbcnt);
      has_tab_containers = true;
      return tbcnt;
   }


   /**
    * Returns the reference to an anonymous instance of ASPTabContainer class.
    */
   public ASPTabContainer getASPTabContainer()
   {
      return getASPTabContainer(null);
   }

   /**
    * Returns the references to all ASPTABContainers.
    * @return Vector ASPTABContainer
    */
   public Vector getAllTabContainer()
   {
      return tab_containers;
   }

   /**
    * Returns the reference to a named instance of ASPTabContainer class.
    */
   public ASPTabContainer getASPTabContainer( String name )
   {
      if(DEBUG) debug(this+": ASPPage.getASPTabContainer("+name+")");

      try
      {
         if ( name==null && anonym_tabc_cnt>1 )
            throw new FndException("FNDPAGANTABC: There are more then one anonymous tab containers.");

         for( int i=0; i<tab_containers.size(); i++ )
         {
            ASPTabContainer tabc = (ASPTabContainer)(tab_containers.elementAt(i));
            String tcname = tabc.getName();
            if ( ( name!=null && name.equals(tcname) ) ||
                 ( name==null && tcname.equals("__TabContainer1") ) )
               return tabc;
         }
         if (name==null)
            throw new FndException("FNDPAGNOANTABC: There is no anonymous ASPTabContainer");
         throw new FndException("FNDPAGNOTABC: There is no ASPTabContainer '&1'", name);
      }
      catch( Throwable any )
      {
         error(any);
      }
      return null;
   }

   //==========================================================================
   //  ASPField functions
   //==========================================================================

   /**
    * Add a new ASPField to the current page. Called from constructor in ASPField.
    */
   ASPField register( ASPField field )
   {
      if(DEBUG) debug(this+": ASPPage.register("+field+")");

      String name = field.getName();
      if( name.startsWith("__") )
         error( new FndException("FNDPAGFLDNER: Field name cannot begin with '__': &1", name) );

      if( fields.put(name,field) != null )
         error( new FndException("FNDPAGDUPFLD: Duplicate definition of field &1", name) );
      return field;
   }
   
   ASPField registerLongYearField(ASPField field)
   {
      if(DEBUG) debug(this+": ASPPage.registerLongYearField("+field+")");
      String name = field.getName();
      if(long_year_fields.add(field) != true)
         error( new FndException("FNDPAGDUPLONGYEARFLD: Duplicate long year field &1", name) );
      return field;
   }


   /*
    * Checks whether an ASPField exists.
    */
   boolean hasASPField(String name)
   {
      if(DEBUG) debug(this+": ASPPage.hasASPField("+name+")");

      try
      {
         ASPField field = name==null ? null : (ASPField)fields.get(name);
         if( field!=null )
            return true;
         else
           return false;
      }
      catch( Throwable any )
      {
         error(any);
         return false;
      }
   }


   /**
    * Return a reference to the named ASPField. Throw an Exception if the
    * specified field has not been defined on the current ASP page.
    */
   public ASPField getASPField( String name )
   {
      if(DEBUG) debug(this+": ASPPage.getASPField("+name+")");

      try
      {
         ASPField field = name==null ? null : (ASPField)fields.get(name);
         if( field==null )
            throw new FndException("FNDPAGFLDNEX: ASPField &1 does not exist", name);
         return field;
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }
   }

   public boolean isASPField(String name)
   {
       return ((ASPField)fields.get(name)!=null);
   }

   //==========================================================================
   //Compability funcitons
   //==========================================================================

    /**
     * Fetches the version of the ASP-scripts
     */

    public int getVersion()
    {
        return compatibility.getVersion();
    }

    /**
     * Sets the version of the ASP-scripts.
     */
    public void setVersion(int v)
    {
        compatibility.setVersion(v);
    }

   //==========================================================================
   //security functions for automatic security check.
   //==========================================================================

   void checkObjectAccess()
   {

      HttpSession session = getASPManager().getAspSession();
      Hashtable security_table = (Hashtable)session.getAttribute(getTempSecCacheKey());

      String pres_sec_setup = (String)session.getAttribute(PO_SECURITY);

      if (DEBUG) debug ("ASPPage.checkObjectAccess() for "+getPoolKey());

      //fetch security data from db into security_table if its empty
      if ((security_table == null) && !isLogonPage())//(!"Logon".equals(page_name)))
      {

         ASPTransactionBuffer trans = getASPManager().newASPTransactionBuffer();

         security_table = new Hashtable();

         for( int i=0; i<blocks.size(); i++ )
         {
           ASPBlock blk = ((ASPBlock)(blocks.elementAt(i)));
           String view_name = blk.getDBView();
           Buffer commands  = blk.getDefinedCommands();
           ASPField[] fields  = blk.getFields();
           String full_method_name;

           if (!Str.isEmpty(view_name))
           {
            trans.addSecurityQuery(view_name);
            security_table.put(view_name,"F");
           }

            for(int j=0;j<commands.countItems();j++)
            {
              if (!Str.isEmpty(commands.getItem(j).getName()))
              {
                Item tmp = commands.findItem(commands.getItem(j).getName()+"/METHOD");
                full_method_name = (tmp==null? "":tmp.getString());

                if (!Str.isEmpty(full_method_name))
                {
                  security_table.put(full_method_name,"F");
                  trans.addSecurityQuery(full_method_name.substring(0,full_method_name.indexOf(".")),commands.getItem(j).getName());
                }
              }
            }

           //check security for LOV view
           for (int j=0; j<fields.length; j++)
           {
              String lov_view = fields[j].getLOVView();
              if (!Str.isEmpty(lov_view))
              {
                 trans.addSecurityQuery(lov_view);
                 security_table.put(lov_view,"F");
              }
           }
         }


        //check if po_security is enabled for current user
        if (Str.isEmpty(pres_sec_setup))
        {
          ASPManager mgr = getASPManager();
          String fnd_user = mgr.getFndUser();
          ASPCommand cmd  = (new ASPCommand(mgr)).construct();
          cmd.defineCustomFunction("Fnd_User_Api.Get_Pres_Security_Setup");
          cmd.addParameter("RESULT", "S", null, null);
          cmd.addParameter("FNDUSER","S", "IN", fnd_user);
          trans.addCommand("PRESSEC", cmd);
        }

        //check presentation object security for this page or portlet
        String po_name;
        if (this instanceof ASPPageProvider)
           po_name = module.toUpperCase()+"/"+page_name+".page";
        else
           po_name = page_name;

        trans.addPresentationObjectQuery(po_name);
        security_table.put(po_name,"F");

        trans = getASPManager().perform(trans);

        if (Str.isEmpty(pres_sec_setup))
        {
          pres_sec_setup = trans.getValue("PRESSEC/DATA/RESULT");
          session.setAttribute(PO_SECURITY, pres_sec_setup);
        }

        //transfer security data from buffer (if not null) into hashtable and store in session object
        ASPBuffer buf = trans.getSecurityInfo();
        Enumeration security_table_keys = security_table.keys();

        if (buf != null)
        {
          while (security_table_keys.hasMoreElements())
          {
            String obj_name = ""+security_table_keys.nextElement();

            if (obj_name.indexOf(",")>0)  // to handle blocks with more than one view
            {
               StringTokenizer st = new StringTokenizer(obj_name,",");
               boolean all_views_accesible = true;

               while (st.hasMoreTokens())  //check if all the views defined for a block has security
               {
                 String view_ = st.nextToken();
                 if (!buf.itemExists(view_))
                 {
                    all_views_accesible = false;
                    break;
                 }
               }

               if (all_views_accesible) security_table.put(obj_name,"T");

            }
            else if (buf.itemExists(obj_name))
               security_table.put(obj_name,"T");
          }
        }

        if (getASPManager().isPresentationObjectInstalled(po_name))
        {
           if ( "OFF".equals(pres_sec_setup) )
              security_table.put(po_name,"T");
           else if (buf!=null && buf.namedItemExists(po_name))
              security_table.put(po_name,"T");
        }

        // finally store security hashtable object for this page in the session object
        session.setAttribute(getTempSecCacheKey(), security_table);

      }


  }


   /**
    * check if user has access rights for a comma seperated list of database objects and/or
    * presentation objects. The security table in the session object thats built
    * during the initial request to the page is checked first. If there is no entry
    * for the object a security query is sent to the database and the session object
    * is updated with a entry for the new objects.
    * @param object_names comma seperated list of security objects
    */

   protected boolean isObjectAccessible(String object_names)
   {

      try{
         // Until security is resolved in localize, cannot enforce security for fndwebfeatures.
         if(this instanceof FndWebFeature) return true; //Temp solution
         
         ASPManager mgr = getASPManager();
         if (mgr.isEmpty(mgr.getUserId())) return false;
         HttpSession session = mgr.getAspSession();
         Hashtable security_table = (Hashtable)session.getAttribute(getTempSecCacheKey());
         String pres_sec_setup = (String)session.getAttribute(PO_SECURITY);

         if (Str.isEmpty(object_names))
           return true;
         if(security_table==null)
         {
           security_table = new Hashtable();
           session.setAttribute(getTempSecCacheKey(), security_table);
         }

         StringTokenizer tokens = new StringTokenizer(object_names,",");
         HashSet new_db_objects = new HashSet();
         HashSet new_press_objects = new HashSet();
         ASPTransactionBuffer trans = getASPManager().newASPTransactionBuffer();


         while (tokens.hasMoreTokens())
         {
            String security_object = tokens.nextToken();
            if (security_table.containsKey(security_object))
            {
               if (!"T".equals(security_table.get(security_object)))
                  return false; // no need to proceed further
            }
            else //new security object
            {
               boolean gui_obj = security_object.indexOf("#")>0;
               if ((security_object.indexOf("/") > 0 && (security_object.indexOf(".page") > 0 || gui_obj) ) || (security_object.indexOf(".portlets.") > -1))
               {//is a press object
                  if (!gui_obj && !getASPManager().isPresentationObjectInstalled(security_object)) //pres object not insalled
                  {
                     security_table.put(security_object,"F");
                     return false; // no need to proceed further
                  }
                  if ("OFF".equals(pres_sec_setup)) //press object security off
                     security_table.put(security_object,"T");
                  else // new press object. should check from the database.
                  {
                     new_press_objects.add(security_object);
                     trans.addPresentationObjectQuery(security_object);
                  }
               }//is a db object
               else
               {
                  if (security_object.toUpperCase().indexOf("_API.") > -1 )
                  {
                     int index = security_object.indexOf(".");
                     String pkg_name =  security_object.substring(0,index);
                     String method_name = security_object.substring(index+1,security_object.length());
                     trans.addSecurityQuery(pkg_name, method_name);
                  }
                  else
                     trans.addSecurityQuery(security_object);
                  new_db_objects.add(security_object);
               }
            }
         }
         if (new_press_objects.size()==0 && new_db_objects.size()==0)//no new objects
            return true;

         if(isUndefined())
         {
            trans = getASPManager().performConfig(trans);
         }
         else
         {
            trans = getASPManager().perform(trans);
         }
         
         ASPBuffer buf = trans.getSecurityInfo();
         if (buf==null)
            return true;
         Iterator iter = new_db_objects.iterator();
         boolean has_access = true;

         while (iter.hasNext())
         {
            String sec_object = (String)iter.next();
            if (buf.itemExists(sec_object))
               security_table.put(sec_object,"T");
            else
            {
               security_table.put(sec_object,"F");
               has_access = false;
            }
         }

         iter = new_press_objects.iterator();

         while (iter.hasNext())
         {
            String sec_object = (String)iter.next();
            if (buf.namedItemExists(sec_object))
               security_table.put(sec_object,"T");
            else
            {
               security_table.put(sec_object,"F");
               has_access = false;
            }
         }
         return has_access;
      }
      catch(Throwable any)
      {
         error(any);
         return true;
      }
   }

   private String getTempSecCacheKey()
   {
      return getPoolKey().substring(0,getPoolKey().lastIndexOf('.'));
   }

   //==========================================================================
   //  Other public methods
   //==========================================================================

   /**
    * Set the page in state DEFINED. Call freeze() for all enclosed elements.
    * Put the page in the pool and lock it by the creator (ASPManager).
    *
    * @see ifs.fnd.asp.ASPPage#freeze
    */
   public void setDefined()
   {
      if (DEBUG) debug(this+": ASPPage.setDefined()");

      try
      {
         if( performWhileUndefined() )
            throw new FndException("FNDPAGEPERF: Not allowed to call perform() while the page is still undefined.");

         // if not from Logon page
         if (!Str.isEmpty(getASPManager().getUserId()))
         {
         // create popup contents; this must be done before freeze.
         for( int i=0; i<popups.size(); i++ )
         {
            ((ASPPopup)popups.elementAt(i)).addContent();
         }
         }

         freeze();
         profile = null;
         generatePageClientScript();
         //getASPManager().setASPPageHandle( ASPPagePool.addAndLock(this) );
         setAndLockPageHandle(); //JAPA
      }
      catch( Throwable any )
      {
         error(any);
    }
   }

   protected void setAndLockPageHandle() throws FndException//JAPA
   {
      //Bug 40931, start
      //getASPManager().setASPPageHandle( ASPPagePool.addAndLock(this) );
      getASPManager().setASPPageHandle( ASPPagePool.addAndLock(this, this) );
      //Bug 40931, end
   }

   /**
    * Saves the Layout for all ASPBlock in this ASPPage.
    */
   public void saveLayout()
    {
        int i;
        ASPContext ctx = getASPContext();
        String param;
        try
        {
            for(i=0;i<blocks.size();i++)
            {
                ((ASPBlock) blocks.elementAt(i)).getASPBlockLayout().saveLayout();
                ((ASPBlock) blocks.elementAt(i)).getASPRowSet().saveQuery();
            }
       }
       catch(Throwable any){error(any);}

    }

   boolean performWhileUndefined()
   {
      return undefined_perform;
   }

   void setPerformWhileUndefined()
   {
      undefined_perform = true;
   }

   //==========================================================================
   //  Methods for implementation of pool
   //==========================================================================

   /**
    * Freeze the page. Call freeze() for all enclosed elements.
    * Set the page in state DEFINED. Can only by called if the current
    * state of the page is UNDEFINED.
    */
   protected void doFreeze() throws FndException
   {
      if (DEBUG) debug(this+": ASPPage.doFreeze()");

      config.freeze();
      context.freeze();
      if(log.isUndefined())
         log.freeze();

      form.freeze();
      formatter.freeze();
      info_services.freeze();
      navigator.freeze();

      // Modified by Terry 20131016
      // Change to mutable attributes
      pre_bar_disabled           = bar_disabled;
      pre_header_disabled        = header_disabled;
      // Modified end
      pre_options_disabled       = options_disabled;
      pre_navigate_disabled      = navigate_disabled;
      pre_configuration_disabled = configuration_disabled;
      pre_help_disabled          = help_disabled;
      pre_home_icon_disabled     = home_icon_disabled;
      pre_application_search_disabled = application_search_disabled;
      pre_setting_disabled       = setting_disabled;
      pre_signout_disabled       = signout_disabled;
      pre_sub_header_disabled    = sub_header_disabled;
      pre_default_command_disabled  = default_command_disabled;
      pre_cstpane_disabled       = cstpane_disabled;
      pre_repositioning          = repositioning;
      pre_page_properties_disabled = page_properties_disabled;

      createPageProfile();

      if (portal!=null)
         portal.freeze();

      if (lov!=null)
         lov.freeze();

      for( int i=0; i<blocks.size(); i++ )
         ((ASPPoolElement)(blocks.elementAt(i))).freeze();

      for( int i=0; i<tables.size(); i++ )
         ((ASPPoolElement)(tables.elementAt(i))).freeze();

      for( int i=0; i<tab_containers.size(); i++ )
         ((ASPPoolElement)(tab_containers.elementAt(i))).freeze();

      for( int i=0; i<popups.size(); i++ )
         ((ASPPoolElement)(popups.elementAt(i))).freeze();

      // Call setDocMan() on all blocks
      for( int i=0; i<blocks.size(); i++ )
         ((ASPBlock)(blocks.elementAt(i))).initDocMan();

      // smart Freeze
      if (!this.forceClone() || !this.forceReset())
      {
         Class c = this.getClass();
         int j = 0;
         while(!c.getName().equals("ifs.fnd.asp.ASPPageProvider") && !c.getName().equals("ifs.fnd.asp.ASPPortletProvider"))
         {
             Field[] f = c.getDeclaredFields();
             if (ice_dispenser==null)
             {
                ice_dispenser = new IceCube[f.length];
             }
             else
             {
                IceCube[] tmp_dispenser = new IceCube[ice_dispenser.length+f.length];
                System.arraycopy(ice_dispenser,0,tmp_dispenser,0,ice_dispenser.length);
                ice_dispenser = tmp_dispenser;
             }
             for( int i=0 ;i<f.length;i++)
             {
                ice_dispenser[j] =  new IceCube(f[i],this);
                j++;
             }
             c = c.getSuperclass();
         }
      }
   }


   void forceDirty() throws FndException
   {
      if (DEBUG) debug(this+": ASPPage.forceDirty()");

      context.forceDirty();
      for( int i=0; i<blocks.size(); i++ )
         ((ASPBlock)(blocks.elementAt(i))).forceDirty();

      if (portal!=null)
         portal.forceDirty();
   }

   protected String getValidationMethod()
   {
       ASPManager mgr = getASPManager();
       ASPConfig cfg = getASPConfig();

       if (mgr.isExplorer())
       {
           if(IFRAME_VALIDATION.equalsIgnoreCase(cfg.getIEValidationMethod()))
              return IFRAME_VALIDATION;
           return ACTIVEX_VALIDATION;
       }
       return SCRIPT_VALIDATION;
   }


  /**
    * Reset the page. Call reset() for all enclosed elements.
    * Set the page in state DEFINED. Can only be called if the current
    * page is in state DIRTY or DEFINED. Prepare for releasing in the pool.
    */
   protected void doReset() throws FndException
   {
      if (DEBUG) debug(this+": ASPPage.doReset()");

      ASPManager mgr = getASPManager();
      mgr.pushCurrentPage(this);

      config.reset();
      context.reset();
      log.reset();

      form.reset();
      formatter.reset();
      info_services.reset();
      navigator.reset();

      // Modified by Terry 20131016
      // Change to mutable attributes
      bar_disabled             = pre_bar_disabled;
      header_disabled          = pre_header_disabled;
      // Modified end
      options_disabled         = pre_options_disabled;
      navigate_disabled        = pre_navigate_disabled;
      configuration_disabled   = pre_configuration_disabled;
      home_icon_disabled       = pre_home_icon_disabled;
      application_search_disabled = pre_application_search_disabled;
      default_command_disabled = pre_default_command_disabled;
      portlet_conf_disabled    = false;
      modifying_views_disabled = false;
      iee_dockout_enabled      = true;
      slim_mode                = false;
      help_disabled            = pre_help_disabled;
      setting_disabled         = pre_setting_disabled;
      sub_header_disabled      = pre_sub_header_disabled;      
      signout_disabled         = pre_signout_disabled;
      cstpane_disabled         = pre_cstpane_disabled;
      page_properties_disabled  = pre_page_properties_disabled;      

      if (portal!=null)
         portal.reset();

      if (lov!=null)
         lov.reset();

      for( int i=0; i<blocks.size(); i++ )
         ((ASPPoolElement)(blocks.elementAt(i))).reset();

      for( int i=0; i<tables.size(); i++ )
         ((ASPPoolElement)(tables.elementAt(i))).reset();

      for( int i=0; i<tab_containers.size(); i++ )
         ((ASPPoolElement)(tab_containers.elementAt(i))).reset();

      for( int i=0; i<popups.size(); i++ )
      {
         ASPPopup pop = (ASPPopup)popups.elementAt(i);
         //if(pop.getName().startsWith("lov_popup_") && pop.isUndefined())
         if( pop.isUndefined() )
         {
             popups.removeElementAt(i);
             i--;
             continue;
         }
         //ASPPoolElement elm = ((ASPPoolElement)(popups.elementAt(i)));
         //elm.reset();
         pop.reset();
      }

      asp_profile = null;
      page_prf    = null;
      user_profile_prepared = false;
      profile = null;
      //profile_modified = true;
      portal_views = null;
      portlet_name = null;
      portlet_state = 0;

      if(DEBUG) debug(this+": ASPPage.doReset(): asp_profile=NULL");

      // If the last request was done under reauthentication we should remove the
      // decision buffer.
      if ("Y".equals(mgr.readValue("__REAUTHENTICATION")))
         mgr.removeDecisionBuffer();

      mgr.popCurrentPage(this);
   }

  /**
   * Override these functions if you want to handle Reset and/or Clone manually.
   * Every data tape is not supported in automatic handling. This may be the only
   * way to get certain pages to run.
   */

   protected boolean forceReset()
   {
      return false;
//      return true;
   }

   protected boolean forceClone()
   {
      return false;
//      return true;
   }




  /**
    * Reset the page without asking the page how to do it.
    */
   protected void smartReset() throws FndException
   {
      if (DEBUG) debug(this+": ASPPage.smartReset()");

      Class c = this.getClass();
      int j = 0;
      while(!c.getName().equals("ifs.fnd.asp.ASPPageProvider") && !c.getName().equals("ifs.fnd.asp.ASPPortletProvider"))
      {
          Field[] f = c.getDeclaredFields();
          for( int i=0 ;i<f.length;i++)
          {
             if (ice_dispenser[j].class_nr==__UNSUPPORTED || ice_dispenser[j].class_nr>=__STRING)
                ice_dispenser[j].thawn(f[i],this);
             j++;
          }
          c = c.getSuperclass();
      }
   }

  /**
    * Clone the page without asking the page how to do it.
    */
   protected void smartClone(ASPPoolElement page) throws FndException
   {
      if (DEBUG) debug(page+": ASPPage.smartClone()");

      Class c = page.getClass();
      int j = 0;
      while(!c.getName().equals("ifs.fnd.asp.ASPPageProvider") && !c.getName().equals("ifs.fnd.asp.ASPPortletProvider"))
      {
          Field[] f = c.getDeclaredFields();
          for( int i=0 ;i<f.length;i++)
          {
             ice_dispenser[j].thawn(f[i],page);
             j++;
          }
          c = c.getSuperclass();
      }
   }

   /**
    * Activate the page after feching from pool. Call activate() for
    * all enclosed elements.
    * Can only be called if the current object is in state DEFINED.
    */
   protected void doActivate() throws FndException
   {
      if (DEBUG) debug(this+": ASPPage.doActivate()");

      ASPManager mgr = getASPManager();
      mgr.pushCurrentPage(this);

      config.activate();
      context.activate();
      log.activate();

      form.activate();
      formatter.activate();
      info_services.activate();
      navigator.activate();

      for( int i=0; i<blocks.size(); i++ )
         ((ASPPoolElement)(blocks.elementAt(i))).activate();

      for( int i=0; i<tables.size(); i++ )
         ((ASPPoolElement)(tables.elementAt(i))).activate();

      for( int i=0; i<tab_containers.size(); i++ )
         ((ASPPoolElement)(tab_containers.elementAt(i))).activate();

      for( int i=0; i<popups.size(); i++ )
         ((ASPPoolElement)(popups.elementAt(i))).activate();

//      activateProfile();
      if (lov!=null)
         lov.activate();

      if (portal!=null)
         portal.activate();

      //store this page's javascript in dynamic cache (clustering support)
      if ("Y".equals(config.getParameter("ADMIN/DYNAMIC_OBJECT_CACHE/ENABLED","N")))
      {
         String dyna_key = getScriptCacheKey();
         if (! DynamicObjectCache.itemExists(dyna_key,mgr) )
            DynamicObjectCache.put(dyna_key, java_script, "text/javascript", mgr, true);
      }

      verify();
      mgr.popCurrentPage(this);
   }


   //=============================================================================
   //  Profile
   //=============================================================================

   /**
    * Inherited interface.
    * Create and return new instance of corresponding profile class.
    * Return null if the class doesn't support profile handling.
    */
   protected ASPPoolElementProfile newProfile()
   {
      return new ASPPageProfile();
   }

   private void activateProfile() throws FndException
   {
      if(DEBUG) debug(this+": ASPPage.activateProfile()");

      asp_profile = ASPProfileCache.get(this,false); //global_url=false
      if(DEBUG) debug(this+": ASPPage.activateProfile(): asp_profile="+asp_profile);
   }

  private void activatePageProfile() throws FndException
   {
      if(DEBUG) debug(this+": ASPPage.activatePageProfile()");

      page_prf = ASPProfileCache.get(this,true); //global_url=true
      if(DEBUG) debug(this+": ASPPage.activatePageProfile(): page_prf="+page_prf);
   }

   private void createPageProfile() throws FndException
   {
      profile = new ASPPageProfile();
      profile.construct(this);
      user_profile_prepared = false;
   }

   private void prepareProfileInfo()
   {
      if (isLogonPage()) return;

      if( user_profile_prepared ) return;

      if(DEBUG) debug(this+": ASPPage.prepareProfileInfo()");

      try
      {
         if(profile == null) createPageProfile();
         ASPProfile aspprf = getPageProfile();
         if(DEBUG) debug("  aspprf = "+aspprf);
         profile = (ASPPageProfile)aspprf.get(this,profile);
         if(DEBUG){
             AutoString out = new AutoString();
             profile.showContents(out);
             debug("prepareProfileInfo():"+
                   "\n\t\t  profile["+profile+"]="+out.toString());
         }
                         
         modifyingMutableAttribute("PROFILE");
         user_profile_prepared = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }


   /**
    * Store the profile information in the database.
    *
    * @see ifs.fnd.asp.ASPPage.getPageProfile
    */
   private void writeProfileItem(String item_name, Object obj)
   {
      if(DEBUG) debug(this+": ASPage.saveProfile()");
      try
      {

         if(profile==null)
            prepareProfileInfo();

         profile.writeItem(item_name, obj);
         modifyingMutableAttribute("PROFILE");
         user_profile_prepared = false;

         ASPProfile prf = getPageProfile();
         if(DEBUG) debug("  profile="+prf);
         prf.update(this,profile);
         if(DEBUG) debug(this+": ASPage.saveProfile()  profile:"+profile);
         //prf.save(this);
         prf.save(this);
      }
      catch( Throwable any )
      {
         error(any);
      }

   }

   private Object readProfileItem(String item_name)
   {
      ASPManager mgr = getASPManager();
      if(isLogonPage() || mgr.isEmpty(mgr.getRealUserName()))
         return null;

      if(profile==null)
         prepareProfileInfo();
      return profile.readItem(item_name);
   }

   /**
    * Remove profile information from database for this ASPPage.
    */
   public void removeGlobalProfileItem(String item_name)
   {
      if(DEBUG) debug(this+": ASPPage.removeProfile()");
      try
      {
         //if(profile==null)
            prepareProfileInfo();
         profile.removeItem(item_name);

         ASPProfile prf  = getPageProfile();
         profile.markRemoveFlag(item_name);
         prf.update(this,profile);
         //prf.save(this);
         prf.save(this);
         user_profile_prepared = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }


   /**
    * Writes a named buffer to the user profile.
    * The cached profile information will be updated directly, but the
    * profile information stored in the database will be updated only
    * if this function is called within the submitCustomization() function.
    */
   public final void writeGlobalProfileBuffer( String name, ASPBuffer buf )
   {
     writeGlobalProfileBuffer( name, buf, true );
   }

   /*
    * Framework specific profiles should be written using custom_value=false
    */
   public final void writeGlobalProfileBuffer( String name, ASPBuffer buf, boolean custom_values )
   {
      if(getASPProfile().isUserProfileDisabled())
         return;
      if (custom_values)
         name=PRF_CUSTOM_VALUES+name+ProfileUtils.ENTRY_SEP+"Buffer";
      writeProfileItem( name, ProfileBuffer.bufferToProfileBuffer(buf.getBuffer()) );
   }

   /**
    * Reads a named buffer from the user profile.
    * Returns null if such buffer does not exist.
    * Should be used for retrieving component specific (custom)
    * profile buffers.
    */
   public final ASPBuffer readGlobalProfileBuffer( String name )
   {
       return readGlobalProfileBuffer( name, true);
   }

   /*
    * Framework specific profiles should be read using custom_value=false
    */
   public final ASPBuffer readGlobalProfileBuffer( String name, boolean custom_values )
   {
      if (custom_values)
        name=PRF_CUSTOM_VALUES+name+ProfileUtils.ENTRY_SEP+"Buffer";
      Buffer buf = (Buffer)readProfileItem( name );
      return buf==null ? null : (new ASPBuffer(getASPManager())).construct( (Buffer)buf.clone() );
   }

   /**
    * Writes a named string to the user profile.
    * The cached profile information will be updated directly, but the
    * profile information stored in the database will be updated only
    * if this function is called within the submitCustomization() function.
    */
   public final void writeGlobalProfileValue( String name, String value )
   {
      writeGlobalProfileValue( name, value, true );
   }

   public final void writeGlobalProfileValue( String name, String value, boolean custom_values )
   {
      if(getASPProfile().isUserProfileDisabled())
         return;
      if (custom_values)
         name = PRF_CUSTOM_VALUES+name+ProfileUtils.ENTRY_SEP+"String" ;
      if(DEBUG) debug(this+": ASPPage.writeGlobalProfileValue("+name+","+value+")");
      writeProfileItem( name, value );
   }

   
   final void writeGlobalProfileValueForDelete( String name, String value, String item_name )
   {
      if(DEBUG) debug(this+": ASPPage.writeGlobalProfileValueForDelete("+name+","+value+")");
      if(profile.checkItemFromBase(item_name))
         writeProfileItem( name, value );
   }

   public final String readGlobalProfileValue( String name, String def_value, boolean custom_values )
   {
      if (custom_values)
         name = PRF_CUSTOM_VALUES+name+ProfileUtils.ENTRY_SEP+"String";
      if(DEBUG) debug(this+": ASPPage.readGlobalProfileValue("+name+","+def_value+")");
      String str = (String)readProfileItem( name );
      return str==null ? def_value : str;
   }

   /**
    * Reads a named string from the user profile.
    * Returns 'def_value' if such string does not exist.
    */
   public final String readGlobalProfileValue( String name, String def_value )
   {
      return readGlobalProfileValue(name,def_value,true);
   }

   /**
    * Reads a named string from the user profile.
    * Returns null if such string does not exist.
    */
   public final String readGlobalProfileValue( String name )
   {
      return readGlobalProfileValue(name,null,true);
   }


   public final String readGlobalProfileValue( String name, boolean custom_values )
   {
      return readGlobalProfileValue(name,null,custom_values);
   }

   String readGlobalProfileMask(int type_id)
   {
      String decimal_separator;
      String group_separator;
      String short_date_pattern;
      String short_date_separator;
      String short_time_pattern;
      String short_time_separator;
      //String decimal_symbol, value_symbol;
      String decimal_size_str,group_size_str;      
      int decimal_size,group_size;
      

      switch(type_id)
      {
         case DataFormatter.DATE:
            short_date_pattern = readGlobalProfileValue(PRF_REGIONAL_SETTINGS_DATE + "/SHORT_DATE_PATTERN",false);
            short_date_separator   = readGlobalProfileValue(PRF_REGIONAL_SETTINGS_DATE + "/DATE_SEPARATOR",false);
            if (short_date_pattern!=null && short_date_separator!=null)
               short_date_pattern = short_date_pattern.replaceAll("/", short_date_separator);
            return short_date_pattern;
         case DataFormatter.TIME:
            short_time_pattern = readGlobalProfileValue(PRF_REGIONAL_SETTINGS_DATE + "/SHORT_TIME_PATTERN",false);
            short_time_separator   = readGlobalProfileValue(PRF_REGIONAL_SETTINGS_DATE + "/TIME_SEPARATOR",false);
            if (short_time_pattern!=null)
            {
               short_time_pattern = short_time_pattern.replaceAll("tt", "a");
               if (short_time_separator!=null)
                  short_time_pattern = short_time_pattern.replaceAll(":", short_time_separator);
            }
            return short_time_pattern;
         case DataFormatter.DATETIME:
            short_date_pattern = readGlobalProfileMask(DataFormatter.DATE);
            short_time_pattern = readGlobalProfileMask(DataFormatter.TIME);
            if (short_date_pattern!=null && short_time_pattern != null)
               return short_date_pattern + " " + short_time_pattern;
            else
               return null;
         case DataFormatter.NUMBER:
            decimal_size_str = readGlobalProfileDecimalDigitSize(DataFormatter.NUMBER);
            group_size_str = readGlobalProfileGroupingSize(DataFormatter.NUMBER);
            break;
         case DataFormatter.MONEY:
            decimal_size_str = readGlobalProfileDecimalDigitSize(DataFormatter.MONEY);
            group_size_str = readGlobalProfileGroupingSize(DataFormatter.MONEY);            
            break;
         case DataFormatter.INTEGER:
         default:
            decimal_size_str = readGlobalProfileDecimalDigitSize(DataFormatter.INTEGER);
            group_size_str = readGlobalProfileGroupingSize(DataFormatter.INTEGER);
            break;
      }

      if (decimal_size_str == null && group_size_str == null)
            return null;
      
      try
      {
         decimal_size = Integer.parseInt(decimal_size_str );
      }
      catch (Exception e)
      {
         decimal_size = 2;
         //debug(" Error occured while parsing DECIMAL SIZE from profile.");
         Alert.add(" Error occured while parsing DECIMAL SIZE from profile.");
      }
      
      return getASPManager().getNumericFormatMask(group_size_str, decimal_size,type_id);

   }

   /**
    * Writes a named boolean flag to the user profile.
    * The cached profile information will be updated directly, but the
    * profile information stored in the database will be updated only
    * if this function is called within the submitCustomization() function.
    */
   public final void writeGlobalProfileFlag( String name, boolean value )
   {
      if(getASPProfile().isUserProfileDisabled())
         return;
      if (value)
         writeProfileItem( PRF_CUSTOM_VALUES+name+"^Boolean", "TRUE" );
      else
         writeProfileItem( PRF_CUSTOM_VALUES+name+"^Boolean", "FALSE" );
   }

   /**
    * Reads a named boolean flag from the user profile.
    * Returns 'def_value' if such string does not exist.
    */
   public final boolean readGlobalProfileFlag( String name, boolean def_value )
   {
      String str = (String)readProfileItem( PRF_CUSTOM_VALUES+name+"^Boolean");
      if (str==null) return def_value;
      if ( "TRUE".equals( str ) )
         return true;
      else
         return false;
   }

   /**
    * Return the decimal ceperator saved in the profile. This can be saved from any client(.net or web)
    * @param type_id data type. This can be DataFormatter.MONEY or DataFormatter.INTEGER or DataFormatter.NUMBER
    */

   public String readGlobalProfileDecimalSeperator(int type_id)
   {
      if (DataFormatter.MONEY==type_id)
         return  (String)readProfileItem(PRF_REGIONAL_SETTINGS_CURRENCY + "/DECIMAL_SEPARATOR");
      if (DataFormatter.INTEGER==type_id || DataFormatter.NUMBER==type_id)
         return  (String)readProfileItem(PRF_REGIONAL_SETTINGS_NUMERIC + "/DECIMAL_SEPARATOR");
      return null;
   }

   /**
    * Return the group ceperator saved in the profile. This can be saved from any client(.net or web)
    * @param type_id data type. This can be DataFormatter.MONEY or DataFormatter.NUMBER
    */

   public String readGlobalProfileGroupSeperator(int type_id)
   {
      if (DataFormatter.MONEY==type_id)
         return  (String)readProfileItem(PRF_REGIONAL_SETTINGS_CURRENCY + "/GROUP_SEPARATOR");
      if (DataFormatter.INTEGER==type_id || DataFormatter.NUMBER==type_id)
         return  (String)readProfileItem(PRF_REGIONAL_SETTINGS_NUMERIC + "/GROUP_SEPARATOR");
      return null;

   }

    /**
    * Return the group size saved in the profile. This can be saved from any client(.net or web)
    * @param type_id data type. This can be DataFormatter.MONEY or DataFormatter.INTEGER or DataFormatter.NUMBER
    */

   public String readGlobalProfileGroupingSize(int type_id)
   {
      if (DataFormatter.MONEY==type_id)
         return  (String)readProfileItem(PRF_REGIONAL_SETTINGS_CURRENCY + "/GROUP_SIZES");
      if (DataFormatter.INTEGER==type_id || DataFormatter.NUMBER==type_id)
         return  (String)readProfileItem(PRF_REGIONAL_SETTINGS_NUMERIC + "/GROUP_SIZES");
      return null;
   }

    /**
    * Return the number of decimal digits set in the profile. This can be saved from any client(.net or web)
    * @param type_id data type. This can be DataFormatter.MONEY or DataFormatter.INTEGER
    */
   public String readGlobalProfileDecimalDigitSize(int type_id)
   {
      Integer val=null;
      if (DataFormatter.MONEY==type_id)
         val =  (Integer)readProfileItem(PRF_REGIONAL_SETTINGS_CURRENCY + "/DECIMAL_DIGITS");
      if (DataFormatter.INTEGER==type_id || DataFormatter.NUMBER==type_id)
         val =  (Integer)readProfileItem(PRF_REGIONAL_SETTINGS_NUMERIC + "/DECIMAL_DIGITS");
      if (val != null)
         return val.toString();
      return null;
   }


   private void updatePopups()
   {
      String name;
      int    size = popups.size();

      synchronized(popups)
      {
         for( int i=0; i<size; i++ )
         {
            name = ((ASPPopup)(popups.elementAt(i))).getName();
            if ( name.startsWith("MyLink") ||
                 name.equals("navigate") ||
                 name.equals("views") ||
                 name.startsWith("more_views") ||
                 name.startsWith("config_views") ||
                 name.startsWith("help") ||
                 name.startsWith("options") )
            {
               popups.removeElementAt(i);
               i--;
               size--;
            }
         }

         //profile_modified = false;
         if(portal==null || (portal!=null && !portal.isCustomizeMode()))
         {
            try
            {
               newASPPopup("views", (ASPPoolElement)this);
               int i = popups.indexOf(getASPPopup("views"));
               ((ASPPopup)popups.elementAt(i)).addContent();
               ((ASPPopup)popups.elementAt(i)).freeze();
            }
            catch ( Throwable e )
            {
               error(e);
            }
         }
         newASPPopup("navigate", (ASPPoolElement)this);
         try
         {
            int i = popups.indexOf(getASPPopup("navigate"));
            ((ASPPopup)popups.elementAt(i)).addContent();
            size = popups.size();
            for (int j=i; j<size; j++)
               ((ASPPopup)popups.elementAt(j)).freeze();
         }
         catch ( Throwable e )
         {
            error(e);
         }

         newASPPopup("more_views", (ASPPoolElement)this);
         try
         {
            int i = popups.indexOf(getASPPopup("more_views"));
            ((ASPPopup)popups.elementAt(i)).addContent();
            size = popups.size();
            for (int j=i; j<size; j++)
               ((ASPPopup)popups.elementAt(j)).freeze();
         }
         catch ( Throwable e )
         {
            error(e);
         }
         newASPPopup("options", (ASPPoolElement)this);
         try
         {
            int i = popups.indexOf(getASPPopup("options"));
            ((ASPPopup)popups.elementAt(i)).addContent();
            size = popups.size();
            for (int j=i; j<size; j++)
               ((ASPPopup)popups.elementAt(j)).freeze();
         }
         catch ( Throwable e )
         {
            error(e);
         }
         newASPPopup("help", (ASPPoolElement)this);
         try
         {
            int i = popups.indexOf(getASPPopup("help"));
            ((ASPPopup)popups.elementAt(i)).addContent();
            size = popups.size();
            for (int j=i; j<size; j++)
               ((ASPPopup)popups.elementAt(j)).freeze();
         }
         catch ( Throwable e )
         {
            error(e);
         }
         newASPPopup("config_views", (ASPPoolElement)this);
         try
         {
            int i = popups.indexOf(getASPPopup("config_views"));
            ((ASPPopup)popups.elementAt(i)).addContent();
            size = popups.size();
            for (int j=i; j<size; j++)
               ((ASPPopup)popups.elementAt(j)).freeze();
         }
         catch ( Throwable e )
         {
            error(e);
         }

      }
   }

   public ASPPoolElement clone( Object mgr ) throws FndException
   {
      if (DEBUG) debug(this+": ASPPage.frameworkClone("+mgr+")");
      ASPPoolElement page = frameworkClone(mgr,false);
      return page;
   }
   /**
    * Clone the page and all enclosed elements.
    * The new page is always in state DEFINED.
    * Set default values for all mutable attributes.
    */

   public final ASPPoolElement frameworkClone( Object mgr,boolean smart) throws FndException
   {
      if (DEBUG) debug(this+": ASPPage.clone("+mgr+")");

      if ( isNotDefined() )
         throw new FndException("FNDPAGUNDEF: Object is in UNDEFINED or LOADED_DIRTY state!");

      ASPPage page = newInstance( (ASPManager)mgr );

      page.setVersion(this.getVersion());

      page.blocks         = new Vector(this.blocks.size());
      page.tables         = new Vector(this.tables.size());
      page.tab_containers = new Vector(this.tab_containers.size());
      page.fields         = new Hashtable(Math.max(this.fields.size(),1));
      page.long_year_fields = new HashSet(Math.max(this.long_year_fields.size(),1));
      page.popups         = new Vector(this.popups.size());

      page.log            = (ASPLog)          this.log          .clone(page);
      page.config         = (ASPConfig)       this.config       .clone(page);
      page.context        = (ASPContext)      this.context      .clone(page);
      page.form           = (ASPForm)         this.form         .clone(page);
      page.formatter      = (ASPHTMLFormatter)this.formatter    .clone(page);
      page.info_services  = (ASPInfoServices) this.info_services.clone(page);
//      page.wizard         = (ASPWizard)       this.wizard       .clone(page);
      page.navigator      = (ASPNavigator)    this.navigator    .clone(page);

      page.anonym_blk_cnt     = this.anonym_blk_cnt;
      page.anonym_tbl_cnt     = this.anonym_tbl_cnt;
      page.anonym_tabc_cnt    = this.anonym_tabc_cnt;
      page.local_def_key_value= this.local_def_key_value;

      page.page_path        = this.page_path;
      page.url              = this.url;
      page.pool_key         = this.pool_key;
      page.profile_key      = this.profile_key;
      page.form_tag1        = this.form_tag1;
      page.form_tag2        = this.form_tag2;
      page.form_tag_action  = this.form_tag_action;
      page.script_file_name = this.script_file_name;
      page.dic_page_key     = this.dic_page_key;
      page.module           = this.module;
      page.page_name        = this.page_name;
      page.java_script      = this.java_script;
      page.is_logon_page    = this.is_logon_page;
      page.is_error_page    = this.is_error_page;
      
      page.is_parent_page   = this.is_parent_page;
      page.is_iframe_parent = this.is_iframe_parent;
      page.child_frame_names= this.child_frame_names;

      page.is_progressbar_enabled = this.is_progressbar_enabled;
      page.has_tab_containers     = this.has_tab_containers;
      page.has_block_layouts      = this.has_block_layouts;
      page.repositioning        = page.pre_repositioning                  = pre_repositioning;

      page.multiple_frame_error = this.multiple_frame_error;
      page.footer_disabled      = this.footer_disabled;
      page.disable_validation    = this.disable_validation;
      page.slim_mode            = false;
      page.home_icon_disabled   = this.home_icon_disabled;
      page.application_search_disabled = this.application_search_disabled;
      page.default_command_disabled = this.default_command_disabled;
      page.convert_gettopost = this.convert_gettopost;
      page.parent_frame_pagename = this.parent_frame_pagename;
      page.child_frame_help_ref = this.child_frame_help_ref;

      // Modified by Terry 20131016
      // Change to mutable attributes
      page.bar_disabled                = page.pre_bar_disabled                   = pre_bar_disabled;
      page.header_disabled             = page.pre_header_disabled                = pre_header_disabled;
      // Modified end
      page.options_disabled            = page.pre_options_disabled               = pre_options_disabled;
      page.navigate_disabled           = page.pre_navigate_disabled              = pre_navigate_disabled;
      page.configuration_disabled      = page.pre_configuration_disabled         = pre_configuration_disabled;
      page.help_disabled               = page.pre_help_disabled                  = pre_help_disabled;
      page.signout_disabled            = page.pre_signout_disabled               = pre_signout_disabled;
      page.setting_disabled            = page.pre_setting_disabled               = pre_setting_disabled;
      page.sub_header_disabled         = page.pre_sub_header_disabled            = pre_sub_header_disabled;
      page.home_icon_disabled          = page.pre_home_icon_disabled             = pre_home_icon_disabled;
      page.application_search_disabled = page.pre_application_search_disabled    = pre_application_search_disabled;
      page.default_command_disabled    = page.pre_default_command_disabled       = pre_default_command_disabled;
      page.cstpane_disabled            = page.pre_cstpane_disabled               = pre_cstpane_disabled;
      page.page_properties_disabled     = page.pre_page_properties_disabled        = pre_page_properties_disabled;      
      page.profile                     = null;
      page.portlet_conf_disabled       = false;
      page.modifying_views_disabled    = false;
      page.iee_dockout_enabled         = true;
      
      for( int i=0; i<this.popups.size(); i++ )
         page.popups.addElement( ((ASPPoolElement)(this.popups.elementAt(i))).clone(page) );

      for( int i=0; i<this.blocks.size(); i++ )
         page.blocks.addElement( ((ASPPoolElement)(this.blocks.elementAt(i))).clone(page) );

      for( int i=0; i<this.tables.size(); i++ )
         page.tables.addElement( ((ASPPoolElement)(this.tables.elementAt(i))).clone(page) );

      for( int i=0; i<this.tab_containers.size(); i++ )
         page.tab_containers.addElement( ((ASPPoolElement)(this.tab_containers.elementAt(i))).clone(page) );

      if(lov!=null)
         page.lov = (ASPLov)this.lov.clone(page);

      if(portal!=null)
         page.portal = (ASPPortal)this.portal.clone(page);

      if (smart)
      {
         page.ice_dispenser  = this.ice_dispenser;
         smartClone(page);
      }

      page.page_keys = this.page_keys;

      page.setCloned();
      page.verify();
      this.verify();

      return page;
   }

   /**
   * Returns a new instance of ASPPage class.
   */
   protected ASPPage newInstance( ASPManager mgr ) throws FndException
   {
      return new ASPPage(mgr,null);
   }

   //==========================================================================
   // Navigator and LOV Generation
   //==========================================================================

   void generate() throws FndException
   {
      if(DEBUG) debug("ASPPage.generate()");
      verify();
      navigator.generate();
      if (lov!=null) lov.generate();
   }

   //==========================================================================
   // Client Java Script Generation
   //==========================================================================

   /**
    * Generate and return JavaScript code for <HEAD>. Needed for ASPPopups.
    *
    * Note on the somewhat cryptic Javascript code:
    * In order to make submenus work, the method _menu() is called when clicking on menu items.
    * If the item leads to a submenu, a special flag is set (_handle_menus) to true, which tells
    * hideMenus(), which is called on all mouseclicks, not to hide any menus. _menu() also takes
    * care of hiding all submenus that were previously opened with showMenu().
    * In Netscape, a timer is set to hide all menus after the click has been processed.
    *
    * Also note that all the above has been moved to generateClientScript().
    */
   String getHeadTag()
   {
      AutoString head = new AutoString();

      //if ( profile_modified || (portal!=null && portal.isSubmitMode()) )  //commented as updatePopups isn't called when the page is cloned.
      updatePopups();

      head.append("<!-- ASPPage.getHeadTag() -->\n");
      head.append("<script language=\"JavaScript\">\n");

      head.append(ASPConfigFile.APP_PATH + " = \""+ config.getApplicationPath() +"\";\n");
      head.append(ASPConfigFile.APP_ROOT + "=\""+ config.getApplicationPath() +"/\";\n");
      head.append(ASPConfigFile.COOKIE_PATH + "=\""+ config.getCookiePath() +"/\";\n");
      head.append(ASPConfigFile.COOKIE_ROOT_PATH + "=\"" + config.getCookieRootPath() + "\";\n");
      head.append(ASPConfigFile.COOKIE_PREFIX + "=\""+ config.getCookiePathPrefix() + "\";\n");
      head.append(ASPConfigFile.COOKIE_DOMAIN + "=\""+ config.getCookiePathDomain() + "\";\n");

      head.append("THEME=\"",getASPManager().getUserTheme()+"/\";\n");
              
      head.append("STD_PORTLET="+getASPManager().isStdPortlet()+";\n");
      head.append("IS_RTL="+getASPManager().isRTL()+";\n");
      //head.append("  if (IS_RTL)\n");
      if (getASPManager().isRTL())
         head.append("     document.dir = 'rtl';\n"); 
      head.append("</script>\n");

      head.append(getASPManager().getScriptFileTag());
      //head.append(config.getGenericClientScript());
      //head.append(config.getConstantClientScript());

      head.append("<script language=\"JavaScript\">\n");
      //Bug 47934, start
      String current_user=getASPManager().getCookiePrefix();
      if (!Str.isEmpty(current_user))
      {
          String _domain="";
          String _user="";
          int bslash_ix=current_user.indexOf("\\");
          //replace single backslash with double backslash
          if (bslash_ix>0)
          {
            _domain=current_user.substring(0,bslash_ix);
            _user=current_user.substring(bslash_ix,current_user.length());
            current_user=_domain+"\\"+_user;
          }
      }
      head.append("CURRENT_USER='"+current_user+"';\n");
      // Added by Jack Zhang,20100915 16:18:33
      head.append("CURR_USERNAME='" + getASPManager().getCSVValue("#USER_NAME#")+"';\n");
      // Added end
      //Bug 47934, end
      head.append("AUTH_COOKIE='"+config.getAuthUserCookieName()+"';\n");
      head.append("</script>\n");

      head.append(config.getCalendarScript());

      head.append(getRestrictHistoryScript());

      head.append(BEGIN_SCRIPT_TAG,"\n");
      head.append("var __READY = true;\n");
      head.append("var __POPUPS_READY = false;\n");
      head.append(END_SCRIPT_TAG,"\n");

      return head.toString();
   }

   String getRestrictHistoryScript()
   {
      ASPManager mgr = getASPManager();
      if (config.isBrowserHistoryRestricted()
         && !config.isUserExternallyIdentified()
         && mgr.getURL().indexOf(config.getLogonURL())==-1)
      {
         String params =   config.getParameter("APPLICATION/LOCATION/STYLESHEETS","../common/stylesheets/+")+ mgr.getCSSFileName() + "^" +
                           mgr.translate("FNDUNAUTHPAGETITLE: Access Violation") + "^" +
                           mgr.translate("FNDUNAUTHMESSAGE: Unauthorized Access") + "^" +
                           mgr.translate("FNDUNAUTHBUTTONCAPTION: Log On") + "^" +
                           config.getApplicationPath()+ "^" +config.getLogonURL();
         String script = "\n<script language=javascript>\n"+
                           "if('"+context.getCookie(config.getAuthUserCookieName())+"'!=readCookie('"+config.getAuthUserCookieName()+"'))\n{\n";
         if(mgr.isExplorer())
         {
            script += "   document.execCommand(\"Stop\");\n"+
                      "   location.replace('"+ mgr.getUnauthorizedAccessPage() +"?' + decodeUnicode(\""+ params+ "\"));\n";
         }
         else
         {
            script +=  "   window.stop();\n"+
                       "   location.replace('"+ mgr.getUnauthorizedAccessPage() +"?' + decodeUnicode(\""+ params+ "\"));\n";
         }
         script += "}\n</script>\n";
         return script;
      }
      else
        return "";
   }

   void generatePopupClickScript( AutoString str )
   {
      //moved code to clientscript.js
      /*
      if(getASPManager().isExplorer()||getASPManager().isMozilla())
      {
         for( int i=0; i<popups.size(); i++ )
         {
            ASPPopup pop = (ASPPopup)popups.elementAt(i);
            if(pop.usedInRequest())
               str.append("\tdocument.getElementById(\"m",addProviderPrefix(),pop.getName(),"\").style.visibility = \"hidden\";\n");
         }
      }
      else
      {
         for( int i=0; i<popups.size(); i++ )
         {
            ASPPopup pop = (ASPPopup)popups.elementAt(i);
            if(pop.usedInRequest())
               pop.generateNetscapeHideScript(str);
         }
      }
       */
   }

   void generatePopupDefinitions( AutoString buf )
   {

      if(getVersion() < 3)
         return;

      if(portal!=null)
         portal.generatePopupDefinitions(buf);

      if(popups.size() < 1)
         return;

      for( int i=0; i<popups.size(); i++ )
      {
         ASPPopup pop = (ASPPopup)popups.elementAt(i);
         if(pop.usedInRequest())
            buf.append(pop.generateDefinition());
      }

      buf.append(BEGIN_SCRIPT_TAG);
      if (getASPManager().isStdPortlet())
         buf.append("\n__READY = true;");
      buf.append("\n__POPUPS_READY = true;\n");
      buf.append(END_SCRIPT_TAG);

   }

   void appendBlockModeVariables( AutoString code )
   {
       String current_block_name = "";
       code.append(BEGIN_SCRIPT_TAG);
       for( int i=0; i<blocks.size(); i++ )
       {
          ASPBlock blk = (ASPBlock)(blocks.elementAt(i));
          String blkname = blk.getName();
          code.append(blkname,"_IN_FIND_MODE = ",blk.getASPBlockLayout().isFindLayout()+";\n");

          if (blk.getASPBlockLayout().isVisible())
              current_block_name = blkname;
       }
       code.append("__CURRENT_BLOCK_NAME = '",current_block_name,"';\n"); 
       code.append(END_SCRIPT_TAG);
   }

   /**
    * Create the HTML contents to show tooltips of the fields.
    */
   public void appendTooltipTag( AutoString out )
   {
      if ( DEBUG ) debug(this+": ASPPage.appendTooltipTag()");

      out.append("\n<div id=\"tooltip\" class=\"tooltip\" nowrap style=\"border:1px solid black;position:absolute;visibility:hidden;\"></div>\n");
   }

   private void appendCalendarTag( AutoString out )
   {
      if ( DEBUG ) debug(this+": ASPPage.appendCalendarTag()");
      ASPManager mgr = getASPManager();
           
      out.append("\n<STYLE type=text/css>");
      out.append("\n#calendar_tag ");
      out.append("\n{");
      out.append("\n   WIDTH: 0px; POSITION: absolute; HEIGHT: 0px;");
      out.append("\n}");
      out.append("\n</STYLE>"); 
      
      out.append("\n<div id=calendar_tag FRAMEBORDER=0 style=\"background-color:transparent;visibility:hidden;\">");
      out.append("\n         <IFRAME SRC= \""+ getASPConfig().getScriptsLocation() +"calendar.htm\" name=\"calendar\" id=\"calendar\" FRAMEBORDER=0 SCROLLING=no style=\"background-color:transparent;width:100%;height:100%;Z-INDEX: 999;\">");
      out.append("\n         </IFRAME></div>");      
      
   }

   /**
    * Create the HTML to show all the broadcast messages loaded
    */
   private void appendMessageWindowTag( AutoString out )
   {
      if ( DEBUG ) debug(this+": ASPPage.appendMessageWindowTag()");
            
      out.append("\n<div class=MessageTextWindow id=message_window FRAMEBORDER=0 style=\"position:absolute; width:500px; visibility:hidden;\"></div>");
      
   }
   
   /**
    * Create the HTML contents to show application search What's that.
    */
   private void appendApplicationSearchHelpTag(AutoString out)
   {
      if ( DEBUG ) debug(this+": ASPPage.appendApplicationSearchHelpTag()");
      ASPManager mgr = getASPManager();
      
      out.append("<div id='searchDomainHelp' onmouseover=\"mouseOverSearchHelpSpan=true;\" onmouseout=\"mouseOverSearchHelpSpan=false;\" style=\"position:absolute;display:none;background-color:#FFFFCC;\">\n");
      out.append("   <IFRAME name=\"searchhelpnote\" id=\"searchhelpnote\" SRC= \""+ mgr.getDummyPage()+"\" FRAMEBORDER=0 style=\"width:100%;height:400;\">\n");
      out.append("   </IFRAME>\n");
      String tip = mgr.translate("FNDPAGEHELPTAGPRINT: Print This Help");
      out.append("<table style=\"background-color:#FFFFCC;\" >\n");
      out.append("  <tr><td class=\"searchDomainHelp\"><img name=print_help_img src=\""+getASPConfig().getImagesLocation()+"/print_hov.gif\" OnClick=\"javascript:searchhelpnote.focus();searchhelpnote.print();\" style=\"cursor:pointer\" alt=\""+tip+"\" height=16 ALIGN=\"bottom\" border=0>\n");
      out.append("  </td></tr></table>\n");
      out.append("</div>\n");
   }
   
   /**
    * Create the HTML contents to show Help on a Field.
    */
   private void appendFieldHelpTag( AutoString out )
   {  
      
      if ( DEBUG ) debug(this+": ASPPage.appendFieldHelpTag()");
      ASPManager mgr = getASPManager();
           
      out.append("\n<STYLE type=text/css>");
      out.append("\n#help_tag ");
      out.append("\n{");
      out.append("\n   BORDER-RIGHT: #333 1px solid; BORDER-TOP: #333 1px solid; BORDER-LEFT: #333 1px solid; WIDTH: 0px; BORDER-BOTTOM: #333 1px solid; POSITION: absolute; HEIGHT: 0px;");
      out.append("\n}");
      out.append("\n</STYLE>"); 
      
      out.append("\n<div id=help_tag FRAMEBORDER=0 style=\"position:absolute;background-color:#FFFFCC;visibility:hidden;\">");
      out.append("\n         <IFRAME SRC= \""+ getASPConfig().getScriptsLocation() +"helpfield.htm\" name=\"helpnote\" id=\"helpnote\" FRAMEBORDER=0 style=\"display:none;width:100%;height:100%;\">");
      out.append("\n         </IFRAME>");      
      out.append("\n   <table style=\"width=100%\">");
      out.append("\n      <tr style=\"position:absolute;width=100%\"><td>");
      String img_loc = getASPConfig().getImagesLocation();
      String tip = mgr.translateJavaText("FNDPAGEHELPTAGSHOWMORE: More Help");

      out.append("<img name=all_fields_img id=all_fields_img SRC=\"",img_loc,"help_page_hov.gif\"");     
      out.append(" OnClick=\"javascript:showHelp('" + mgr.getURL() + "')\"");
      out.append(" style=\"cursor:pointer\"");
      out.append(" alt=\"",tip,"\" title=\"",tip,"\"");      
      out.append(" height=16 ALIGN=\"bottom\" border=0>");       
      
      tip = mgr.translate("FNDPAGEHELPTAGSHOWALL: Show All fields");
      out.append("&nbsp;");
      out.append("<img name=help_page_img id=help_page_img SRC=\"",img_loc,"help_all_hov.gif\"");     
      out.append(" OnClick=\"javascript:showFieldHelp('" + mgr.getURL() + "','"+mgr.getUsageKey()+"')\"");
      out.append(" style=\"cursor:pointer\"");
      out.append(" alt=\"",tip,"\" title=\"",tip,"\"");      
      out.append(" height=16 ALIGN=\"bottom\" border=0>");      
      
      tip = mgr.translate("FNDPAGEHELPTAGPRINT: Print This Help");
      out.append("&nbsp;");
      out.append("<img name=print_help_img id=print_help_img SRC=\"",img_loc,"print_hov.gif\"");     
      out.append(" OnClick=\"javascript:helpnote.focus();helpnote.print(); \"");
      out.append(" style=\"cursor:pointer\"");
      out.append(" alt=\"",tip,"\" title=\"",tip,"\"");      
      out.append(" height=16 ALIGN=\"bottom\" border=0>");  
      
      out.append("\n      </td></tr>");  
      out.append("\n   </table>");      
      out.append("\n</div>");
   }
   
   private void appendDirtyHelpFields(AutoString out)
   {
      String child_frames[] = child_frame_names.split(";");
      String helpParentStr ="";
      if (!is_iframe_parent)
         helpParentStr ="window.parent.";
      
      out.append("<SCRIPT language=javascript>\n");
      out.append("   function initHelpFields()\n");
      out.append("   {\n");      
      
      for(int i=0;i<child_frames.length;i++)
      {
         if (!Str.isEmpty(child_frames[i]))
         {
            out.append("    if("+helpParentStr+"document.getElementById('"+child_frames[i]+"')){\n");
            out.append("       "+helpParentStr+"document.getElementById('"+child_frames[i]+"').contentWindow.helpMode = true;\n");
            out.append("       "+helpParentStr+"document.getElementById('"+child_frames[i]+"').contentWindow.helpOpen = true;\n");
            out.append("       "+helpParentStr+"document.getElementById('"+child_frames[i]+"').contentWindow.clickedOnField = false;\n");
            out.append("       "+helpParentStr+"document.getElementById('"+child_frames[i]+"').contentWindow.document.body.style.cursor = 'help';\n");      
            out.append("       "+helpParentStr+"document.getElementById('"+child_frames[i]+"').contentWindow.helpParent = this;\n");
            out.append("}\n");
         }
      }           
      out.append("      helpMode = true;\n");
      out.append("      helpOpen = true;\n");
      out.append("      clickedOnField = false;\n");
      out.append("      window.status =__HELP_MODE_MSG;\n");
      out.append("      document.body.style.cursor = 'help';\n");
      out.append("   }\n");

      out.append("   function disableChildHelpMode(child)\n");
      out.append("   {\n");      
      for(int i=0;i<child_frames.length;i++)
      {
         if (!Str.isEmpty(child_frames[i]))
         {   
            out.append("       if(child.name != '"+child_frames[i]+"')\n");
            out.append("   {\n");            
            out.append("       if("+helpParentStr+"document.getElementById('"+child_frames[i]+"')){\n");            
            if (is_iframe_parent)
            {
               out.append("       document.getElementById('"+child_frames[i]+"').contentWindow.showHelpTag('');\n");
               out.append("       document.getElementById('"+child_frames[i]+"').contentWindow.document.getElementById('help_tag').style.width = 200 ;\n");
               out.append("       document.getElementById('"+child_frames[i]+"').contentWindow.document.getElementById('help_tag').style.height = 50;\n");
               out.append("       document.getElementById('"+child_frames[i]+"').contentWindow.document.getElementById('help_tag').style.visibility= 'hidden';\n"); 
            }
            out.append("       "+helpParentStr+"document.getElementById('"+child_frames[i]+"').contentWindow.document.body.style.cursor = 'default';\n");                   
            out.append("       "+helpParentStr+"document.getElementById('"+child_frames[i]+"').contentWindow.helpOpen = false;\n");
            out.append("       "+helpParentStr+"document.getElementById('"+child_frames[i]+"').contentWindow.helpMode = false;\n");
            out.append("       }\n");
            out.append("   }\n");
         }
      }  
      out.append("   }\n");

      out.append("</SCRIPT>\n");
      
   }

   /**
    * Create the HTML contents to show Notes.
    */
   public void appendNoteBookTag( AutoString out )
   {
      if(this instanceof ifs.fnd.pages.SearchDomainHelp)
         return ;

      if ( DEBUG ) debug(this+": ASPPage.appendNoteBookTag()");
      ASPManager mgr = getASPManager();

      // Declaring common script elements needed for Notes
      out.append("\n<SCRIPT language=javascript src=\""+ getASPConfig().getScriptsLocation() +"utility.js\"></SCRIPT>");
      out.append("\n<SCRIPT language=javascript src=\""+ getASPConfig().getScriptsLocation() +"notebook.js\"></SCRIPT>");

      String _note = mgr.translateJavaText("FNDPAGENOTETAGTITLE: Notes");
      String prev_note = mgr.translateJavaText("FNDPAGENOTETAGPREVNOTE: Previous Note");
      String next_note = mgr.translateJavaText("FNDPAGENOTETAGNEXTNOTE: Next Note");
      String new_note  = mgr.translateJavaText("FNDPAGENOTETAGNEWNOTE: New Note");
      String delete_note = mgr.translateJavaText("FNDPAGENOTETAGDELETENOTE: Delete Note");//deleteNote
      String min_note  = mgr.translateJavaText("FNDPAGENOTETAGMINNOTE: Minimise");
      String img_loc = getASPConfig().getImagesLocation();
      
      // Drawing notepad for note editing
      out.append("\n<div id=\"notesContainer\">");
      out.append("\n   <table border=0 cellpadding=0 cellspacing=0 height=100% width=100%>");
      out.append("\n      <tr id=\"notesCommandbar\">");
      out.append("\n         <td height=25px>");
      out.append("\n            <table height=100% width=100% border=0 cellpadding=0 cellspacing=0>");
      out.append("\n               <tr>");
      out.append("\n                  <td id=\"dragHandle\"> "+_note+" </td>");
      out.append("\n                  <td valign='middle' align=\"left\">");
      out.append("\n                     <img title=\""+prev_note+"\" alt=\""+prev_note+"\" src=\""+ img_loc  +"arrleft.gif\" onclick=javascript:prevNote()>");
      out.append("\n                     <label id=\"count\" border=\"0\">1 of 1</label>");
      out.append("\n                     <img title=\""+next_note+"\" alt=\""+next_note+"\" src=\""+ img_loc  +"arrright.gif\" onclick=javascript:nextNote()>");
      out.append("\n                  </td>");
      out.append("\n                  <td align=\"right\">");
      out.append("\n                     <img title=\""+new_note+"\" alt=\""+new_note+"\" src=\""+ img_loc  +"new_note.gif\" onclick=javascript:newNote()>");
      out.append("\n                     <img title=\""+delete_note+"\" alt=\""+delete_note+"\" src=\""+ img_loc  +"delete_note.gif\" onclick=javascript:deleteNote()>");
      out.append("\n                     <img title=\""+min_note+"\" alt=\""+min_note+"\" src=\""+ img_loc  +"min_note.gif\" onclick=javascript:minimize()>");
      out.append("\n                  </td>");
      out.append("\n               </tr>");
      out.append("\n            </table>");
      out.append("\n         </td>");
      out.append("\n      </tr>");
      out.append("\n      <tr>");
      out.append("\n         <td>");
//      out.append("\n            <div >");
      out.append("\n               <table id=\"notesBody\" height=100% width=100% border=0 cellpadding=0 cellspacing=0>");
      out.append("\n                  <tr>");
      out.append("\n                     <td valign='middle' align=\"middle\">");
      out.append("\n                        <iframe height=100% width=100% name=\"note\" id=\"note\"  frameborder=\"0\"></iframe>");
      out.append("\n                     </td>");
      out.append("\n                  </tr>");
      out.append("\n                  <tr>");
      out.append("\n                     <td align=\"left\" height=\"25px\">");
      out.append("\n                        <div id=\"creN\" >Name</div>");
      out.append("\n                        <div id=\"creD\" >Date</div>");
      out.append("\n                     </td>");
      out.append("\n                  </tr>");
      out.append("\n               </table>");
//      out.append("\n            </div>");
      out.append("\n         </td>");
      out.append("\n      </tr>");
      out.append("\n   </table>");
      out.append("\n</div>");
   }

  /**
    * Create the HTML contents to show a Progress Bar
    */
   private void appendProgressBarTag( AutoString out )
   {
      if ( DEBUG ) debug(this+": ASPPage.appendProgressBarTag()");

      ASPManager mgr = getASPManager();

      out.append("\n<div id=\"progressbar\" nowrap style=\"border-style:solid; border-width:1px;height:100px;width:440px;position:absolute;visibility:hidden;\">");      
      out.append("\n<table class=\"progressBarWindowBack\" width=\"100%\" height=\"40\"cellspacing=\"2\" cellpadding=\"2\">");
      out.append("\n<tr style=\"width=100%\">");
      out.append("\n<td class=\"pageCommandBar\" id=progresstext1>");      
      out.append("\n</td></tr> ");
      out.append("\n<tr style=\"width=100%\">");
      out.append("\n<td class=\"groupBoxTitleText\" id=progresstext2>");      
      out.append("\n</td></tr> ");
      out.append("\n<tr style=\"width=100%\"><td>");      
      out.append("\n<table class=\"progTable\"  width=\"100%\" cellspacing=\"0\" cellpadding=\"0\">");
      out.append("\n<tr>");
      for(int i=0;i<100;i++)
         out.append("\n<td height=\"15px\" class=\"ProgressBarPercentage\"  id=tdid"+i+">&nbsp;</td>");
      out.append("\n</tr>");     
      out.append("\n</table>");
      out.append("\n</td></tr> ");
      out.append("\n<tr style=\"width=100%\"><td ALIGN=\"CENTER\">");            
      out.append("\n<input class='button' type=\"button\" value=\"Cancel\" name=\"cancel\" style=\"width:75px; height:25px\" onclick=\"javascript:cancelled=true;\">");   
      out.append("\n</td></tr> "); 
      out.append("\n</table>  ");      
      out.append("\n</div>");
   
   }
   /**
    * Generate and return JavaScript code that implements LOV, Popup, Validation
    * and Check functionality defined for all ASPFields on the current ASP page.
    */
   public String generateClientScript()
   {
      if (DEBUG) debug(this+": ASPPage.generateClientScript()");

      boolean is_std_portlet = portal==null ? false : portal.isStdPortlet();

      try
      {
         gen_script_event = gen_script_event_type.begin();

         prepareClientScript();

         tmpbuf.clear();

         appendTooltipTag(tmpbuf);
         
         if (!getASPManager().isLogonPage())
         {
            appendApplicationSearchHelpTag(tmpbuf);
            appendCalendarTag(tmpbuf);
            appendMessageWindowTag(tmpbuf);
         }

         if (!getASPManager().isPortalPage() && !getASPManager().isLogonPage())
         {
            appendFieldHelpTag(tmpbuf);
            if(!getASPManager().isRWCHost()) appendNoteBookTag(tmpbuf);
            if (is_parent_page)
               appendDirtyHelpFields(tmpbuf);
               
         }
         if (is_progressbar_enabled) appendProgressBarTag(tmpbuf);
         getASPManager().appendRequestClientScript(tmpbuf);
         getASPManager().appendSearchURL(tmpbuf, this);

         if(blocks.size()>0)
            appendBlockModeVariables(tmpbuf);

        generatePopupDefinitions(tmpbuf);

         //if(!is_std_portlet)
         if(!is_std_portlet || (is_std_portlet && portal.isCustomizeMode()))
         {
            //appendPopupScript(tmpbuf);
            //generatePopupDefinitions(tmpbuf);
            if (!isLogonPage())
            tmpbuf.append(config.getLateConstantClientScript());

            //tmpbuf.append(config.getConfigClientScript());

            //just for quick and safe code - should be rewriten in build 4- Mangala.
            /*if (APPLET_VALIDATION.equals(getValidationMethod()) && (!applet_disabled || config.isBase64Enabled()))
               tmpbuf.append(config.getForcedAppletTag());
            //Bug 42299, start
            else */
            //if(!applet_disabled || config.isBase64Enabled()||(!APPLET_VALIDATION.equalsIgnoreCase(config.getIEValidationMethod()) && getASPManager().isExplorer()))
            //Bug 42299, end
            if(IFRAME_VALIDATION.equalsIgnoreCase(config.getIEValidationMethod()) && getASPManager().isExplorer() && !disable_validation)
               tmpbuf.append(config.getIFRAMETag());
            //Bug 42299, start
            tmpbuf.append(BEGIN_SCRIPT_TAG);
            //Bug 42299, end
            tmpbuf.append(ASPConfigFile.APP_PATH + " = \""+ config.getApplicationPath() +"\";\n");
            tmpbuf.append(ASPConfigFile.APP_ROOT + "=\""+ config.getApplicationPath() +"/\";\n");
            tmpbuf.append("THEME=\"",getASPManager().getUserTheme()+"/\";\n");
            tmpbuf.append("__CALENDAR_STYLESHEET = \"" + getASPManager().getStyleSheetTag(),"\";\n");//APP_ROOT + "+ \"../"+unsecured_path+"/"+stylesheets_location+"/"+mgr.getCSSFileName()+"\";\n");            
            tmpbuf.append(ASPConfigFile.COOKIE_PATH + " = \""+ config.getCookiePath() +"\";\n");
            tmpbuf.append(ASPConfigFile.COOKIE_ROOT_PATH + " =\""+ config.getCookieRootPath() + "\";\n");
            tmpbuf.append(ASPConfigFile.COOKIE_PREFIX + " =\""+ config.getCookiePathPrefix() +"\";\n");
            tmpbuf.append(ASPConfigFile.COOKIE_DOMAIN + " =\""+ config.getCookiePathDomain() +"\";\n");
            tmpbuf.append("VALIDATION_METHOD='",getValidationMethod(),"';\n");
            tmpbuf.append("IS_RTL="+getASPManager().isRTL()+";\n");
            tmpbuf.append("  if (IS_RTL)\n");
            tmpbuf.append("     document.dir = 'rtl';\n"); 
            //if(APPLET_VALIDATION.equals(getValidationMethod()))
            //   tmpbuf.append("PROTOCOL_DOMAIN='",getASPConfig().getProtocol()+"://"+getASPConfig().getApplicationDomain(),"/';\n");
            tmpbuf.append(END_SCRIPT_TAG);
         }
         //tmpbuf.append(config.getURLEncodeFunction());
         tmpbuf.append(config.getConfigClientScript());
         appendPageClientScript(tmpbuf);
         appendDirtyClientScript(tmpbuf);

        if((this instanceof ifs.fnd.pages.Default) || (this instanceof ifs.fnd.pages.Navigator) )
        {
           tmpbuf.append("<script language=javascript>");
           if(!getASPManager().isExplorer())
           {
              tmpbuf.append("if (window.addEventListener)\n{\n");
              tmpbuf.append("    window.addEventListener('keypress', keyPressed, true);\n");
              tmpbuf.append("} \nelse if (window.attachEvent)\n{\n");
              tmpbuf.append("    window.attachEvent('onkeypress', keyPressed);\n}\n");
           }
           else if(this instanceof ifs.fnd.pages.Navigator)
              tmpbuf.append("document.onkeypress = keyPressed;\n");              
           tmpbuf.append("\n");
           tmpbuf.append("function keyPressed(e){\n");
           tmpbuf.append("var ok=false;\n");
           tmpbuf.append("if(IS_EXPLORER){\n");
           tmpbuf.append("  if(window.event.keyCode==13)\n    ok=true;\n");
           tmpbuf.append("}else{\n");
           tmpbuf.append("  if(e.which==13)\n    ok=true;\n}\n");
           tmpbuf.append("if(ok && focusInSearchBox)\n");
           tmpbuf.append("   search();\n");
           tmpbuf.append("}\n");
           tmpbuf.append("</script>");
        }


         String s = tmpbuf.toString();
         gen_script_event.end();
         return s;
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }
   }

   //Returns form tag action
   public String getFormTagAction()
   {
       //return form_tag_action;
       return getCurrentPagePath();
   }


   /**
    * Generate attributes for the <FORM> HTML tag
    */
   public String generateFormTag()
   {
      if(getASPManager().isMobileVersion())
         return generateMobileFormTag();

      if(DEBUG) debug(this+": ASPPage.generateFormTag()");


      //String form_tag_action_url = form_tag_action
      // Added by Terry 20130910
      String lov_url_add = "";
      String __dynamic_lov_view = getASPManager().readValue("__DYNAMIC_LOV_VIEW");
      if (lov != null || !Str.isEmpty(__dynamic_lov_view))
         lov_url_add = "?__DYNAMIC_LOV_VIEW=" + __dynamic_lov_view;
      // Added end
      // Modified by Terry 20130910
      // Orignal:
      // String form_tag_action_url = getCurrentPagePath()
      //                              + (lov!=null ? "?__DYNAMIC_LOV_VIEW="+getASPManager().readValue("__DYNAMIC_LOV_VIEW") : "")
      //                              + ((portal!=null) ? portal.parseGlobalVariables() : "");
      String form_tag_action_url =  getCurrentPagePath()
                                    + lov_url_add
                                    + ((portal!=null) ? portal.parseGlobalVariables() : "");
      // Modified end
      String query_string = getASPManager().getQueryString();
      if(getASPManager().isLogonPage())
         form_tag_action_url += (getASPManager().isEmpty(query_string))? "": "&"+query_string;
      return form_tag1 + getASPManager().correctURL(form_tag_action_url) + form_tag2;

      /*
      String temp = form_tag;

      // TEMPORARY HACK TO MAKE DYNAMIC LOV WORK. REALLY UGLY. EWWW!
      if(lov != null)
      {

         int endPath = form_tag.indexOf(".asp");
         int startRest = form_tag.indexOf("\"",endPath);

         if(endPath > -1 && startRest > (endPath+1))
            temp = form_tag.substring(0,endPath+4) + "?__DYNAMIC_LOV_VIEW=" + getASPManager().readValue("__DYNAMIC_LOV_VIEW");

      }
      return temp + "\"";
      */
   }


   //private
   void appendPageClientScript( AutoString buf ) throws FndException
   {
      if(DEBUG) debug(this+": ASPPage.appendPageClientScript()");

      if( isNotDefined() ) return;

      ASPManager mgr = getASPManager();
      ASPConfig cfg = getASPConfig();

      String str_def_key = ((local_def_key_value>-1)?(local_def_key_value+""):"");
      int pos = getCurrentPagePath().lastIndexOf('.');
      String script_url = ( pos>=0 ? getCurrentPagePath().substring(0,pos) : getCurrentPagePath() ) + getLanguageSuffix()+ str_def_key + ".js";

      String docache = cfg.getParameter("ADMIN/DYNAMIC_OBJECT_CACHE/ENABLED","N");

      if ("Y".equals(docache))
      {
         String appl_path = getApplicationPath();
         if (!Str.isEmpty(appl_path))
           script_url = Str.replaceFirst(script_url, appl_path, appl_path + "/" + DynamicObjectCache.URL_INDICATOR );
         else
           script_url =  "/" + DynamicObjectCache.URL_INDICATOR + script_url;
      }

      if( cfg.debugSendJS() )
      {
         buf.append(BEGIN_SCRIPT_TAG);
//         String path = script_url.substring(getApplicationDomain().length()+2);

         String jsfile="";
         if ("Y".equals(docache))
         {
             DynamicObject dobj = DynamicObjectCache.get(getScriptCacheKey(), getASPManager().getAspSession());
             jsfile = (String)dobj.getData();
         }
         else
         {
             String path = "";
             if (script_url.startsWith(getApplicationDomain()))
                path = script_url.substring(config.getApplicationDomain().length()+config.getApplicationContext().length()+1);
             else
                path = script_url.substring(config.getApplicationContext().length()+1);

             if(DEBUG) debug("  path="+path);
             String phypath = getASPManager().getPhyPath(path); //mapPath()
             if(DEBUG) debug("  phypath="+phypath);
             jsfile = Util.readAndTrimFile(phypath);
         }
         buf.append(jsfile,END_SCRIPT_TAG);
      }
      else
      {
         if(!mgr.isLogonPage())
         {
            buf.append(SRC_SCRIPT_TAG_LEFT);
            buf.append(script_url);
            buf.append(SRC_SCRIPT_TAG_RIGHT);
         }
      }

      if(portal!=null)
         portal.appendPageClientScript(buf);
   }


   protected void generatePageClientScript() throws Exception
   {
      if(DEBUG) debug(this+": ASPPage.generatePageClientScript()");

      tmpbuf.clear();

      appendCheckAllFieldsFunction(tmpbuf);

      for( int i=0; i<blocks.size(); i++ )
      {
         ASPBlock blk = (ASPBlock)(blocks.elementAt(i));
         blk.appendPageClientScript(tmpbuf);
      }

      tmpbuf.append(config.getCalendarConsts());

      String docache = config.getParameter("ADMIN/DYNAMIC_OBJECT_CACHE/ENABLED","N");
      if ("Y".equals(docache))
      {
        DynamicObjectCache.put(getScriptCacheKey(), tmpbuf.toString(), "text/javascript", getASPManager(), true);
        java_script=tmpbuf.toString();
      }
      else
        Str.writeFile(script_file_name,tmpbuf.toString());
   }


   /*
    * Used to update 'java_script' variable should only be called from ASPPageProvider and
    * ASPPortletProvider, required for clustering support
    */
   final void updatePageScript(String script)
   {
       java_script=script;
   }

   //private
   void appendDirtyClientScript( AutoString buf ) throws FndException
   {
      if(DEBUG) debug(this+": ASPPage.appendDirtyClientScript(");

      buf.append(ASPPage.BEGIN_SCRIPT_TAG);
      for( int i=0; i<blocks.size(); i++ )
      {
         ASPBlock blk = (ASPBlock)(blocks.elementAt(i));
         if( isNotDefined() )
            blk.appendPageClientScript(buf);
         else
            blk.appendDirtyClientScript(buf);
      }
      buf.append(ASPPage.END_SCRIPT_TAG);

      if(portal!=null)
         portal.appendDirtyClientScript(buf);
   }

   private void appendCheckAllFieldsFunction( AutoString code )
   {
      if(DEBUG) debug(this+": ASPPage.appendCheckAllFieldsFunction("+code+")");

      code.append("function checkAllFields(i)\n");
      code.append("{\n");
      boolean first = true;

      for( int i=0; i<blocks.size(); i++ )
      {
         ASPBlock blk = (ASPBlock)(blocks.elementAt(i));
         String name = blk.getName();
         if( name==null ) continue;
         if( first )
            code.append("\treturn ");
         else
            code.append(" &&\n\t");
         code.append("check");
         code.append(IfsNames.dbToAppName(name));
         code.append("Fields(i)");
         first = false;
      }
      code.append(";\n}\n\n");
   }

   //private
   void prepareClientScript() throws FndException,IOException
   {
      for( int i=0; i<blocks.size(); i++ )
      {
         ((ASPBlock)(blocks.elementAt(i))).getASPRowSet().prepareClientScript();
      }
      context.prepareClientScript();

      if(portal!=null)
         portal.prepareClientScript();
   }

   //==========================================================================
   // Debugging, verifying
   //==========================================================================

   private boolean verifying;

   boolean isVerifying()
   {
      if(DEBUG) debug(this+": ASPPage.isVerifying()");
      return verifying;
   }

   void verify() throws FndException
   {
      if (DEBUG) debug(this+": ASPPage.verify()");

      if(!ASPPagePool.VERIFY) return;

      try
      {
         verifying = true;
         scan(this,0);
         if(DEBUG) debug("\tASPPage: verifying of "+this+"\n\t         completed successfully.\n");
      }
      finally
      {
         verifying = false;
      }
   }

   protected void verify( ASPPage page ) throws FndException
   {
      if(DEBUG) debug(this+": ASPPage.verify("+page+")");

      verifyPage(page);

      log.verify(page);
      config.verify(page);
      context.verify(page);

      form.verify(page);
      formatter.verify(page);
      info_services.verify(page);
      navigator.verify(page);

      if (portal!=null) portal.verify(page);

      if (lov!=null) lov.verify(page);

      //ASPBlock
      for( int i=0; i<blocks.size(); i++ )
         ((ASPPoolElement)(blocks.elementAt(i))).verify(page);

      //ASPTable
      for( int i=0; i<tables.size(); i++ )
         ((ASPPoolElement)(tables.elementAt(i))).verify(page);

      //ASPTabContainer
      for( int i=0; i<tab_containers.size(); i++ )
         ((ASPPoolElement)(tab_containers.elementAt(i))).verify(page);

      //ASPPopup
      for( int i=0; i<popups.size(); i++ )
         ((ASPPoolElement)(popups.elementAt(i))).verify(page);

      //ASPField
      Enumeration field_list = fields.elements();
      while( field_list.hasMoreElements() )
      {
         ((ASPField)field_list.nextElement()).verify(page);
      }
   }

   protected void scan( ASPPage page, int level ) throws FndException
   {
      if (DEBUG) debug(this+": ASPPage.scan("+page+","+level+")");

      scanAction(page,level);

      log.scan(page,level+1);
      config.scan(page,level+1);
      context.scan(page,level+1);

      form.scan(page,level+1);
      formatter.scan(page,level+1);
      info_services.scan(page,level+1);
      navigator.scan(page,level+1);

      if (portal!=null) portal.scan(page,level+1);

      if (lov!=null) lov.scan(page,level+1);

      //ASPBlock
      for( int i=0; i<blocks.size(); i++ )
         ((ASPPoolElement)(blocks.elementAt(i))).scan(page,level+1);

      //ASPTable
      for( int i=0; i<tables.size(); i++ )
         ((ASPPoolElement)(tables.elementAt(i))).scan(page,level+1);

      //ASPTabContainer
      for( int i=0; i<tab_containers.size(); i++ )
         ((ASPPoolElement)(tab_containers.elementAt(i))).scan(page,level+1);

      //ASPPopup
      for( int i=0; i<popups.size(); i++ )
         ((ASPPoolElement)(popups.elementAt(i))).scan(page,level+1);


   }

   void showContents() throws FndException
   {
      tmpbuf.clear();
      tmpbuf.append("\n\n\n\tContents of page '"+Util.trimLine(toString()) );
      tmpbuf.append("':\n\t==============================================================\n\n");
      scan(this,0);
      tmpbuf.append("\n\n");
      tmpbuf.append(context.showContents());
      tmpbuf.append("\n\n\n");
      debug(tmpbuf.toString());
   }

   void appendContents( ASPPoolElement obj, int level )
   {
      tmpbuf.append(Util.rpad("",level)+obj+"\n");
   }

   void appendContents( String str, int level )
   {
      tmpbuf.append( Str.replace( str, "\n", "\n"+Util.rpad("",level) ), "\n");
   }

   //==========================================================================
   // Inner class that hold field information from the freeze moment.
   //==========================================================================
   class IceCube
   {

      private Field         field;
      private int           class_nr;
      private String        instance_name;        //stores the name of a block
      private long          long_value;           //for storage of primitive types
      private double        double_value;         //for storage of primitive types
      private char          char_value;

       // One array for each type (because of System.arraycopy).
      private boolean[]     boolean_array;
      private long[]        long_array;
      private int[]         int_array;
      private float[]       float_array;
      private double[]      double_array;
      private String[]      string_array;
      private char[]        char_array;

      private boolean[][]     boolean_array2;
      private long[][]        long_array2;
      private int[][]         int_array2;
      private float[][]       float_array2;
      private double[][]      double_array2;
      private String[][]      string_array2;
      private char[][]        char_array2;

      private boolean       array_was_null;

      private Object        object_ptr = null;    //for storage of complex types
      private String[]      instance_names; // for storage of the names in an Array of type immutable.


      //==========================================================================
      //  Construction
      //==========================================================================

      IceCube( Field field, Object obj) throws FndException
      {
         try
         {
            if (Modifier.isFinal(field.getModifiers()) || Modifier.isStatic(field.getModifiers()))
               return;

            if(DEBUG) Util.debug("IceCube. Freezing field: "+ field);
            field.setAccessible(true);
            this.field = field;
            this.class_nr = getClassNr(field.getType());
            this.instance_name = field.get(obj) instanceof ASPPoolElement ? ((ASPPoolElement)field.get(obj)).getName() : null;
            if(DEBUG) Util.debug("  IceCube: class_nr="+debugSupportedClassNr(class_nr)+", instance_name="+instance_name+", instance="+field.get(obj));
            switch (this.class_nr)
            {
               case  __UNSUPPORTED:
                  if(DEBUG) debug(" IceCube: type=__UNSUPPORTED");
                  String type = field.getType().getName();
                  if(DEBUG) debug(type);
                  if (field.getType().isPrimitive())
                  {
                     if (type.equals("boolean"))
                        this.long_value = field.getBoolean(obj)?1:0;
                     else if (type.equals("int"))
                        this.long_value = (long)field.getInt(obj);
                     else if (type.equals("long"))
                        this.long_value = field.getLong(obj);
                     else if (type.equals("double"))
                        this.double_value = field.getDouble(obj);
                     else if (type.equals("float"))
                        this.double_value = (double)field.getFloat(obj);
                     else if (type.equals("char"))
                        this.char_value = field.getChar(obj);
                     else
                        throw new FndException("Unsupported primitive type. "+ field.getType().getName());
                  }
                  else if(field.getType().isArray()) //Array handling
                  {
                      int dim;
                      String only_type;
                      Object obj1;
                      if(type.startsWith("[[["))
                          throw new FndException("Unsupported number of dimensions in array type. "+type);
                      else if(type.startsWith("[["))
                      {
                          dim=2;
                          only_type = type.substring(2);
                          obj1 = field.get(obj);
                      }
                      else
                      {
                          dim=1;
                          only_type = type.substring(1);
                          obj1 = field.get(obj);
                      }

                      if(obj1==null)  //not necessary
                          array_was_null=true;
                      else if(only_type.equals("Z")){     //boolean
                          if(dim==1){
                              boolean[] source = (boolean[]) obj1;
                              boolean_array = new boolean[source.length];
                              System.arraycopy(source,0,boolean_array,0,source.length);
                          }
                          else
                          {
                              boolean[][] source = (boolean[][]) obj1;
                              boolean_array2 = new boolean[source.length][];
                              for(int i=0;i<source.length;i++)
                              {
                                  boolean_array2[i] = new boolean[source[i].length];
                                  System.arraycopy(source[i],0,boolean_array2[i],0,source[i].length);
                              }
                          }

                      }
                      else if(only_type.equals("I")){ //int
                          if(dim==1){
                              int[] source = (int[]) obj1;
                              int_array = new int[source.length];
                              System.arraycopy(source,0,int_array,0,source.length);
                          }
                          else
                          {
                              int[][] source = (int[][]) obj1;
                              int_array2 = new int[source.length][];
                              for(int i=0;i<source.length;i++)
                              {
                                  int_array2[i] = new int[source[i].length];
                                  System.arraycopy(source[i],0,int_array2[i],0,source[i].length);
                              }
                          }

                      }
                      else if(only_type.equals("J")){ //long
                          if(dim==1){
                              long[] source = (long[]) obj1;
                              long_array = new long[source.length];
                              System.arraycopy(source,0,long_array,0,source.length);
                          }
                          else
                          {
                              long[][] source = (long[][]) obj1;
                              long_array2 = new long[source.length][];
                              for(int i=0;i<source.length;i++)
                              {
                                  long_array2[i] = new long[source[i].length];
                                  System.arraycopy(source[i],0,long_array2[i],0,source[i].length);
                              }
                          }
                      }
                      else if(only_type.equals("D")){ //double
                          if(dim==1){
                              double[] source = (double[]) obj1;
                              double_array = new double[source.length];
                              System.arraycopy(source,0,double_array,0,source.length);
                          }
                          else
                          {
                              double[][] source = (double[][]) obj1;
                              double_array2 = new double[source.length][];
                              for(int i=0;i<source.length;i++)
                              {
                                  double_array2[i] = new double[source[i].length];
                                  System.arraycopy(source[i],0,double_array2[i],0,source[i].length);
                              }
                          }

                      }
                      else if(only_type.equals("F")){ //float
                          if(dim==1){
                              float[] source = (float[]) obj1;
                              float_array = new float[source.length];
                              System.arraycopy(source,0,float_array,0,source.length);
                          }
                          else
                          {
                              float[][] source = (float[][]) obj1;
                              float_array2 = new float[source.length][];
                              for(int i=0;i<source.length;i++)
                              {
                                  float_array2[i] = new float[source[i].length];
                                  System.arraycopy(source[i],0,float_array2[i],0,source[i].length);
                              }
                          }
                      }
                      else if(only_type.equals("C")){ //char
                          if(dim==1){
                              char[] source = (char[]) obj1;
                              char_array = new char[source.length];
                              System.arraycopy(source,0,char_array,0,source.length);
                          }
                          else
                          {
                              char[][] source = (char[][]) obj1;
                              char_array2 = new char[source.length][];
                              for(int i=0;i<source.length;i++)
                              {
                                  char_array2[i] = new char[source[i].length];
                                  System.arraycopy(source[i],0,char_array2[i],0,source[i].length);
                              }
                          }
                      }
                      else if(only_type.equals("Ljava.lang.String;")){
                          if(dim==1)
                          {
                              String[] source = (String[]) obj1;
                              string_array = new String[source.length];
                              System.arraycopy(source,0,string_array,0,source.length);
                          }
                          else
                          {
                              String[][] source = (String[][]) obj1;
                              string_array2 = new String[source.length][];
                              for(int i=0;i<source.length;i++)
                              {
                                  string_array2[i] = new String[source[i].length];
                                  System.arraycopy(source[i],0,string_array2[i],0,source[i].length);
                              }
                          }
                      }
                      else if(only_type.equals("Lifs.fnd.asp.ASPField;")){
                          ASPField[] source = (ASPField[]) obj1;
                          instance_names = new String[source.length];
                          for(int i=0;i<source.length;i++)
                          {
                              if(source[i]==null)
                                  instance_names[i]=null;
                              else
                                  instance_names[i]=source[i].getName();
                          }
                      }
                      else
                          throw new FndException("Unsupported array type"+type);

                  }
                  else if (field.get(obj)!=null)
                  {
                     throw new FndException("Unsupported type. "+ field.getType().getName());
                  }
                  break;
               case __STRING:
                  if(DEBUG) debug(" IceCube: type=__STRING");
                  if (field.get(obj)!=null)
                     this.object_ptr = (String)field.get(obj); // no clone needed, strings are constant.
                  else
                     this.object_ptr = this;  // indicate null.
                  break;
               case __ASPBUFFER:
                  if(DEBUG) debug(" IceCube: type=__ASPBUFFER");
                  if (field.get(obj)!=null)
                     this.object_ptr = ((ifs.fnd.asp.ASPBuffer)field.get(obj)).copy();
                  else
                     this.object_ptr = this;  // indicate null.
                  break;
               case __BUFFER:
                  if(DEBUG) debug(" IceCube: type=__BUFFER");
                  if (field.get(obj)!=null)
                     this.object_ptr = ((ifs.fnd.buffer.Buffer)field.get(obj)).clone();
                  else
                     this.object_ptr = this;  // indicate null.
                  break;
               case __AUTOSTRING:
                  if(DEBUG) debug(" IceCube: type=__AUTOSTRING");
                  if (field.get(obj)!=null)
                     this.object_ptr = ((ifs.fnd.buffer.AutoString)field.get(obj)).clone();
                  else
                     this.object_ptr = this;  // indicate null.
                  break;
               case __VECTOR:
                   if(DEBUG) debug(" IceCube: type=__VECTOR");
                   if (field.get(obj)!=null)
                       if (((java.util.Vector)field.get(obj)).isEmpty())
                          this.object_ptr = ((java.util.Vector)field.get(obj)).clone();
                       else
                          throw new FndException("Only empty Vectors supported in freeze."+ field.getType().getName());
                   else
                      this.object_ptr = this;  // indicate null.
                   break;
               default:
                  if(DEBUG) debug(" IceCube: default switch");
                  if (field.get(obj)==null)
                     this.object_ptr = this;  // indicate null.
            }
         }
         catch (FndException e)
         {
            throw e;
         }
         catch (Throwable any)
         {
            throw new FndException("FNDPAGICECUBCONSTR: Could not freeze field. " + field + "\n" + any).addCaughtException(any);
         }
      }

      /**
       *A method that defrosts the information inside an icecube.
       */

      void thawn( Field field, Object obj) throws FndException
      {
         try
         {
            if (Modifier.isFinal(field.getModifiers()) || Modifier.isStatic(field.getModifiers()))
               return;
            field.setAccessible(true);
            if(DEBUG) Util.debug("IceCube.thawn: "+ field + ", instance="+field.get(obj));

            if (this.object_ptr==this)
            {
                // since the field was null at freeze, we can set it to null without thinking.
                field.set(obj,null);
                return;
            }

            if (!this.field.equals(field))
               throw new FndException("FNDPAGICECUBTHMISM: Can not thawn, fields don't match.");

            if(DEBUG) debug("  IceCube: page state="+getStateName(((ASPPage)obj).getState()));

            switch (this.class_nr)
            {
               case  __UNSUPPORTED:
                  if (field.getType().isPrimitive())
                  {
                     String type = field.getType().getName();
                     if (type.equals("boolean"))
                        field.setBoolean(obj,(this.long_value == 0)?false:true);
                     else if (type.equals("int"))
                        field.setInt(obj,(int)this.long_value);
                     else if (type.equals("long"))
                        field.setLong(obj,this.long_value);
                     else if (type.equals("double"))
                        field.setDouble(obj,this.double_value);
                     else if (type.equals("float"))
                        field.setFloat(obj,(float)this.double_value);
                     else if (type.equals("char"))
                        field.setChar(obj,this.char_value);
                     else
                        throw new FndException("Unsupported primitive type. "+ field.getType().getName());
                  }
                  else if(field.getType().isArray())
                  {
                      String type = field.getType().getName();
                      int dim;
                      String only_type;
                      if(type.startsWith("[["))
                      {
                          dim=2;
                          only_type = type.substring(2);
                      }
                      else
                      {
                          dim=1;
                          only_type = type.substring(1);
                      }
                      if(array_was_null){
                          field.set(obj,null);
                          break;
                      }
                      else if(only_type.equals("Z")){     //boolean
                          if(dim==1){
                              boolean[] dest = new boolean[boolean_array.length];
                              System.arraycopy(boolean_array,0,dest,0,boolean_array.length);
                              field.set(obj,dest);
                          }
                          else
                          {
                              boolean[][] dest = new boolean[boolean_array2.length][];
                              for(int i=0;i<boolean_array2.length;i++)
                              {
                                  dest[i] = new boolean[boolean_array2[i].length];
                                  System.arraycopy(boolean_array2[i],0,dest[i],0,boolean_array2[i].length);
                              }
                              field.set(obj,dest);
                          }
                      }
                      else if(only_type.equals("I")){ //int
                          if(dim==1){
                              int[] dest = new int[int_array.length];
                              System.arraycopy(int_array,0,dest,0,int_array.length);
                              field.set(obj,dest);
                          }
                          else
                          {
                              int[][] dest = new int[int_array2.length][];
                              for(int i=0;i<int_array2.length;i++)
                              {
                                  dest[i] = new int[int_array2[i].length];
                                  System.arraycopy(int_array2[i],0,dest[i],0,int_array2[i].length);
                              }
                              field.set(obj,dest);
                          }

                      }
                      else if(only_type.equals("J")){ //long
                          if(dim==1){
                              long[] dest = new long[long_array.length];
                              System.arraycopy(long_array,0,dest,0,long_array.length);
                              field.set(obj,dest);
                          }
                          else
                          {
                              long[][] dest = new long[long_array2.length][];
                              for(int i=0;i<long_array2.length;i++)
                              {
                                  dest[i] = new long[long_array2[i].length];
                                  System.arraycopy(long_array2[i],0,dest[i],0,long_array2[i].length);
                              }
                              field.set(obj,dest);
                          }
                      }
                      else if(only_type.equals("D")){ //double
                          if(dim==1){
                              double[] dest = new double[double_array.length];
                              System.arraycopy(double_array,0,dest,0,double_array.length);
                              field.set(obj,dest);
                          }
                          else
                          {
                              double[][] dest = new double[double_array2.length][];
                              for(int i=0;i<double_array2.length;i++)
                              {
                                  dest[i] = new double[double_array2[i].length];
                                  System.arraycopy(double_array2[i],0,dest[i],0,double_array2[i].length);
                              }
                              field.set(obj,dest);
                          }
                      }
                      else if(only_type.equals("F")){ //float
                          if(dim==1){
                              float[] dest = new float[float_array.length];
                              System.arraycopy(float_array,0,dest,0,float_array.length);
                              field.set(obj,dest);
                          }
                          else
                          {
                              float[][] dest = new float[float_array2.length][];
                              for(int i=0;i<float_array2.length;i++)
                              {
                                  dest[i] = new float[float_array2[i].length];
                                  System.arraycopy(float_array2[i],0,dest[i],0,float_array2[i].length);
                              }
                              field.set(obj,dest);
                          }
                      }
                      else if(only_type.equals("C")){ //char
                          if(dim==1){
                              char[] dest = new char[char_array.length];
                              System.arraycopy(char_array,0,dest,0,char_array.length);
                              field.set(obj,dest);
                          }
                          else
                          {
                              char[][] dest = new char[char_array2.length][];
                              for(int i=0;i<char_array2.length;i++)
                              {
                                  dest[i] = new char[char_array2[i].length];
                                  System.arraycopy(char_array2[i],0,dest[i],0,char_array2[i].length);
                              }
                              field.set(obj,dest);
                          }
                      }
                      else if(only_type.equals("Ljava.lang.String;")){
                          if(dim==1)
                          {
                              String[] dest = new String[string_array.length];
                              System.arraycopy(string_array,0,dest,0,string_array.length);
                              field.set(obj,dest);
                          }
                          else
                          {
                              String[][] dest = new String[string_array2.length][];
                              for(int i=0;i<string_array2.length;i++)
                              {
                                  dest[i] = new String[string_array2[i].length];
                                  System.arraycopy(string_array2[i],0,dest[i],0,string_array2[i].length);
                              }
                              field.set(obj,dest);
                          }
                      }
                      else if(type.equals("[Lifs.fnd.asp.ASPField;")){
                          ASPField[] dest = new ASPField[instance_names.length];
                          for(int i=0;i<instance_names.length;i++){
                              if(instance_names[i]==null)
                                  dest[i]=null;
                              else
                                  dest[i]= ((ASPPage)obj).getASPField(this.instance_names[i]);
                          }
                          field.set(obj,dest);
                      }

                  }
                  else
                  {
                     // since the unsupported type slipped thru freeze it was null at that point.
                     field.set(obj,null);
                  }
                  break;
               case __STRING:
                  field.set(obj,this.object_ptr);
                  break;
               case __ASPBUFFER:
                  field.set(obj, ((ASPBuffer)this.object_ptr).copy());
                  break;
               case __BUFFER:
                  field.set(obj, ((Buffer)this.object_ptr).clone());
                  break;
               case __AUTOSTRING:
                  field.set(obj, ((AutoString)this.object_ptr).clone());
                  break;
               case __VECTOR:
                   field.set(obj, ((java.util.Vector)this.object_ptr).clone());
                   break;
               case __ASPTRANSACTIONBUFFER:
                  {
                     ASPPage page = (ASPPage)obj;
                     if( page.isUndefined() )
                     {
                        Factory factory = page.getASPConfig().getFactory();
                        ASPTransactionBuffer trans = new ASPTransactionBuffer(page.getASPManager());
                        trans.construct(factory.getBuffer(), factory.getBufferFormatter());
                        field.set(obj, trans);
                     }
                     else
                        ((ASPTransactionBuffer)field.get(obj)).clear();
                  }
                  break;
               case __ASPCOMMAND:
                  {
                     //field.set(obj, ((ASPPage)obj).getASPManager().newASPCommand());
                     ASPPage page = (ASPPage)obj;
                     if( page.isUndefined() )
                     {
                        Factory factory = page.getASPConfig().getFactory();
                        ASPCommand cmd = (new ASPCommand(page.getASPManager())).construct(factory.getBuffer());
                        field.set(obj, cmd);
                     }
                     else
                        ((ASPCommand)field.get(obj)).clear();
                  }
                  break;
               case __ASPQUERY:
                  {
                     //field.set(obj, ((ASPPage)obj).getASPManager().newASPQuery());
                     ASPPage page = (ASPPage)obj;
                     if( page.isUndefined() )
                     {
                        Factory factory = page.getASPConfig().getFactory();
                        ASPQuery qry = (ASPQuery)(new ASPQuery(page.getASPManager())).construct(factory.getBuffer());
                        field.set(obj, qry);
                     }
                     else
                        ((ASPCommand)field.get(obj)).clear();
                  }
                  break;
               // POOLELEMENTS
               case __ASPCONTEXT:
                  field.set(obj,((ASPPage)obj).context);
                  break;
               case __ASPFORM:
                  field.set(obj,((ASPPage)obj).form);
                  break;
               case __ASPHTMLFORMATTER:
                  field.set(obj,((ASPPage)obj).formatter);
                  break;
               case __ASPLOV:
                  field.set(obj,((ASPPage)obj).lov);
                  break;
               case __ASPLOG:
                  field.set(obj,((ASPPage)obj).log);
                  break;
               case __ASPINFOSERVICES:
                  field.set(obj,((ASPPage)obj).info_services);
                  break;
               case __ASPBLOCK:
                  field.set(obj,((ASPPage)obj).getASPBlock(this.instance_name));
                  break;
               case __ASPROWSET:
                  field.set(obj,((ASPPage)obj).getASPBlock(this.instance_name).getASPRowSet());
                  break;
               case __ASPBLOCKLAYOUT:
                  field.set(obj,((ASPPage)obj).getASPBlock(this.instance_name).getASPBlockLayout());
                  break;
               case __ASPCOMMANDBAR:
                  field.set(obj,((ASPPage)obj).getASPBlock(this.instance_name).getASPCommandBar());
                  break;
               case __ASPFIELD:
                  field.set(obj,((ASPPage)obj).getASPField(this.instance_name));
                  break;
               case __ASPTABLE:
                  field.set(obj,((ASPPage)obj).getASPTable(this.instance_name));
                  break;
               case __ASPTABCONTAINER:
                  field.set(obj,((ASPPage)obj).getASPTabContainer(this.instance_name));
                  break;
                case __ASPPOPUP:
                   field.set(obj,((ASPPage)obj).getASPPopup(this.instance_name));
                   break;
            }
         }
         catch (FndException e)
         {
            throw e;
         }
         catch (Throwable any)
         {
            throw new FndException("FNDPAGICECUBTHAWN: Could not thawn field. " + field + "\n" + any).addCaughtException(any);
         }
      }
   }


   class Compatibility
   {
       private int version;

      private Compatibility()
      {
          version = 0;
      }

      boolean newEditMode()
      {
         return !ASPPage.this.isUndefined();
      }

       int getVersion()
       {
           return version;
       }

       void setVersion(int v)
       {
           version = v;
       }
   }

  void setActiveCommandHoverImage(String image)
  {
       hover_image=image;
  }

  String getActiveCommandHoverImage()
  {
       return hover_image;
  }

  void setActiveCommandNormalImage(String image)
  {
       unhover_image=image;
  }

  String getActiveCommandNormalImage()
  {
       return unhover_image;
  }

  void setDefaultBlock(String block)
  {
      default_block=block;
  }

  String getDefaultBlock()
  {
       return default_block;
  }

  void setDefaultCommand(String command)
  {
      default_command=command;
  }

  String getDefaultCommand()
  {
      return default_command;
  }

  void increaseBlockCount()
  {
      block_count++;
  }

  int getBlockCount()
  {
      return block_count;
  }

  void resetBlockCount()
  {
      block_count=0;
  }

  void setDefaultCommandDisabled(boolean state)
  {
      default_command_disabled = state;
  }

  boolean isDefaultCommandDisabled()
  {
      return default_command_disabled;
  }

  void setClientFunction(String cf)
  {
      client_function = cf;
  }

  String getClientFunction()
  {
     if(Str.isEmpty(client_function))
        return "";
     else
        return client_function;
  }

  String getActiveCommand()
  {
       ASPManager mgr = getASPManager();
       AutoString out = new AutoString();
       out.clear();
       
        if(getBlockCount()==1 && !isDefaultCommandDisabled() && !mgr.isEmpty(getDefaultCommand()))
            out.append("<input type=\"text\" disabled=\"true\" id =\"d1\" name=\"__dummy\" value=\"\" style=\"visibility:hidden;\">\n");
       
       out.append("<script language=\"JavaScript\">\n");
       if(getBlockCount()==1 && !isDefaultCommandDisabled() && !mgr.isEmpty(getDefaultCommand()))
       {
           out.append(" var c=0;\n");
           out.append(" var size = document.forms[0].length;\n");
           out.append(" for (x=0; x<size; x++){\n");
           out.append(" if((document.forms[0].elements[x].type=='text') && (!document.forms[0].elements[x].disabled))\n");
           out.append(" c++;");
           out.append(" }\n");
           out.append(" if (c==1){\n");
           out.append(" var t = document.getElementById(\"d1\");\n");
           //out.append("alert(\"test:\"+t.type)\n;");
           out.append(" t.disabled=\"false\";\n");
           out.append(" }\n");
           
           out.append("default_command = true;\n");
           out.append("ACTIVE_COMMAND_HOVR_IMG = '"+getActiveCommandHoverImage()+"';\n");
           out.append("ACTIVE_COMMAND_NORM_IMG = '"+getActiveCommandNormalImage()+"';\n");
           if(!mgr.isExplorer())
           {
              out.append("if (window.addEventListener)\n{\n");
              out.append("    window.addEventListener('keypress', keyPressed, true);\n");
              out.append("} \nelse if (window.attachEvent)\n{\n");
              out.append("    window.attachEvent('onkeypress', keyPressed);\n}\n");
              //out.append("window.captureEvents(Event.KEYPRESS);\n");
              //out.append("window.onkeypress = keyPressed;\n");
           }

           out.append("if(document.form."+getDefaultBlock()+"_"+default_command+"){\n");
           out.append("   elm = document.form."+getDefaultBlock()+"_"+default_command+";\n");
           out.append("   elm.src = ACTIVE_COMMAND_HOVR_IMG;\n");
           out.append("}\n");

           out.append("function outActiveCommand(e){\n");
           out.append("if(document.form."+getDefaultBlock()+"_"+default_command+"){\n");
           out.append("   elm = document.form."+getDefaultBlock()+"_"+default_command+";\n");
           out.append("   elm.src = ACTIVE_COMMAND_HOVR_IMG;\n");
           out.append("}\n");
           out.append("}\n");

           out.append("function selectActiveCommand(e){\n");
           out.append("if(document.form."+getDefaultBlock()+"_"+default_command+"){\n");
           out.append("   elm = document.form."+getDefaultBlock()+"_"+default_command+";\n");
           out.append("   elm.src = ACTIVE_COMMAND_HOVR_IMG;\n");
           out.append("}\n");
           out.append("}\n");

           out.append("function deselectActiveCommand(e){\n");
           out.append("if(document.form."+getDefaultBlock()+"_"+default_command+"){\n");
           out.append("   elm = document.form."+getDefaultBlock()+"_"+default_command+";\n");
           out.append("   elm.src = ACTIVE_COMMAND_NORM_IMG;\n");
           out.append("}\n");
           out.append("}\n");

           out.append("function executeCommand(e){\n");
           out.append("var ok=false;\n");
           out.append("if(IS_EXPLORER){\n");
           out.append("  if(window.event.keyCode==13)\n    ok=true;\n");
           out.append("}else{\n");
           out.append("  if(e.which==13)\n    ok=true;\n}\n");
           out.append("if(ok && !focusInSearchBox && !__dhtmlPopupOpen)\n");
           out.append("   commandSet('"+getDefaultBlock()+"."+getDefaultCommand()+"','"+getClientFunction()+"');\n");
           out.append("if(ok && focusInSearchBox)\n");
           out.append("   search();\n");
           out.append("}\n");
       }
       else
       {
           out.append("function outActiveCommand(e){\n");
           out.append("}\n");

           out.append("function selectActiveCommand(e){\n");
           out.append("}\n");

           out.append("function deselectActiveCommand(e){\n");
           out.append("}\n");
           
           if(!mgr.isLogonPage() && !(this instanceof ifs.fnd.pages.Default))
           {
              if(!mgr.isExplorer())
              {
                 out.append("if (window.addEventListener)\n{\n");
                 out.append("    window.addEventListener('keypress', keyPressed, true);\n");
                 out.append("} \nelse if (window.attachEvent)\n{\n");
                 out.append("    window.attachEvent('onkeypress', keyPressed);\n}\n");
              }              
              out.append("function keyPressed(e){\n");
              out.append("var ok=false;\n");
              out.append("if(IS_EXPLORER){\n");
              out.append("  if(window.event.keyCode==13)\n    ok=true;\n");
              out.append("}else{\n");
              out.append("  if(e.which==13)\n    ok=true;\n}\n");
              out.append("if(ok && focusInSearchBox)\n");
              out.append("   search();\n");
              out.append("}\n");
           }
       }
      out.append("</script>\n");
      return out.toString();
  }

  /*
   * Returns a modified version of 'url' indicating that the file should be streamed
   * back to the client dynamically using the class specified by class_name. This class
   * should implement the getFile() method in the interface ifs.fnd.asp.ObjectStreamer
   * and return an InputStream which will be used to stream back the file when the file
   * pointed by url is requested.
   *
   * @param class_name The name of the class that implements ifs.fnd.asp.ObjectStreamer which
   *                   is supplied to retreive an InputStream to the actual files contents.
   * @param url        Relative url that points to the 'virtual file' in the web app. ex. demorw/SomeFile.dat
   * @param mime       Mime type of the file contents to be sent to the browser
   * @param key        The value of key will be passed to the getFile() of the supplied class denoted
   *                   by class_name. For example this can be the actual physical path of the file
   *                   on disk or an ftp address which will be used within getFile().
   *
   * @return           url to a file that can be placed on page/portlet that will be fetched using
   *                   the provided class (i.e. class_name)
   */

  public String setUrlToDynamicFile(String class_name, String url, String mime, String key)
  {
      DynamicObjectCache.put(url,class_name+"^"+key, mime ,true, getASPManager(),true);
      String app_path=getApplicationPath();
      return (Str.isEmpty(app_path)?"":app_path)+"/"+DynamicObjectCache.URL_INDICATOR+"/"+url;
  }
  
  public String setUrlToDynamicFile(String class_name, String url, String mime, String key, boolean persistent)
  {
      DynamicObjectCache.put(url,class_name+"^"+key, mime ,true, getASPManager(),persistent);
      String app_path=getApplicationPath();
      return (Str.isEmpty(app_path)?"":app_path)+"/"+DynamicObjectCache.URL_INDICATOR+"/"+url;
  }

  public String setUrlToDynamicFile(String class_name, String url, String key)
  {
      return setUrlToDynamicFile( class_name, url, null, key);
  }


  /**
   * Generates and returns scripts necessary for a file upload link.
   * @param blk Referance to an ASPBlock.
   */
  public String addFileUploadLink(ASPBlock blk)
  {
       ASPManager mgr = getASPManager();
       ASPBlockLayout lay = blk.getASPBlockLayout();
       StringBuffer script = new StringBuffer();
       String blob_id = (blk.getASPRowSet().countDbRows() > 0)?blk.getASPRowSet().getValueAt(blk.getASPRowSet().getCurrentRowNo(),blk.getFileUploadId()):null;
       String upload_type = mgr.isEmpty(blk.getFileUploadType())?"UNKNOWN":blk.getFileUploadType();

       script.append("\n<script language=javascript>\n");
       script.append("function "+blk.getName()+"_saveUploadId(id){document.form."+blk.getFileUploadId()+".value=id;}\n");
       script.append("</script>\n");
       script.append("\n\t<tr><td><a class=\"hyperLink\" href='javascript:showNewBrowser_(\""+mgr.getASPConfig().getScriptsLocation(false)+"FileUploadPage.page?UPLOAD_PAGE_URL="+mgr.URLEncode(blk.getFileUploadUrl())+
                                                                                                      "&UPLOAD_ID="+mgr.URLEncode(blk.getFileUploadId())+
                                                                                                      "&BLOCK_NAME="+mgr.URLEncode(blk.getName())+
                                                                                                      "&BLOB_ID="+mgr.URLEncode(blob_id)+
                                                                                                      "&UPLOAD_MODE="+blk.getFileUploadMode()+
                                                                                                      "&UPLOAD_DESTINATION="+mgr.URLEncode(blk.getFileUploadDestination())+
                                                                                                      "&POST_FUNCTION="+mgr.URLEncode(blk.getPostUploadFunction())+
                                                                                                      "&UPLOAD_TYPE="+mgr.URLEncode(upload_type)+                                                                                                      
                                                                                                      "\",347,247,\"NO\",\"NO\")'>");
       script.append(mgr.translate(blk.getFileUploadText()));
       script.append("</a></td></tr>");

       return script.toString();
  }

  int getTabId()
  {
      tab_count = tab_count+1;
      return tab_count;
  }

  boolean hasASPTable(String name)
  {
      if(tables.size()==0)
          return false;
      else
      {
         for( int i=0; i<tables.size(); i++ )
         {
            ASPTable tbl = (ASPTable)(tables.elementAt(i));
            String tblname = tbl.getName();
            if( (name==null && tblname==null) || name!=null && name.equals(tblname) )
               return true;
         }
         return false;
      }
  }

  String getCurrentPagePath()
  {
     ASPManager mgr = getASPManager();
     ASPConfig cfg = getASPConfig();
     String curr_host = mgr.getCurrentHost();
     HashMap req_hosts = cfg.getRequestingHosts();
     if(req_hosts.containsKey(curr_host) && !"0".equals((String)req_hosts.get(curr_host)))
     {
        if (!isUnsecuredPage())
           return Str.replaceFirst(page_path, cfg.getDefaultApplicationPath(), cfg.getApplicationPath());
        else
           return Str.replaceFirst(page_path, cfg.getDefaultUnsecuredApplicationPath(), cfg.getApplicationPath());
     }
     else
         return page_path;
  }

  boolean isUnsecuredPage()
  {
     if (is_logon_page || is_error_page)
        return true;
     else
        return false;
  }
  
  boolean isLogonPage()
  {
     if (is_logon_page || is_error_page)
        return true;
     else
        return false;
  }

  Set getPageKeys()
  {
     return page_keys;
  }

  void addPageKeys(String key_id)
  {
     page_keys.add(key_id);
  }
  
  /**
   * Set a immutable variable with the page name of the parent
   * page, if this page is to be used inside a multi frame page
   * @param String, the parent page name, should be given as
   * '/component/page.page' (/projw/Project.page)
   */
  public void setParentFramePagename(String parent_name){
      try
      {
         modifyingImmutableAttribute("PARENT_FRAME_NAME");
         parent_frame_pagename = parent_name;
      }
      catch( Throwable any )
      {
         error(any);
      }
  }
  
  /**
   * get the parent page name if the page is used inside a multi frame page
   */
  public String getParentFramePagename(){
      return this.parent_frame_pagename;
  }
  
  /** return true if parent page name is set if the page is used inside a
   * multi frame page, else false
   */
  public boolean isParentFramePagename(){
      if (!Str.isEmpty(parent_frame_pagename))
          return true;
      else
          return false;
  }
  
  /**
   * Set a immutable variable with the page names of the child
   * pages, if this page is acting as the header page of a
   * multi frame page See also setParentFramePagename()
   * @param String child_names,  should be given a semicolon seperated list
   * of child frame names (this reffers to the html id tag for the respective
   * frame) 
   * @param boolean iframe, Whether the child frames are iframes or not
   */
  public void setChildFrameNames(String child_names,boolean iframe)
  {
      try
      {  
         modifyingImmutableAttribute("IS_PARENT_PAGE");
         is_parent_page = true;
         
         modifyingImmutableAttribute("IS_IFRAME_PARENT");
         is_iframe_parent = iframe;
         
         modifyingImmutableAttribute("CHILD_FRAME_NAMES");
         child_frame_names = child_names;                  
      }
      catch( Throwable any )
      {
         error(any);
      }
  }
  
  /**
   * Enables the progress bar for the current page. Must be called from
   * predefine() if the progressbar functionality is needed for the page   
   */
  public void setProgressBarEnabled()
  {
      try
      {  
         modifyingImmutableAttribute("IS_PROGRESSBAR_ENABLED");
         is_progressbar_enabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }         
  }
  
   /**
   * Set an immutable attribute with the page name of the child
   * page, if this page is acting as the header page of a
   * multi frame page.
   * @param String child_page, the child page name, should be given as
   * '/component/page.page' ("/projw/Project.page")
   */
  public void setChildFrameHelpReference(String child_page)
  {  
      try
      {
         modifyingImmutableAttribute("CHILD_FRAME_HELP_REF");
         child_frame_help_ref = child_page;
      }
      catch( Throwable any )
      {
         error(any);
      }
  }

  /**
   * Get the child page reference if the page
   * is used inside multi frame page
   */
  public String getChildFrameHelpReference()
  {
     return this.child_frame_help_ref;
  }
  
  /**
   * Return true if the child page reference is
   * set, else false
   */
  public boolean isChildFrameHelpReference()
  {
     if (!Str.isEmpty(child_frame_help_ref))
          return true;
      else
          return false;
  }

   /**
    * Placeholder for the content of the expandable rows containg the expandable
    * fields. Can be overidden by developers, if a customised layout 
    * for the expandable content is needed.
    * <br>
    * If an error needs to be shown return an AutoString in the format of - "error^error_Message"
    * @param tableName Name of the ASPTable as a String
    * @param rowno Row number of the table object
    * @return Customised html content for the expandable row
    */  
  protected AutoString drawExpandableRow(String tableName, int rowno) throws FndException
  {   
     AutoString content = new AutoString();
     if(!getASPManager().isEmpty(tableName))
        content = getASPTable(tableName).getExpandableRowContent(rowno);
     return content;
  }
  
  /**
   * This method returns a string containg the contents of a image field. Method is to be overidden in ASPPageProvider.
   * @param field ASPField
   * @param rowset ASPRowset with all the data
   * @throws ifs.fnd.service.FndException during image tag creation
   * @return String containg the image tags
   */
  protected String getImageFieldTag(ASPField field, ASPRowSet rowset, int rowNum) throws FndException
  {
     return "";
  }

  protected void autoPopulate(ASPBlock block)
  {
     getASPManager().autoPopulate(block);
  }

  /*
   * This method returns true if there are registered Tab Containers in page.
   * @return boolean value for tab container availability.
   */
  public boolean hasTabContainers()
  {
     return has_tab_containers;
  }
   
   void setBlockLayoutAvailability()
   {
      has_block_layouts = true;
   }
   
   /*
    * This method returns true if there are blocks with any layout modes other than UNDEFINED and NONE in page. 
    * @return boolean value for availability of block layouts.
    */
   public boolean hasBlockLayouts()
   {
      return has_block_layouts;
   }

  // ===================================================================================================
  // Mobile Framework
  // ===================================================================================================

   private String generateMobileFormTag()
   {     
      if(DEBUG) debug(this+": ASPPage.generateMobileFormTag()");

      String form_tag_action_url = getCurrentPagePath();
      return form_tag1 + getASPManager().correctURL(form_tag_action_url) + form_tag2;
   }
  
   String getMobileHeadTag()
   {
      AutoString head = new AutoString();
      
      String current_user=getASPManager().getUserId();
      if (!Str.isEmpty(current_user))
      {
          String _domain="";
          String _user="";
          int bslash_ix=current_user.indexOf("\\");
          //replace single backslash with double backslash
          if (bslash_ix>0)
          {
            _domain=current_user.substring(0,bslash_ix);
            _user=current_user.substring(bslash_ix,current_user.length());
            current_user=_domain+"\\"+_user;
          }
      }
     
      head.append("<!-- ASPPage.getHeadTag() -->\n");
      head.append(getASPManager().getScriptFileTag());
      
      head.append(BEGIN_SCRIPT_TAG);
      head.append("var ",ASPConfigFile.APP_ROOT + "=\""+ config.getApplicationPath() +"/\";\n");
      head.append("var __READY = true;\n");
      head.append("CURRENT_USER='"+current_user+"';\n");
      head.append("AUTH_COOKIE='"+config.getAuthUserCookieName()+"';\n");      
      head.append(ASPConfigFile.COOKIE_PATH + "=\""+ config.getCookiePath() +"/\";\n");
      head.append(ASPConfigFile.COOKIE_ROOT_PATH + "=\"" + config.getCookieRootPath() + "\";\n");
      head.append(ASPConfigFile.COOKIE_PREFIX + "=\""+ config.getCookiePathPrefix() + "\";\n");
      head.append(ASPConfigFile.COOKIE_DOMAIN + "=\""+ config.getCookiePathDomain() + "\";\n");
      head.append(END_SCRIPT_TAG,"\n");

      return head.toString();
   }
   
   public String generateMobileClientScript()
   {
      if (DEBUG) debug(this+": ASPPage.generateMobileClientScript()");

      boolean is_std_portlet = portal==null ? false : portal.isStdPortlet();

      try
      {
         gen_script_event = gen_script_event_type.begin();

         prepareClientScript();

         tmpbuf.clear();

         getASPManager().appendRequestClientScript(tmpbuf);

         tmpbuf.append(config.getConfigClientScript());
         appendPageClientScript(tmpbuf);
         appendDirtyClientScript(tmpbuf);
         tmpbuf.append(BEGIN_SCRIPT_TAG);
         tmpbuf.append("VALIDATION_METHOD='",getValidationMethod(),"';\n");
         tmpbuf.append(END_SCRIPT_TAG);
         getASPManager().appendSearchURL(tmpbuf, this);
         String s = tmpbuf.toString();
         gen_script_event.end();
         return s;
      }
      catch( Throwable any )
      {
         error(any);
         return null;
      }
   }
   
   /**
    * returns if the current page is related to templates functionality.
    * @return either true or false
    */
   public boolean isTemplatePages(){
      if(this instanceof ifs.fnd.pages.ConfigurableScreenLayout || this instanceof ifs.fnd.pages.Templates)
         return true;
      return false;
   }
   
   /**
    * Read the template buffer from the global profile and return an ASPBuffer.
    * @param fetch_all boolean flag to enable fetching of all values
    * @return ASPBuffer object
    */
   protected ASPBuffer readGlobalTemplateProfileBuffer(boolean fetch_all) throws FndException{
      ASPBuffer buf = readGlobalProfileBuffer( BlockProfile.TEMPLT_SECTION, false);
      if(buf==null) return null;
      try{
         ASPBuffer dest = getASPManager().newASPBuffer();
         Buffer b = buf.getBuffer();
         for(int t=0; t<b.countItems(); t++){
            Item item = b.getItem(t);
            if(!item.isCompound() && item.getName().indexOf(BlockProfile.TEMPLT_GLOBAL_ID)!=-1){
               Buffer col = dest.getBuffer().newInstance();
               
               String globalId = (String) item.getValue();
               col.addItem("GLOBAL_TEMPLATE_ID", globalId);
               if(fetch_all){
                  String id       = (String) b.findItem(globalId+BlockProfile.TEMPLT_ID).getValue(); 
                  String title    = (String) b.findItem(globalId+BlockProfile.TEMPLT_TITLE).getValue(); 
                  String desc = "";
                  Item temp_desc  = b.findItem(globalId+BlockProfile.TEMPLT_DESC);
                  if (temp_desc!=null)
                     desc     = (String) b.findItem(globalId+BlockProfile.TEMPLT_DESC).getValue(); 
                  String entity   = (String) b.findItem(globalId+BlockProfile.TEMPLT_ENTITY).getValue(); 
                  String path     = (String) b.findItem(globalId+BlockProfile.TEMPLT_PATH).getValue();
                  String block    = (String) b.findItem(globalId+BlockProfile.TEMPLT_BLOCK).getValue();
                  String _default = (String) b.findItem(globalId+BlockProfile.TEMPLT_DEFAULT).getValue();
                  String[] page = path.split("/");
                  
                  col.addItem("TEMPLATE_ID", id);
                  col.addItem("BLOCK", block);
                  col.addItem("URL", path);
                  col.addItem("DEFAULT", _default);
                  col.addItem("TITLE", title);
                  col.addItem("DESCRIPTION", desc);
                  col.addItem("ENTITY", entity);
                  col.addItem("PAGE", page[3]+"/"+page[4]);
               }
               dest.getBuffer().addItem("DATA",col);
            }
         }
         return dest;
      }catch(Exception e){
            throw new FndException("FNDPAGGLBTMPLTERR: Cannot load templates buffer").addCaughtException(e);
      }
   }
   
   /**
    * Remove template information from profile for this ASPPage.
    * @param template name of the template to be deleted
    */
   void removeTemplateProfileItem(String template) throws FndException
   {
      if(DEBUG) debug(this+": ASPPage.removeProfile()");
      try
      {
         prepareProfileInfo();
         profile.removeItem(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_GLOBAL_ID);
         profile.removeItem(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_ID);
         profile.removeItem(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_TITLE);
         profile.removeItem(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_DEFAULT);
         profile.removeItem(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_DESC);
         profile.removeItem(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_ENTITY);
         profile.removeItem(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_BLOCK);
         profile.removeItem(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_PATH);
         
         profile.markRemoveFlag(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_GLOBAL_ID);
         profile.markRemoveFlag(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_ID);
         profile.markRemoveFlag(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_TITLE);
         profile.markRemoveFlag(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_DEFAULT);
         profile.markRemoveFlag(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_DESC);
         profile.markRemoveFlag(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_ENTITY);
         profile.markRemoveFlag(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_BLOCK);
         profile.markRemoveFlag(BlockProfile.TEMPLT_SECTION+"/"+template+BlockProfile.TEMPLT_PATH);         
         
         ASPProfile prf  = getPageProfile();
         prf.update(this,profile);
         prf.save(this);
         user_profile_prepared = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Disables the dockout url used by IEE
    */
   public void disableIEEDockout()
   {
      try
      {
         modifyingMutableAttribute("IEE_DOCKOUT_ENABLE");
         iee_dockout_enabled = false;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }

   /**
    * Enables the Navigate button in the toolbar.
    */
   public void enableIEEDockout()
   {
      try
      {
         modifyingMutableAttribute("IEE_DOCKOUT_ENABLE");
         iee_dockout_enabled = true;
      }
      catch( Throwable any )
      {
         error(any);
      }
   }   
   
   boolean isDockoutEnabled() {
      return iee_dockout_enabled;
   }
   
   protected String groupParams(String name, String value, boolean and, boolean decode_csv){
       ASPManager mgr = getASPManager();
       boolean escape = mgr.isExplorer();
       escape = escape && name.toUpperCase().startsWith("__REG");
       String temp = mgr.URLDecode(value);
       if(decode_csv && mgr.isCSVName(temp))
           value = mgr.getCSVValue(temp);
       return (and ? (escape?"&amp;amp;":"&amp;"): "") + name + "=" + value;
   }
   
   // Added by Terry 20120822
   // get ASPFields Hashtable
   public Hashtable getASPFields()
   {
      return fields;
   }
   // Added end
   
   // Added by Terry 20131023
   // Set function field value manually
   protected void setFuncFieldValue(ASPRowSet set, ASPField field) throws FndException
   {
      ASPManager mgr = getASPManager();
      if (set.countRows() > 0 && field.isComputable())
      {
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         String call_function = field.getCallExpression();
         String call_parameters = field.getFunctionParameters();
         ASPCommand cmd = trans.addCustomFunction("GETFIELDVALUE", call_function, field.getName());
         
         StringTokenizer params_st = new StringTokenizer(call_parameters, ",");
         while(params_st.hasMoreTokens())
         {
            String param_name = params_st.nextToken().trim();
            String param_db_name = getASPField(param_name).getDbName();
            cmd.addParameter(param_name, set.getValue(param_db_name));  
         }    
         trans = mgr.perform(trans);
         ASPBuffer selected_row = set.getRow();
         selected_row.setValue(field.getName(), trans.getValue("GETFIELDVALUE/DATA/" + field.getName()));
         set.setRow(selected_row);
      }
   }
   
   // Set function fields value of block manually
   protected void setFuncFieldValue(ASPBlock blk) throws FndException
   {
      ASPManager mgr = getASPManager();
      ASPRowSet  set = blk.getASPRowSet();
      if (set.countRows() > 0 && blk.getASPBlockLayout().isSingleLayout())
      {
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPCommand cmd;
         ASPField[] fields = blk.getFields();
         ASPBuffer  computable_fields = mgr.newASPBuffer();
         for (int i = 0; i < fields.length; i++)
         {
            ASPField field = fields[i];
            if (field.isComputable())
            {
               String call_function = field.getCallExpression();
               String call_parameters = field.getFunctionParameters();
               cmd = trans.addCustomFunction(field.getName() + "GETVALUE", call_function, field.getName());
               StringTokenizer params_st = new StringTokenizer(call_parameters, ",");
               while(params_st.hasMoreTokens())
               {
                  String param_name = params_st.nextToken().trim();
                  String param_db_name = getASPField(param_name).getDbName();
                  cmd.addParameter(param_name, set.getValue(param_db_name));
              }
               // cmd.addParameters(this, call_parameters);
               computable_fields.addItem(field.getName(), field.getName() + "GETVALUE");
            }
         }
         if (computable_fields.countItems() > 0)
         {
            trans = mgr.perform(trans);
            ASPBuffer selected_row = set.getRow();
            for (int i = 0; i < computable_fields.countItems(); i++)
            {
               String value = trans.getValue(computable_fields.getValueAt(i) + "/DATA/" + computable_fields.getNameAt(i));
               if (Str.isEmpty(value))
                  value = "";
               selected_row.setValue(computable_fields.getNameAt(i), value);
            }
            set.setRow(selected_row);
            trans.clear();
         }
      }
   }
   // Added end
}
