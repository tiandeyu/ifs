/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.hzwflw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.horizon.db.Access;

import ifs.fnd.asp.ASPBlock;
import ifs.fnd.asp.ASPBlockLayout;
import ifs.fnd.asp.ASPBuffer;
import ifs.fnd.asp.ASPCommand;
import ifs.fnd.asp.ASPCommandBar;
import ifs.fnd.asp.ASPManager;
import ifs.fnd.asp.ASPPageProvider;
import ifs.fnd.asp.ASPQuery;
import ifs.fnd.asp.ASPRowSet;
import ifs.fnd.asp.ASPTabContainer;
import ifs.fnd.asp.ASPTable;
import ifs.fnd.asp.ASPTransactionBuffer;
import ifs.fnd.service.FndException;
import ifs.fnd.service.Util;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class HzWfProcessDef extends ASPPageProvider
{
  
   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.hzwflw.HzWfProcessDef");
   
   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------
   protected ASPTransactionBuffer trans;
   protected ASPCommand cmd;
   
   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   //cache begin...
   private static long refreshInterval = 1000 * 60 * 60;// 1h;
   
   private static final Map<String, String> processNameMap = new HashMap();
   private static final Map<String, Long> timeMap = new HashMap<String, Long>();

   private static final String cacheKeyProcessNameMap = "cacheKeyProcessNameMap";
   
   private static void populateProcessNameMap() {
      StringBuffer sb = new StringBuffer();
      sb.append("select t.process_key process_key, t.process_name process_name from HZ_WF_PROCESS_DEF t");
      List list = Access.getMultiMap(sb.toString(), null);
      for (Iterator iterator = list.iterator(); iterator.hasNext();) {
         Map map = (Map) iterator.next();
         processNameMap.put((String) map.get("process_key"), (String) map.get("process_name"));
      }
   }
   
   public static String getProcessName(String processKey) {
      long currentTime = System.currentTimeMillis();
      Long lastUpdateTime = timeMap.get(cacheKeyProcessNameMap);
      if(null == lastUpdateTime || (currentTime - lastUpdateTime.longValue()) > refreshInterval){
         populateProcessNameMap();
         timeMap.put(cacheKeyProcessNameMap, currentTime);
      }
      String tempOrgId = processNameMap.get(processKey);
      return tempOrgId == null ? "" : tempOrgId;
   }
   //caceh end.

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock hz_biz_wf_config_blk;
   private ASPRowSet hz_biz_wf_config_set;
   private ASPCommandBar hz_biz_wf_config_bar;
   private ASPTable hz_biz_wf_config_tbl;
   private ASPBlockLayout hz_biz_wf_config_lay;

   private ASPBlock hz_init_auth_usr_blk;
   private ASPRowSet hz_init_auth_usr_set;
   private ASPCommandBar hz_init_auth_usr_bar;
   private ASPTable hz_init_auth_usr_tbl;
   private ASPBlockLayout hz_init_auth_usr_lay;

   private ASPBlock hz_init_auth_org_blk;
   private ASPRowSet hz_init_auth_org_set;
   private ASPCommandBar hz_init_auth_org_bar;
   private ASPTable hz_init_auth_org_tbl;
   private ASPBlockLayout hz_init_auth_org_lay;

   private ASPBlock hz_init_auth_pos_blk;
   private ASPRowSet hz_init_auth_pos_set;
   private ASPCommandBar hz_init_auth_pos_bar;
   private ASPTable hz_init_auth_pos_tbl;
   private ASPBlockLayout hz_init_auth_pos_lay;
   
   private ASPBlock hz_init_auth_rela_pos_blk;
   private ASPRowSet hz_init_auth_rela_pos_set;
   private ASPCommandBar hz_init_auth_rela_pos_bar;
   private ASPTable hz_init_auth_rela_pos_tbl;
   private ASPBlockLayout hz_init_auth_rela_pos_lay;

   private ASPBlock hz_init_auth_grp_blk;
   private ASPRowSet hz_init_auth_grp_set;
   private ASPCommandBar hz_init_auth_grp_bar;
   private ASPTable hz_init_auth_grp_tbl;
   private ASPBlockLayout hz_init_auth_grp_lay;
   
   protected ASPTabContainer tabs;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  HzWfProcessDef (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      trans   = mgr.newASPTransactionBuffer();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if (!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("PROCESS_KEY")) )
         okFind();
      else 
         okFind();
      tabs.saveActiveTab();
      adjust();
   }
   
   public void validate()
   {
      ASPManager mgr = getASPManager();

      String val = mgr.readValue("VALIDATE");
      if ("USER_ID".equals(val))
      {
         trans.clear();
         cmd = trans.addCustomFunction( "GETNAME", "PERSON_INFO_API.Get_Name", "USER_NAME" );
         cmd.addParameter("USER_ID");
         trans = mgr.validate(trans);
         String name = trans.getValue("GETNAME/DATA/USER_NAME");

         if (mgr.isEmpty(name))
            name = "";
         mgr.responseWrite( name + "^");
      }
      else if ("ORG_NO".equals(val))
      {
         trans.clear();
         cmd = trans.addCustomFunction( "GETNAME", "GENERAL_ORGANIZATION_API.Get_Org_Desc", "ORG_NAME" );
         cmd.addParameter("ORG_NO");
         trans = mgr.validate(trans);

         String name = trans.getValue("GETNAME/DATA/ORG_NAME");

         if (mgr.isEmpty(name))
            name = "";

         mgr.responseWrite( name + "^" );
      }
      else if ("POS_NO".equals(val))
      {
         trans.clear();
         cmd = trans.addCustomFunction( "GETNAME", "General_Position_Api.Get_Pos_Desc", "POS_NAME" );
         cmd.addParameter("POS_NO");
         trans = mgr.validate(trans);

         String name = trans.getValue("GETNAME/DATA/POS_NAME");

         if (mgr.isEmpty(name))
            name = "";

         mgr.responseWrite( name + "^" );
      }
      else if ("GRP_NO".equals(val))
      {
         trans.clear();
         cmd = trans.addCustomFunction( "GETNAME", "GENERAL_APP_GRP_API.Get_Group_Desc", "GRP_NAME" );
         cmd.addParameter("GRP_NO");
         trans = mgr.validate(trans);
         
         String name = trans.getValue("GETNAME/DATA/GRP_NAME");
         
         if (mgr.isEmpty(name))
            name = "";
         
         mgr.responseWrite( name + "^" );
      }
      else if ("PROCESS_KEY".equals(val))
      {//;
         trans.clear();
        ASPQuery qry =  trans.addQuery("GETPROCESSDESC", "select t.process_name PROCESS_NAME from HZ_WF_PROCESS_DEF_SRC t where t.process_key= ?");
         qry.addParameter("PROCESS_KEY");
         trans = mgr.validate(trans);
         
         String name = trans.getValue("GETPROCESSDESC/DATA/PROCESS_NAME");
         
         if (mgr.isEmpty(name))
            name = "";
         
         mgr.responseWrite( name + "^" );
      }
      
      mgr.endResponse();
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("HZWFPROCESSDEFNODATA: No data found.");
         headset.clear();
      }
      eval( hz_biz_wf_config_set.syncItemSets() );
      eval( hz_init_auth_usr_set.syncItemSets() );
      eval( hz_init_auth_org_set.syncItemSets() );
      eval( hz_init_auth_pos_set.syncItemSets() );
      eval( hz_init_auth_grp_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }

   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","HZ_WF_PROCESS_DEF_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(hz_biz_wf_config_blk);
      q.addWhereCondition("PROCESS_KEY = ?");
      q.addParameter("PROCESS_KEY", headset.getValue("PROCESS_KEY"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,hz_biz_wf_config_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;
      
      cmd = trans.addEmptyCommand("ITEM1","HZ_BIZ_WF_CONFIG_API.New__",hz_biz_wf_config_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROCESS_KEY", headset.getValue("PROCESS_KEY"));
      cmd.setParameter("ITEM0_PROCESS_NAME", headset.getValue("PROCESS_NAME"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      hz_biz_wf_config_set.addRow(data);
   }
   public void okFindITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(hz_init_auth_usr_blk);
      q.addWhereCondition("PROCESS_KEY = ?");
      q.addParameter("PROCESS_KEY", headset.getValue("PROCESS_KEY"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,hz_init_auth_usr_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM2","HZ_INIT_AUTH_USR_API.New__",hz_init_auth_usr_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM1_PROCESS_KEY", headset.getValue("PROCESS_KEY"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM2/DATA");
      hz_init_auth_usr_set.addRow(data);
   }
   public void okFindITEM3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(hz_init_auth_org_blk);
      q.addWhereCondition("PROCESS_KEY = ?");
      q.addParameter("PROCESS_KEY", headset.getValue("PROCESS_KEY"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,hz_init_auth_org_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM3","HZ_INIT_AUTH_ORG_API.New__",hz_init_auth_org_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM2_PROCESS_KEY", headset.getValue("PROCESS_KEY"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM3/DATA");
      hz_init_auth_org_set.addRow(data);
   }
   public void okFindITEM4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(hz_init_auth_pos_blk);
      q.addWhereCondition("PROCESS_KEY = ?");
      q.addParameter("PROCESS_KEY", headset.getValue("PROCESS_KEY"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,hz_init_auth_pos_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM4","HZ_INIT_AUTH_POS_API.New__",hz_init_auth_pos_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM3_PROCESS_KEY", headset.getValue("PROCESS_KEY"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM4/DATA");
      hz_init_auth_pos_set.addRow(data);
   }
   public void okFindITEM5()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(hz_init_auth_grp_blk);
      q.addWhereCondition("PROCESS_KEY = ?");
      q.addParameter("PROCESS_KEY", headset.getValue("PROCESS_KEY"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,hz_init_auth_grp_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM5()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM5","HZ_INIT_AUTH_GRP_API.New__",hz_init_auth_grp_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM4_PROCESS_KEY", headset.getValue("PROCESS_KEY"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM5/DATA");
      hz_init_auth_grp_set.addRow(data);
   }

   public void okFindITEM6()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(hz_init_auth_rela_pos_blk);
      q.addWhereCondition("PROCESS_KEY = ?");
      q.addParameter("PROCESS_KEY", headset.getValue("PROCESS_KEY"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,hz_init_auth_rela_pos_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM6()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM6","HZ_INIT_AUTH_RELA_POS_API.New__",hz_init_auth_rela_pos_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM6_PROCESS_KEY", headset.getValue("PROCESS_KEY"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM6/DATA");
      hz_init_auth_rela_pos_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      
      int length_short = 20;
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROCESS_KEY").
              setMandatory().
              setDynamicLOV("HZ_WF_PROCESS_DEF_SRC", "", 400, 600, false).
              setCustomValidation("PROCESS_KEY", "PROCESS_NAME").
              setLabel("HZWFPROCESSDEFPROCESSKEY: Process Key").
              setSize(length_short);
      headblk.addField("PROCESS_NAME").
              setInsertable().
              setLabel("HZWFPROCESSDEFPROCESSNAME: Process Name").
              setSize(length_short);
      headblk.setView("HZ_WF_PROCESS_DEF");
      headblk.defineCommand("HZ_WF_PROCESS_DEF_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      
      //tabs
      headbar.addCustomCommand("activateProcessConfig", "HZWFPROCESSDEFCONFIG: Process Config");
      headbar.addCustomCommand("activateUserAuth", "HZWFPROCESSDEFHZINITAUTHUSR: User");
      headbar.addCustomCommand("activateOrgAuth", "HZWFPROCESSDEFHZINITAUTHORG: Organization");
      headbar.addCustomCommand("activatePosAuth", "HZWFPROCESSDEFHZINITAUTHPOS: Position");
      headbar.addCustomCommand("activateGroupAuth", "HZWFPROCESSDEFHZINITAUTHGRP: Group");
      headbar.addCustomCommand("activateRelaPosAuth", "HZWFPROCESSDEFHZINITAUTHRELAPOS: Rela Position");
      
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("HZWFPROCESSDEFTBLHEAD: Hz Wf Process Defs");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
 
      
      hz_biz_wf_config_blk = mgr.newASPBlock("ITEM1");
      hz_biz_wf_config_blk.addField("ITEM0_OBJID").
      setHidden().
      setDbName("OBJID");
      
      hz_biz_wf_config_blk.
      addField("ITEM0_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      
      hz_biz_wf_config_blk.
      addField("PAGE_PATH"). 
      setMandatory().
      setInsertable().
      setLabel("HZBIZWFCONFIGPAGEPATH: Page Path").
      setSize(length_short);
      
      hz_biz_wf_config_blk.addField("ITEM0_PROCESS_KEY").
      setDbName("PROCESS_KEY").
      setInsertable().
      setLabel("HZBIZWFCONFIGITEM0PROCESSKEY: Process Key").
      setHidden().
      setSize(length_short);
      hz_biz_wf_config_blk.addField("ITEM0_PROCESS_NAME").
      setDbName("PROCESS_NAME").
      setInsertable().
      setHidden().
      setLabel("HZBIZWFCONFIGITEM0PROCESSNAME: Process Name").
      setSize(length_short);
      hz_biz_wf_config_blk.addField("REMARK").
      setInsertable().
      setLabel("HZBIZWFCONFIGREMARK: Remark").
      setSize(length_short);
      hz_biz_wf_config_blk.addField("CONDITION_EXPRESSION").
      setInsertable().
      setLabel("HZBIZWFCONFIGCONDITIONEXPRESSION: Condition Expression").
      setSize(length_short);
      hz_biz_wf_config_blk.setView("HZ_BIZ_WF_CONFIG");
      hz_biz_wf_config_blk.defineCommand("HZ_BIZ_WF_CONFIG_API","New__,Modify__,Remove__");
      hz_biz_wf_config_blk.setMasterBlock(headblk);
      hz_biz_wf_config_set = hz_biz_wf_config_blk.getASPRowSet();
      hz_biz_wf_config_bar = mgr.newASPCommandBar(hz_biz_wf_config_blk);
      hz_biz_wf_config_bar.defineCommand(hz_biz_wf_config_bar.OKFIND, "okFindITEM1");
      hz_biz_wf_config_bar.defineCommand(hz_biz_wf_config_bar.NEWROW, "newRowITEM1");
      hz_biz_wf_config_tbl = mgr.newASPTable(hz_biz_wf_config_blk);
      hz_biz_wf_config_tbl.setTitle("HZBIZWFCONFIGITEMHEAD1: HzBizWfConfig");
      hz_biz_wf_config_tbl.enableRowSelect();
      hz_biz_wf_config_tbl.setWrap();
      hz_biz_wf_config_lay = hz_biz_wf_config_blk.getASPBlockLayout();
      hz_biz_wf_config_lay.setDefaultLayoutMode(hz_biz_wf_config_lay.MULTIROW_LAYOUT);

      hz_init_auth_usr_blk = mgr.newASPBlock("ITEM2");
      hz_init_auth_usr_blk.addField("ITEM1_OBJID").
      setHidden().
      setDbName("OBJID");
      hz_init_auth_usr_blk.addField("ITEM1_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      hz_init_auth_usr_blk.addField("ITEM1_PROCESS_KEY").
      setDbName("PROCESS_KEY").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("HZINITAUTHUSRITEM1PROCESSKEY: Process Key").
      setSize(length_short);
      hz_init_auth_usr_blk.addField("USER_ID").
      setMandatory().
      setInsertable().
      setDynamicLOV("PERSON_INFO").
      setCustomValidation("USER_ID", "USER_NAME").
      setLabel("HZINITAUTHUSRUSERID: User Id").
      setSize(length_short);
      hz_init_auth_usr_blk.addField("USER_NAME").
      setReadOnly().
      setLabel("HZINITAUTHUSRUSERNAME: User Name").
      setSize(length_short);
      
      hz_init_auth_usr_blk.setView("HZ_INIT_AUTH_USR");
      hz_init_auth_usr_blk.defineCommand("HZ_INIT_AUTH_USR_API","New__,Modify__,Remove__");
      hz_init_auth_usr_blk.setMasterBlock(headblk);
      hz_init_auth_usr_set = hz_init_auth_usr_blk.getASPRowSet();
      hz_init_auth_usr_bar = mgr.newASPCommandBar(hz_init_auth_usr_blk);
      hz_init_auth_usr_bar.defineCommand(hz_init_auth_usr_bar.OKFIND, "okFindITEM2");
      hz_init_auth_usr_bar.defineCommand(hz_init_auth_usr_bar.NEWROW, "newRowITEM2");
      hz_init_auth_usr_tbl = mgr.newASPTable(hz_init_auth_usr_blk);
      hz_init_auth_usr_tbl.setTitle("HZINITAUTHUSRITEMHEAD2: HzInitAuthUsr");
      hz_init_auth_usr_tbl.enableRowSelect();
      hz_init_auth_usr_tbl.setWrap();
      hz_init_auth_usr_lay = hz_init_auth_usr_blk.getASPBlockLayout();
      hz_init_auth_usr_lay.setDefaultLayoutMode(hz_init_auth_usr_lay.MULTIROW_LAYOUT);

      hz_init_auth_org_blk = mgr.newASPBlock("ITEM3");
      hz_init_auth_org_blk.addField("ITEM2_OBJID").
      setHidden().
      setDbName("OBJID");
      hz_init_auth_org_blk.addField("ITEM2_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      hz_init_auth_org_blk.addField("ITEM2_PROCESS_KEY").
      setDbName("PROCESS_KEY").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("HZINITAUTHORGITEM2PROCESSKEY: Process Key").
      setSize(length_short);
      hz_init_auth_org_blk.addField("ORG_NO").
      setMandatory().
      setInsertable().
      setLabel("HZINITAUTHORGORGNO: Org No").
      setDynamicLOV("GENERAL_ORGANIZATION").
      setCustomValidation("ORG_NO", "ORG_NAME").
      setSize(length_short);
      hz_init_auth_org_blk.addField("ORG_NAME").
      setReadOnly().
      setLabel("HZINITAUTHORGORGNAME: Org Name").
      setSize(length_short);
      hz_init_auth_org_blk.setView("HZ_INIT_AUTH_ORG");
      hz_init_auth_org_blk.defineCommand("HZ_INIT_AUTH_ORG_API","New__,Modify__,Remove__");
      hz_init_auth_org_blk.setMasterBlock(headblk);
      hz_init_auth_org_set = hz_init_auth_org_blk.getASPRowSet();
      hz_init_auth_org_bar = mgr.newASPCommandBar(hz_init_auth_org_blk);
      hz_init_auth_org_bar.defineCommand(hz_init_auth_org_bar.OKFIND, "okFindITEM3");
      hz_init_auth_org_bar.defineCommand(hz_init_auth_org_bar.NEWROW, "newRowITEM3");
      hz_init_auth_org_tbl = mgr.newASPTable(hz_init_auth_org_blk);
      hz_init_auth_org_tbl.setTitle("HZINITAUTHORGITEMHEAD3: HzInitAuthOrg");
      hz_init_auth_org_tbl.enableRowSelect();
      hz_init_auth_org_tbl.setWrap();
      hz_init_auth_org_lay = hz_init_auth_org_blk.getASPBlockLayout();
      hz_init_auth_org_lay.setDefaultLayoutMode(hz_init_auth_org_lay.MULTIROW_LAYOUT);

      hz_init_auth_pos_blk = mgr.newASPBlock("ITEM4");
      hz_init_auth_pos_blk.addField("ITEM3_OBJID").
      setHidden().
      setDbName("OBJID");
      hz_init_auth_pos_blk.addField("ITEM3_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      hz_init_auth_pos_blk.addField("ITEM3_PROCESS_KEY").
      setDbName("PROCESS_KEY").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("HZINITAUTHPOSITEM3PROCESSKEY: Process Key").
      setSize(length_short);
      hz_init_auth_pos_blk.addField("ITEM3_ORG_NO").
      setDbName("ORG_NO").
      setMandatory().
      setInsertable().
      setLabel("HZINITAUTHPOSITEM3ORGNO: Org No").
      setDynamicLOV("GENERAL_ORGANIZATION").
      setSize(length_short);
      hz_init_auth_pos_blk.addField("POS_NO").
      setMandatory().
      setInsertable().
      setLabel("HZINITAUTHPOSPOSNO: Pos No").
      setDynamicLOV("GENERAL_ORG_POS","ITEM3_ORG_NO").
      setCustomValidation("POS_NO", "POS_NAME").
      setSize(length_short);
      hz_init_auth_pos_blk.addField("POS_NAME").
      setInsertable().
      setLabel("HZINITAUTHPOSPOSNAME: Pos Name").
      setReadOnly().
      setSize(length_short);
      hz_init_auth_pos_blk.setView("HZ_INIT_AUTH_POS");
      hz_init_auth_pos_blk.defineCommand("HZ_INIT_AUTH_POS_API","New__,Modify__,Remove__");
      hz_init_auth_pos_blk.setMasterBlock(headblk);
      hz_init_auth_pos_set = hz_init_auth_pos_blk.getASPRowSet();
      hz_init_auth_pos_bar = mgr.newASPCommandBar(hz_init_auth_pos_blk);
      hz_init_auth_pos_bar.defineCommand(hz_init_auth_pos_bar.OKFIND, "okFindITEM4");
      hz_init_auth_pos_bar.defineCommand(hz_init_auth_pos_bar.NEWROW, "newRowITEM4");
      hz_init_auth_pos_tbl = mgr.newASPTable(hz_init_auth_pos_blk);
      hz_init_auth_pos_tbl.setTitle("HZINITAUTHPOSITEMHEAD4: HzInitAuthPos");
      hz_init_auth_pos_tbl.enableRowSelect();
      hz_init_auth_pos_tbl.setWrap();
      hz_init_auth_pos_lay = hz_init_auth_pos_blk.getASPBlockLayout();
      hz_init_auth_pos_lay.setDefaultLayoutMode(hz_init_auth_pos_lay.MULTIROW_LAYOUT);

      hz_init_auth_grp_blk = mgr.newASPBlock("ITEM5");
      hz_init_auth_grp_blk.addField("ITEM4_OBJID").
      setHidden().
      setDbName("OBJID");
      hz_init_auth_grp_blk.addField("ITEM4_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      hz_init_auth_grp_blk.addField("ITEM4_PROCESS_KEY").
      setDbName("PROCESS_KEY").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("HZINITAUTHGRPITEM4PROCESSKEY: Process Key").
      setSize(length_short);
      hz_init_auth_grp_blk.addField("GRP_NO").
      setMandatory().
      setInsertable().
      setLabel("HZINITAUTHGRPGRPNO: Grp No").
      setDynamicLOV("GENERAL_APP_GRP").
      setCustomValidation("GRP_NO", "GRP_NAME").
      setSize(length_short);
      hz_init_auth_grp_blk.addField("GRP_NAME").
      setReadOnly().
      setLabel("HZINITAUTHGRPGRPNAME: Group Name").
      setSize(length_short);
      hz_init_auth_grp_blk.setView("HZ_INIT_AUTH_GRP");
      hz_init_auth_grp_blk.defineCommand("HZ_INIT_AUTH_GRP_API","New__,Modify__,Remove__");
      hz_init_auth_grp_blk.setMasterBlock(headblk);
      hz_init_auth_grp_set = hz_init_auth_grp_blk.getASPRowSet();
      hz_init_auth_grp_bar = mgr.newASPCommandBar(hz_init_auth_grp_blk);
      hz_init_auth_grp_bar.defineCommand(hz_init_auth_grp_bar.OKFIND, "okFindITEM5");
      hz_init_auth_grp_bar.defineCommand(hz_init_auth_grp_bar.NEWROW, "newRowITEM5");
      hz_init_auth_grp_tbl = mgr.newASPTable(hz_init_auth_grp_blk);
      hz_init_auth_grp_tbl.setTitle("HZINITAUTHGRPITEMHEAD5: HzInitAuthGrp");
      hz_init_auth_grp_tbl.enableRowSelect();
      hz_init_auth_grp_tbl.setWrap();
      hz_init_auth_grp_lay = hz_init_auth_grp_blk.getASPBlockLayout();
      hz_init_auth_grp_lay.setDefaultLayoutMode(hz_init_auth_grp_lay.MULTIROW_LAYOUT);

      hz_init_auth_rela_pos_blk = mgr.newASPBlock("ITEM6");
      hz_init_auth_rela_pos_blk.addField("ITEM6_OBJID").
      setHidden().
      setDbName("OBJID");
      hz_init_auth_rela_pos_blk.addField("ITEM6_OBJVERSION").
      setHidden().
      setDbName("OBJVERSION");
      hz_init_auth_rela_pos_blk.addField("ITEM6_PROCESS_KEY").
      setDbName("PROCESS_KEY").
      setMandatory().
      setInsertable().
      setHidden().
      setLabel("HZINITAUTHRELAPOSITEM0PROCESSKEY: Process Key").
      setSize(length_short);
      
      hz_init_auth_rela_pos_blk.addField("ITEM6_POS_NO").setDbName("POS_NO").
      setMandatory().
      setInsertable().
      setLabel("HZINITAUTHRELAPOSPOSNO: Pos No").
      setSize(length_short).
      setDynamicLOV("GENERAL_POSITION");
      
      hz_init_auth_rela_pos_blk.addField("ITEM6_POS_NAME").
      setFunction("GENERAL_POSITION_API.Get_Pos_Desc(:ITEM6_POS_NO)").
      setLabel("HZINITAUTHRELAPOSPOSNAME: Pos Name").
      setReadOnly().
      setSize(length_short);
      mgr.getASPField("ITEM6_POS_NO").setValidation("ITEM6_POS_NAME");
      
      hz_init_auth_rela_pos_blk.setView("HZ_INIT_AUTH_RELA_POS");
      hz_init_auth_rela_pos_blk.defineCommand("HZ_INIT_AUTH_RELA_POS_API","New__,Modify__,Remove__");
      hz_init_auth_rela_pos_blk.setMasterBlock(headblk);
      hz_init_auth_rela_pos_set = hz_init_auth_rela_pos_blk.getASPRowSet();
      hz_init_auth_rela_pos_bar = mgr.newASPCommandBar(hz_init_auth_rela_pos_blk);
      hz_init_auth_rela_pos_bar.defineCommand(hz_init_auth_rela_pos_bar.OKFIND, "okFindITEM6");
      hz_init_auth_rela_pos_bar.defineCommand(hz_init_auth_rela_pos_bar.NEWROW, "newRowITEM6");
      hz_init_auth_rela_pos_tbl = mgr.newASPTable(hz_init_auth_rela_pos_blk);
      hz_init_auth_rela_pos_tbl.setTitle("HZINITAUTHRELAPOSITEMHEAD1: HzInitAuthRelaPos");
      hz_init_auth_rela_pos_tbl.enableRowSelect();
      hz_init_auth_rela_pos_tbl.setWrap();
      hz_init_auth_rela_pos_lay = hz_init_auth_rela_pos_blk.getASPBlockLayout();
      hz_init_auth_rela_pos_lay.setDefaultLayoutMode(hz_init_auth_rela_pos_lay.MULTIROW_LAYOUT);
      
      tabs = mgr.newASPTabContainer();
      tabs.addTab(mgr.translate("HZWFPROCESSDEFCONFIG: Process Config"), "javascript:commandSet('MAIN.activateProcessConfig','')");
      tabs.addTab(mgr.translate("HZWFPROCESSDEFHZINITAUTHUSR: User"), "javascript:commandSet('MAIN.activateUserAuth','')");
      tabs.addTab(mgr.translate("HZWFPROCESSDEFHZINITAUTHORG: Organization"), "javascript:commandSet('MAIN.activateOrgAuth','')");
      tabs.addTab(mgr.translate("HZWFPROCESSDEFHZINITAUTHPOS: Position"), "javascript:commandSet('MAIN.activatePosAuth','')");
      tabs.addTab(mgr.translate("HZWFPROCESSDEFHZINITAUTHGRP: Group"), "javascript:commandSet('MAIN.activateGroupAuth','')");
      tabs.addTab(mgr.translate("HZWFPROCESSDEFHZINITAUTHRELAPOS: Relative Position"), "javascript:commandSet('MAIN.activateRelaPosAuth','')");
   }
   
   public void activateProcessConfig(){
      tabs.setActiveTab(1);
      okFindITEM1();
   }
   public void activateUserAuth(){
      tabs.setActiveTab(2);
      okFindITEM2();
   }

   public void activateOrgAuth(){
      tabs.setActiveTab(3);
      okFindITEM3();
   }
   
   public void activatePosAuth(){
      tabs.setActiveTab(4);
      okFindITEM4();
   }
   public void activateRelaPosAuth(){
      tabs.setActiveTab(6);
      okFindITEM6();
   }
   
   public void activateGroupAuth(){
      tabs.setActiveTab(5);
      okFindITEM5();
   }

   public void  adjust()
   {
      // fill function body
      headbar.removeCustomCommand("activateProcessConfig");
      headbar.removeCustomCommand("activateUserAuth");
      headbar.removeCustomCommand("activateOrgAuth");
      headbar.removeCustomCommand("activatePosAuth");
      headbar.removeCustomCommand("activateGroupAuth");
      headbar.removeCustomCommand("activateRelaPosAuth");
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "HZWFPROCESSDEFDESC: Hz Wf Process Def";
   }


   protected String getTitle()
   {
      return "HZWFPROCESSDEFTITLE: Hz Wf Process Def";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      appendToHTML(headlay.show());
      
      if (headset.countRows()>0)
      {
         if (headlay.isSingleLayout()||headlay.isCustomLayout() ||headlay.isEditLayout())
         {
            
            appendToHTML(tabs.showTabsInit());
            if (tabs.getActiveTab()== 1)
            {
               appendToHTML(hz_biz_wf_config_lay.show());
            }
            else if (tabs.getActiveTab()== 2)
            {
               appendToHTML(hz_init_auth_usr_lay.show());
            }
            else if (tabs.getActiveTab()== 3)
            {
               appendToHTML(hz_init_auth_org_lay.show());
            }
            else if (tabs.getActiveTab()== 4)
            {
               appendToHTML(hz_init_auth_pos_lay.show());
            }
            else if (tabs.getActiveTab()== 5)
            {
               appendToHTML(hz_init_auth_grp_lay.show());
            }
            else if (tabs.getActiveTab()== 6)
            {
               appendToHTML(hz_init_auth_rela_pos_lay.show());
            }
            appendToHTML(tabs.showTabsFinish());
         }
      }
      
   }
}
