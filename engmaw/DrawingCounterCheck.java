/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.engmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class DrawingCounterCheck extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.engmaw.DrawingCounterCheck");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock drawing_counter_check_line_blk;
   private ASPRowSet drawing_counter_check_line_set;
   private ASPCommandBar drawing_counter_check_line_bar;
   private ASPTable drawing_counter_check_line_tbl;
   private ASPBlockLayout drawing_counter_check_line_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  DrawingCounterCheck (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("DRAWINGCOUNTERCHECKNODATA: No data found.");
         headset.clear();
      }
      eval( drawing_counter_check_line_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","DRAWING_COUNTER_CHECK_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(drawing_counter_check_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,drawing_counter_check_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","DRAWING_COUNTER_CHECK_LINE_API.New__",drawing_counter_check_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_ID", headset.getValue("ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      drawing_counter_check_line_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      
      headblk.addField("ID").
              setMandatory().
              setInsertable().
              setLabel("DRAWINGCOUNTERCHECKID: Id").
              setSize(20);
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setDynamicLOV("GENERAL_PROJECT").
              setLabel("DRAWINGCOUNTERCHECKPROJNO: Proj No").
              setSize(20);
      headblk.addField("PROJ_DESC").
               setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
               setLabel("DRAWINGCOUNTERCHECKPROJDESC: Proj Desc").
               setReadOnly().
               setSize(30);
      mgr.getASPField("PROJ_NO").setValidation("PROJ_DESC");
      
      headblk.addField("COUN_CHECK_PLACE").
              setInsertable().
              setLabel("DRAWINGCOUNTERCHECKCOUNCHECKPLACE: Coun Check Place").
              setSize(20);
      headblk.addField("DOC_PERSON").
              setInsertable().
              setLabel("DRAWINGCOUNTERCHECKDOCPERSON: Doc Person").
              setSize(20);
      headblk.addField("COUN_CHECK_DATE","Date").
              setInsertable().
              setLabel("DRAWINGCOUNTERCHECKCOUNCHECKDATE: Coun Check Date").
              setSize(20);
      headblk.addField("ENGINEERING_PART").
              setInsertable().
              setLabel("DRAWINGCOUNTERCHECKENGINEERINGPART: Engineering Part").
              setHeight(3).
              setSize(50);
      headblk.addField("DESIGN_UNIT_PART").
              setInsertable().
              setLabel("DRAWINGCOUNTERCHECKDESIGNUNITPART: Design Unit Part").
              setHeight(3).
              setSize(50);
      headblk.addField("SUP_UNIT_PART").
              setInsertable().
              setLabel("DRAWINGCOUNTERCHECKSUPUNITPART: Sup Unit Part").
              setHeight(3).
              setSize(50);
      headblk.addField("CON_UNIT_PART").
              setInsertable().
              setLabel("DRAWINGCOUNTERCHECKCONUNITPART: Con Unit Part").
              setHeight(3).
              setSize(50);
      

      headblk.addField("CREATE_PERSON").
              setInsertable().
//              setHidden().
              setDynamicLOV("PERSON_INFO").
              setLabel("DRAWINGCOUNTERCHECKCREATEPERSON: Create Person").
              setSize(20);
      headblk.addField("CREATE_PERSON_NAME").
              setReadOnly().
//              setHidden().
              setLabel("DRAWINGCOUNTERCHECKCREATEPERSONNAME: Create Person Name").
              setFunction("PERSON_INFO_API.GET_NAME (:CREATE_PERSON)").
              setSize(30);
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
//              setHidden().
              setLabel("DRAWINGCOUNTERCHECKCREATETIME: Create Time").
              setSize(20);

      headblk.setView("DRAWING_COUNTER_CHECK");
      headblk.defineCommand("DRAWING_COUNTER_CHECK_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("printReport", "DRAWINGCOUNTERCHECKRINTREPORT: Print Report...");
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("DRAWINGCOUNTERCHECKTBLHEAD: Drawing Counter Checks");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("PROJ_DESC");
      headlay.setSimple("CREATE_PERSON_NAME");
      headlay.setDataSpan("COUN_CHECK_DATE", 5);
 


      drawing_counter_check_line_blk = mgr.newASPBlock("ITEM1");
      drawing_counter_check_line_blk.addField("ITEM0_OBJID").
                                     setHidden().
                                     setDbName("OBJID");
      drawing_counter_check_line_blk.addField("ITEM0_OBJVERSION").
                                     setHidden().
                                     setDbName("OBJVERSION");
      drawing_counter_check_line_blk.addField("ITEM0_PROJ_NO").
                                     setDbName("PROJ_NO").
                                     setMandatory().
                                     setInsertable().
                                     setHidden().
                                     setLabel("DRAWINGCOUNTERCHECKLINEITEM0PROJNO: Proj No").
                                     setSize(20);
      drawing_counter_check_line_blk.addField("ITEM0_ID").
                                     setDbName("ID").
                                     setMandatory().
                                     setHidden().
                                     setInsertable().
                                     setLabel("DRAWINGCOUNTERCHECKLINEITEM0ID: Id").
                                     setSize(20);
      drawing_counter_check_line_blk.addField("LINE_NO").
//                                     setMandatory().
//                                     setInsertable().
                                     setReadOnly().
                                     setLabel("DRAWINGCOUNTERCHECKLINELINENO: Line No").
                                     setSize(20);

      drawing_counter_check_line_blk.addField("VOLUME_NO").
                                     setInsertable().
                                     setDynamicLOV("DRAWING_LIST_LOV","PROJ_NO").
                                     setLabel("DRAWINGCOUNTERCHECKLINEVOLUMENO: Volume No").
                                     setSize(20);
      drawing_counter_check_line_blk.addField("VOLUME_DESC").
                                     setFunction("DRAWING_LIST_API.GET_VOLUME_DESC ( :PROJ_NO,:VOLUME_NO)").
                                     setReadOnly().
                                     setLabel("DRAWINGCOUNTERCHECKLINEVOLUMEDESC: Volume Desc").
                                     setSize(30);
      mgr.getASPField("VOLUME_NO").setValidation("VOLUME_DESC");
      drawing_counter_check_line_blk.addField("DRAWING_NO").
                                     setInsertable().
                                     setLabel("DRAWINGCOUNTERCHECKLINEDRAWINGNO: Drawing No").
                                     setSize(20);
      drawing_counter_check_line_blk.addField("PROBLEMS").
                                     setInsertable().
                                     setLabel("DRAWINGCOUNTERCHECKLINEPROBLEMS: Problems").
                                     setHeight(4).
                                     setSize(50);
      drawing_counter_check_line_blk.addField("REVISIONS").
                                     setInsertable().
                                     setLabel("DRAWINGCOUNTERCHECKLINEREVISIONS: Revisions").
                                     setHeight(4).
                                     setSize(50);
      drawing_counter_check_line_blk.addField("NOTE").
                                     setInsertable().
                                     setLabel("DRAWINGCOUNTERCHECKLINENOTE: Note").
                                     setHeight(3).
                                     setSize(100);
      drawing_counter_check_line_blk.setView("DRAWING_COUNTER_CHECK_LINE");
      drawing_counter_check_line_blk.defineCommand("DRAWING_COUNTER_CHECK_LINE_API","New__,Modify__,Remove__");
      drawing_counter_check_line_blk.setMasterBlock(headblk);
      drawing_counter_check_line_set = drawing_counter_check_line_blk.getASPRowSet();
      drawing_counter_check_line_bar = mgr.newASPCommandBar(drawing_counter_check_line_blk);
      drawing_counter_check_line_bar.defineCommand(drawing_counter_check_line_bar.OKFIND, "okFindITEM1");
      drawing_counter_check_line_bar.defineCommand(drawing_counter_check_line_bar.NEWROW, "newRowITEM1");
      drawing_counter_check_line_tbl = mgr.newASPTable(drawing_counter_check_line_blk);
      drawing_counter_check_line_tbl.setTitle("DRAWINGCOUNTERCHECKLINEITEMHEAD1: DrawingCounterCheckLine");
      drawing_counter_check_line_tbl.enableRowSelect();
      drawing_counter_check_line_tbl.setWrap();
      drawing_counter_check_line_lay = drawing_counter_check_line_blk.getASPBlockLayout();
      drawing_counter_check_line_lay.setDefaultLayoutMode(drawing_counter_check_line_lay.MULTIROW_LAYOUT);
      drawing_counter_check_line_lay.setDataSpan("LINE_NO", 5);
      drawing_counter_check_line_lay.setSimple("VOLUME_DESC");



   }



   public void  adjust()
   {
      // fill function body
   }

   

   public void  printReport() throws FndException, UnsupportedEncodingException
  {
   ASPManager mgr = getASPManager();
   ASPConfig cfg = getASPConfig();
   String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
   if (headlay.isMultirowLayout())
      headset.goTo(headset.getRowSelected());
   if (headset.countRows()>0 )
         {   
            String proj_no = headset.getValue("PROJ_NO");
            String accept_id = headset.getValue("ID");
             appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=DrawingCounterCheck.raq&proj_no="+proj_no+"&id="+accept_id
               + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
        }
  }   
   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "DRAWINGCOUNTERCHECKDESC: Drawing Counter Check";
   }


   protected String getTitle()
   {
      return "DRAWINGCOUNTERCHECKTITLE: Drawing Counter Check";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
      if (drawing_counter_check_line_lay.isVisible())
          appendToHTML(drawing_counter_check_line_lay.show());

   }
}
