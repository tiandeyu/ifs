/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.engmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.docmaw.DocmawConstants;
import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class DrawingRequirePlanSum extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.engmaw.DrawingRequirePlan");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
 
   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock drawing_require_plan_line_blk;
   private ASPRowSet drawing_require_plan_line_set;
   private ASPCommandBar drawing_require_plan_line_bar;
   private ASPTable drawing_require_plan_line_tbl;
   private ASPBlockLayout drawing_require_plan_line_lay;

   private String startDate;
   private String endDate;
   private String repMonth;
   private String supplierId;
   private String constructionSite;
   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  DrawingRequirePlanSum (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   protected String getCurrentPageDocClass() {
      return DocmawConstants.PROJ_DESIGN;
   }     
   
   public void run()
   {
      ASPManager mgr = getASPManager();

      repMonth = mgr.readValue("SEARCH_TITLE");
      supplierId=mgr.readValue("SEARCH_PROCESS_NAME");
      constructionSite=mgr.readValue("SEARCH_PROCESS_NAME");
      startDate=mgr.readValue("START_DATE");
      endDate=mgr.readValue("END_DATE");
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("DRAW_REQ_NO")) )
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("DRAWINGREQUIREPLANNODATA: No data found.");
         headset.clear();
      }
      eval( drawing_require_plan_line_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","DRAWING_REQUIRE_PLAN_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(drawing_require_plan_line_blk);
      q.addWhereCondition("DRAW_REQ_NO = ?");
      q.addParameter("DRAW_REQ_NO", headset.getValue("DRAW_REQ_NO"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,drawing_require_plan_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","DRAWING_REQUIRE_PLAN_LINE_API.New__",drawing_require_plan_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_DRAW_REQ_NO", headset.getValue("DRAW_REQ_NO"));
      cmd.setParameter("DOC_CLASS", this.getCurrentPageDocClass());
      cmd.setParameter("PROJ_NO", headset.getValue("PROJECT_NO"));
      trans = mgr.perform(trans);  
      data = trans.getBuffer("ITEM1/DATA");
      drawing_require_plan_line_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
     
      mgr.getASPField("PROJECT_NO").setValidation("PROJ_NAME");
      
      headblk.addField("CONSTRUCTION_SITE").
              setFunction("''").   
              setDynamicLOV("SUPPLIER_INFO").
              setLabel("DRAWINGREQUIREPLANCONSTRUCTIONSITE: Construction Site").
              setSize(20);
      headblk.addField("CONSTRUCTION_SITE_NAME").
              setInsertable().
              setFunction("SUPPLIER_INFO_API.GET_NAME(:CONSTRUCTION_SITE)").
              setLabel("DRAWINGREQUIREPLANCONSTRUCTIONSITE: Construction Site").
              setSize(20);
      mgr.getASPField("CONSTRUCTION_SITE").setValidation("CONSTRUCTION_SITE_NAME");
     
      headblk.addField("REPORT_USER").
              setInsertable().
              setLabel("DRAWINGREQUIREPLANREPORTUSER: Report User").
              setSize(20).
              setHidden();
      headblk.addField("REPORT_DATE","Date").
              setMandatory().
              setInsertable().
              setLabel("DRAWINGREQUIREPLANREPORTDATE: Report Date").
              setSize(20).
              setReadOnly();
      headblk.addField("REPORT_USER_NAME").
              setFunction("PERSON_INFO_API.GET_NAME (:REPORT_USER)").
              setLabel("DRAWINGREQUIREPLANPERSONINFONAME: Person Info Name").
              setSize(20).
              setReadOnly();  
      mgr.getASPField("REPORT_USER").setValidation("REPORT_USER_NAME");
      headblk.addField("REQ_MONTH").
              enumerateValues("REQ_MONTH_API").    
              setSelectBox().    
              setMandatory().
              setInsertable().
              setLabel("DESGRULEDOCTYPE: Doc Type").
              setSize(20);    
      headblk.setView("DRAWING_REQUIRE_PLAN");
      headblk.defineCommand("DRAWING_REQUIRE_PLAN_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("DRAWINGREQUIREPLANTBLHEAD: Drawing Require Plans");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("PROJ_NAME");
      headlay.setSimple("CONSTRUCTION_SITE_NAME");
      headlay.setDialogColumns(2);     

      drawing_require_plan_line_blk = mgr.newASPBlock("ITEM1");
      drawing_require_plan_line_blk.addField("ITEM0_OBJID").
                                    setHidden().
                                    setDbName("OBJID");
      drawing_require_plan_line_blk.addField("ITEM0_OBJVERSION").
                                    setHidden().
                                    setDbName("OBJVERSION");
      drawing_require_plan_line_blk.addField("ITEM0_DRAW_REQ_NO").
                                    setDbName("DRAW_REQ_NO").
                                    setMandatory().
                                    setHidden().
                                    setLabel("DRAWINGREQUIREPLANLINEITEM0DRAWREQNO: Draw Req No").
                                    setSize(20);
      drawing_require_plan_line_blk.addField("REQ_LINE_NO").
                                    setMandatory().
                                    setInsertable().
                                    setHidden().
                                    setLabel("DRAWINGREQUIREPLANLINEREQLINENO: Req Line No").
                                    setSize(20);
      drawing_require_plan_line_blk.addField("PROJ_NO").
                                    setReadOnly(). 
                                    setHidden().  
                                    setLabel("DRAWINGREQUIREPLANLINEPROJNO: Proj No").
                                    setSize(20);  
      drawing_require_plan_line_blk.addField("CONSTRUCTION_PRO").
                                    setInsertable().
                                    setMandatory().
                                    setLabel("DRAWINGREQUIREPLANLINECONSTRUCTIONPRO: Construction Pro").
                                    setSize(20);
      drawing_require_plan_line_blk.addField("CONSTRUCTION_PERSON").
                                    setInsertable().
                                    setMandatory().
                                    setLabel("DRAWINGREQUIREPLANLINECONSTRUCTIONPERSON: Construction Person").
                                    setSize(20);
      drawing_require_plan_line_blk.addField("SPECIALTY_NO").
                                    setInsertable().
                                    setMandatory().
                                    setDynamicLOV("GENERAL_SPECIALTY").
                                    setLabel("DRAWINGREQUIREPLANLINESPECIALTYNO: Specialty No").
                                    setSize(20);  
      drawing_require_plan_line_blk.addField("SPECIALTY_DESC").
                                    setFunction("GENERAL_SPECIALTY_API.Get_Specialty_Desc(:PROJ_NO,:SPECIALTY_NO)").
                                    setLabel("DRAWINGREQUIREPLANLINEGENERALSPECIALTYDESC: General Specialty Desc").
                                    setSize(20).
                                    setReadOnly();  
      mgr.getASPField("SPECIALTY_NO").setValidation("SPECIALTY_DESC");  
      drawing_require_plan_line_blk.addField("DOC_CLASS").
                                    setInsertable().
                                    setLabel("DRAWINGREQUIREPLANLINEDOCCLASS: Doc Class").
                                    setSize(12).
                                    setHidden();                
      drawing_require_plan_line_blk.addField("DOC_NO").
                                    setInsertable().
                                    setLabel("DRAWINGREQUIREPLANLINEDOCNO: Doc No").
                                    setDynamicLOV("DOC_TITLE","DOC_CLASS").    
                                    setSize(20);  
      drawing_require_plan_line_blk.addField("BOOKLET_NO").
                                    setFunction("DOC_TITLE_API.Get_Booklet_No(:DOC_CLASS,:DOC_NO)").
                                    setReadOnly();  
      mgr.getASPField("DOC_NO").setValidation("BOOKLET_NO");
      drawing_require_plan_line_blk.addField("BOOKLET_NAME").
                                    setFunction("DOC_BOOKLET_API.Get_Booklet_Name(DOC_TITLE_API.Get_Booklet_No(:DOC_CLASS,:DOC_NO))").
                                    setReadOnly();  
      drawing_require_plan_line_blk.addField("REQUIRED_DATE","Date").
                                    setInsertable().
                                    setMandatory().
                                    setLabel("DRAWINGREQUIREPLANLINEREQUIREDDATE: Required Date").
                                    setSize(20);
      drawing_require_plan_line_blk.addField("REQUIRED_QTY","Number").
                                    setInsertable().
                                    setMandatory().
                                    setLabel("DRAWINGREQUIREPLANLINEREQUIREDQTY: Required Qty").
                                    setSize(20);
      drawing_require_plan_line_blk.addField("SUPERVISON_DATE","Date").
                                    setInsertable().
                                    setLabel("DRAWINGREQUIREPLANLINESUPERVISONDATE: Supervison Date").
                                    setSize(20);
      drawing_require_plan_line_blk.addField("ENGINEER_DEPT_DATE","Date").
                                    setInsertable().
                                    setLabel("DRAWINGREQUIREPLANLINEENGINEERDEPTDATE: Engineer Dept Date").
                                    setSize(20);      
      drawing_require_plan_line_blk.addField("NOTE").  
                                    setInsertable().
                                    setLabel("DRAWINGREQUIREPLANLINENOTE: Note").
                                    setHeight(5).
                                    setSize(120);   
      drawing_require_plan_line_blk.setView("DRAWING_REQUIRE_PLAN_LINE");
      drawing_require_plan_line_blk.defineCommand("DRAWING_REQUIRE_PLAN_LINE_API","New__,Modify__,Remove__");
      drawing_require_plan_line_blk.setMasterBlock(headblk);
      drawing_require_plan_line_set = drawing_require_plan_line_blk.getASPRowSet();
      drawing_require_plan_line_bar = mgr.newASPCommandBar(drawing_require_plan_line_blk);
      drawing_require_plan_line_bar.defineCommand(drawing_require_plan_line_bar.OKFIND, "okFindITEM1");
      drawing_require_plan_line_bar.defineCommand(drawing_require_plan_line_bar.NEWROW, "newRowITEM1");
      drawing_require_plan_line_tbl = mgr.newASPTable(drawing_require_plan_line_blk);
      drawing_require_plan_line_tbl.setTitle("DRAWINGREQUIREPLANLINEITEMHEAD1: DrawingRequirePlanLine");
      drawing_require_plan_line_tbl.enableRowSelect();
      drawing_require_plan_line_tbl.setWrap();
      drawing_require_plan_line_lay = drawing_require_plan_line_blk.getASPBlockLayout();
      drawing_require_plan_line_lay.setDefaultLayoutMode(drawing_require_plan_line_lay.MULTIROW_LAYOUT);
      drawing_require_plan_line_lay.setDialogColumns(2);   
      drawing_require_plan_line_lay.setDataSpan("NOTE",6);
      drawing_require_plan_line_lay.setDataSpan("NOTE",6);
      drawing_require_plan_line_lay.setSimple("SPECIALTY_DESC");
   }   

   
   public void  adjust()
   {
      // fill function body
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "DRAWINGREQUIREPLANDESC: Drawing Require Plan";
   }


   protected String getTitle()
   {
      return "DRAWINGREQUIREPLANTITLE: Drawing Require Plan";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      if (drawing_require_plan_line_lay.isVisible())
          appendToHTML(drawing_require_plan_line_lay.show());

   }
}
