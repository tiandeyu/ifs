/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.engmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class EngBasicData extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.engmaw.EngBasicData");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   private ASPBlock VOLUME_STATUS_blk;
   private ASPRowSet VOLUME_STATUS_set;
   private ASPCommandBar VOLUME_STATUS_bar;
   private ASPTable VOLUME_STATUS_tbl;
   private ASPBlockLayout VOLUME_STATUS_lay;
   
   private ASPBlock VOLUME_TYPE_blk;
   private ASPRowSet VOLUME_TYPE_set;
   private ASPCommandBar VOLUME_TYPE_bar;
   private ASPTable VOLUME_TYPE_tbl;
   private ASPBlockLayout VOLUME_TYPE_lay;
   
   private ASPBlock VOLUME_SOURCE_blk;
   private ASPRowSet VOLUME_SOURCE_set;
   private ASPCommandBar VOLUME_SOURCE_bar;
   private ASPTable VOLUME_SOURCE_tbl;
   private ASPBlockLayout VOLUME_SOURCE_lay;
   
   private ASPBlock DRAW_PRO_RES_PER_blk;
   private ASPRowSet DRAW_PRO_RES_PER_set;
   private ASPCommandBar DRAW_PRO_RES_PER_bar;
   private ASPTable DRAW_PRO_RES_PER_tbl;
   private ASPBlockLayout DRAW_PRO_RES_PER_lay;
   
   private ASPTabContainer tabs;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  EngBasicData (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("MAJOR_NO")) )
         okFind();
      else
         okFind();
         
     tabs.saveActiveTab();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("VOLUMEMAJORNODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","VOLUME_MAJOR_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }
   
   public void okFindItem1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(VOLUME_STATUS_blk);
      q = trans.addQuery(VOLUME_STATUS_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,VOLUME_STATUS_blk);
      if (  VOLUME_STATUS_set.countRows() == 0 )
      {
         mgr.showAlert("VOLUMESTATUSNODATA: No data found.");
         VOLUME_STATUS_set.clear();
      }
   }



   public void countFindItem1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(VOLUME_STATUS_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      VOLUME_STATUS_lay.setCountValue(toInt(VOLUME_STATUS_set.getValue("N")));
      VOLUME_STATUS_set.clear();
   }



   public void newRowItem1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","VOLUME_STATUS_API.New__",VOLUME_STATUS_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      VOLUME_STATUS_set.addRow(data);
   }
   
   public void okFindItem2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(VOLUME_TYPE_blk);
      q = trans.addQuery(VOLUME_TYPE_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,VOLUME_TYPE_blk);
      if (  VOLUME_TYPE_set.countRows() == 0 )
      {
         mgr.showAlert("VOLUMETYPENODATA: No data found.");
         VOLUME_TYPE_set.clear();
      }
   }



   public void countFindItem2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(VOLUME_TYPE_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      VOLUME_TYPE_lay.setCountValue(toInt(headset.getValue("N")));
      VOLUME_TYPE_set.clear();
   }



   public void newRowItem2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","VOLUME_TYPE_API.New__",VOLUME_TYPE_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      VOLUME_TYPE_set.addRow(data);
   }
   
   
   public void okFindItem3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(VOLUME_SOURCE_blk);
      q = trans.addQuery(VOLUME_SOURCE_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,VOLUME_SOURCE_blk);
      if (  VOLUME_SOURCE_set.countRows() == 0 )
      {
         mgr.showAlert("VOLUMESOURCENODATA: No data found.");
         VOLUME_SOURCE_set.clear();
      }
   }



   public void countFindItem3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(VOLUME_SOURCE_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      VOLUME_SOURCE_lay.setCountValue(toInt(headset.getValue("N")));
      VOLUME_SOURCE_set.clear();
   }



   public void newRowItem3()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","VOLUME_SOURCE_API.New__",VOLUME_SOURCE_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      VOLUME_SOURCE_set.addRow(data);
   }
   
   
   
   public void okFindItem4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(DRAW_PRO_RES_PER_blk);
      q = trans.addQuery(DRAW_PRO_RES_PER_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,DRAW_PRO_RES_PER_blk);
      if (  DRAW_PRO_RES_PER_set.countRows() == 0 )
      {
         mgr.showAlert("DRAW_PRO_RESPERNODATA: No data found.");
         DRAW_PRO_RES_PER_set.clear();
      }
   }



   public void countFindItem4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(DRAW_PRO_RES_PER_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      DRAW_PRO_RES_PER_lay.setCountValue(toInt(headset.getValue("N")));
      DRAW_PRO_RES_PER_set.clear();
   }



   public void newRowItem4()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","DRAW_PRO_RES_PER_API.New__",DRAW_PRO_RES_PER_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      DRAW_PRO_RES_PER_set.addRow(data);
   }
   
   
   


   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("MAJOR_NO").
              setMandatory().
              setInsertable().
              setLabel("VOLUMEMAJORMAJORNO: Major No").
              setSize(50);
      headblk.addField("MAJOR_DESC").
              setMandatory().
              setInsertable().
              setLabel("VOLUMEMAJORMAJORDESC: Major Desc").
              setSize(50);
      headblk.setView("VOLUME_MAJOR");
      headblk.defineCommand("VOLUME_MAJOR_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("activateVolumeMajor", "Volume Major...");  
      headbar.addCustomCommand("activateVolumeStatus", "Volume Status...");
      headbar.addCustomCommand("activateVolumeType", "Volume Type...");
      headbar.addCustomCommand("activateVolumeSource", "Volume Source...");
      headbar.addCustomCommand("activateDrawProResPer", "Draw Pro Res Per...");
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("VOLUMEMAJORTBLHEAD: Volume Majors");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      
      VOLUME_STATUS_blk = mgr.newASPBlock("ITEM1");
      VOLUME_STATUS_blk.addField("ITEM1_OBJID").
            setDbName("OBJID").
            setHidden();
      VOLUME_STATUS_blk.addField("ITEM1_OBJVERSION").
            setDbName("OBJVERSION").
            setHidden();
      VOLUME_STATUS_blk.addField("STATUS_NO").
            setMandatory().
            setInsertable().
            setLabel("VOLUMESTATUSSTATUSNO: Status No").
            setSize(50);
      VOLUME_STATUS_blk.addField("STATUS_DESC").
            setMandatory().
            setInsertable().
            setLabel("VOLUMESTATUSSTATUSDESC: Status Desc").
            setSize(50);
      VOLUME_STATUS_blk.setView("VOLUME_STATUS");
      VOLUME_STATUS_blk.defineCommand("VOLUME_STATUS_API","New__,Modify__,Remove__");
      VOLUME_STATUS_set = VOLUME_STATUS_blk.getASPRowSet();
      VOLUME_STATUS_bar = mgr.newASPCommandBar(VOLUME_STATUS_blk);
      VOLUME_STATUS_bar.defineCommand(VOLUME_STATUS_bar.OKFIND, "okFindItem1");
      VOLUME_STATUS_bar.defineCommand(VOLUME_STATUS_bar.NEWROW, "newRowItem1");
      VOLUME_STATUS_bar.defineCommand(VOLUME_STATUS_bar.COUNTFIND,"countFindItem1");
      VOLUME_STATUS_tbl = mgr.newASPTable(VOLUME_STATUS_blk);
      VOLUME_STATUS_tbl.setTitle("VOLUMESTATUSTBLHEAD: Volume Statuss");
      VOLUME_STATUS_tbl.enableRowSelect();
      VOLUME_STATUS_tbl.setWrap();
      VOLUME_STATUS_lay = VOLUME_STATUS_blk.getASPBlockLayout();
      VOLUME_STATUS_lay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
 
      VOLUME_TYPE_blk = mgr.newASPBlock("ITEM2");
      VOLUME_TYPE_blk.addField("OBJID2").
              setDbName("OBJID").
              setHidden();
      VOLUME_TYPE_blk.addField("OBJVERSION2").
              setDbName("OBJVERSION").
              setHidden();
      VOLUME_TYPE_blk.addField("TYPE_NO").
              setMandatory().
              setInsertable().
              setLabel("VOLUMETYPETYPENO: Type No").
              setSize(50);
      VOLUME_TYPE_blk.addField("TYPE_DESC").
              setMandatory().
              setInsertable().
              setLabel("VOLUMETYPETYPEDESC: Type Desc").
              setSize(50);
      VOLUME_TYPE_blk.setView("VOLUME_TYPE");
      VOLUME_TYPE_blk.defineCommand("VOLUME_TYPE_API","New__,Modify__,Remove__");
      VOLUME_TYPE_set = VOLUME_TYPE_blk.getASPRowSet();
      VOLUME_TYPE_bar = mgr.newASPCommandBar(VOLUME_TYPE_blk);
      VOLUME_TYPE_bar.defineCommand(VOLUME_TYPE_bar.OKFIND, "okFindItem2");
      VOLUME_TYPE_bar.defineCommand(VOLUME_TYPE_bar.NEWROW, "newRowItem2");
      VOLUME_TYPE_bar.defineCommand(VOLUME_TYPE_bar.COUNTFIND,"countFindItem2");
      VOLUME_TYPE_tbl = mgr.newASPTable(VOLUME_TYPE_blk);
      VOLUME_TYPE_tbl.setTitle("VOLUMETYPETBLHEAD: Volume Types");
      VOLUME_TYPE_tbl.enableRowSelect();
      VOLUME_TYPE_tbl.setWrap();
      VOLUME_TYPE_lay = VOLUME_TYPE_blk.getASPBlockLayout();
      VOLUME_TYPE_lay.setDefaultLayoutMode(VOLUME_TYPE_lay.MULTIROW_LAYOUT);
      
      
      VOLUME_SOURCE_blk = mgr.newASPBlock("ITEM3");
      VOLUME_SOURCE_blk.addField("OBJID3").
              setDbName("OBJID").
              setHidden();
      VOLUME_SOURCE_blk.addField("OBJVERSION3").
              setDbName("OBJVERSION").
              setHidden();
      VOLUME_SOURCE_blk.addField("SUPPLIER_ID").
              setMandatory().
              setInsertable().
              setDynamicLOV("SUPPLIER_INFO").
              setLabel("VOLUMESOURCESUPPLIERID: Supplier Id").
              setSize(20);
      VOLUME_SOURCE_blk.addField("SUPPLIER_NAME3").
              setReadOnly().
              setFunction("SUPPLIER_INFO_API.Get_Name (:SUPPLIER_ID)").
              setLabel("VOLUMESOURCESUPPLIERNAME: Supplier Name").
              setSize(30);
      mgr.getASPField("SUPPLIER_ID").setValidation("SUPPLIER_NAME3");
      

      VOLUME_SOURCE_blk.addField("CREATE_PERSON3").
              setDbName("CREATE_PERSON").
              setInsertable().
              setHidden().
              setDynamicLOV("PERSON_INFO").
              setLabel("VOLUMESOURCECREATEPERSON: Create Person").
              setSize(20);
      VOLUME_SOURCE_blk.addField("CREATE_PERSON_NAME3").
              setReadOnly().
              setHidden().
              setLabel("VOLUMESOURCECREATEPERSONNAME: Create Person Name").
              setFunction("PERSON_INFO_API.GET_NAME (:CREATE_PERSON3)").
              setSize(30);
      mgr.getASPField("CREATE_PERSON3").setValidation("CREATE_PERSON_NAME3");
      VOLUME_SOURCE_blk.addField("CREATE_TIME3","Date").
              setDbName("CREATE_TIME").
              setInsertable().
              setHidden().
              setLabel("VOLUMESOURCECREATETIME: Create Time").
              setSize(20);
      VOLUME_SOURCE_blk.setView("VOLUME_SOURCE");
      VOLUME_SOURCE_blk.defineCommand("VOLUME_SOURCE_API","New__,Modify__,Remove__");
      VOLUME_SOURCE_set = VOLUME_SOURCE_blk.getASPRowSet();
      VOLUME_SOURCE_bar = mgr.newASPCommandBar(VOLUME_SOURCE_blk);
      VOLUME_SOURCE_bar.defineCommand(VOLUME_SOURCE_bar.OKFIND, "okFindItem3");
      VOLUME_SOURCE_bar.defineCommand(VOLUME_SOURCE_bar.NEWROW, "newRowItem3");
      VOLUME_SOURCE_bar.defineCommand(VOLUME_SOURCE_bar.COUNTFIND,"countFindItem3");
      VOLUME_SOURCE_tbl = mgr.newASPTable(VOLUME_SOURCE_blk);
      VOLUME_SOURCE_tbl.setTitle("VOLUMESOURCETBLHEAD: Volume Sources");
      VOLUME_SOURCE_tbl.enableRowSelect();
      VOLUME_SOURCE_tbl.setWrap();
      VOLUME_SOURCE_lay = VOLUME_SOURCE_blk.getASPBlockLayout();
      VOLUME_SOURCE_lay.setDefaultLayoutMode(VOLUME_SOURCE_lay.MULTIROW_LAYOUT);
      VOLUME_SOURCE_lay.setSimple("CREATE_PERSON_NAME3");

      
      DRAW_PRO_RES_PER_blk = mgr.newASPBlock("ITEM4");
      DRAW_PRO_RES_PER_blk.addField("OBJID4").
              setDbName("OBJID").
              setHidden();
      DRAW_PRO_RES_PER_blk.addField("OBJVERSION4").
              setDbName("OBJVERSION").
              setHidden();
      DRAW_PRO_RES_PER_blk.addField("PERSON_ID").
              setMandatory().
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("DRAWPRORESPERPERSONID: Person Id").
              setSize(20);
      DRAW_PRO_RES_PER_blk.addField("PERSON_NAME4").
              setReadOnly().
              setFunction("PERSON_INFO_API.GET_NAME (:PERSON_ID)").
              setLabel("DRAWPRORESPERPERSONNAME: Person Name").
              setSize(30);
      mgr.getASPField("PERSON_ID").setValidation("PERSON_NAME4");
      

      DRAW_PRO_RES_PER_blk.addField("CREATE_PERSON4").
              setDbName("CREATE_PERSON").
              setInsertable().
              setHidden().
              setDynamicLOV("PERSON_INFO").
              setLabel("DRAWPRORESPERCREATEPERSON: Create Person").
              setSize(20);
      DRAW_PRO_RES_PER_blk.addField("CREATE_PERSON_NAME4").
              setReadOnly().
              setHidden().
              setLabel("DRAWPRORESPERCREATEPERSONNAME: Create Person Name").
              setFunction("PERSON_INFO_API.GET_NAME (:CREATE_PERSON4)").
              setSize(30);
      mgr.getASPField("CREATE_PERSON4").setValidation("CREATE_PERSON_NAME4");
      DRAW_PRO_RES_PER_blk.addField("CREATE_TIME4","Date").
              setDbName("CREATE_TIME").
              setInsertable().
              setHidden().
              setLabel("DRAWPRORESPERCREATETIME: Create Time").
              setSize(20);
      DRAW_PRO_RES_PER_blk.setView("DRAW_PRO_RES_PER");
      DRAW_PRO_RES_PER_blk.defineCommand("DRAW_PRO_RES_PER_API","New__,Modify__,Remove__");
      DRAW_PRO_RES_PER_set = DRAW_PRO_RES_PER_blk.getASPRowSet();
      DRAW_PRO_RES_PER_bar = mgr.newASPCommandBar(DRAW_PRO_RES_PER_blk);
      DRAW_PRO_RES_PER_bar.defineCommand(DRAW_PRO_RES_PER_bar.OKFIND, "okFindItem4");
      DRAW_PRO_RES_PER_bar.defineCommand(DRAW_PRO_RES_PER_bar.NEWROW, "newRowItem4");
      DRAW_PRO_RES_PER_bar.defineCommand(DRAW_PRO_RES_PER_bar.COUNTFIND,"countFindItem4");
      DRAW_PRO_RES_PER_tbl = mgr.newASPTable(DRAW_PRO_RES_PER_blk);
      DRAW_PRO_RES_PER_tbl.setTitle("DRAWPRORESPERTBLHEAD: Draw Pro Res Pers");
      DRAW_PRO_RES_PER_tbl.enableRowSelect();
      DRAW_PRO_RES_PER_tbl.setWrap();
      DRAW_PRO_RES_PER_lay = DRAW_PRO_RES_PER_blk.getASPBlockLayout();
      DRAW_PRO_RES_PER_lay.setDefaultLayoutMode(DRAW_PRO_RES_PER_lay.MULTIROW_LAYOUT);
      DRAW_PRO_RES_PER_lay.setSimple("CREATE_PERSON_NAME4");


      
      tabs = mgr.newASPTabContainer();
      tabs.setDirtyFlagEnabled(false);
      tabs.addTab(mgr.translate("VOLUMEMAJOR: Volume Major"), "javascript:commandSet('MAIN.activateVolumeMajor','')");
      tabs.addTab(mgr.translate("VOLUMESTATUS: Volume Status"), "javascript:commandSet('MAIN.activateVolumeStatus','')");
      tabs.addTab(mgr.translate("VOLUMETYPE: Volume Type"), "javascript:commandSet('MAIN.activateVolumeType','')");
      tabs.addTab(mgr.translate("VOLUMESOURCE: Volume Source"), "javascript:commandSet('MAIN.activateVolumeSource','')");
      tabs.addTab(mgr.translate("DRAWPRORESPER: Draw Pro Res Per"), "javascript:commandSet('MAIN.activateDrawProResPer','')");
      tabs.setContainerWidth(700);
      tabs.setLeftTabSpace(1);
      tabs.setContainerSpace(5);
      tabs.setTabWidth(100);

   }
   
   public void activateVolumeMajor()
   {   
      tabs.setActiveTab(1);
   }
   
   public void activateVolumeStatus()
   {   
      tabs.setActiveTab(2);
      okFindItem1();  

   }
   
   public void activateVolumeType()
   {   
      tabs.setActiveTab(3);
      okFindItem2();
   }
   
   public void activateVolumeSource()
   {   
      tabs.setActiveTab(4);
      okFindItem3();
   }
   
   public void activateDrawProResPer()
   {   
      tabs.setActiveTab(5);
      okFindItem4();
   }



   public void  adjust()
   {
      // fill function body
      headbar.removeCustomCommand("activateVolumeMajor");
      headbar.removeCustomCommand("activateVolumeStatus");
      headbar.removeCustomCommand("activateVolumeType");
      headbar.removeCustomCommand("activateVolumeSource");
      headbar.removeCustomCommand("activateDrawProResPer");
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "ENGBASICDATAEDESC: Eng Basic Data";
   }


   protected String getTitle()
   {
      return "ENGBASICDATAEDESC: Eng Basic Data";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      appendToHTML(tabs.showTabsInit());

      if (tabs.getActiveTab() == 1 )
         appendToHTML(headlay.show());
      else if (tabs.getActiveTab() == 2 )
         appendToHTML(VOLUME_STATUS_lay.show());
      else if (tabs.getActiveTab() == 3 )
         appendToHTML(VOLUME_TYPE_lay.show());
      else if (tabs.getActiveTab() == 4 )
         appendToHTML(VOLUME_SOURCE_lay.show());
      else if (tabs.getActiveTab() == 5 )
         appendToHTML(DRAW_PRO_RES_PER_lay.show());
      appendToHTML(tabs.showTabsFinish());    

   }
}
