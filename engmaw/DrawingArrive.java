/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.engmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.docmaw.DocmawConstants;
import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class DrawingArrive extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.engmaw.DrawingArrive");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  DrawingArrive (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }
   
   protected String getCurrentPageDocClass() {
      return DocmawConstants.PROJ_DESIGN;
   }     

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if ( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")) )
         validate();     
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else   
         okFind();  
      adjust();  
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("DRAWINGARRIVENODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }

   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","DRAWING_ARRIVE_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("DOC_CLASS", this.getCurrentPageDocClass());  
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }

   
   

   public void validate()
  {
     ASPManager mgr=getASPManager();
     ASPTransactionBuffer trans=mgr.newASPTransactionBuffer();
     ASPCommand cmd;

     String str=mgr.readValue("VALIDATE");
   

     if ("DOC_NO".equals(str)) {
        cmd = trans.addCustomFunction("BOOKLET_NO","DOC_TITLE_API.Get_Booklet_No","BOOKLET_NO");
        cmd.addParameter("DOC_CLASS");
        cmd.addParameter("DOC_NO");
        
        trans = mgr.validate(trans);

        String BOOKLET_NO     = trans.getValue("BOOKLET_NO/DATA/BOOKLET_NO"            );
        BOOKLET_NO     = mgr.isEmpty(BOOKLET_NO    )? ""  : BOOKLET_NO    ;
        
        trans.clear();
        cmd = trans.addCustomFunction("BOOKLET_NAME","DOC_BOOKLET_API.Get_Booklet_Name","BOOKLET_NAME");
        cmd.addParameter("BOOKLET_NO",BOOKLET_NO);

        trans = mgr.validate(trans);
        String BOOKLET_NAME     = trans.getValue("BOOKLET_NAME/DATA/BOOKLET_NAME"            );
        BOOKLET_NAME     = mgr.isEmpty(BOOKLET_NAME    )? ""  : BOOKLET_NAME    ;
        
        mgr.responseWrite(BOOKLET_NO + "^" +BOOKLET_NAME + "^" );
     }
     
     mgr.endResponse();
  }
   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("ID").
              setMandatory().
              setInsertable().
              setHidden().   
              setLabel("DRAWINGARRIVEID: Id").
              setSize(20);
      headblk.addField("ARV_PLAN_NO").
              setReadOnly().
              setLabel("DRAWINGARRIVEARVPLANNO: Arv Plan No").
              setSize(20);
      headblk.addField("PROJECT_NO").
              setInsertable().  
              setLabel("DRAWINGARRIVEPROJECTNO: Project No").
              setDynamicLOV("GENERAL_PROJECT").
              setSize(20);   
      headblk.addField("PROJ_NAME").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC(:PROJECT_NO)").
              setLabel("DRAWINGARRIVEGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(20).
              setReadOnly();  

      mgr.getASPField("PROJECT_NO").setValidation("PROJ_NAME");
      
      headblk.addField("DOC_CLASS").
              setInsertable().
              setHidden().
              setLabel("DRAWINGARRIVEDOCCLASS: Doc Class").
              setSize(20);
      headblk.addField("DOC_NO").
              setInsertable(). 
              setLabel("DRAWINGARRIVEDOCNO: Doc No").
              setDynamicLOV("DOC_TITLE","DOC_CLASS").
              setCustomValidation("DOC_CLASS,DOC_NO", "BOOKLET_NO,BOOKLET_NAME").
              setSize(20);  
      headblk.addField("DOC_SHEET").
              setInsertable().
              setLabel("DRAWINGARRIVEDOCSHEET: Doc Sheet").
              setHidden().
              setSize(20); 
      headblk.addField("BOOKLET_NO").
              setFunction("DOC_TITLE_API.Get_Booklet_No(:DOC_CLASS,:DOC_NO)").
              setLabel("DRAWINGARRIVEBOOKLETNO: Booklet NO").
              setReadOnly();    
//      mgr.getASPField("DOC_NO").setValidation("BOOKLET_NO");
      headblk.addField("BOOKLET_NAME").
              setLabel("DRAWINGARRIVEBOOKLETNAME: Booklet Name").
              setFunction("DOC_BOOKLET_API.Get_Booklet_Name(DOC_TITLE_API.Get_Booklet_No(:DOC_CLASS,:DOC_NO))").
              setReadOnly();  
      headblk.addField("DOC_REV").
               setReadOnly().  
               setLabel("DRAWINGARRIVEDOCREV: Doc Rev").
               setSize(20);     
      headblk.addField("ARV_PERSON").
              setReadOnly().
              setLabel("DRAWINGARRIVEARVPERSON: Arv Person").
              setSize(20);
      headblk.addField("COPIES","Number").
              setReadOnly(). 
              setFunction("DOC_TITLE_API.Get_Copies(:DOC_CLASS,:DOC_NO)").
              setLabel("DRAWINGARRIVECOPIES: Copies").      
              setSize(20); 
      headblk.addField("REPORT_DATE","Date").
              setInsertable().
              setLabel("DRAWINGARRIVEREPORTDATE: Report Date").
              setSize(20); 
      headblk.addField("ARV_QTY","Number").
              setInsertable().
              setLabel("DRAWINGARRIVEARVQTY: Arv Qty").
              setSize(20);
      headblk.addField("STATUS").
              setLabel("DRAWINGARRIVESTATUS: Status").
              setCheckBox("FALSE,TRUE").
              setSize(10).        
              setReadOnly();
      headblk.addField("NOTE").  
              setInsertable().
              setLabel("DRAWINGARRIVENOTE: Note").
              setSize(120).  
              setHeight(5);  
      headblk.setView("DRAWING_ARRIVE");
      headblk.defineCommand("DRAWING_ARRIVE_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("createDrawingSend",mgr.translate("DRAWINGARRIVEDRAWINGSEND: Drawing Send..."));
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("DRAWINGARRIVETBLHEAD: Drawing Arrives");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setDialogColumns(2); 
      headlay.setDataSpan("NOTE",6);
      headlay.setSimple("PROJ_NAME");    
   }
   
   public void createDrawingSend(){
      ASPManager mgr = getASPManager();
      ASPCommand cmd = mgr.newASPCommand(); 
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      headset.storeSelections();  
      if (headlay.isSingleLayout())
         headset.selectRow();
      ASPBuffer selected_fields=headset.getSelectedRows("ID,DOC_CLASS,DOC_NO,DOC_SHEET,DOC_REV");
      for(int i=0;i<selected_fields.countItems();i++){
         cmd=trans.addCustomCommand("create_drawing_arrive"+i, "Drawing_Send_Api.Create_Drawing_Send");
         ASPBuffer subBuff = selected_fields.getBufferAt(i);
         String id=subBuff.getValueAt(0);
         String doc_class=subBuff.getValueAt(1);
         String doc_no=subBuff.getValueAt(2);
         String doc_sheet=subBuff.getValueAt(3);
         String doc_rev=subBuff.getValueAt(4);
         cmd.addParameter("ID",id); 
         cmd.addParameter("DOC_CLASS",doc_class);
         cmd.addParameter("DOC_NO",doc_no);
         cmd.addParameter("DOC_SHEET",doc_sheet);
         cmd.addParameter("DOC_REV",doc_rev);
   }
     trans = mgr.perform(trans);
//     mgr.transferDataTo("DrawingSend.page",selected_fields);       
     mgr.redirectTo("DrawingSend.page?ARRIVE_ID="+mgr.URLEncode(selected_fields.getBufferAt(0).getValueAt(0))
//           +"&PROJECT_NO="+mgr.URLEncode(headset.getValue("PROJECT_NO"))
           );
     
   }
   


   public void  adjust()
   {
      // fill function body
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      headset.storeSelections();  
      if (headlay.isSingleLayout())
         headset.selectRow();
      ASPBuffer selected_fields=headset.getSelectedRows("STATUS");
      for(int i=0;i<selected_fields.countItems();i++){
         ASPBuffer subBuff = selected_fields.getBufferAt(i);
         String status=subBuff.getValueAt(0);
         if("TRUE".equals(status)){
            headbar.disableCommand(headbar.DELETE);
           }    
        }
    }
   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "DRAWINGARRIVEDESC: Drawing Arrive";
   }


   protected String getTitle()
   {
      return "DRAWINGARRIVETITLE: Drawing Arrive";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
   }
}  
