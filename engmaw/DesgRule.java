/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.engmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.util.Date;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class DesgRule extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.engmaw.DesgRule");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   private ASPBlock Pending_doc_reference_object_blk;
   private ASPRowSet Pending_doc_reference_object_set;
   private ASPCommandBar Pending_doc_reference_object_bar;
   private ASPTable Pending_doc_reference_object_tbl;
   private ASPBlockLayout Pending_doc_reference_object_lay;
   
   private ASPBlock Conference_doc_reference_object_blk;
   private ASPRowSet Conference_doc_reference_object_set;
   private ASPCommandBar Conference_doc_reference_object_bar;  
   private ASPTable Conference_doc_reference_object_tbl;
   private ASPBlockLayout Conference_doc_reference_object_lay;  
   
   private ASPBlock Audited_doc_reference_object_blk;
   private ASPRowSet Audited_doc_reference_object_set;
   private ASPCommandBar Audited_doc_reference_object_bar;  
   private ASPTable Audited_doc_reference_object_tbl;
   private ASPBlockLayout Audited_doc_reference_object_lay;  
   
   protected ASPTabContainer tabs;
   
   ASPTransactionBuffer trans;
   ASPCommand           cmd;
   ASPContext           ctx;
   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  DesgRule (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }
   
   public void run()
   {
      ASPManager mgr = getASPManager();
      ctx     = mgr.getASPContext();
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else   
         okFind();  
      tabs.saveActiveTab();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");    
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("DESGRULENODATA: No data found.");
         headset.clear();    
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","DESG_RULE_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);        
      data = trans.getBuffer("HEAD/DATA"); 
      headset.addRow(data);
   }

   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      if(headset.countRows() == 0){
         return;
      }
      String luName = headblk.getLUName();//
      String view = headblk.getView();//
      String objid  = headset.getValue("OBJID");
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      ASPCommand  cmd = trans.addCustomCommand("KEYREF", " client_sys.get_key_reference");
      cmd.addParameter("KEYREF", "S", "OUT", null);
      cmd.addParameter("BIZ_LU", "S", "IN", luName);
      cmd.addParameter("BIZ_OBJID", "S", "IN", objid);
      trans = mgr.validate(trans);
      String keyReference = trans.getValue("KEYREF/DATA/KEYREF");
      trans.clear();
      q = trans.addQuery(Pending_doc_reference_object_blk);
      q.addWhereCondition("LU_NAME = ?");
      q.addWhereCondition("KEY_REF = ?");
      q.addWhereCondition("DOC_CLASS = ?");
      q.addParameter("ITEM1_LU_NAME", luName);
      q.addParameter("ITEM1_KEY_REF", keyReference);
      q.addParameter("ITEM1_DOC_CLASS", "DSWJ");  
      q.includeMeta("ALL");
      int headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,Pending_doc_reference_object_blk);
      headset.goTo(headrowno);
   }
   
   public void okFindITEM2()
   {
      ASPManager mgr = getASPManager();
      if(headset.countRows() == 0){
         return;
      }
      String luName = headblk.getLUName();//
      String view = headblk.getView();//
      String objid  = headset.getValue("OBJID");
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      ASPCommand  cmd = trans.addCustomCommand("KEYREF", " client_sys.get_key_reference");
      cmd.addParameter("KEYREF", "S", "OUT", null);
      cmd.addParameter("BIZ_LU", "S", "IN", luName);
      cmd.addParameter("BIZ_OBJID", "S", "IN", objid);
      trans = mgr.validate(trans);
      String keyReference = trans.getValue("KEYREF/DATA/KEYREF");
      trans.clear();
      q = trans.addQuery(Conference_doc_reference_object_blk);
      q.addWhereCondition("LU_NAME = ?");
      q.addWhereCondition("KEY_REF = ?");
      q.addWhereCondition("DOC_CLASS = ?");
      q.addParameter("ITEM2_LU_NAME", luName);
      q.addParameter("ITEM2_KEY_REF", keyReference);
      q.addParameter("ITEM2_DOC_CLASS", "HYJY");  
      q.includeMeta("ALL");  
      int headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,Conference_doc_reference_object_blk);
      headset.goTo(headrowno);  
   }
   
   public void okFindITEM3()
   {
      ASPManager mgr = getASPManager();
      if(headset.countRows() == 0){
         return;
      }
      String luName = headblk.getLUName();//
      String view = headblk.getView();//
      String objid  = headset.getValue("OBJID");
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      ASPCommand  cmd = trans.addCustomCommand("KEYREF", " client_sys.get_key_reference");
      cmd.addParameter("KEYREF", "S", "OUT", null);
      cmd.addParameter("BIZ_LU", "S", "IN", luName);
      cmd.addParameter("BIZ_OBJID", "S", "IN", objid);
      trans = mgr.validate(trans);
      String keyReference = trans.getValue("KEYREF/DATA/KEYREF");
      trans.clear();
      q = trans.addQuery(Audited_doc_reference_object_blk);
      q.addWhereCondition("LU_NAME = ?");
      q.addWhereCondition("KEY_REF = ?");
      q.addWhereCondition("DOC_CLASS = ?");
      q.addParameter("ITEM3_LU_NAME", luName);
      q.addParameter("ITEM3_KEY_REF", keyReference);
      q.addParameter("ITEM3_DOC_CLASS", "YSWJ");  
      q.includeMeta("ALL");      
      int headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,Audited_doc_reference_object_blk);
      headset.goTo(headrowno);  
   }      

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      
      headblk.addField("OBJID").
              setHidden();
      
      headblk.addField("OBJVERSION").
              setHidden();
      
      headblk.addField("LU_NAME").
              setHidden();
      
      headblk.addField("KEY_REF").
              setHidden();
      
      headblk.addField("ID").
              setMandatory().
              setInsertable().
              setHidden().
              setLabel("DESGRULEID: Id").
              setSize(200);
      
      headblk.addField("DESIGN_RULE_NO").
              setInsertable().
              setReadOnly().
              setLabel("DESGRULEDESIGNRULENO: Design Rule No").
              setSize(20);
      
      headblk.addField("PROJECT_NO").
              setInsertable().
              setLabel("DESGRULEPROJECTNO: Project No").
              setDynamicLOV("GENERAL_PROJECT").
              setSize(20); 
      
      headblk.addField("PROJ_NAME").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC(:PROJECT_NO)").
              setLabel("DESGRULEGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(20).
              setReadOnly();   
              
      mgr.getASPField("PROJECT_NO").setValidation("PROJ_NAME");
      
      headblk.addField("DOC_TYPE").
              enumerateValues("Doc_Type_API").
              setSelectBox().
              setMandatory().
              setInsertable().
              setLabel("DESGRULEDOCTYPE: Doc Type").
              setSize(20);
      
      headblk.addField("STATUS").
              setInsertable().
              setLabel("DESGRULESTATUS: Status").
              setCheckBox("FALSE,TRUE").
              setSize(10);
      
      headblk.addField("DESCRIPTION").
              setInsertable().
              setLabel("DESGRULEDESCRIPTION: Description").
              setSize(120);
        
      headblk.addField("SUPPLIER_ID").
              setInsertable().
              setLabel("DESGRULESUPPLIERID: Supplier Id").
              setDynamicLOV("SUPPLIER_INFO").
              setSize(20);    
      
      headblk.addField("SUPPLIER_INFO_NAME").
              setFunction("SUPPLIER_INFO_API.GET_NAME (:SUPPLIER_ID)").
              setLabel("DESGRULESUPPLIERINFONAME: Supplier Info Name").
              setSize(20).
              setReadOnly();        
      
      mgr.getASPField("SUPPLIER_ID").setValidation("SUPPLIER_INFO_NAME");
      
      headblk.addField("REPORT_USER").
              setInsertable().
              setLabel("DESGRULEREPORTUSER: Report User").
              setSize(20).
              setHidden();
      
      headblk.addField("REPORT_USER_NAME").
              setFunction("PERSON_INFO_API.GET_NAME (:REPORT_USER)").
              setLabel("DESGRULEPERSONINFONAME: Person Info Name").
              setSize(30).    
              setReadOnly();
      
      headblk.addField("REPORT_DATE","Date").
              setReadOnly().
              setLabel("DESGRULEREPORTDATE: Report Date").
              setSize(20);
      
      mgr.getASPField("REPORT_USER").setValidation("REPORT_USER_NAME");
      
      headblk.setView("DESG_RULE");
      headblk.defineCommand("DESG_RULE_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      //tabs
      headbar.addCustomCommand("activatePendingDoc", "Pending Doc...");
      headbar.addCustomCommand("activateConferenceDoc", "Conference Doc...");
      headbar.addCustomCommand("activateAuditedDoc", "Audited Doc...");
      
      headtbl = mgr.newASPTable(headblk);    
      headtbl.setTitle("DESGRULETBLHEAD: Desg Rules");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("PROJ_NAME");
      headlay.setSimple("SUPPLIER_INFO_NAME");
      headlay.setDialogColumns(2); 
      headlay.setDataSpan("DESCRIPTION",6);
      headlay.setDataSpan("SUPPLIER_ID",6);  
  
      
      //Pending_doc_REFERENCE_OBJECT
      Pending_doc_reference_object_blk = mgr.newASPBlock("ITEM1");
      Pending_doc_reference_object_blk.addField("ITEM1_VIEW_FILE").
      setFunction("''").
      setReadOnly().  
      unsetQueryable().
      setLabel("DOCSENDTRANSREFERENCEBLKVIEWFILE: View File").
      setHyperlink("../docmaw/EdmMacro.page?PROCESS_DB=VIEW&DOC_TYPE=ORIGINAL", "ITEM1_DOC_CLASS DOC_CLASS,ITEM1_DOC_NO DOC_NO,ITEM1_DOC_SHEET DOC_SHEET,ITEM1_DOC_REV DOC_REV", "NEWWIN").
      setAsImageField();
      Pending_doc_reference_object_blk.addField("ITEM1_DOC_CLASS").setDbName("DOC_CLASS").setLabel("DOCSENDTRANSREFERENCEBLKDOCCLASS: Doc Class");
      Pending_doc_reference_object_blk.addField("ITEM1_DOC_NO").setDbName("DOC_NO").setLabel("DOCSENDTRANSREFERENCEBLKDOCNO: Doc No").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_DOC_SHEET").setDbName("DOC_SHEET").setLabel("DOCSENDTRANSREFERENCEBLKDOCSHEET: Doc sheet").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_DOC_REV").setDbName("DOC_REV").setLabel("DOCSENDTRANSREFERENCEBLKDOCREV: Doc Rev").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_LU_NAME").setDbName("LU_NAME").setLabel("DOCSENDTRANSREFERENCEBLKLUNAME: Lu Name").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_KEY_REF").setDbName("KEY_REF").setLabel("DOCSENDTRANSREFERENCEBLKKEYREF: Key Ref").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_KEY_VALUE").setDbName("KEY_VALUE").setLabel("DOCSENDTRANSREFERENCEBLKKEYVALUE: Key Value").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_REV_TITLE").setDbName("DOC_TITLE").setLabel("DOCSENDTRANSREFERENCEBLKREVTITLE: Rev Title").setFieldHyperlink("../docmaw/DocIssue.page", "ITEM1_PAGE_URL","ITEM1_DOC_CLASS DOC_CLASS,ITEM1_DOC_NO DOC_NO,ITEM1_DOC_SHEET DOC_SHEET,ITEM1_DOC_REV DOC_REV");
      Pending_doc_reference_object_blk.addField("ITEM1_DOC_CODE").setDbName("DOC_CODE").setLabel("DOCSENDTRANSREFERENCEBLKDOCCODE: Doc Code");
      Pending_doc_reference_object_blk.addField("ITEM1_SUB_CLASS").setDbName("SUB_CLASS").setLabel("DOCSENDTRANSREFERENCEBLKSUBCLASS: Sub Class");
      Pending_doc_reference_object_blk.addField("ITEM1_PAGE_URL").setFunction("nvl(DOC_CLASS_API.Get_Page_Url(:ITEM1_DOC_CLASS), DOC_SUB_CLASS_API.Get_Page_Url(:ITEM1_DOC_CLASS,:ITEM1_SUB_CLASS))").setHidden();
      Pending_doc_reference_object_blk.addField("ITEM1_IS_ELE_DOC").
      setFunction("EDM_FILE_API.Have_Edm_File(:ITEM1_DOC_CLASS,:ITEM1_DOC_NO,:ITEM1_DOC_SHEET,:ITEM1_DOC_REV)").
      setHidden().
      setLabel("DOCSENDTRANSREFERENCEBLKISELEDOC: Is Ele Doc").
      setSize(5);
      
      Pending_doc_reference_object_blk.setView("DOC_REFERENCE_OBJECT");
        
      Pending_doc_reference_object_blk.setMasterBlock(headblk);
      Pending_doc_reference_object_set = Pending_doc_reference_object_blk.getASPRowSet();
      Pending_doc_reference_object_bar = mgr.newASPCommandBar(Pending_doc_reference_object_blk);
      Pending_doc_reference_object_bar.defineCommand(Pending_doc_reference_object_bar.OKFIND, "okFindITEM1");
      Pending_doc_reference_object_tbl = mgr.newASPTable(Pending_doc_reference_object_blk);
      Pending_doc_reference_object_tbl.enableRowSelect();
      Pending_doc_reference_object_tbl.setWrap();
      Pending_doc_reference_object_lay = Pending_doc_reference_object_blk.getASPBlockLayout();
      Pending_doc_reference_object_lay.setDefaultLayoutMode(Pending_doc_reference_object_lay.MULTIROW_LAYOUT);
      
      
      //Conference_doc_REFERENCE_OBJECT
      Conference_doc_reference_object_blk = mgr.newASPBlock("ITEM2");
      Conference_doc_reference_object_blk.addField("ITEM2_VIEW_FILE").
      setFunction("''").
      setReadOnly().
      unsetQueryable().
      setLabel("DOCSENDTRANSREFERENCEBLKVIEWFILE: View File").
      setHyperlink("../docmaw/EdmMacro.page?PROCESS_DB=VIEW&DOC_TYPE=ORIGINAL", "ITEM2_DOC_CLASS DOC_CLASS,ITEM2_DOC_NO DOC_NO,ITEM2_DOC_SHEET DOC_SHEET,ITEM2_DOC_REV DOC_REV", "NEWWIN").
      setAsImageField();
      Conference_doc_reference_object_blk.addField("ITEM2_DOC_CLASS").setDbName("DOC_CLASS").setLabel("DOCSENDTRANSREFERENCEBLKDOCCLASS: Doc Class");
      Conference_doc_reference_object_blk.addField("ITEM2_DOC_NO").setDbName("DOC_NO").setLabel("DOCSENDTRANSREFERENCEBLKDOCNO: Doc No").setHidden();
      Conference_doc_reference_object_blk.addField("ITEM2_DOC_SHEET").setDbName("DOC_SHEET").setLabel("DOCSENDTRANSREFERENCEBLKDOCSHEET: Doc sheet").setHidden();
      Conference_doc_reference_object_blk.addField("ITEM2_DOC_REV").setDbName("DOC_REV").setLabel("DOCSENDTRANSREFERENCEBLKDOCREV: Doc Rev").setHidden();
      Conference_doc_reference_object_blk.addField("ITEM2_LU_NAME").setDbName("LU_NAME").setLabel("DOCSENDTRANSREFERENCEBLKLUNAME: Lu Name").setHidden();
      Conference_doc_reference_object_blk.addField("ITEM2_KEY_REF").setDbName("KEY_REF").setLabel("DOCSENDTRANSREFERENCEBLKKEYREF: Key Ref").setHidden();
      Conference_doc_reference_object_blk.addField("ITEM2_KEY_VALUE").setDbName("KEY_VALUE").setLabel("DOCSENDTRANSREFERENCEBLKKEYVALUE: Key Value").setHidden();
      Conference_doc_reference_object_blk.addField("ITEM2_REV_TITLE").setDbName("DOC_TITLE").setLabel("DOCSENDTRANSREFERENCEBLKREVTITLE: Rev Title").setFieldHyperlink("../docmaw/DocIssue.page", "ITEM2_PAGE_URL","ITEM2_DOC_CLASS DOC_CLASS,ITEM2_DOC_NO DOC_NO,ITEM2_DOC_SHEET DOC_SHEET,ITEM2_DOC_REV DOC_REV");
      Conference_doc_reference_object_blk.addField("ITEM2_DOC_CODE").setDbName("DOC_CODE").setLabel("DOCSENDTRANSREFERENCEBLKDOCCODE: Doc Code");
      Conference_doc_reference_object_blk.addField("ITEM2_SUB_CLASS").setDbName("SUB_CLASS").setLabel("DOCSENDTRANSREFERENCEBLKSUBCLASS: Sub Class");
      Conference_doc_reference_object_blk.addField("ITEM2_PAGE_URL").setFunction("nvl(DOC_CLASS_API.Get_Page_Url(:ITEM2_DOC_CLASS), DOC_SUB_CLASS_API.Get_Page_Url(:ITEM2_DOC_CLASS,:ITEM2_SUB_CLASS))").setHidden();
      Conference_doc_reference_object_blk.addField("ITEM2_IS_ELE_DOC").
      setFunction("EDM_FILE_API.Have_Edm_File(:ITEM2_DOC_CLASS,:ITEM2_DOC_NO,:ITEM2_DOC_SHEET,:ITEM2_DOC_REV)").
      setHidden().
      setLabel("DOCSENDTRANSREFERENCEBLKISELEDOC: Is Ele Doc").
      setSize(5);    
      
      Conference_doc_reference_object_blk.setView("DOC_REFERENCE_OBJECT");
        
      Conference_doc_reference_object_blk.setMasterBlock(headblk);
      Conference_doc_reference_object_set = Conference_doc_reference_object_blk.getASPRowSet();
      Conference_doc_reference_object_bar = mgr.newASPCommandBar(Conference_doc_reference_object_blk);
      Conference_doc_reference_object_bar.defineCommand(Conference_doc_reference_object_bar.OKFIND, "okFindITEM2");
      Conference_doc_reference_object_tbl = mgr.newASPTable(Conference_doc_reference_object_blk);
      Conference_doc_reference_object_tbl.enableRowSelect();
      Conference_doc_reference_object_tbl.setWrap();
      Conference_doc_reference_object_lay = Conference_doc_reference_object_blk.getASPBlockLayout();
      Conference_doc_reference_object_lay.setDefaultLayoutMode(Conference_doc_reference_object_lay.MULTIROW_LAYOUT);
     
      //Audited_doc_REFERENCE_OBJECT
      Audited_doc_reference_object_blk = mgr.newASPBlock("ITEM3");
      Audited_doc_reference_object_blk.addField("ITEM3_VIEW_FILE").
      setFunction("''").
      setReadOnly().
      unsetQueryable().
      setLabel("DOCSENDTRANSREFERENCEBLKVIEWFILE: View File").
      setHyperlink("../docmaw/EdmMacro.page?PROCESS_DB=VIEW&DOC_TYPE=ORIGINAL", "ITEM3_DOC_CLASS DOC_CLASS,ITEM3_DOC_NO DOC_NO,ITEM3_DOC_SHEET DOC_SHEET,ITEM3_DOC_REV DOC_REV", "NEWWIN").
      setAsImageField();
      Audited_doc_reference_object_blk.addField("ITEM3_DOC_CLASS").setDbName("DOC_CLASS").setLabel("DOCSENDTRANSREFERENCEBLKDOCCLASS: Doc Class");
      Audited_doc_reference_object_blk.addField("ITEM3_DOC_NO").setDbName("DOC_NO").setLabel("DOCSENDTRANSREFERENCEBLKDOCNO: Doc No").setHidden();
      Audited_doc_reference_object_blk.addField("ITEM3_DOC_SHEET").setDbName("DOC_SHEET").setLabel("DOCSENDTRANSREFERENCEBLKDOCSHEET: Doc sheet").setHidden();
      Audited_doc_reference_object_blk.addField("ITEM3_DOC_REV").setDbName("DOC_REV").setLabel("DOCSENDTRANSREFERENCEBLKDOCREV: Doc Rev").setHidden();
      Audited_doc_reference_object_blk.addField("ITEM3_LU_NAME").setDbName("LU_NAME").setLabel("DOCSENDTRANSREFERENCEBLKLUNAME: Lu Name").setHidden();
      Audited_doc_reference_object_blk.addField("ITEM3_KEY_REF").setDbName("KEY_REF").setLabel("DOCSENDTRANSREFERENCEBLKKEYREF: Key Ref").setHidden();
      Audited_doc_reference_object_blk.addField("ITEM3_KEY_VALUE").setDbName("KEY_VALUE").setLabel("DOCSENDTRANSREFERENCEBLKKEYVALUE: Key Value").setHidden();
      Audited_doc_reference_object_blk.addField("ITEM3_REV_TITLE").setDbName("DOC_TITLE").setLabel("DOCSENDTRANSREFERENCEBLKREVTITLE: Rev Title").setFieldHyperlink("../docmaw/DocIssue.page", "ITEM3_PAGE_URL","ITEM3_DOC_CLASS DOC_CLASS,ITEM3_DOC_NO DOC_NO,ITEM3_DOC_SHEET DOC_SHEET,ITEM3_DOC_REV DOC_REV");
      Audited_doc_reference_object_blk.addField("ITEM3_DOC_CODE").setDbName("DOC_CODE").setLabel("DOCSENDTRANSREFERENCEBLKDOCCODE: Doc Code");
      Audited_doc_reference_object_blk.addField("ITEM3_SUB_CLASS").setDbName("SUB_CLASS").setLabel("DOCSENDTRANSREFERENCEBLKSUBCLASS: Sub Class");
      Audited_doc_reference_object_blk.addField("ITEM3_PAGE_URL").setFunction("nvl(DOC_CLASS_API.Get_Page_Url(:ITEM3_DOC_CLASS), DOC_SUB_CLASS_API.Get_Page_Url(:ITEM3_DOC_CLASS,:ITEM3_SUB_CLASS))").setHidden();
      Audited_doc_reference_object_blk.addField("ITEM3_IS_ELE_DOC").
      setFunction("EDM_FILE_API.Have_Edm_File(:ITEM3_DOC_CLASS,:ITEM3_DOC_NO,:ITEM3_DOC_SHEET,:ITEM3_DOC_REV)").
      setHidden().
      setLabel("DOCSENDTRANSREFERENCEBLKISELEDOC: Is Ele Doc").
      setSize(5);
      
      Audited_doc_reference_object_blk.setView("DOC_REFERENCE_OBJECT");
        
      Audited_doc_reference_object_blk.setMasterBlock(headblk);
      Audited_doc_reference_object_set = Audited_doc_reference_object_blk.getASPRowSet();
      Audited_doc_reference_object_bar = mgr.newASPCommandBar(Audited_doc_reference_object_blk);
      Audited_doc_reference_object_bar.defineCommand(Audited_doc_reference_object_bar.OKFIND, "okFindITEM3");
      Audited_doc_reference_object_tbl = mgr.newASPTable(Audited_doc_reference_object_blk);
      Audited_doc_reference_object_tbl.enableRowSelect();
      Audited_doc_reference_object_tbl.setWrap();
      Audited_doc_reference_object_lay = Audited_doc_reference_object_blk.getASPBlockLayout();
      Audited_doc_reference_object_lay.setDefaultLayoutMode(Audited_doc_reference_object_lay.MULTIROW_LAYOUT);
      
      tabs = mgr.newASPTabContainer();
      tabs.addTab(mgr.translate("PENDINGDOCREFERENCEOBJECT: Pending doc"), "javascript:commandSet('MAIN.activatePendingDoc','')");
      tabs.addTab(mgr.translate("CONFERENCEDOCREFERENCEOBJECT: Conference doc"), "javascript:commandSet('MAIN.activateConferenceDoc','')");
      tabs.addTab(mgr.translate("AUDITEDDOCREFERENCEOBJECT: Audited doc"), "javascript:commandSet('MAIN.activateAuditedDoc','')");
   }  



    public void  adjust()
    {
      // fill function body
      headbar.removeCustomCommand("activatePendingDoc");    
      headbar.removeCustomCommand("activateConferenceDoc");  
      headbar.removeCustomCommand("activateAuditedDoc");  
    }       
       
    public void activatePendingDoc()
    {
        tabs.setActiveTab(1);
        okFindITEM1();
    }
    
    public void activateConferenceDoc()
    {
        tabs.setActiveTab(2);
        okFindITEM2(); 
    }
    
    public void activateAuditedDoc()
    {
        tabs.setActiveTab(3);
        okFindITEM2(); 
    }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------
   
    protected String getDescription()
    {
        return "DESGRULEDESC: Desg Rule";
    }


    protected String getTitle()
    {
       return "DESGRULETITLE: Desg Rule";
    }

    protected String getImageFieldTag(ASPField imageField, ASPRowSet rowset, int rowNum) throws FndException
    {
       ASPManager mgr = getASPManager();
       String imgSrc = mgr.getASPConfig().getImagesLocation();
       if (rowset.countRows() > 0)
       {
          if(("ITEM1_VIEW_FILE").equals(imageField.getName()))
          {
             if ("TRUE".equals(rowset.getValueAt(rowNum, "ITEM1_IS_ELE_DOC")))
             {
                imgSrc += "folder.gif";
                return "<img src=\""+imgSrc+"\" height=\"16\" width=\"16\" border=\"0\">";
             }
             else
             {
                return "";
             }
         }else if ("ITEM2_VIEW_FILE".equals(imageField.getName()))
         {
             if ("TRUE".equals(rowset.getValueAt(rowNum, "ITEM2_IS_ELE_DOC")))
             {
                imgSrc += "folder.gif";
                return "<img src=\""+imgSrc+"\" height=\"16\" width=\"16\" border=\"0\">";
             }    
             else
             {
                return "";
             } 
         }    
         else if ("ITEM3_VIEW_FILE".equals(imageField.getName()))
         {
             if ("TRUE".equals(rowset.getValueAt(rowNum, "ITEM3_IS_ELE_DOC")))
                 {
                     imgSrc += "folder.gif";        
                     return "<img src=\""+imgSrc+"\" height=\"16\" width=\"16\" border=\"0\">";
                 }
             else
                 {
                   return "";
                 }
         }
     }
      return "" ;        
   }
    

    protected void printContents() throws FndException
    {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      
      if (headset.countRows()>0)
      {
         if (headlay.isSingleLayout()||headlay.isCustomLayout() ||headlay.isEditLayout())
         {
//          printButton("grouptest", "GROUPTEST", "onclick='GroupTest();'");
            appendToHTML(tabs.showTabsInit());
            if (tabs.getActiveTab()== 1)
            {
               appendToHTML(Pending_doc_reference_object_lay.show());
            }else if(tabs.getActiveTab()== 2){
               appendToHTML(Conference_doc_reference_object_lay.show());
            }else if(tabs.getActiveTab()== 3){
               appendToHTML(Audited_doc_reference_object_lay.show());
            }     
            appendToHTML(tabs.showTabsFinish());
            
          } 
      }
  
   }
}
