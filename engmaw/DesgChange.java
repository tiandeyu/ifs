/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.engmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.docmaw.DocmawConstants;
import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class DesgChange extends HzASPPageProviderWf
{ 

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.engmaw.DesgChange");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  DesgChange (ASPManager mgr, String page_path)
   {
      super(mgr, page_path);
   }
   
   protected String getCurrentPageDocClass() {
      return DocmawConstants.PROJ_DESIGN;
   }     


   public void run() throws FndException
   {
      
      ASPManager mgr = getASPManager();
      super.run();
      if( mgr.commandBarActivated() ){         
         String tempCommand = mgr.readValue("__COMMAND");
         eval(mgr.commandBarFunction());
      }
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else   
         okFind();  
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("DESGCHANGENODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","DESG_CHANGE_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("DOC_CLASS", this.getCurrentPageDocClass());  
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("ID").
              setMandatory().
              setInsertable().      
              setLabel("DESGCHANGEID: Id").
              setSize(20);
      headblk.addField("CHANGE_ORDER_NO").
              setInsertable().
              setWfProperties().   
              setLabel("DESGCHANGECHANGEORDERNO: Change Order No").
              setSize(20);
      headblk.addField("PROJECT_NO").
              setInsertable().
              setLabel("DESGCHANGEPROJECTNO: Project No").
              setDynamicLOV("GENERAL_PROJECT").
              setSize(50);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setReadOnly().
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJECT_NO)").
              setLabel("DESGCHANGEGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(30);
      mgr.getASPField("PROJECT_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      headblk.addField("DOC_CLASS").
              setInsertable().
              setHidden().
              setLabel("DRAWINGARRIVEDOCCLASS: Doc Class").
              setSize(20);
      headblk.addField("DOC_NO").
              setInsertable(). 
              setLabel("DRAWINGARRIVEDOCNO: Doc No").
              setDynamicLOV("DOC_TITLE","DOC_CLASS").
              setSize(20);  
      headblk.addField("DOC_SHEET").
              setInsertable().
              setLabel("DRAWINGARRIVEDOCSHEET: Doc Sheet").
              setHidden().
              setSize(20); 
      headblk.addField("BOOKLET_NO").
              setFunction("DOC_TITLE_API.Get_Booklet_No(:DOC_CLASS,:DOC_NO)").
              setLabel("DRAWINGARRIVEBOOKLETNO: Booklet NO").
              setReadOnly();    
      mgr.getASPField("DOC_NO").setValidation("BOOKLET_NO");
      headblk.addField("BOOKLET_NAME").
              setLabel("DRAWINGARRIVEBOOKLETNAME: Booklet Name").
              setFunction("DOC_BOOKLET_API.Get_Booklet_Name(DOC_TITLE_API.Get_Booklet_No(:DOC_CLASS,:DOC_NO))").
              setReadOnly();  
      headblk.addField("DOC_REV").
              setReadOnly().  
              setLabel("DRAWINGARRIVEDOCREV: Doc Rev").
              setSize(20);
      headblk.addField("CHANGE_LEVEL").
              enumerateValues("Change_Level_API").
              setSelectBox().
              setMandatory().
              setInsertable().
              setLabel("DESGCHANGECHANGELEVEL: Change Level").
              setSize(20);
      headblk.addField("AMOUNT","Number").
              setInsertable().
              setLabel("DESGCHANGEAMOUNT: Amount").
              setSize(20);
      headblk.addField("CHANGE_DATE","Date").
              setInsertable().
              setLabel("DESGCHANGECHANGEDATE: Change Date").
              setHidden().   
              setSize(20);
      headblk.addField("CHANGE_TYPE").
              enumerateValues("Change_Type_API").
              setSelectBox().
              setMandatory().
              setInsertable().
              setLabel("DESGCHANGECHANGETYPE: Change Type").
              setSize(20);

      headblk.addField("BUDGET_NO").
              setInsertable().
              setDynamicLOV("PROJECT_BUDGET","PROJECT_NO PROJ_NO").
              setLabel("DESGCHANGEBUDGETNO: Budget No").
              setSize(20);
      headblk.addField("BUDGET_NAME").
              setReadOnly().
              setFunction("PROJECT_BUDGET_API.Get_Budget_Name(:PROJECT_NO,:BUDGET_NO)").
              setLabel("DESGCHANGEBUDGETNAME: Budget Name").
              setSize(30);
      mgr.getASPField("BUDGET_NO").setValidation("BUDGET_NAME");
      
      headblk.addField("BUDGET_LINE_NO").
              setDynamicLOV("PROJECT_BUDGET_LINE","PROJECT_NO PROJ_NO,BUDGET_NO").
              setInsertable().        
              setLabel("DESGCHANGEBUDGETLINENO: Budget Line No").
              setSize(30);
      headblk.addField("BUDGET_LINE_NAME").
              setReadOnly().        
              setFunction("PROJECT_BUDGET_LINE_API.Get_Budget_Name(:PROJECT_NO,:BUDGET_NO,:BUDGET_LINE_NO)").
              setLabel("DESGCHANGEBUDGETLINENAME: Budget Line Name").
              setSize(30);
      mgr.getASPField("BUDGET_LINE_NO").setValidation("BUDGET_LINE_NAME");
      
      headblk.addField("APPLY_USER").
              setInsertable().
              setLabel("DESGCHANGEAPPLYUSER: Apply User").
              setSize(20);
      headblk.addField("APPLY_DATE","Date").
              setInsertable().
              setLabel("DESGCHANGEAPPLYDATE: Apply Date").
              setSize(30);
      headblk.addField("APPLY_NO").
              setInsertable().
              setHidden().
              setLabel("DESGCHANGEAPPLYNO: Apply No").
              setSize(20);  
      headblk.addField("REASON").
              setInsertable().
              setLabel("DESGCHANGEREASON: Reason").
              setSize(120).
              setHeight(7);
      headblk.addField("CONTENT").
              setInsertable().
              setLabel("DESGCHANGECONTENT: Content").
              setSize(120).
              setHeight(7);
      headblk.addField("EXECUTIVE").
              setInsertable().
              setLabel("DESGCHANGEEXECUTIVE: Executive").
              setSize(120).
              setHeight(7);
      headblk.setView("DESG_CHANGE");
      headblk.defineCommand("DESG_CHANGE_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("DESGCHANGETBLHEAD: Desg Changes");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setDialogColumns(2); 
      headlay.setDataSpan("REASON",6);
      headlay.setDataSpan("CONTENT",6);
      headlay.setDataSpan("EXECUTIVE",6);  
      headlay.setSimple("BUDGET_NAME");  
      headlay.setSimple("BUDGET_LINE_NAME");  
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");  

   }  


   public void adjust()
   {
      try {
         super.adjust();
      } catch (FndException e) {
         // TODO Auto-generated catch block   
         e.printStackTrace();
      }
      // fill function body
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "DESGCHANGEDESC: Desg Change";
   }


   protected String getTitle()
   {
      return "DESGCHANGETITLE: Desg Change";
   }


   protected void printContents() throws FndException
   {
      super.printContents();

      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
   }
   //--------------------------  Added in new template  --------------------------
   //--------------  Return blk connected with workflow functions  ---------------
   //-----------------------------------------------------------------------------

   protected ASPBlock getBizWfBlock()
   {
      return headblk;      
   }
}
