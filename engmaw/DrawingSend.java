/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.engmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.genbaw.GenbawConstants;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class DrawingSend extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.engmaw.DrawingSend");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   protected ASPBlock headblk;
   protected ASPRowSet headset;
   protected ASPCommandBar headbar;
   protected ASPTable headtbl;
   protected ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   protected ASPBlock drawing_send_line_blk;
   protected ASPRowSet drawing_send_line_set;
   protected ASPCommandBar drawing_send_line_bar;
   protected ASPTable drawing_send_line_tbl;
   protected ASPBlockLayout drawing_send_line_lay;    


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------
   
   public  DrawingSend (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }
   
   protected String getDefProj() {
      ASPManager mgr = getASPManager();
      ASPContext ctx =mgr.getASPContext();
      return ctx.findGlobal(GenbawConstants.PERSON_DEFAULT_PROJECT);
   }       

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else if ("TRUE".equals(mgr.readValue("REFRESH_PARENT"))){
         okFindITEM1();   
      }    
      else 
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
                
      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("DRAWINGSENDNODATA: No data found.");
         headset.clear();
      }
      eval( drawing_send_line_set.syncItemSets() );
   }


   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","DRAWING_SEND_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("PROJ_NO", this.getDefProj());  
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(drawing_send_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,drawing_send_line_blk);
      headset.goTo(headrowno);
   }
   
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","DRAWING_SEND_LINE_API.New__",drawing_send_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_ID", headset.getValue("ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      drawing_send_line_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Perform Header and Item functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void  performHEAD( String command)
   {
      int currow;
      
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      

      currow = headset.getCurrentRowNo();
      if(headlay.isMultirowLayout())
         headset.storeSelections();
      else
         headset.selectRow();
      headset.markSelectedRows( command );
      mgr.submit(trans);
      headset.goTo(currow);
   }
   public void  report()
   {

      performHEAD( "Report__" );
   }
   public void  sign()
   {

      performHEAD( "Sign__" );
   }
   public void  send()
   {

      performHEAD( "Send__" );
   }

   public void  back()
   {

      performHEAD( "Back__" );
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("OBJSTATE").
              setHidden();
      headblk.addField("OBJEVENTS").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setDynamicLOV("GENERAL_PROJECT").
              setInsertable().        
              setLabel("DRAWINGSENDPROJNO: Proj No").
              setSize(30);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setReadOnly().
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
              setLabel("DRAWINGSENDGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(20);
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      headblk.addField("ID").
              setMandatory().
              setInsertable().
              setHidden().
              setLabel("DRAWINGSENDID: Id").
              setSize(20);
      headblk.addField("SEND_CODE").
              setInsertable().
              setLabel("DRAWINGSENDSENDCODE: Send Code").
              setSize(30);
      headblk.addField("REPORT_PERSON").
              setReadOnly().
              setLabel("DRAWINGSENDREPORTPERSON: Report Person").
              setSize(30);
      headblk.addField("REPORT_PERSON_NAME").
              setReadOnly().
              setLabel("DRAWINGSENDREPORTPERSONNAME: Report Person Name").
              setFunction("PERSON_INFO_API.Get_Name(:REPORT_PERSON)").
              setSize(20);  
      mgr.getASPField("REPORT_PERSON").setValidation("REPORT_PERSON_NAME");
      headblk.addField("REPORT_DATE","Date").
              setReadOnly().
              setLabel("DRAWINGSENDREPORTDATE: Report Date").
              setSize(30);
      headblk.addField("SIGN_PERSON").
              setReadOnly().
              setReadOnly().
              setLabel("DRAWINGSENDSIGNPERSON: Sign Person").
              setSize(30);   
      headblk.addField("SIGN_PERSON_NAME").
              setReadOnly().
              setLabel("DRAWINGSENDSIGNPERSONNAME: Sign Person Name").
              setFunction("PERSON_INFO_API.Get_Name(:SIGN_PERSON)").
              setSize(20);  
      mgr.getASPField("SIGN_PERSON").setValidation("SIGN_PERSON_NAME");
      headblk.addField("SIGN_DATE","Date").
              setReadOnly().
              setReadOnly().
              setLabel("DRAWINGSENDSIGNDATE: Sign Date").
              setSize(30);
      headblk.addField("SEND_PERSON").
              setReadOnly().
              setLabel("DRAWINGSENDSENDPERSON: Send Person").
              setSize(30);
      headblk.addField("SEND_PERSON_NAME").
              setReadOnly().
              setLabel("DRAWINGSENDSENDPERSONNAME: Send Person Name").
              setFunction("PERSON_INFO_API.Get_Name(:SEND_PERSON)").
              setSize(20);  
      mgr.getASPField("SEND_PERSON").setValidation("SEND_PERSON_NAME");
      headblk.addField("SEND_DATE" ,"Date").
              setReadOnly().
              setLabel("DRAWINGSENDSENDDATE: Send Date").
              setSize(30);
      headblk.addField("SPECIALIST_ENGINEER").
              setInsertable().
              setMandatory().
              setDynamicLOV("DRAW_PRO_RES_PER").      
              setLabel("DRAWINGSENDSPECIALISTENGINEER: Specialist Engineer").
              setSize(30);  
      headblk.addField("SPECIALIST_ENGINEER_NAME").
              setReadOnly().  
              setLabel("DRAWINGSENDSPECIALISTENGINEERNAME: Specialist Engineer Name").
              setFunction("PERSON_INFO_API.Get_Name(:SPECIALIST_ENGINEER)").
              setSize(20);    
      mgr.getASPField("SPECIALIST_ENGINEER").setValidation("SPECIALIST_ENGINEER_NAME");
      headblk.addField("STATE").     
              setReadOnly().    
              setLabel("DRAWINGSENDSTATE: State").
              setSize(30);

      headblk.addField("STATE_DB").     
              setReadOnly().
              setHidden().
              setLabel("DRAWINGSENDSTATE: State").
              setSize(30);
      headblk.addField("NOTE").
              setInsertable().
              setLabel("DRAWINGSENDNOTE: Note").
              setHeight(6).
              setSize(140);
//      headblk.addField("SEND_OPTION").
//              setReadOnly().    
//              setLabel("DRAWINGSENDSENDOPTION: Send Option").
//              setSize(140).
//              setHeight(6);
      headblk.setView("DRAWING_SEND");
      headblk.defineCommand("DRAWING_SEND_API","New__,Modify__,Remove__,Report__,Sign__,Send__,Back__");
      headset = headblk.getASPRowSet();
 
      headbar = mgr.newASPCommandBar(headblk);
//      headbar.addCustomCommand("Report","DRAWINGSENDREPORT: Report Drawing Send");
//      headbar.addCustomCommand("Sign","DRAWINGSENDSIGN: Sign Drawing Send");
//      headbar.addCustomCommand("Send","DRAWINGSENDSEND: Send Drawing Send");
      headbar.addSecureCustomCommand("create_drawing_send", "DRAWINGSENDCREATEDRAWINGSEND: Create Drawing Send...","DRAWING_SEND_LINE_API.Create_Drawing_Send_Line");
      headbar.addSecureCustomCommand("Report","DRAWINGSENDREPORT: Report Drawing Send...","DRAWING_SEND_API.Report__");
      headbar.addSecureCustomCommand("Sign","DRAWINGSENDSIGN: Check Drawing Send...","DRAWING_SEND_API.Sign__");
      headbar.addSecureCustomCommand("Send","DRAWINGSENDSEND: Close Drawing Send...","DRAWING_SEND_API.Send__");      
//      headbar.addSecureCustomCommand("Back","DRAWINGSENDBACK: Back Drawing Send...","DRAWING_SEND_API.Back__");      
      headbar.addCommandValidConditions("create_drawing_send",     "OBJSTATE",    "Enable",      "Planed");   
      headbar.addCommandValidConditions("Report",     "OBJSTATE",    "Enable",      "Planed");     
      headbar.addCommandValidConditions("Sign", "OBJSTATE",    "Enable",      "Reported");    
      headbar.addCommandValidConditions("Send", "OBJSTATE",    "Enable",      "Signed");   
//      headbar.addCommandValidConditions("Back", "OBJSTATE",    "Enable",      "Signed");   
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("DRAWINGSENDTBLHEAD: Drawing Sends");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setDataSpan("NOTE", 5);    
      headlay.setSimple("SPECIALIST_ENGINEER_NAME");
      headlay.setSimple("REPORT_PERSON_NAME");  
      headlay.setSimple("SIGN_PERSON_NAME");
      headlay.setSimple("SEND_PERSON_NAME");
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");    
      
      drawing_send_line_blk = mgr.newASPBlock("ITEM1");
      drawing_send_line_blk.addField("ITEM0_OBJID").
                            setHidden().
                            setDbName("OBJID");
      drawing_send_line_blk.addField("ITEM0_OBJVERSION").
                            setHidden().
                            setDbName("OBJVERSION");
      drawing_send_line_blk.addField("ITEM0_PROJ_NO").
                            setDbName("PROJ_NO").
                            setHidden().
                            setMandatory().
                            setInsertable().
                            setLabel("DRAWINGSENDLINEITEM0PROJNO: Proj No").
                            setSize(50);
      drawing_send_line_blk.addField("ITEM0_ID").
                            setDbName("ID").
                            setHidden().
                            setMandatory().
                            setInsertable().
                            setLabel("DRAWINGSENDLINEITEM0ID: Id").
                            setSize(200);
      drawing_send_line_blk.addField("SEND_LINE_NO").
                            setMandatory().
                            setHidden().
                            setInsertable().
                            setLabel("DRAWINGSENDLINESENDLINENO: Send Line No").
                            setSize(200);
      drawing_send_line_blk.addField("VOLUME_NO").
                            setInsertable().
                            setDynamicLOV("DRAWING_LIST_LOV").
                            setLabel("DRAWINGSENDLINEVOLUMENO: Volume No").
                            setSize(50);
      drawing_send_line_blk.addField("VOLUME_DESC").
                            setReadOnly().
                            setFunction("DRAWING_LIST_API.Get_Volume_Desc(:ITEM0_PROJ_NO,:VOLUME_NO)").
                            setLabel("DRAWINGSENDLINEVOLUMEDESC: Volume Desc").              
                            setSize(120);
      drawing_send_line_blk.addField("MAJOR_NO").
                            setReadOnly().
                            setFunction("DRAWING_LIST_API.Get_Major_No(:ITEM0_PROJ_NO,:VOLUME_NO)").
                            setLabel("DRAWINGSENDLINEMAJORNO: Major No").
                            setSize(20);  
      drawing_send_line_blk.addField("MAJOR_DESC").
                            setLabel("DRAWINGSENDLINEMAJORDESC: Major Desc").
                            setReadOnly().
                            setFunction("VOLUME_MAJOR_API.GET_MAJOR_DESC (DRAWING_LIST_API.Get_Major_No(:ITEM0_PROJ_NO,:VOLUME_NO))").
                            setSize(30);    
      drawing_send_line_blk.addField("COPIES","Number").
                            setFunction("DRAWING_LIST_API.Get_Copies(:ITEM0_PROJ_NO,:VOLUME_NO)").
                            setReadOnly().
                            setLabel("DRAWINGSENDLINECOPIES: Copies").
                            setSize(30);    
      drawing_send_line_blk.addField("SEND_QTY","Number").
                            setInsertable().
                            setLabel("DRAWINGSENDLINESENDQTY: Send Qty").
                            setSize(30);  
      drawing_send_line_blk.addField("SEND_QTY_TOTAL","Number").
                            setInsertable().
                            setHidden().
                            setLabel("DRAWINGSENDLINESENDQTYTOTAL: Send Qty Total").
                            setSize(30);  
      drawing_send_line_blk.addField("SEND_OPTION").
                            setInsertable().        
                            setLabel("DRAWINGSENDSENDOPTION: Send Option").
                            setSize(140).
                            setHeight(6);
      drawing_send_line_blk.addField("ITEM0_NOTE").
                            setDbName("NOTE").
                            setInsertable().
                            setLabel("DRAWINGSENDLINEITEM0NOTE: Note").
                            setSize(140).
                            setHeight(6);  
      drawing_send_line_blk.setView("DRAWING_SEND_LINE");
      drawing_send_line_blk.defineCommand("DRAWING_SEND_LINE_API","Modify__,Remove__");
      drawing_send_line_blk.setMasterBlock(headblk);    
      drawing_send_line_set = drawing_send_line_blk.getASPRowSet();
      drawing_send_line_bar = mgr.newASPCommandBar(drawing_send_line_blk);
      drawing_send_line_bar.defineCommand(drawing_send_line_bar.OKFIND, "okFindITEM1");
      drawing_send_line_bar.defineCommand(drawing_send_line_bar.NEWROW, "newRowITEM1");
      drawing_send_line_tbl = mgr.newASPTable(drawing_send_line_blk);
      drawing_send_line_tbl.setTitle("DRAWINGSENDLINEITEMHEAD1: DrawingSendLine");
      drawing_send_line_tbl.enableRowSelect();
      drawing_send_line_tbl.setWrap();    
      drawing_send_line_lay = drawing_send_line_blk.getASPBlockLayout();
      drawing_send_line_lay.setDefaultLayoutMode(drawing_send_line_lay.MULTIROW_LAYOUT);
      drawing_send_line_lay.setDataSpan("SEND_QTY_TOTAL", 5);
      drawing_send_line_lay.setDataSpan("SEND_OPTION", 5);
      drawing_send_line_lay.setDataSpan("ITEM0_NOTE", 5);          
   }



   public void  adjust()  
   {
      // fill function body
      if(headlay.isSingleLayout()&&headset.countRows()>0){
         String state = headset.getValue("OBJSTATE");
         if( headlay.isSingleLayout() && ("Sended".equals(state))){ 
               headbar.disableCommand(headbar.DELETE);
               headbar.disableCommand(headbar.EDITROW);           
               drawing_send_line_bar.disableCommand( drawing_send_line_bar.DELETE );
               drawing_send_line_bar.disableCommand( drawing_send_line_bar.EDITROW );  
         }    
     }
   }
   
   public void create_drawing_send() throws FndException{
      ASPManager mgr = getASPManager();  
      ASPCommand cmd = mgr.newASPCommand(); 
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      headset.storeSelections();
      if (headlay.isSingleLayout())
         headset.selectRow();
      ASPBuffer selected_fields=headset.getSelectedRows("PROJ_NO,ID");
      callNewWindow("DrawingListDlg.page", selected_fields);         
   }      
         
   private void callNewWindow(String transfer_page, ASPBuffer buff) throws FndException 
   {
       ASPManager mgr = getASPManager();
       ASPContext ctx = mgr.getASPContext();
       String proj_no = buff.getBufferAt(0).getValueAt(0);
       String  id= buff.getBufferAt(0).getValueAt(1);   
       ctx.setGlobal("DRAWINGLISTDLGPROJNO", proj_no);
       ctx.setGlobal("DRAWINGLISTDLGID", id);
      String url = transfer_page+"?USERCOMMAND=submitTree&PROJ_NO="+proj_no+"&id="+id;
//      String url = transfer_page+"?PROJ_NO="+project_no+"&PLAN_NO="+plan_no+"&PROJECT_TYPE_NO="+id;
      appendDirtyJavaScript("showNewBrowser_('"+ url + "', 550, 550, 'YES'); \n");
   }  

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "DRAWINGSENDDESC: Drawing Send";
   }


   protected String getTitle()
   {
      return "DRAWINGSENDTITLE: Drawing Send";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      printHiddenField("REFRESH_PARENT", "FALSE");
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      if (drawing_send_line_lay.isVisible())
          appendToHTML(drawing_send_line_lay.show());    
      appendDirtyJavaScript("function refreshParent()\n");
      appendDirtyJavaScript("{\n");  
      appendDirtyJavaScript(" document.form.REFRESH_PARENT.value=\"TRUE\"\n");
      appendDirtyJavaScript(" submit() \n");
      appendDirtyJavaScript("}\n");
   }
}
