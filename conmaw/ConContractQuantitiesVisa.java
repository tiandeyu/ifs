/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.conmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ConContractQuantitiesVisa extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.conmaw.ConContractQuantitiesVisa");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock con_quantities_visa_line_blk;
   private ASPRowSet con_quantities_visa_line_set;
   private ASPCommandBar con_quantities_visa_line_bar;
   private ASPTable con_quantities_visa_line_tbl;
   private ASPBlockLayout con_quantities_visa_line_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  ConContractQuantitiesVisa (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      ASPManager mgr = getASPManager();
      super.run();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")) )
         validate();
      else
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      q.addWhereCondition("CONTRACT_ENTRUST_NO = ?");
      q.addParameter("CONTRACT_ENTRUST_NO", "CONTRACT");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("CONQUANTITIESVISANODATA: No data found.");
         headset.clear();
      }
      else
      {
         okFindITEM1();
      }

   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","CON_QUANTITIES_VISA_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      data.setFieldItem("CONTRACT_ENTRUST_NO", "CONTRACT");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(con_quantities_visa_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,con_quantities_visa_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","CON_QUANTITIES_VISA_LINE_API.New__",con_quantities_visa_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_ID", headset.getValue("ID"));
      cmd.setParameter("ITEM0_CONTRACT_ID", headset.getValue("CONTRACT_ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      con_quantities_visa_line_set.addRow(data);
   }
   
   //-----------------------------------------------------------------------------
   //------------------------  Validate functions  ---------------------------
   //-----------------------------------------------------------------------------
   public void validate() {
      // TODO Auto-generated method stub
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
      ASPCommand cmd1;
      ASPTransactionBuffer trans2 = mgr.newASPTransactionBuffer();
      
      String val = mgr.readValue("VALIDATE");
      String txt = "";
      String  contractEntrustName = "";
      String  constructionOrgNo = "";
      String  constructionOrgName = "";
      String  PRICE = "";
      String  UNIT = "";
      String  BUDGETNO = "";
      String  BUDGETLINENO = "";
      String  BUDGETNAME = "";
      String  BUDGETAMOUNT = "";
      String  CONTRACTSIGNAMOUNT = "";
      String  CONTRACTQUANTITIES = "";
      float tempValue = 0;
      
      if ("CONTRACT_ID".equals(val)) {
         cmd = trans.addCustomFunction("GETCONTRACTENTRUSTNAME", 
               "PROJECT_CONTRACT_API.Get_Contract_Desc", "NAME");
         cmd.addParameter("PROJ_NO");
         cmd.addParameter("CONTRACT_ID");
         cmd = trans.addCustomFunction("GETCONSTRUCTIONORGNO", 
                 "PROJECT_CONTRACT_API.Get_Secend_Side", "CONSTRUCTION_ORG_NO");
         cmd.addParameter("PROJ_NO");
         cmd.addParameter("CONTRACT_ID");
         
         trans = mgr.validate(trans);
         contractEntrustName = trans.getValue("GETCONTRACTENTRUSTNAME/DATA/NAME");
         constructionOrgNo = trans.getValue("GETCONSTRUCTIONORGNO/DATA/CONSTRUCTION_ORG_NO");
         
         
         cmd = trans2.addCustomFunction("GETCONSTRUCTIONORGNAME", 
               "SUPPLIER_INFO_API.GET_NAME", "ORG");
         cmd.addParameter("CONSTRUCTION_ORG_NO",constructionOrgNo);
         trans2 = mgr.validate(trans2);
         
         constructionOrgName = trans2.getValue("GETCONSTRUCTIONORGNAME/DATA/ORG");
         
         txt = ((mgr.isEmpty(contractEntrustName)) ? "" : contractEntrustName )+ "^" 
               + ((mgr.isEmpty(constructionOrgNo)) ? "" : constructionOrgNo )+ "^" 
               + ((mgr.isEmpty(constructionOrgName)) ? "" : constructionOrgName )+ "^";
         
         mgr.responseWrite(txt);
      }
      else if ("JOB_LIST_CONTENT".equals(val)) {
         
         String PROJ_NO_ITEM = mgr.readValue("PROJ_NO");
         String CONTRACT_NO_ITEM = mgr.readValue("CONTRACT_ID");
         
         cmd = trans.addCustomFunction("GETPRICE", 
               "PROJECT_CONTRACT_ITEM_API.GET_PRICE", "PRICE");
         cmd.addParameter("PROJ_NO",PROJ_NO_ITEM);
         cmd.addParameter("CONTRACT_ID",CONTRACT_NO_ITEM);
         cmd.addParameter("JOB_LIST_CONTENT");
         
         cmd = trans.addCustomFunction("GETBUDGETNO", 
               "PROJECT_CONTRACT_ITEM_API.Get_Budget_No", "BUDGET_NO");
         cmd.addParameter("PROJ_NO",PROJ_NO_ITEM);
         cmd.addParameter("CONTRACT_ID",CONTRACT_NO_ITEM);
         cmd.addParameter("JOB_LIST_CONTENT");
         
         cmd = trans.addCustomFunction("GETBUDGETLINENO", 
                "PROJECT_CONTRACT_ITEM_API.Get_Budget_Line_No", "BUDGET_LINE_NO");
         cmd.addParameter("PROJ_NO",PROJ_NO_ITEM);
         cmd.addParameter("CONTRACT_ID",CONTRACT_NO_ITEM);
         cmd.addParameter("JOB_LIST_CONTENT");
         
         cmd = trans.addCustomFunction("GETCONTRACTSIGNAMOUNT", 
               "PROJECT_CONTRACT_ITEM_API.Get_Original_Total", "CONTRACT_SIGN_AMOUNT");
         cmd.addParameter("PROJ_NO",PROJ_NO_ITEM);
         cmd.addParameter("CONTRACT_ID",CONTRACT_NO_ITEM);
         cmd.addParameter("JOB_LIST_CONTENT");
         
         cmd = trans.addCustomFunction("GETCONTRACTQUANTITIES", 
               "PROJECT_CONTRACT_ITEM_API.Get_Original_Qty", "CONTRACT_QUANTITIES");
         cmd.addParameter("PROJ_NO",PROJ_NO_ITEM);
         cmd.addParameter("CONTRACT_ID",CONTRACT_NO_ITEM);
         cmd.addParameter("JOB_LIST_CONTENT");
         
         trans = mgr.validate(trans);   
         
         PRICE = trans.getValue("GETPRICE/DATA/PRICE");
         BUDGETNO = trans.getValue("GETBUDGETNO/DATA/BUDGET_NO");
         BUDGETLINENO = trans.getValue("GETBUDGETLINENO/DATA/BUDGET_LINE_NO");
         CONTRACTSIGNAMOUNT = trans.getValue("GETBUDGETAMOUNT/DATA/CONTRACT_SIGN_AMOUNT");
         CONTRACTQUANTITIES = trans.getValue("GETCONTRACTQUANTITIES/DATA/CONTRACT_QUANTITIES");
         
         cmd1 = trans1.addCustomFunction("GETUNIT", 
               "PROJECT_BUDGET_LINE_API.Get_Unit_Code", "UNIT");
         cmd1.addParameter("PROJ_NO",PROJ_NO_ITEM);    
         cmd1.addParameter("BUDGET_NO",BUDGETNO);
         cmd1.addParameter("BUDGET_LINE_NO",BUDGETLINENO);
         
         cmd1 = trans1.addCustomFunction("GETBUDGETNAME",      
               "PROJECT_BUDGET_LINE_API.Get_Budget_Name", "BUDGET_NAME");
         cmd1.addParameter("PROJ_NO",PROJ_NO_ITEM);
         cmd1.addParameter("BUDGET_NO",BUDGETNO);  
         cmd1.addParameter("BUDGET_LINE_NO",BUDGETLINENO);
         
         cmd1 = trans1.addCustomFunction("GETBUDGETAMOUNT", 
               "PROJECT_BUDGET_LINE_API.Get_Amount", "BUDGET_AMOUNT");
         cmd1.addParameter("PROJ_NO",PROJ_NO_ITEM);
         cmd1.addParameter("BUDGET_NO",BUDGETNO);
         cmd1.addParameter("BUDGET_LINE_NO",BUDGETLINENO);   
         
         

         trans1 = mgr.validate(trans1);    
        
         UNIT = trans1.getValue("GETUNIT/DATA/UNIT");
         BUDGETNAME = trans1.getValue("GETBUDGETNAME/DATA/BUDGET_NAME");
         BUDGETAMOUNT = trans1.getValue("GETBUDGETAMOUNT/DATA/BUDGET_AMOUNT");
         
         
         txt = ((mgr.isEmpty(PRICE)) ? "" : PRICE )+ "^"
               +((mgr.isEmpty(UNIT)) ? "" : UNIT )+ "^"
               +((mgr.isEmpty(CONTRACTQUANTITIES)) ? "" : CONTRACTQUANTITIES )+ "^"
               +((mgr.isEmpty(BUDGETLINENO)) ? "" : BUDGETLINENO )+ "^"
               +((mgr.isEmpty(BUDGETNAME)) ? "" : BUDGETNAME )+ "^" 
               + ((mgr.isEmpty(CONTRACTSIGNAMOUNT)) ? "" : CONTRACTSIGNAMOUNT )+ "^";
         
         mgr.responseWrite(txt);
      }
      else if ("QUANTITIES".equals(val)) {         
         tempValue = ((mgr.readValue("QUANTITIES")==null)?0:Float.parseFloat(mgr.readValue("QUANTITIES")))*((mgr.readValue("PRICE")==null)?0:Float.parseFloat(mgr.readValue("PRICE")));
         mgr.responseWrite(String.valueOf(tempValue)+"^");
      }
      
      mgr.endResponse();
      
   }
   
   

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setDefaultNotVisible().
              setDynamicLOV("GENERAL_PROJECT").
              setLabel("CONCONTRACTQUANTITIESVISAPROJNO: Proj No").
              setSize(30);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("CONCONTRACTQUANTITIESVISAGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(30).
              setReadOnly();
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      headblk.addField("ID").
              setMandatory().
              setInsertable().
              setLabel("CONQUANTITIESVISAID: Id").
              setSize(30).
              setHidden();
      headblk.addField("VISA_NO").
              setInsertable().
              setLabel("CONQUANTITIESVISAVISANO: Visa No").
              setSize(30);
      headblk.addField("VISA_NAME").
              setInsertable().
              setMandatory().
              setLabel("CONQUANTITIESVISAVISANAME: Visa Name").
              setSize(30);
      headblk.addField("CONTRACT_ENTRUST_NO").
              setInsertable().
              setLabel("CONQUANTITIESVISACONTRACTENTRUSTNO: Contract Entrust No").
              setSize(30).
              setHidden();
      
      headblk.addField("CONTRACT_ID").
              setInsertable().
              setDefaultNotVisible().
              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
//              setLOVProperty("WHERE", "SCHEDULE = 'TRUE'").
              setLabel("CONCONTRACTQUANTITIESVISACONTRACTENTRUSTNO: Contract Id").
              setSize(30).
              setCustomValidation("PROJ_NO,CONTRACT_ID", "NAME,CONSTRUCTION_ORG_NO,ORG");
      headblk.addField("NAME").
              setFunction("PROJECT_CONTRACT_API.Get_Contract_Desc (:PROJ_NO,:CONTRACT_ID)").
              setLabel("CONCONTRACTQUANTITIESVISACONTRACTENTRUSTNAME: Contract Name").
              setSize(30).
              setReadOnly();
      //CONSTRUCTION_ORG_NO
      headblk.addField("CONSTRUCTION_ORG_NO").
              setFunction("PROJECT_CONTRACT_API.Get_Secend_Side (:PROJ_NO , :CONTRACT_ID)").
              setLabel("CONCONTRACTQUANTITIESVISACONSTRUCTIONORGNO: Construction Org No").
              setDefaultNotVisible().
              setSize(30).
              setReadOnly();
      headblk.addField("ORG").
              setFunction("SUPPLIER_INFO_API.GET_NAME (PROJECT_CONTRACT_API.Get_Secend_Side (:PROJ_NO,:CONTRACT_ID))").
              setLabel("CONCONTRACTQUANTITIESVISACONSTRUCTIONORGNAME: Construction Org Name").
              setDefaultNotVisible().
              setSize(30).
              setReadOnly();
      
      headblk.addField("ESTIMATE_COST","Number").
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONQUANTITIESVISAESTIMATECOST: Estimate Cost").
              setSize(30);
      
      headblk.addField("SUB_PROJ_NO").
              setInsertable().
              setDefaultNotVisible().
              setDynamicLOV("CON_QUA_TREE","PROJ_NO").
              setLOVProperty("TREE_PARE_FIELD", "PARENT_ID").
              setLOVProperty("TREE_DISP_FIELD", "NODE_NO,NODE_NAME").
              setLOVProperty("ORDER_BY", "NODE_NO").
              setLabel("CONCONTRACTQUANTITIESVISASUBPROJNO: Sub Proj No").
              setSize(30);
      headblk.addField("SUB_PROJ_DESC").
              setFunction("CON_PROJ_CONSTRUCTION_MAN_API.Get_Node_Name ( :PROJ_NO,:SUB_PROJ_NO)").
              setLabel("CONCONTRACTQUANTITIESVISASUBPROJDESC: SUB PROJ DESC").
              setSize(30).
              setReadOnly();
      mgr.getASPField("SUB_PROJ_NO").setValidation("SUB_PROJ_DESC");
      
      headblk.addField("CREATE_PERSON").
              setDynamicLOV("PERSON_INFO").
              setDefaultNotVisible().
              setLabel("CONCONTRACTQUANTITIESVISACREATEPERSON: Create Person").
              setSize(30);
      headblk.addField("CREATE_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
              setLabel("CONCONTRACTQUANTITIESVISACREATEPERSONNAME: Create Person Name").
              setSize(30).
              setReadOnly();
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONQUANTITIESVISACREATETIME: Create Time").
              setSize(30);
      headblk.addField("STATUS").
              setHidden().
              setLabel("CONQUANTITIESVISASTATUS: Status").
              setSize(30);
      headblk.addField("STATUS_DESC").
              setReadOnly().
              setFunction("FLOW_STATUS_API.Get_Status_Desc (:STATUS)").
              setLabel("CONQUANTITIESVISASTATUSDESC: Status Desc").
              setSize(30);
      headblk.addField("VISA_REASON").
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONQUANTITIESVISAVISAREASON: Visa Reason").
              setSize(120).
              setHeight(5);
      headblk.addField("FLOW_TITLE").
              setWfProperties().
              setReadOnly().
              setHidden().
              setFunction("VISA_NAME").
              setLabel("FLOWTITLE: Flow Title");
      
      
      headblk.setView("CON_QUANTITIES_VISA");
      headblk.defineCommand("CON_QUANTITIES_VISA_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("printReport", "CONCONTRACTQUANTITIESVISAREPORT: Print Contract Quantitie Visa Report...");//TODO
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("CONQUANTITIESVISATBLHEAD: Con Quantities Visas");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("NAME");
      headlay.setSimple("ORG");
      headlay.setSimple("SUB_PROJ_DESC");
 
      headlay.setSimple("CREATE_PERSON_NAME");
      headlay.setDataSpan("STATUS", 5);
      headlay.setDataSpan("VISA_REASON", 5);


      con_quantities_visa_line_blk = mgr.newASPBlock("ITEM1");
      con_quantities_visa_line_blk.addField("ITEM0_OBJID").
                                   setHidden().
                                   setDbName("OBJID");
      con_quantities_visa_line_blk.addField("ITEM0_OBJVERSION").
                                   setHidden().
                                   setDbName("OBJVERSION");
      con_quantities_visa_line_blk.addField("ITEM0_PROJ_NO").
                                   setDbName("PROJ_NO").
                                   setMandatory().
                                   setHidden().
                                   setLabel("CONQUANTITIESVISALINEITEM0PROJNO: Proj No").
                                   setSize(30);
      con_quantities_visa_line_blk.addField("ITEM0_ID").
                                   setDbName("ID").
                                   setMandatory().
                                   setInsertable().
                                   setLabel("CONQUANTITIESVISALINEITEM0ID: Id").
                                   setSize(30).
                                   setHidden();
      con_quantities_visa_line_blk.addField("LINE_NO").
                                   setMandatory().
                                   setInsertable().
                                   setLabel("CONQUANTITIESVISALINELINENO: Line No").
                                   setSize(30).
                                   setHidden();
      
      con_quantities_visa_line_blk.addField("JOB_LIST_CONTENT").
                                   setInsertable().
                                   setDynamicLOV("PROJECT_CONTRACT_ITEM","PROJ_NO,CONTRACT_ID").
                                   setLabel("CONQUANTITIESVISALINEJOBLISTCONTENT: Job List Content").
                                   setSize(30).
                                   setCustomValidation("PROJ_NO,CONTRACT_ID,JOB_LIST_CONTENT", "PRICE,UNIT,CONTRACT_QUANTITIES,BUDGET_LINE_NO,BUDGET_NAME,CONTRACT_SIGN_AMOUNT");
      
      con_quantities_visa_line_blk.addField("PRICE").  
                                   setFunction("PROJECT_CONTRACT_ITEM_API.GET_PRICE (:PROJ_NO , :CONTRACT_ID , :JOB_LIST_CONTENT)").
                                   setLabel("CONCONTRACTQUANTITIESVISAPRICE: Price").
                                   setSize(30).
                                   setReadOnly();
      
      con_quantities_visa_line_blk.addField("QUANTITIES").
                                   setInsertable().
                                   setMandatory().
                                   setCustomValidation("QUANTITIES,PRICE","COST_ESTIMATE").
                                   setLabel("CONCONTRACTQUANTITIESVISAQUANTITIES: Quantities").
                                   setSize(30);
      
      con_quantities_visa_line_blk.addField("COST_ESTIMATE","Number").
                                   setReadOnly().
                                   setLabel("CONQUANTITIESVISALINECOSTESTIMATE: Cost Estimate").
                                   setSize(30);
      
      con_quantities_visa_line_blk.addField("UNIT").
                                   setFunction("PROJECT_BUDGET_LINE_API.Get_Unit_Code (:PROJ_NO,PROJECT_CONTRACT_ITEM_API.Get_Budget_No (:PROJ_NO, :CONTRACT_ID, :JOB_LIST_CONTENT),PROJECT_CONTRACT_ITEM_API.Get_Budget_Line_No (:PROJ_NO , :CONTRACT_ID , :JOB_LIST_CONTENT))").
                                   setLabel("CONCONTRACTQUANTITIESVISAUNIT: Unit").
                                   setSize(30).
                                   setReadOnly();
      
      con_quantities_visa_line_blk.addField("CONTRACT_QUANTITIES").
                                   setFunction("PROJECT_CONTRACT_ITEM_API.Get_Original_Qty (:PROJ_NO , :CONTRACT_ID , :JOB_LIST_CONTENT)").
                                   setLabel("CONCONTRACTQUANTITIESVISACONTRACTQUANTITIES: Contract Quantities").
                                   setSize(30).
                                   setReadOnly();
      
      con_quantities_visa_line_blk.addField("BUDGET_NO").
                                   setInsertable().  
                                   setFunction("PROJECT_CONTRACT_ITEM_API.Get_Budget_No (:PROJ_NO , :CONTRACT_ID , :JOB_LIST_CONTENT)").
                                   setLabel("CONCONTRACTQUANTITIESVISALINEBUDGETNO: Budget No2").
                                   setSize(30).
                                   setHidden();
   
      con_quantities_visa_line_blk.addField("BUDGET_LINE_NO").
                                   setReadOnly().
                                   setFunction("PROJECT_CONTRACT_ITEM_API.Get_Budget_Line_No (:PROJ_NO , :CONTRACT_ID , :JOB_LIST_CONTENT)").
                                   setLabel("CONCONTRACTCONNECTIONLISTLINEITEMNO: Budget No").
                                   setSize(30);
      con_quantities_visa_line_blk.addField("BUDGET_NAME").
                                   setReadOnly().
                                   setFunction("PROJECT_BUDGET_LINE_API.Get_Budget_Name (:PROJ_NO , PROJECT_CONTRACT_ITEM_API.Get_Budget_No (:PROJ_NO , :CONTRACT_ID , :JOB_LIST_CONTENT),PROJECT_CONTRACT_ITEM_API.Get_Budget_Line_No (:PROJ_NO , :CONTRACT_ID , :JOB_LIST_CONTENT))").
                                   setLabel("CONCONNECTIONLISTLINEBUDGETNAME: Budget Name").
                                   setSize(30);
      
      con_quantities_visa_line_blk.addField("BUDGET_AMOUNT").
                                   setHidden().
                                   setFunction("PROJECT_BUDGET_LINE_API.Get_Amount (:PROJ_NO,PROJECT_CONTRACT_ITEM_API.Get_Budget_No (:PROJ_NO , :CONTRACT_ID , :JOB_LIST_CONTENT),PROJECT_CONTRACT_ITEM_API.Get_Budget_Line_No (:PROJ_NO ,:CONTRACT_ID ,:JOB_LIST_CONTENT))").
                                   setLabel("CONCONNECTIONLISTLINEBUDGETAMOUNT: Budget Amount ").
                                   setSize(30);
      
      con_quantities_visa_line_blk.addField("CONTRACT_SIGN_AMOUNT").
                                   setReadOnly().
                                   setFunction("PROJECT_CONTRACT_ITEM_API.Get_Original_Total(:PROJ_NO, :CONTRACT_ID, :JOB_LIST_CONTENT)").
                                   setLabel("CONCONNECTIONLISTLINECONTRACTSIGNAMOUNT: Contract Sign Amount").
                                   setSize(30);
           
      con_quantities_visa_line_blk.addField("ITEM0_CONTRACT_ID").
                                   setDbName("CONTRACT_ID").
                                   setInsertable().
                                   setLabel("CONQUANTITIESVISALINEITEM0CONTRACTID: Contract Id").
                                   setSize(30).
                                   setHidden();
      con_quantities_visa_line_blk.addField("ITEM_NO").
                                   setInsertable().
                                   setLabel("CONQUANTITIESVISALINEITEMNO: No").
                                   setSize(30).
                                   setHidden();
      con_quantities_visa_line_blk.setView("CON_QUANTITIES_VISA_LINE");
      con_quantities_visa_line_blk.defineCommand("CON_QUANTITIES_VISA_LINE_API","New__,Modify__,Remove__");
      con_quantities_visa_line_blk.setMasterBlock(headblk);
      con_quantities_visa_line_set = con_quantities_visa_line_blk.getASPRowSet();
      con_quantities_visa_line_bar = mgr.newASPCommandBar(con_quantities_visa_line_blk);
      con_quantities_visa_line_bar.defineCommand(con_quantities_visa_line_bar.OKFIND, "okFindITEM1");
      con_quantities_visa_line_bar.defineCommand(con_quantities_visa_line_bar.NEWROW, "newRowITEM1");
      con_quantities_visa_line_tbl = mgr.newASPTable(con_quantities_visa_line_blk);
      con_quantities_visa_line_tbl.setTitle("CONQUANTITIESVISALINEITEMHEAD1: ConQuantitiesVisaLine");
      con_quantities_visa_line_tbl.enableRowSelect();
      con_quantities_visa_line_tbl.setWrap();
      con_quantities_visa_line_lay = con_quantities_visa_line_blk.getASPBlockLayout();
      con_quantities_visa_line_lay.setDefaultLayoutMode(con_quantities_visa_line_lay.MULTIROW_LAYOUT);

   }

 //Report  Function
   public void  printReport() throws FndException, UnsupportedEncodingException//TODO
   {
    ASPManager mgr = getASPManager();
    ASPConfig cfg = getASPConfig();
    String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
    if (headlay.isMultirowLayout())
       headset.goTo(headset.getRowSelected());
    if (headset.countRows()>0 )
          {   
             String proj_no = headset.getValue("PROJ_NO");
             String id = headset.getValue("ID");
              appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=RptConContractQuantitiesVisa.raq&proj_no="+proj_no+"&id="+id
                + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
         }
   }


   public void  adjust()
   {
      // fill function body
      try {
         super.adjust();
      } catch (FndException e) {
         // TODO Auto-generated catch block   
         e.printStackTrace();
      }
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "CONCONTRACTQUANTITIESVISADESC: Contract Quantities Visa";
   }


   protected String getTitle()
   {
      return "CONCONTRACTQUANTITIESVISATITLE: Contract Quantities Visa";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else 
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }  
      if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
      {
         appendToHTML(con_quantities_visa_line_lay.show());
      }
   }
   
 //--------------------------  Added in new template  --------------------------
   //--------------  Return blk connected with workflow functions  ---------------
   //-----------------------------------------------------------------------------

   protected ASPBlock getBizWfBlock()
   {
      return headblk;      
   }
}
