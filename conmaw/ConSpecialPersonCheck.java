/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.conmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ConSpecialPersonCheck extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.conmaw.ConSpecialPersonCheck");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock con_special_person_list_blk;
   private ASPRowSet con_special_person_list_set;
   private ASPCommandBar con_special_person_list_bar;
   private ASPTable con_special_person_list_tbl;
   private ASPBlockLayout con_special_person_list_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  ConSpecialPersonCheck (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      ASPManager mgr = getASPManager();
      super.run();
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else
         okFind(); 
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("CONSPECIALPERSONCHECKNODATA: No data found.");
         headset.clear();
      }
      else
      {
         okFindITEM1(); 
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","CON_SPECIAL_PERSON_CHECK_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
//      data.setFieldItem("STATUS", "Íê³É");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(con_special_person_list_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,con_special_person_list_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","CON_SPECIAL_PERSON_LIST_API.New__",con_special_person_list_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_ID", headset.getValue("ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      con_special_person_list_set.addRow(data);
   }
   
   public void validate() {
      // TODO Auto-generated method stub
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
      ASPCommand cmd1;
      String val = mgr.readValue("VALIDATE");
      String txt = "";
      String  contractName = "";
      String SECONDSIDE = "";
      String SECONDSIDENAME = "";
//      String PRICE = "";
      
      
      if ("CONTRACT_NO".equals(val)) {
         cmd = trans.addCustomFunction("GETCONTRACTNAME", 
               "PROJECT_CONTRACT_API.Get_Contract_Desc", "CONTRACT_NAME");
         cmd.addParameter("PROJ_NO,CONTRACT_NO");
         
         cmd = trans.addCustomFunction("GETSECONDSIDE", 
               "PROJECT_CONTRACT_API.Get_Secend_Side", "SECOND_SIDE");
         cmd.addParameter("PROJ_NO,CONTRACT_NO");
   
         trans = mgr.validate(trans);
         contractName = trans.getValue("GETCONTRACTNAME/DATA/CONTRACT_NAME");
         SECONDSIDE = trans.getValue("GETSECONDSIDE/DATA/SECOND_SIDE");
         
         cmd1 = trans1.addCustomFunction("GETSECONDSIDENAME", 
               "SUPPLIER_INFO_API.GET_NAME", "SECOND_SIDE_NAME");
         cmd1.addParameter("SECOND_SIDE",SECONDSIDE);
         
         trans1 = mgr.validate(trans1);
         
         SECONDSIDENAME = trans1.getValue("GETSECONDSIDENAME/DATA/SECOND_SIDE_NAME");

         txt = ((mgr.isEmpty(contractName)) ? "" : contractName ) + "^"
            +  ((mgr.isEmpty(SECONDSIDE)) ? "" : SECONDSIDE ) + "^" 
            +  ((mgr.isEmpty(SECONDSIDENAME)) ? "" : SECONDSIDENAME ) + "^";
         
         mgr.responseWrite(txt);
      }
      mgr.endResponse();
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setDefaultNotVisible().
              setDynamicLOV("GENERAL_PROJECT").
              setLabel("CONSPECIALPERSONCHECKPROJNO: Proj No").
              setSize(30);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
              setLabel("HSECHECKGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(30).
              setReadOnly();

      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      headblk.addField("ID").
              setHidden().
              setInsertable().
              setLabel("CONSPECIALPERSONCHECKID: Id").
              setSize(30);
      headblk.addField("CONTRACT_NO").
              setInsertable().
              setDefaultNotVisible().
              setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
//              setLOVProperty("WHERE", "SCHEDULE = 'TRUE'").
              setLabel("CONSPECIALPERSONCHECKCONTRACTNO: Contract No").
              setSize(30).
              setCustomValidation("PROJ_NO,CONTRACT_NO", "CONTRACT_NAME,SECOND_SIDE,SECOND_SIDE_NAME");
      headblk.addField("CONTRACT_NAME").
              setReadOnly().
              setFunction("PROJECT_CONTRACT_API.Get_Contract_Desc (:PROJ_NO,:CONTRACT_NO)").
              setLabel("CONSPECIALPERSONCHECKCONTRACTNAME: Contract Name").
              setSize(30);

      headblk.addField("SECOND_SIDE").
              setReadOnly().
              setDefaultNotVisible().
              setFunction("PROJECT_CONTRACT_API.Get_Secend_Side (:PROJ_NO,:CONTRACT_NO)").
              setLabel("CONSPECIALPERSONCHECKSECONDSIDE: Constraction Org No").
              setSize(10);

      headblk.addField("SECOND_SIDE_NAME").
              setReadOnly().
              setDefaultNotVisible().
              setFunction("SUPPLIER_INFO_API.GET_NAME (PROJECT_CONTRACT_API.Get_Secend_Side (:PROJ_NO,:CONTRACT_NO))").
              setLabel("CONSPECIALPERSONCHECKSECONDSIDENAME: Constraction Org Name").
              setSize(25);
      
      headblk.addField("SUB_PROJ_NO").
              setMandatory().
              setDefaultNotVisible().
              setDynamicLOV("CON_QUA_TREE","PROJ_NO").
              setLOVProperty("TREE_PARE_FIELD", "PARENT_ID").
              setLOVProperty("TREE_DISP_FIELD", "NODE_NO,NODE_NAME").
              setLOVProperty("ORDER_BY", "NODE_NO").
              setLabel("CONSPECIALPERSONCHECKSUBPROJNO: Sub Proj No").
              setSize(30);

      headblk.addField("SUB_PROJ_DESC").
              setFunction("CON_PROJ_CONSTRUCTION_MAN_API.Get_Node_Name ( :PROJ_NO,:SUB_PROJ_NO)").
              setLabel("CONSPECIALPERSONCHECKSUBPROJDESC: SUB PROJ DESC").
              setReadOnly().
              setSize(30);
      mgr.getASPField("SUB_PROJ_NO").setValidation("SUB_PROJ_DESC");
      
      headblk.addField("CHECK_LIST_NO").
              setInsertable().
              setLabel("CONSPECIALPERSONCHECKCHECKLISTNO: Check List No").
              setSize(30);
      headblk.addField("CHECK_LIST_NAME").
              setInsertable().
              setMandatory().
              setLabel("CONSPECIALPERSONCHECKCHECKLISTNAME: Check List Name").
              setSize(30);
      headblk.addField("CREATE_PERSON").
              setInsertable().
              setDefaultNotVisible().
              setDynamicLOV("PERSON_INFO").
              setLabel("CONSPECIALPERSONCHECKCREATEPERSON: Create Person").
              setSize(30);
      headblk.addField("CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.GET_NAME (:CREATE_PERSON)").
              setLabel("CONSPECIALPERSONCHECKCREATEPERSONNAME: Create Person Name").
              setSize(30);
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONSPECIALPERSONCHECKCREATETIME: Create Time").
              setSize(30);
      headblk.addField("STATUS").
              setHidden().
              setLabel("CONSPECIALPERSONCHECKSTATUS: Status").
              setSize(30);
      headblk.addField("STATUS_DESC").
              setFunction("FLOW_STATUS_API.Get_Status_Desc (:STATUS)").
              setLabel("CONSPECIALPERSONCHECKSTATUSDESC: Status Desc").
              setSize(30);
      headblk.addField("NOTE").
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONSPECIALPERSONCHECKNOTE: Note").
              setSize(130).
              setHeight(5);
      headblk.addField("FLOW_TITLE").
              setWfProperties().
              setReadOnly().
              setHidden().
              setFunction("CHECK_LIST_NAME").
              setLabel("FLOWTITLE: Flow Title");

      headblk.setView("CON_SPECIAL_PERSON_CHECK");
      headblk.defineCommand("CON_SPECIAL_PERSON_CHECK_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("printReport", "CONSPECIALPERSONCHECKREPORT: Print Special Person Check Report...");//TODO
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("CONSPECIALPERSONCHECKTBLHEAD: Con Special Person Checks");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("CREATE_PERSON_NAME");
      headlay.setSimple("CONTRACT_NAME");
      headlay.setDataSpan("NOTE", 5);
      headlay.setDataSpan("STATUS_DESC", 5);
      headlay.setSimple("SECOND_SIDE_NAME");
      headlay.setSimple("SUB_PROJ_DESC");
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
 


      con_special_person_list_blk = mgr.newASPBlock("ITEM1");
      con_special_person_list_blk.addField("ITEM0_OBJID").
                                  setHidden().
                                  setDbName("OBJID");
      con_special_person_list_blk.addField("ITEM0_OBJVERSION").
                                  setHidden().
                                  setDbName("OBJVERSION");
      con_special_person_list_blk.addField("ITEM0_PROJ_NO").
                                  setDbName("PROJ_NO").
                                  setHidden().
                                  setMandatory().
                                  setInsertable().
                                  setLabel("CONSPECIALPERSONLISTITEM0PROJNO: Proj No").
                                  setSize(30);
      con_special_person_list_blk.addField("ITEM0_ID").
                                  setDbName("ID").
                                  setHidden().
                                  setInsertable().
                                  setLabel("CONSPECIALPERSONLISTITEM0ID: Id").
                                  setSize(30);
      con_special_person_list_blk.addField("LINE_NO").
                                  setHidden().
                                  setLabel("CONSPECIALPERSONLISTLINENO: Line No").
                                  setSize(30);
      con_special_person_list_blk.addField("NAME").
//                                  setDynamicLOV("PERSON_INFO").
                                  setInsertable().
                                  setLabel("CONSPECIALPERSONLISTNAME: Name").
                                  setSize(30);
//      con_special_person_list_blk.addField("NAME_DESC").
//                                  setReadOnly().
//                                  setFunction("PERSON_INFO_API.GET_NAME (:NAME)").
//                                  setLabel("CONSPECIALPERSONLISTNAMEDESC: Name Desc").
//                                  setSize(30);
//      mgr.getASPField("NAME").setValidation("NAME_DESC");
      
      con_special_person_list_blk.addField("JOB").
                                  setInsertable().
                                  setLabel("CONSPECIALPERSONLISTJOB: Job").
                                  setSize(30);
      con_special_person_list_blk.addField("CERTIFICATE_NAME").
                                  setInsertable().
                                  setLabel("CONSPECIALPERSONLISTCERTIFICATENAME: Certificate Name").
                                  setSize(30);
      con_special_person_list_blk.addField("CERTIFICATE_NO").
                                  setInsertable().
                                  setLabel("CONSPECIALPERSONLISTCERTIFICATENO: Certificate No").
                                  setSize(30);
      con_special_person_list_blk.addField("LICENSE_AUTHORITY").
                                  setInsertable().
                                  setLabel("CONSPECIALPERSONLISTLICENSEAUTHORITY: License Authority").
                                  setSize(30);
      con_special_person_list_blk.addField("VALIDITY").
                                  setInsertable().
                                  setLabel("CONSPECIALPERSONLISTVALIDITY: Validity").
                                  setSize(30);
//      con_special_person_list_blk.addField("PERMIT_OPERATE_PROJ").
//                                  setInsertable().
//                                  setLabel("CONSPECIALPERSONLISTPERMITOPERATEPROJ: Permit Operate Proj").
//                                  setSize(30);
      con_special_person_list_blk.setView("CON_SPECIAL_PERSON_LIST");
      con_special_person_list_blk.defineCommand("CON_SPECIAL_PERSON_LIST_API","New__,Modify__,Remove__");
      con_special_person_list_blk.setMasterBlock(headblk);
      con_special_person_list_set = con_special_person_list_blk.getASPRowSet();
      con_special_person_list_bar = mgr.newASPCommandBar(con_special_person_list_blk);
      con_special_person_list_bar.defineCommand(con_special_person_list_bar.OKFIND, "okFindITEM1");
      con_special_person_list_bar.defineCommand(con_special_person_list_bar.NEWROW, "newRowITEM1");
      con_special_person_list_tbl = mgr.newASPTable(con_special_person_list_blk);
      con_special_person_list_tbl.setTitle("CONSPECIALPERSONLISTITEMHEAD1: tab1");
      con_special_person_list_tbl.enableRowSelect();
      con_special_person_list_tbl.setWrap();
      con_special_person_list_lay = con_special_person_list_blk.getASPBlockLayout();
      con_special_person_list_lay.setDefaultLayoutMode(con_special_person_list_lay.MULTIROW_LAYOUT);
//      con_special_person_list_lay.setSimple("NAME_DESC");
   }

   
 //Report  Function
   public void  printReport() throws FndException, UnsupportedEncodingException//TODO
   {
    ASPManager mgr = getASPManager();
    ASPConfig cfg = getASPConfig();
    String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
    if (headlay.isMultirowLayout())
       headset.goTo(headset.getRowSelected());
    if (headset.countRows()>0 )
          {   
             String proj_no = headset.getValue("PROJ_NO");
             String id = headset.getValue("ID");
              appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=RptConSpecialPersonCheck.raq&proj_no="+proj_no+"&id="+id
                + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
         }
   }


   public void  adjust() throws FndException
   {
      // fill function body
      ASPManager mgr = getASPManager();
      super.adjust();
      if("ITEM1.OverviewEdit".equals(mgr.readValue("__COMMAND"))){
         mgr.getASPField("ITEM0_PROJ_NO").setReadOnly();
         mgr.getASPField("LINE_NO").setReadOnly();
//         mgr.getASPField("SPECIAL_NO").setHidden();
      }
      if("ITEM1.EditRow".equals(mgr.readValue("__COMMAND"))){
         mgr.getASPField("ITEM0_PROJ_NO").setReadOnly();
         mgr.getASPField("LINE_NO").setReadOnly();
      }
      else if("ITEM1.NewRow".equals(mgr.readValue("__COMMAND"))){
         mgr.getASPField("ITEM0_PROJ_NO").setReadOnly();
      }
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "CONSPECIALPERSONCHECKDESC: Con Special Person Check";
   }


   protected String getTitle()
   {
      return "CONSPECIALPERSONCHECKTITLE: Con Special Person Check";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else 
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }  
      if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
      {
         appendToHTML(con_special_person_list_lay.show());
      }
   }
   protected ASPBlock getBizWfBlock()
   {
      return headblk;      
   }
}
