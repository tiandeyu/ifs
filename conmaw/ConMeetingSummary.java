/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.conmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ConMeetingSummary extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.conmaw.ConMeetingSummary");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock con_meeting_summary_line_blk;
   private ASPRowSet con_meeting_summary_line_set;
   private ASPCommandBar con_meeting_summary_line_bar;
   private ASPTable con_meeting_summary_line_tbl;
   private ASPBlockLayout con_meeting_summary_line_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  ConMeetingSummary (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      super.run();
      ASPManager mgr = getASPManager();
      String comnd; 
      if( mgr.commandBarActivated() ){
         eval(mgr.commandBarFunction());
         comnd = mgr.readValue("__COMMAND");
         if (  "ITEM1.SaveReturn".equals(comnd) ||  "ITEM1.Delete".equals(comnd) )
            headset.refreshAllRows();
         else if("ITEM1.SaveNew".equals(comnd))
            headset.refreshAllRows();
       }
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("CONMEETINGSUMMARYNODATA: No data found.");
         headset.clear();
      }
      else
      {
         okFindITEM1();
      }
      eval( con_meeting_summary_line_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","CON_MEETING_SUMMARY_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(con_meeting_summary_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,con_meeting_summary_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","CON_MEETING_SUMMARY_LINE_API.New__",con_meeting_summary_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_ID", headset.getValue("ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      con_meeting_summary_line_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setDefaultNotVisible().
              setDefaultNotVisible().
              setDynamicLOV("GENERAL_PROJECT").
              setLabel("CONMEETINGSUMMARYPROJNO: Proj No").
              setSize(30);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setReadOnly().
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("CONMEETINGSUMMARYGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(30);
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      headblk.addField("ID").
              setHidden().
              setLabel("CONMEETINGSUMMARYID: Id").
              setSize(30);
      headblk.addField("CON_MEETING_TYPE").
              enumerateValues("Con_Meeting_Type_API").
              setSelectBox().
              setMandatory().
              setInsertable().
              setLabel("CONMEETINGSUMMARYCONMEETINGTYPE: Con Meeting Type").
              setSize(30);
      headblk.addField("MEETING_NO").
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONMEETINGSUMMARYMEETINGNO: Meeting No").
              setSize(30);
      headblk.addField("MEETING_NAME").
              setInsertable().
              setMandatory().
              setLabel("CONMEETINGSUMMARYMEETINGNAME: Meeting Name").
              setSize(30);
      headblk.addField("COMPERE").
              setInsertable().
              setDefaultNotVisible().
              setDynamicLOV("PERSON_INFO").
              setLabel("CONMEETINGSUMMARYCOMPERE: Compere").
              setSize(20);
      headblk.addField("COMPERE_NAME").
              setReadOnly().
              setDefaultNotVisible().
              setFunction("PERSON_INFO_API.GET_NAME( :COMPERE)").
              setLabel("CONMEETINGSUMMARYCOMPERENAME: Compere Name").
              setSize(30);
      mgr.getASPField("COMPERE").setValidation("COMPERE_NAME"); 
      headblk.addField("RECORDER").
              setInsertable().
              setDefaultNotVisible().
              setDynamicLOV("PERSON_INFO").
              setLabel("CONMEETINGSUMMARYRECORDER: Recorder").
              setSize(20);
      headblk.addField("RECORDER_NAME").
              setReadOnly().
              setDefaultNotVisible().
              setFunction("PERSON_INFO_API.GET_NAME( :RECORDER)").
              setLabel("CONMEETINGSUMMARYRECORDERNAME: Recorder Name").
              setSize(30);
      mgr.getASPField("RECORDER").setValidation("RECORDER_NAME");
      
      headblk.addField("MEETING_TIME","Date").
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONMEETINGSUMMARYMEETINGTIME: Meeting Time").
              setSize(30);
      headblk.addField("MEETING_PLACE").
              setInsertable().
              setDefaultNotVisible().
              setLabel("CONMEETINGSUMMARYMEETINGPLACE: Meeting Place").
              setSize(30);
      headblk.addField("STATUS").
              setHidden().
              setLabel("CONMEETINGSUMMARYSTATUS: Status").
              setSize(20);
      headblk.addField("STATUS_DESC").
              setReadOnly().
              setFunction("FLOW_STATUS_API.Get_Status_Desc (:STATUS)").
              setLabel("CONMEETINGSUMMARYSTATUSDESC: Status Desc").
              setSize(30);
      headblk.addField("MEETING_CONTENT").
              setInsertable().
              setDefaultNotVisible().
              setHeight(7).
              setLabel("CONMEETINGSUMMARYMEETINGCONTENT: Meeting Content").
              setSize(120);
      headblk.addField("NOTE").
              setInsertable().
              setDefaultNotVisible().
              setHeight(3).
              setLabel("CONMEETINGSUMMARYNOTE: Note").
              setSize(120);
      headblk.addField("FLOW_TITLE").
              setWfProperties().
              setReadOnly().
              setHidden().
              setFunction("MEETING_NAME").
              setLabel("FLOWTITLE: Flow Title");
      headblk.addField("ALL_ATTENDER").setHidden();
      headblk.addField("CON_MEETING_TYPE_DB").setHidden();
      headblk.setView("CON_MEETING_SUMMARY");
      headblk.defineCommand("CON_MEETING_SUMMARY_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("printReport", "CONMEETINGSUMMARYPRINTREPORT: Print Report...");
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("CONMEETINGSUMMARYTBLHEAD: Con Meeting Summarys");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("COMPERE_NAME");
      headlay.setSimple("RECORDER_NAME");
      headlay.setDataSpan("MEETING_CONTENT", 5);
      headlay.setDataSpan("STATUS_DESC", 5);
      headlay.setDataSpan("NOTE", 5);
 


      con_meeting_summary_line_blk = mgr.newASPBlock("ITEM1");
      con_meeting_summary_line_blk.addField("ITEM0_OBJID").
                                   setHidden().
                                   setDbName("OBJID");
      con_meeting_summary_line_blk.addField("ITEM0_OBJVERSION").
                                   setHidden().
                                   setDbName("OBJVERSION");
      con_meeting_summary_line_blk.addField("ITEM0_PROJ_NO").
                                   setDbName("PROJ_NO").
                                   setMandatory().
                                   setHidden().
                                   setLabel("CONMEETINGSUMMARYLINEITEM0PROJNO: Proj No").
                                   setSize(50);
      con_meeting_summary_line_blk.addField("ITEM0_ID").
                                   setDbName("ID").
                                   setMandatory().
                                   setHidden().
                                   setLabel("CONMEETINGSUMMARYLINEITEM0ID: Id").
                                   setSize(200);
      con_meeting_summary_line_blk.addField("LINE_NO").
                                   setHidden().
                                   setInsertable().
                                   setLabel("CONMEETINGSUMMARYLINELINENO: Line No").
                                   setSize(30);
      con_meeting_summary_line_blk.addField("ATTENDER_ORG").
                                   setInsertable().
                                   setDynamicLOV("GENERAL_ORGANIZATION_LOV", "PROJ_NO").
                                   setLabel("CONMEETINGSUMMARYLINEATTENDERORG: Attender Org").
                                   setSize(30);
      con_meeting_summary_line_blk.addField("ATTENDER_ORG_NAME").
                                   setReadOnly().
                                   setFunction("GENERAL_ORGANIZATION_API.GET_ORG_DESC( :ATTENDER_ORG)").
                                   setLabel("CONMEETINGSUMMARYLINEATTENDERORGNAME: Attender Org Name").
                                   setSize(30);
      mgr.getASPField("ATTENDER_ORG").setValidation("ATTENDER_ORG_NAME");
      con_meeting_summary_line_blk.addField("ATTENDER").
                                   setInsertable().
                                   setDynamicLOV("GENERAL_ORG_PER_POS_LOV","PROJ_NO,ATTENDER_ORG ORG_NO").
                                   setLabel("CONMEETINGSUMMARYLINEATTENDER: Attender").
                                   setSize(20);
      con_meeting_summary_line_blk.addField("ATTENDER_NAME").
                                   setReadOnly().
                                   setFunction("PERSON_INFO_API.GET_NAME( :ATTENDER)").
                                   setLabel("CONMEETINGSUMMARYLINEATTENDERNAME: Attender Name").
                                   setSize(20);
      mgr.getASPField("ATTENDER").setValidation("ATTENDER_NAME");
      
      con_meeting_summary_line_blk.setView("CON_MEETING_SUMMARY_LINE");
      con_meeting_summary_line_blk.defineCommand("CON_MEETING_SUMMARY_LINE_API","New__,Modify__,Remove__");
      con_meeting_summary_line_blk.setMasterBlock(headblk);
      con_meeting_summary_line_set = con_meeting_summary_line_blk.getASPRowSet();
      con_meeting_summary_line_bar = mgr.newASPCommandBar(con_meeting_summary_line_blk);
      con_meeting_summary_line_bar.defineCommand(con_meeting_summary_line_bar.OKFIND, "okFindITEM1");
      con_meeting_summary_line_bar.defineCommand(con_meeting_summary_line_bar.NEWROW, "newRowITEM1");
      con_meeting_summary_line_tbl = mgr.newASPTable(con_meeting_summary_line_blk);
      con_meeting_summary_line_tbl.setTitle("CONMEETINGSUMMARYLINEITEMHEAD1: ConMeetingSummaryLine");
      con_meeting_summary_line_tbl.enableRowSelect();
      con_meeting_summary_line_tbl.setWrap();
      con_meeting_summary_line_lay = con_meeting_summary_line_blk.getASPBlockLayout();
      con_meeting_summary_line_lay.setDefaultLayoutMode(con_meeting_summary_line_lay.MULTIROW_LAYOUT);
      con_meeting_summary_line_lay.setSimple("ATTENDER_NAME");
      con_meeting_summary_line_lay.setSimple("ATTENDER_ORG_NAME");


   }
   


   public void  adjust() throws FndException
   {
      // fill function body
      super.adjust();
   }
   
   
   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void  printReport() throws FndException, UnsupportedEncodingException
   {
    ASPManager mgr = getASPManager();
    ASPConfig cfg = getASPConfig();
    String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
    if (headlay.isMultirowLayout())
       headset.goTo(headset.getRowSelected());
    if (headset.countRows()>0 )
          {   
             String proj_no = headset.getValue("PROJ_NO");
             String id = headset.getValue("ID");
              appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=RptConMeetingSummary.raq&proj_no="+proj_no+"&id="+id
                + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
         }
   }   
   
   protected String getDescription()
   {
      return "CONMEETINGSUMMARYDESC: Con Meeting Summary";
   }


   protected String getTitle()
   {
      return "CONMEETINGSUMMARYTITLE: Con Meeting Summary";
   }


   protected void printContents() throws FndException
   {
      super.printContents();
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else 
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }  
      if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
      {
         appendToHTML(con_meeting_summary_line_lay.show());
      }
   }

   @Override
   protected ASPBlock getBizWfBlock() {
      // TODO Auto-generated method stub
      return headblk;
   }
}
