/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.conmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ConSpecialProjSortLine extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.conmaw.ConProjManLine");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   private boolean bRefreshTree;
   private String comnd;
   private ASPTabContainer tabs;
   private ASPContext ctx; 

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  ConSpecialProjSortLine (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      
      String proj_no =  mgr.readValue("PROJ_NO");
      String id =  mgr.readValue("ID");
      
      ctx = mgr.getASPContext();  
      bRefreshTree      = false;  

      if( mgr.commandBarActivated() ) {
         comnd = mgr.readValue("__COMMAND");
         if ( "MAIN.SaveReturn".equals(comnd) )
         {
            bRefreshTree = true;
         }
         else if ( "MAIN.SaveNew".equals(comnd) )
         {
            bRefreshTree = true;  
         }
         eval(mgr.commandBarFunction());
      }
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(proj_no) || !mgr.isEmpty(id)) {
         ctx.setGlobal("PROJ_NO", proj_no);
         ctx.setGlobal("ID", id);  
         okFind();
      }
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      
      String proj_no = ctx.findGlobal("PROJ_NO")==null?"":ctx.findGlobal("PROJ_NO");
      String id = ctx.findGlobal("ID")==null?"":ctx.findGlobal("ID");
      
      ASPQuery q;
      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO",proj_no);
      q.addParameter("ID",id);
      
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("CONPROJMANLINENODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","CON_PROJ_MAN_LINE_API.New__",headblk);
      cmd.setParameter("PROJ_NO", ctx.findGlobal("PROJ_NO"));
      cmd.setParameter("ID", ctx.findGlobal("ID"));
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setLabel("CONPROJMANLINEPROJNO: Proj No").
              setSize(50).
              setHidden();
      headblk.addField("ID").
              setMandatory().
              setInsertable().
              setLabel("CONPROJMANLINEID: Id").
              setSize(30).
              setHidden();
      headblk.addField("LINE_NO").
              setMandatory().
              setInsertable().
              setLabel("CONPROJMANLINELINENO: Line No").
              setSize(30).
              setHidden();
      headblk.addField("DOC_NO").
              setInsertable().
              setLabel("CONPROJMANLINEDOCNO: Doc No").
              setSize(30);
      headblk.addField("DOC_NAME").
              setInsertable().
              setLabel("CONPROJMANLINEDOCNAME: Doc Name").
              setSize(30);
      headblk.addField("DOC_TYPE").
              setInsertable().
              setLabel("CONPROJMANLINEDOCTYPE: Doc Type").
              setSize(30);
      headblk.addField("RESPONSE_ORG").
              setInsertable().
              setLabel("CONPROJMANLINERESPONSEORG: Response Org").
              setSize(30);
      headblk.addField("CREATE_PERSON").
              setDynamicLOV("PERSON_PROJECT","PROJ_NO").
              setLabel("CONPROJMANLINECREATEPERSONID: Create Person").
              setSize(30);
      headblk.addField("CREATE_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
              setLabel("CONPROJMANLINECREATEPERSON: Create Person").
              setSize(30).
              setReadOnly();
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
      
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setLabel("CONPROJMANLINECREATETIME: Create Time").
              setSize(30);
      headblk.addField("NOTE").
              setInsertable().
              setLabel("CONPROJMANLINENOTE: Note").
              setSize(120).
              setHeight(5);
      headblk.setView("CON_PROJ_MAN_LINE");
      headblk.defineCommand("CON_PROJ_MAN_LINE_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("CONPROJMANLINETBLHEAD: Con Proj Man Lines");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      
      headlay.setSimple("CREATE_PERSON_NAME"); 
      headlay.setDataSpan("NOTE", 5);
   }



   public void  adjust()
   {
      // fill function body
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return null;
   }


   protected String getTitle()
   {
      return null;
   }


   protected AutoString getContents() throws FndException{
      ASPManager mgr = getASPManager();
      AutoString out = getOutputStream();
      out.clear();
      out.append("<html>\n");
      out.append("<head>\n");
      out.append(mgr.generateHeadTag(""));
      out.append("</head>\n");  
      out.append("<body ");      
      out.append(mgr.generateBodyTag());
      out.append(">\n");
      out.append("<form ");
      out.append(mgr.generateFormTag());
      out.append(">\n");
      out.append("\n");          
      if(out!=null){

             out.append(headlay.show());   
         
         }             
      appendDirtyJavaScript("function refreshTree()\n");
      appendDirtyJavaScript("{\n");
      appendDirtyJavaScript("   parent_url = this.parent.location.href;\n");
      appendDirtyJavaScript("  url_str = this.parent.frames[\"contents\"].location.href;\n");  
      appendDirtyJavaScript("        this.parent.frames[\"contents\"].location.href = url_str;\n");
      appendDirtyJavaScript("}\n");    
      if (bRefreshTree)
      {          
         appendDirtyJavaScript("   refreshTree(");
         // XSS_Safe DINHLK 20070808
         appendDirtyJavaScript(");\n");    
         bRefreshTree = false;       
      }  
      out.append(mgr.endPresentation());
      out.append("</form>\n");  
      out.append("</body>\n");
      out.append("</html>");
      return out;  
 }
}
