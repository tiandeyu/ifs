/*
 *                 IFS Research & Development
 *
 *  This program is protected by copyright law and by international
 *  conventions. All licensing, renting, lending or copying (including
 *  for private use), and all other use of the program, which is not
 *  expressively permitted by IFS Research & Development (IFS), is a
 *  violation of the rights of IFS. Such violations will be reported to the
 *  appropriate authorities.
 *
 *  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
 *  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
 * ----------------------------------------------------------------------------
 * File                          :
 * Description                   :
 * Notes                         :
 * Other Programs Called :
 * ----------------------------------------------------------------------------
 * Modified    : Automatically generated by IFS/Design
 * ----------------------------------------------------------------------------
 */

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.conmaw;

//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.ASPBlock;
import ifs.fnd.asp.ASPBlockLayout;
import ifs.fnd.asp.ASPBuffer;
import ifs.fnd.asp.ASPCommand;
import ifs.fnd.asp.ASPCommandBar;
import ifs.fnd.asp.ASPConfig;
import ifs.fnd.asp.ASPManager;
import ifs.fnd.asp.ASPPageProvider;
import ifs.fnd.asp.ASPQuery;
import ifs.fnd.asp.ASPRowSet;
import ifs.fnd.asp.ASPTable;
import ifs.fnd.asp.ASPTransactionBuffer;
import ifs.fnd.service.FndException;
import ifs.fnd.service.Util;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------


public class ConProjConnectionListInnerNoReply extends HzASPPageProviderWf {

   public ConProjConnectionListInnerNoReply(ASPManager mgr, String pagePath) {
      super(mgr, pagePath);
   }
      public static boolean DEBUG = Util.isDebugEnabled("ifs.conmaw.ConProjConnectionListInnerNoReply");

      //-----------------------------------------------------------------------------
      //---------- Header Instances created on page creation --------
      //-----------------------------------------------------------------------------

      private ASPBlock headblk;
      private ASPRowSet headset;
      private ASPCommandBar headbar;
      private ASPTable headtbl;
      private ASPBlockLayout headlay;

      //-----------------------------------------------------------------------------
      //---------- Item Instances created on page creation --------
      //-----------------------------------------------------------------------------

      private ASPBlock con_copy_org_blk;
      private ASPRowSet con_copy_org_set;
      private ASPCommandBar con_copy_org_bar;
      private ASPTable con_copy_org_tbl;
      private ASPBlockLayout con_copy_org_lay;



      //-----------------------------------------------------------------------------
      //------------------------  Construction  ---------------------------
      //-----------------------------------------------------------------------------
      public void run() throws FndException
      {
         super.run();
         ASPManager mgr = getASPManager();
         String comnd;  
         if( mgr.commandBarActivated() ){
            eval(mgr.commandBarFunction());
            comnd = mgr.readValue("__COMMAND");
            if (  "ITEM1.SaveReturn".equals(comnd) ||  "ITEM1.Delete".equals(comnd) )
               headset.refreshAllRows();
            else if("ITEM1.SaveNew".equals(comnd))
               headset.refreshAllRows();
         }
         else if(mgr.dataTransfered())
            okFind();
         else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
            okFind();
         else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
            okFind();
         else if( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")) )
            validate();
         else
            okFind();
         adjust();
      }
      //-----------------------------------------------------------------------------
      //------------------------  Command Bar functions  ---------------------------
      //-----------------------------------------------------------------------------

      public void okFind()
      {
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPQuery q;

         mgr.createSearchURL(headblk);
         q = trans.addQuery(headblk);
         q.includeMeta("ALL");
         q.addWhereCondition("CON_LIST_TYPE_DB = 'INNERNOREPLY'");
         if(mgr.dataTransfered())
            q.addOrCondition(mgr.getTransferedData());
         mgr.querySubmit(trans,headblk);
         if (  headset.countRows() == 0 )
         {
            mgr.showAlert("CONPROJCONNECTIONLISTNODATA: No data found.");
            headset.clear();
         }else
            okFindITEM1();
      }



      public void countFind()
      {
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPQuery q;

         q = trans.addQuery(headblk);
         q.setSelectList("to_char(count(*)) N");
         mgr.submit(trans);
         headlay.setCountValue(toInt(headset.getValue("N")));
         headset.clear();
      }



      public void newRow()
      {
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPBuffer data;
         ASPCommand cmd;

         cmd = trans.addEmptyCommand("HEAD","CON_PROJ_CONNECTION_LIST_API.New__",headblk);
         cmd.setOption("ACTION","PREPARE");
         trans = mgr.perform(trans);
         data = trans.getBuffer("HEAD/DATA");
         
         data.setFieldItem("CON_LIST_TYPE_DB", "INNERNOREPLY");
         data.setFieldItem("IS_REPLY", "0");
         
         headset.addRow(data);
      }
      //-----------------------------------------------------------------------------
      //------------------------  Item block cmd bar functions  ---------------------------
      //-----------------------------------------------------------------------------


      public void okFindITEM1()
      {
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPQuery q;
         int headrowno;

         q = trans.addQuery(con_copy_org_blk);
         q.addWhereCondition("PROJ_NO = ? AND ID = ?");
         q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
         q.addParameter("ID", headset.getValue("ID"));
         q.includeMeta("ALL");
         headrowno = headset.getCurrentRowNo();
         mgr.querySubmit(trans,con_copy_org_blk);
         headset.goTo(headrowno);
      }
      public void newRowITEM1()
      {
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPCommand cmd;
         ASPBuffer data;

         
         cmd = trans.addEmptyCommand("ITEM1","CON_COPY_ORG_API.New__",con_copy_org_blk);
         cmd.setOption("ACTION","PREPARE");
         cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
         cmd.setParameter("ITEM0_ID", headset.getValue("ID"));
         trans = mgr.perform(trans);
         data = trans.getBuffer("ITEM1/DATA");
         con_copy_org_set.addRow(data);
      }


     
      //-----------------------------------------------------------------------------
      //------------------------  Predefines Head ---------------------------
      //-----------------------------------------------------------------------------

      public void  preDefine()
      {
         ASPManager mgr = getASPManager();

         headblk = mgr.newASPBlock("MAIN");
         headblk.addField("OBJID").
                 setHidden();
         headblk.addField("OBJVERSION").
                 setHidden();
         headblk.addField("PROJ_NO").
                 setDynamicLOV("GENERAL_PROJECT").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYPROJNO: Proj No").
                 setSize(30);
         headblk.addField("GENERAL_PROJECT_PROJ_DESC").
                 setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYGENERALPROJECTPROJDESC: General Project Proj Desc").
                 setSize(30).
                 setReadOnly();
         
         mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
         
         headblk.addField("CONTRACT_ID").
                 setInsertable().
                 setDefaultNotVisible().
                 setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
//                 setLOVProperty("WHERE", "SCHEDULE = 'TRUE'").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYCONTRACTID: Contract Id").
                 setSize(30);
         headblk.addField("CONTRACT_NAME").
                 setInsertable().
                 setFunction("PROJECT_CONTRACT_API.Get_Contract_Desc (:PROJ_NO,:CONTRACT_ID)").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYCONTRACTNNAME: Contract Name").
                 setSize(30);
 
         mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_NAME");
         headblk.addField("LIST_NO").
                 setInsertable().
                 setMandatory().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYLISTNO: List No").
                 setSize(30);
         headblk.addField("LIST_NAME").
                 setInsertable().
                 setMandatory().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYLISTNAME: List Name").
                 setSize(30);
         headblk.addField("MAJOR").
                 setInsertable().
                 setMandatory().
                 setDefaultNotVisible().
                 setDynamicLOV("CON_MAJOR_DATA","PROJ_NO").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYMAHOR: Major").
                 setSize(30);
         headblk.addField("MAJOR_NAME").
                 setReadOnly().
                 setFunction("CON_MAJOR_DATA_API.GET_MAJOR_NAME ( :PROJ_NO,:MAJOR)").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYMAJORNAME: Major Name").
                 setSize(30);
         mgr.getASPField("MAJOR").setValidation("MAJOR_NAME");
         headblk.addField("GENSET").
                 setInsertable().
                 setMandatory().
                 setDefaultNotVisible().
                 setDynamicLOV("CON_GENSET_DATA","PROJ_NO").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYGENSET: Genset").
                 setSize(30).
                 setCustomValidation("PROJ_NO,GENSET", "GENSET_NO,GENSET_NAME");
         headblk.addField("GENSET_NO").
                 setReadOnly().
                 setDefaultNotVisible().
                 setFunction("CON_GENSET_DATA_API.GET_GENSET_NO ( :PROJ_NO,:GENSET)").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYGENSETNO: Genset No").
                 setSize(30);
         headblk.addField("GENSET_NAME").
                 setReadOnly().
                 setDefaultNotVisible().
                 setFunction("GENERAL_MACH_GROUP_API.Get_Mach_Grp_Desc (CON_GENSET_DATA_API.GET_GENSET_NO ( :PROJ_NO,:GENSET))").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYGENSETNAME: Genset Name").
                 setSize(30);
         headblk.addField("SEND_TO").
                 setInsertable().
                 setDefaultNotVisible().
                 setMandatory().
                 setDynamicLOV("GENERAL_ORGANIZATION_LOV", "PROJ_NO").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYSENDTO: Send To").
                 setSize(30);
         headblk.addField("SEND_TO_NAME").
                 setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc( :SEND_TO)").
                 setReadOnly().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYSENDTONAME: Send To Name").
                 setSize(30);
         mgr.getASPField("SEND_TO").setValidation("SEND_TO_NAME");
 
         headblk.addField("COPY_TO").
                 setReadOnly().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYCOPYTO: Copy To").
                 setSize(30);
         headblk.addField("COPY_TO_PERSON").
                 setHidden().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYCOPYTOPERSON: Copy To Person").
                 setSize(30);
         
         headblk.addField("IS_REPLY").
                 setHidden().
                 setDefaultNotVisible().
                 setCheckBox("0,1").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYISREPLY: Is Reply").
                 setSize(30);

         headblk.addField("SUB_PROJ_NO").
                 setInsertable().
                 setDefaultNotVisible().
                 setDynamicLOV("CON_QUA_TREE","PROJ_NO").
                 setLOVProperty("TREE_PARE_FIELD", "PARENT_ID").
                 setLOVProperty("TREE_DISP_FIELD", "NODE_NO,NODE_NAME").
                 setLOVProperty("ORDER_BY", "NODE_NO").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYSUBPROJNO: Sub Proj No").
                 setSize(30);

         headblk.addField("SUB_PROJ_DESC").
                 setFunction("CON_PROJ_CONSTRUCTION_MAN_API.Get_Node_Name ( :PROJ_NO,:SUB_PROJ_NO)").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYSUBPROJDESC: SUB PROJ DESC").
                 setReadOnly().
                 setSize(30);
         mgr.getASPField("SUB_PROJ_NO").setValidation("SUB_PROJ_DESC");
         
         headblk.addField("ID").
                 setInsertable().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYID: Id").
                 setSize(200);
         headblk.addField("CREATE_PERSON").
                 setInsertable().
                 setDefaultNotVisible().
                 setDynamicLOV("PERSON_INFO").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYCREATEPERSON: Create Person").
                 setSize(30).
                 setCustomValidation("CREATE_PERSON", "CREATE_PERSON_NAME,START_ORG,START_ORG_NAME");
         headblk.addField("CREATE_PERSON_NAME").
                 setFunction("PERSON_INFO_API.GET_NAME (:CREATE_PERSON)").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYCREATEPERSONNAME: Create Person Name").
                 setSize(30).
                 setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
                 setReadOnly();
         
         headblk.addField("START_ORG").
                 setInsertable().
                 setDefaultNotVisible().
                 setDynamicLOV("GENERAL_ORGANIZATION_LOV", "PROJ_NO").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYSTARTORG: Start Org").
                 setSize(30);
         headblk.addField("START_ORG_NAME").
                 setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc(:START_ORG)").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYSTARTORGNAME: Start Org Name").
                 setSize(30).
                 setDefaultNotVisible().
                 setReadOnly();
         mgr.getASPField("START_ORG").setValidation("START_ORG_NAME");
 
         headblk.addField("CREATE_TIME","Date").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYCREATETIME: Create Time").
                 setSize(30);
         headblk.addField("REPLY_LIST_NO").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYREPLYLISTNO: Reply List No").
                 setSize(30);
         headblk.addField("BOOK_NO").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYBOOKNO: Book No").
                 setSize(30);
         headblk.addField("BOOK_NAME").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYBOOKNAME: Book Name").
                 setSize(30);
         headblk.addField("ESTIMATE_COST").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYESTIMATECOST: Estimate Cost").
                 setSize(30);
         headblk.addField("ACTUAL_COST").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYACTUALCOST: Actual Cost").
                 setSize(30);
         headblk.addField("CONTRACT_NO").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYCONTRACTNO: Contract No").
                 setSize(30);       
         headblk.addField("NOTE").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYNOTE: Note").
                 setSize(2000);
         headblk.addField("STATUS").
                 setHidden().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYSTATUS: Status").
                 setSize(30);
         headblk.addField("STATUS_DESC").
                 setReadOnly().
                 setFunction("FLOW_STATUS_API.Get_Status_Desc (:STATUS)").
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYSTATUSDESC: Status Desc").
                 setSize(30);
         headblk.addField("CONTENT").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTINNERNOREPLYCONTENT: Content").
                 setSize(130).
                 setHeight(5);
         headblk.addField("FLOW_TITLE").
                 setWfProperties().
                 setReadOnly().
                 setHidden().
                 setFunction("LIST_NAME").
                 setLabel("FLOWTITLE: Flow Title");
         headblk.addField("CON_LIST_TYPE_DB").setHidden();
         
         headblk.setView("CON_PROJ_CONNECTION_LIST_OTHER");
         headblk.defineCommand("CON_PROJ_CONNECTION_LIST_API","New__,Modify__,Remove__");
         headset = headblk.getASPRowSet();
         headbar = mgr.newASPCommandBar(headblk);
         headbar.addCustomCommand("printReport", "CONPROJCONNECTIONLISTINNERNOREPLYREPORT: Print Proj Connection List Inner No Reply Report...");//TODO
         headtbl = mgr.newASPTable(headblk);
         headtbl.setTitle("CONPROJCONNECTIONLISTTBLHEAD: Con Proj Connection List Cost");
         headtbl.enableRowSelect();
         headtbl.setWrap();
         headlay = headblk.getASPBlockLayout();
         headlay.setSimple("CREATE_PERSON_NAME");
         headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
         headlay.setSimple("START_ORG_NAME");
         headlay.setDataSpan("CONTENT", 5);
         headlay.setDataSpan("STATUS_DESC", 5);
         headlay.setSimple("SUB_PROJ_DESC");
         headlay.setSimple("SEND_TO_NAME");
         headlay.setSimple("GENSET_NO");
         headlay.setSimple("MAJOR_NAME");
         headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
         
         con_copy_org_blk = mgr.newASPBlock("ITEM1");
         con_copy_org_blk.addField("ITEM0_OBJID").
                          setHidden().
                          setDbName("OBJID");
         con_copy_org_blk.addField("ITEM0_OBJVERSION").
                          setHidden().
                          setDbName("OBJVERSION");
         con_copy_org_blk.addField("ITEM0_PROJ_NO").
                          setDbName("PROJ_NO").
                          setMandatory().
                          setHidden().
                          setInsertable().
                          setLabel("CONCOPYORGITEM0PROJNO: Proj No").
                          setSize(30);
         con_copy_org_blk.addField("ITEM0_ID").
                          setDbName("ID").
                          setHidden().
                          setMandatory().
                          setInsertable().
                          setLabel("CONCOPYORGITEM0ID: Id").
                          setSize(30);
         con_copy_org_blk.addField("COPY_ORG_NO").
                          setMandatory().
                          setDynamicLOV("GENERAL_ORGANIZATION_LOV", "PROJ_NO").
                          setInsertable().
                          setLabel("CONCOPYORGCOPYORGNO: Copy Org No").
                          setSize(30);
         con_copy_org_blk.addField("COPY_ORG_NAME").
                          setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc(:COPY_ORG_NO)").
                          setReadOnly().
                          setLabel("CONCOPYORGCOPYORGNAME: Copy Org Name").
                          setSize(30);
         mgr.getASPField("COPY_ORG_NO").setValidation("COPY_ORG_NAME");
         
         con_copy_org_blk.addField("COPY_PERSON").
                          setInsertable().
                          setDynamicLOV("GENERAL_ORG_PER_POS_LOV","PROJ_NO,COPY_ORG_NO ORG_NO").
                          setLabel("CONCOPYORGCOPYPERSON: Copy Person").
                          setSize(20);
         con_copy_org_blk.addField("COPY_PERSON_NAME").
                          setLabel("CONCOPYORGCOPYPERSONNAME: Copy Person Name").
                          setSize(30).
                          setFunction("PERSON_INFO_API.GET_NAME ( :COPY_PERSON)").
                          setReadOnly();
         mgr.getASPField("COPY_PERSON").setValidation("COPY_PERSON_NAME");
 
         con_copy_org_blk.setView("CON_COPY_ORG");
         con_copy_org_blk.defineCommand("CON_COPY_ORG_API","New__,Modify__,Remove__");
         con_copy_org_blk.setMasterBlock(headblk);
         con_copy_org_set = con_copy_org_blk.getASPRowSet();
         con_copy_org_bar = mgr.newASPCommandBar(con_copy_org_blk);
         con_copy_org_bar.defineCommand(con_copy_org_bar.OKFIND, "okFindITEM1");
         con_copy_org_bar.defineCommand(con_copy_org_bar.NEWROW, "newRowITEM1");
         con_copy_org_tbl = mgr.newASPTable(con_copy_org_blk);
         con_copy_org_tbl.setTitle("CONCOPYORGITEMHEAD1: ConCopyOrg");
         con_copy_org_tbl.enableRowSelect();
         con_copy_org_tbl.setWrap();
         con_copy_org_lay = con_copy_org_blk.getASPBlockLayout();
         con_copy_org_lay.setDefaultLayoutMode(con_copy_org_lay.MULTIROW_LAYOUT);
         con_copy_org_lay.setSimple("COPY_ORG_NAME");
         con_copy_org_lay.setSimple("COPY_PERSON_NAME");

      }

      
    //Report  Function
      public void  printReport() throws FndException, UnsupportedEncodingException//TODO
      {
       ASPManager mgr = getASPManager();
       ASPConfig cfg = getASPConfig();
       String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
       if (headlay.isMultirowLayout())
          headset.goTo(headset.getRowSelected());
       if (headset.countRows()>0 )
             {   
                String proj_no = headset.getValue("PROJ_NO");
                String id = headset.getValue("ID");
                 appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=RptConProjConnectionListInnerNoReply.raq&proj_no="+proj_no+"&id="+id
                   + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
            }
      }

      public void  adjust() throws FndException
      {
         // fill function body
         ASPManager mgr = getASPManager();
         super.adjust();
         mgr.getASPField("ID").setHidden();
         mgr.getASPField("NOTE").setHidden();
         mgr.getASPField("CONTRACT_NO").setHidden();
         mgr.getASPField("REPLY_LIST_NO").setHidden();
         mgr.getASPField("BOOK_NO").setHidden();
         mgr.getASPField("BOOK_NAME").setHidden();
         mgr.getASPField("ESTIMATE_COST").setHidden();
         mgr.getASPField("ACTUAL_COST").setHidden();
         mgr.getASPField("CONTRACT_ID").setHidden();
         mgr.getASPField("CONTRACT_NAME").setHidden();
         mgr.getASPField("SUB_PROJ_NO").setHidden();
         mgr.getASPField("SUB_PROJ_DESC").setHidden();
         mgr.getASPField("IS_REPLY").setHidden();
      }

      //-----------------------------------------------------------------------------
      //------------------------  Presentation functions  ---------------------------
      //-----------------------------------------------------------------------------
      public void validate() {
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPCommand cmd;
         ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
         ASPCommand cmd1;
         String val = mgr.readValue("VALIDATE");
         String txt = "";
         String PERSONMAE = "";
         String STARTORG = "";
         String STARTORGNAME = "";
         String genset_no = "";
         String genset_name = "";
         
         if ("CREATE_PERSON".equals(val)) {
            
            
          cmd1 = trans1.addCustomFunction("GETSTARTORG", 
                  "PERSON_ZONE_API.Get_Person_Def_Zone", "START_ORG");
          cmd1.addParameter("CREATE_PERSON");
          
          trans1 = mgr.validate(trans1);
          STARTORG = trans1.getValue("GETSTARTORG/DATA/START_ORG");
          
          
          cmd = trans.addCustomFunction("GETCREATEPERSONNAME", 
                "PERSON_INFO_API.GET_NAME", "CREATE_PERSON_NAME");
          cmd.addParameter("CREATE_PERSON");
          
          cmd = trans.addCustomFunction("GETSTARTORGNAME", 
                "GENERAL_ZONE_API.Get_Zone_Desc", "START_ORG_NAME");
          cmd.addParameter("START_ORG",STARTORG);
          
          trans = mgr.validate(trans);
          
          PERSONMAE = trans.getValue("GETCREATEPERSONNAME/DATA/CREATE_PERSON_NAME");
          STARTORGNAME = trans.getValue("GETSTARTORGNAME/DATA/START_ORG_NAME");

          txt = ((mgr.isEmpty(PERSONMAE)) ? "" : PERSONMAE )+ "^" +((mgr.isEmpty(STARTORG)) ? "" : STARTORG )+ "^" + ((mgr.isEmpty(STARTORGNAME)) ? "" : STARTORGNAME )+ "^";
          
            mgr.responseWrite(txt);
         }else if("GENSET".equals(val)){
            cmd = trans.addCustomFunction("GET_GENSET_NO", 
                  "CON_GENSET_DATA_API.GET_GENSET_NO", "GENSET_NO");
            cmd.addParameter("PROJ_NO,GENSET");
            trans = mgr.validate(trans);
            genset_no = trans.getValue("GET_GENSET_NO/DATA/GENSET_NO");
            
            cmd1 = trans1.addCustomFunction("GET_GENSET_NAME", 
                  "GENERAL_MACH_GROUP_API.GET_MACH_GRP_DESC", "GENSET_NAME");
            cmd1.addParameter("GENSET_NO",genset_no);
            trans1 = mgr.validate(trans1);
            genset_name = trans1.getValue("GET_GENSET_NAME/DATA/GENSET_NAME");

            txt = ((mgr.isEmpty(genset_no)) ? "" : genset_no )+ "^" 
            +((mgr.isEmpty(genset_name)) ? "" : genset_name )+ "^";
            
            mgr.responseWrite(txt);
         }
         
         mgr.endResponse();
         
      }

      
      protected String getDescription()
      {
         return "CONPROJCONNECTIONLISTINNERNOREPLYDESC: Con Proj Connection List Inner No Reply";
      }


      protected String getTitle()
      {
         return getDescription();
      }


      protected void printContents() throws FndException
      {
         super.printContents();
         ASPManager mgr = getASPManager();
         if (headlay.isVisible())
             appendToHTML(headlay.show());
         else 
         {
            headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
            appendToHTML(headlay.show());
         }  
         if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
         {
            appendToHTML(con_copy_org_lay.show());
         }
      }
      
      protected ASPBlock getBizWfBlock()
      {
         return headblk;      
      }
   }