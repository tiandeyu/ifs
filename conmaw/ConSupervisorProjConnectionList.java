/*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.conmaw;

//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.ASPBlock;
import ifs.fnd.asp.ASPBlockLayout;
import ifs.fnd.asp.ASPBuffer;
import ifs.fnd.asp.ASPCommand;
import ifs.fnd.asp.ASPCommandBar;
import ifs.fnd.asp.ASPConfig;
import ifs.fnd.asp.ASPManager;
import ifs.fnd.asp.ASPPageProvider;
import ifs.fnd.asp.ASPQuery;
import ifs.fnd.asp.ASPRowSet;
import ifs.fnd.asp.ASPTable;
import ifs.fnd.asp.ASPTransactionBuffer;
import ifs.fnd.service.FndException;
import ifs.fnd.service.Util;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------


public class ConSupervisorProjConnectionList extends HzASPPageProviderWf {

  public ConSupervisorProjConnectionList(ASPManager mgr, String pagePath) {
     super(mgr, pagePath);
  }
     // TODO Auto-generated constructor stub
     public static boolean DEBUG = Util.isDebugEnabled("ifs.conmaw.ConSupervisorProjConnectionList");

     //-----------------------------------------------------------------------------
     //---------- Header Instances created on page creation --------
     //-----------------------------------------------------------------------------

     private ASPBlock headblk;
     private ASPRowSet headset;
     private ASPCommandBar headbar;
     private ASPTable headtbl;
     private ASPBlockLayout headlay;

     //-----------------------------------------------------------------------------
     //---------- Item Instances created on page creation --------
     //-----------------------------------------------------------------------------

     private ASPBlock con_connection_list_line_blk;
     private ASPRowSet con_connection_list_line_set;
     private ASPCommandBar con_connection_list_line_bar;
     private ASPTable con_connection_list_line_tbl;
     private ASPBlockLayout con_connection_list_line_lay;


     //-----------------------------------------------------------------------------
     //------------------------  Construction  ---------------------------
     //-----------------------------------------------------------------------------
     public void run() throws FndException
     {
        ASPManager mgr = getASPManager();
        super.run();
        if( mgr.commandBarActivated() )
           eval(mgr.commandBarFunction());
        else if(mgr.dataTransfered())
           okFind();
        else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
           okFind();
        else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
           okFind();
        else if( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")) )
           validate();
        else
           okFind(); 

        adjust();
     }
     //-----------------------------------------------------------------------------
     //------------------------  Command Bar functions  ---------------------------
     //-----------------------------------------------------------------------------

     public void okFind()
     {
        ASPManager mgr = getASPManager();
        ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
        ASPQuery q;

        mgr.createSearchURL(headblk);
        q = trans.addQuery(headblk);
        q.includeMeta("ALL");
        q.addWhereCondition("LIST_TYPE = ?");
        q.addParameter("LIST_TYPE", "监理工程联系单");
        if(mgr.dataTransfered())
           q.addOrCondition(mgr.getTransferedData());
        mgr.querySubmit(trans,headblk);
        if (  headset.countRows() == 0 )
        {
           mgr.showAlert("CONPROJCONNECTIONLISTNODATA: No data found.");
           headset.clear();
        }
     }



     public void countFind()
     {
        ASPManager mgr = getASPManager();
        ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
        ASPQuery q;

        q = trans.addQuery(headblk);
        q.setSelectList("to_char(count(*)) N");
        mgr.submit(trans);
        headlay.setCountValue(toInt(headset.getValue("N")));
        headset.clear();
     }



     public void newRow()
     {
        ASPManager mgr = getASPManager();
        ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
        ASPBuffer data;
        ASPCommand cmd;

        cmd = trans.addEmptyCommand("HEAD","CON_PROJ_CONNECTION_LIST_API.New__",headblk);
        cmd.setOption("ACTION","PREPARE");
        trans = mgr.perform(trans);
        data = trans.getBuffer("HEAD/DATA");
        
        data.setFieldItem("LIST_TYPE", "监理工程联系单");
        data.setFieldItem("IS_REPLY", "0");
        
        headset.addRow(data);
     }


    
     //-----------------------------------------------------------------------------
     //------------------------  Predefines Head ---------------------------
     //-----------------------------------------------------------------------------

     public void  preDefine()
     {
        ASPManager mgr = getASPManager();

        headblk = mgr.newASPBlock("MAIN");
        headblk.addField("OBJID").
                setHidden();
        headblk.addField("OBJVERSION").
                setHidden();
        headblk.addField("PROJ_NO").
                setDynamicLOV("GENERAL_PROJECT").
                setInsertable().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTPROJNO: Proj No").
                setSize(30);
        headblk.addField("GENERAL_PROJECT_PROJ_DESC").
                setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
                setLabel("CONSUPERVISORPROJCONNECTIONLISTGENERALPROJECTPROJDESC: General Project Proj Desc").
                setSize(30).
                setReadOnly();
        
        mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
        
        headblk.addField("CONTRACT_ID").
                setInsertable().
                setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
//                setLOVProperty("WHERE", "SCHEDULE = 'TRUE'").
                setLabel("CONSUPERVISORPROJCONNECTIONLISTCONTRACTID: Contract Id").
                setSize(30);
        headblk.addField("CONTRACT_NAME").
                setFunction("PROJECT_CONTRACT_API.Get_Contract_Desc (:PROJ_NO,:CONTRACT_ID)").
                setLabel("CONSUPERVISORPROJCONNECTIONLISTCONTRACTNNAME: Contract Name").
                setSize(30).
                setReadOnly();

        mgr.getASPField("CONTRACT_ID").setValidation("CONTRACT_NAME");
        headblk.addField("LIST_NO").
                setInsertable().
                setWfProperties().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTLISTNO: List No").
                setSize(30);
        headblk.addField("LIST_NAME").
                setInsertable().
                setWfProperties().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTLISTNAME: List Name").
                setSize(30);
        headblk.addField("IS_REPLY").
                setReadOnly().
                setCheckBox("0,1").
                setLabel("CONSUPERVISORPROJCONNECTIONLISTISREPLY: Is Reply").
                setSize(30);

        headblk.addField("SEND_TO").
                setInsertable().
                setDynamicLOV("GENERAL_ORGANIZATION","PROJ_NO").
                setLOVProperty("WHERE", "ORG_TYPE_DB = 'DEP'").
                setLabel("CONSUPERVISORPROJCONNECTIONLISTSENDTO: Send To").
                setSize(30);

        headblk.addField("DEPT_DESC").
                setReadOnly().
                setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc_ (:SEND_TO)").
                setLabel("CONSUPERVISORPROJCONNECTIONLISTDEPTDESC: Dept Desc").
                setSize(50);  
        mgr.getASPField("SEND_TO").setValidation("DEPT_DESC");

        headblk.addField("COPY_TO").
                setInsertable().
                setDynamicLOV("GENERAL_ZONE","PROJ_NO").
                setLabel("CONSUPERVISORPROJCONNECTIONLISTCOPYTO: Copy To").
                setSize(30);

        headblk.addField("ORG_DESC").
                setReadOnly().
                setFunction("GENERAL_ZONE_API.Get_Zone_Desc (:COPY_TO)").
                setLabel("CONSUPERVISORPROJCONNECTIONLISTORGDESC: Org Desc").
                setSize(50);  
        mgr.getASPField("COPY_TO").setValidation("ORG_DESC");
        
        headblk.addField("SUB_PROJ_NO").
                setInsertable().
                setDynamicLOV("CON_QUA_TREE","PROJ_NO").
                setLOVProperty("TREE_PARE_FIELD", "PARENT_ID").
                setLOVProperty("TREE_DISP_FIELD", "NODE_NO,NODE_NAME").
                setLOVProperty("ORDER_BY", "NODE_NO").
                setLabel("CONPROJCONNECTIONLISTFREENOREPLYSUBPROJNO: Sub Proj No").
                setSize(30);

        headblk.addField("SUB_PROJ_DESC").
                setFunction("CON_PROJ_CONSTRUCTION_MAN_API.Get_Node_Name ( :PROJ_NO,:SUB_PROJ_NO)").
                setLabel("CONPROJCONNECTIONLISTFREENOREPLYSUBPROJDESC: SUB PROJ DESC").
                setReadOnly().
                setSize(30);
        mgr.getASPField("SUB_PROJ_NO").setValidation("SUB_PROJ_DESC");
        headblk.addField("ID").
                setInsertable().
                setLabel("CONPROJCONNECTIONLISTINNERNOREPLYID: Id").
                setSize(200);
        headblk.addField("CREATE_PERSON").
                setInsertable().
                setDynamicLOV("PERSON_INFO").
                setLabel("CONPROJCONNECTIONLISTFREENOREPLYCREATEPERSON: Create Person").
                setSize(30).
                setCustomValidation("CREATE_PERSON", "CREATE_PERSON_NAME,START_ORG,START_ORG_NAME");
        headblk.addField("CREATE_PERSON_NAME").
                setFunction("PERSON_INFO_API.GET_NAME (:CREATE_PERSON)").
                setLabel("CONPROJCONNECTIONLISTFREENOREPLYCREATEPERSONNAME: Create Person Name").
                setSize(30).
                setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
                setReadOnly(); 
        
        headblk.addField("START_ORG").
                setDynamicLOV("GENERAL_ZONE", "PROJ_NO").
                setLabel("CONSUPERVISORPROJCONNECTIONLISTSTARTORG: Start Org").
                setSize(30);

        headblk.addField("START_ORG_NAME").
                setFunction("GENERAL_ZONE_API.Get_Zone_Desc(:START_ORG)").
                setLabel("CONSUPERVISORPROJCONNECTIONLISTSTARTORGNAME: Start Org Name").
                setSize(30).
                setReadOnly();
        
        mgr.getASPField("START_ORG").setValidation("START_ORG_NAME");

        headblk.addField("CREATE_TIME","Date").
                setInsertable().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTCREATETIME: Create Time").
                setSize(30);
        headblk.addField("REPLY_LIST_NO").
                setInsertable().
                setWfProperties().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTREPLYLISTNO: Reply List No").
                setSize(30);
        headblk.addField("BOOK_NO").
                setInsertable().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTBOOKNO: Book No").
                setSize(30);
        headblk.addField("BOOK_NAME").
                setInsertable().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTBOOKNAME: Book Name").
                setSize(30);
        headblk.addField("ESTIMATE_COST").
                setInsertable().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTESTIMATECOST: Estimate Cost").
                setSize(30);
        headblk.addField("ACTUAL_COST").
                setInsertable().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTACTUALCOST: Actual Cost").
                setSize(30);
        headblk.addField("CONTRACT_NO").
                setInsertable().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTCONTRACTNO: Contract No").
                setSize(30);       
        headblk.addField("LIST_TYPE").
                setLabel("CONSUPERVISORPROJCONNECTIONLISTLISTTYPE: List Type").
                setSize(30).
                setReadOnly();
        headblk.addField("NOTE").
                setInsertable().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTNOTE: Note").
                setSize(2000);
        headblk.addField("STATUS").
                setHidden().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTSTATUS: Status").
                setSize(30);
        headblk.addField("STATUS_DESC").
                setReadOnly().
                setFunction("FLOW_STATUS_API.Get_Status_Desc (:STATUS)").
                setLabel("CONSUPERVISORPROJCONNECTIONLISTSTATUSDESC: Status Desc").
                setSize(30);
        headblk.addField("CONTENT").
                setInsertable().
                setLabel("CONSUPERVISORPROJCONNECTIONLISTCONTENT: Content").
                setSize(130).
                setHeight(5);       
        headblk.setView("CON_PROJ_CONNECTION_LIST");
        headblk.defineCommand("CON_PROJ_CONNECTION_LIST_API","New__,Modify__,Remove__");
        headset = headblk.getASPRowSet();
        headbar = mgr.newASPCommandBar(headblk);
        headbar.addCustomCommand("printReport", "CONSUPERVISORPROJCONNECTIONLISTREPORT: Print Supervisor Proj Connection List Report...");//TODO
        headtbl = mgr.newASPTable(headblk);
        headtbl.setTitle("CONPROJCONNECTIONLISTTBLHEAD: Con Proj Connection List Cost");
        headtbl.enableRowSelect();
        headtbl.setWrap();
        headlay = headblk.getASPBlockLayout();
        headlay.setSimple("CONTRACT_NAME");
        headlay.setDataSpan("STATUS", 5);
        headlay.setSimple("CREATE_PERSON_NAME");
        headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
        headlay.setSimple("DEPT_DESC");
        headlay.setSimple("ORG_DESC");
        headlay.setSimple("START_ORG_NAME");
        headlay.setDataSpan("CONTENT", 5);
        headlay.setSimple("SUB_PROJ_DESC");
        headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);

     }

     
   //Report  Function
     public void  printReport() throws FndException, UnsupportedEncodingException//TODO
     {
      ASPManager mgr = getASPManager();
      ASPConfig cfg = getASPConfig();
      String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
      if (headlay.isMultirowLayout())
         headset.goTo(headset.getRowSelected());
      if (headset.countRows()>0 )
            {   
               String proj_no = headset.getValue("PROJ_NO");
               String id = headset.getValue("ID");
                appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=RptConSupervisorProjConnectionList.raq&proj_no="+proj_no+"&id="+id
                  + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
           }
     }

     public void  adjust() throws FndException
     {
        // fill function body
        ASPManager mgr = getASPManager();
        super.adjust();
        mgr.getASPField("ID").setHidden();
        mgr.getASPField("NOTE").setHidden();
        mgr.getASPField("CONTRACT_NO").setHidden();
        mgr.getASPField("REPLY_LIST_NO").setHidden();
        mgr.getASPField("BOOK_NO").setHidden();
        mgr.getASPField("BOOK_NAME").setHidden();
        mgr.getASPField("ESTIMATE_COST").setHidden();
        mgr.getASPField("ACTUAL_COST").setHidden();
        mgr.getASPField("IS_REPLY").setHidden();
     }

     //-----------------------------------------------------------------------------
     //------------------------  Presentation functions  ---------------------------
     //-----------------------------------------------------------------------------
     public void validate() {
        // TODO Auto-generated method stub
        ASPManager mgr = getASPManager();
        ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
        ASPCommand cmd;
        ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
        ASPCommand cmd1;
        String val = mgr.readValue("VALIDATE");
        String txt = "";
        String PERSONMAE = "";
        String STARTORG = "";
        String STARTORGNAME = "";
        
        if ("CREATE_PERSON".equals(val)) {
           
           
           cmd1 = trans1.addCustomFunction("GETSTARTORG", 
                 "PERSON_ZONE_API.Get_Person_Def_Zone", "START_ORG");
         cmd1.addParameter("CREATE_PERSON");
         
         trans1 = mgr.validate(trans1);
         STARTORG = trans1.getValue("GETSTARTORG/DATA/START_ORG");
         
         
         cmd = trans.addCustomFunction("GETCREATEPERSONNAME", 
               "PERSON_INFO_API.GET_NAME", "CREATE_PERSON_NAME");
         cmd.addParameter("CREATE_PERSON");
         
         cmd = trans.addCustomFunction("GETSTARTORGNAME", 
               "GENERAL_ZONE_API.Get_Zone_Desc", "START_ORG_NAME");
         cmd.addParameter("START_ORG",STARTORG);
         
         trans = mgr.validate(trans);
         
         PERSONMAE = trans.getValue("GETCREATEPERSONNAME/DATA/CREATE_PERSON_NAME");
         STARTORGNAME = trans.getValue("GETSTARTORGNAME/DATA/START_ORG_NAME");

         txt = ((mgr.isEmpty(PERSONMAE)) ? "" : PERSONMAE ) + "^" +((mgr.isEmpty(STARTORG)) ? "" : STARTORG ) + "^" + ((mgr.isEmpty(STARTORGNAME)) ? "" : STARTORGNAME ) + "^";
         
           mgr.responseWrite(txt);
        }
        
        mgr.endResponse();
        
     }

     
     protected String getDescription()
     {
        return "CONSUPERVISORPROJCONNECTIONLISTDESC: Con Supervisor Proj Connection List";
     }


     protected String getTitle()
     {
        return getDescription();
     }


     protected void printContents() throws FndException
     {
        ASPManager mgr = getASPManager();
        if (headlay.isVisible())
            appendToHTML(headlay.show());
     }
     
     protected ASPBlock getBizWfBlock()
     {
        return headblk;      
     }
  }
