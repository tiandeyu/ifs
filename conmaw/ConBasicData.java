/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.conmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class ConBasicData extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.conmaw.ConSpecial");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   private ASPBlock con_condition_list_blk;
   private ASPRowSet con_condition_list_set;
   private ASPCommandBar con_condition_list_bar;
   private ASPTable con_condition_list_tbl;
   private ASPBlockLayout con_condition_list_lay;
   
   private ASPBlock con_special_proj_sort_blk;
   private ASPRowSet con_special_proj_sort_set;
   private ASPCommandBar con_special_proj_sort_bar;
   private ASPTable con_special_proj_sort_tbl;
   private ASPBlockLayout con_special_proj_sort_lay;
   
   private ASPTabContainer tabs;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  ConBasicData (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SPECIAL_NO")) )
         okFind();
      else
      	 okFind();
      	 
      tabs.saveActiveTab();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("CONSPECIALNODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","CON_SPECIAL_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }
   
  public void okFindItem1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(con_condition_list_blk);
      q = trans.addQuery(con_condition_list_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,con_condition_list_blk);
      if (  con_condition_list_set.countRows() == 0 )
      {
         mgr.showAlert("CONCONDITIONLISTNODATA: No data found.");
         con_condition_list_set.clear();
      }
   }



   public void countFindItem1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(con_condition_list_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      con_condition_list_lay.setCountValue(toInt(con_condition_list_set.getValue("N")));
      con_condition_list_set.clear();
   }



   public void newRowItem1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","CON_CONDITION_LIST_API.New__",con_condition_list_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      con_condition_list_set.addRow(data);
   }
   
  public void okFindItem2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(con_special_proj_sort_blk);
      q = trans.addQuery(con_special_proj_sort_blk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,con_special_proj_sort_blk);
      if (  con_special_proj_sort_set.countRows() == 0 )
      {
         mgr.showAlert("CONSPECIALPROJSORTNODATA: No data found.");
         con_special_proj_sort_set.clear();
      }
   }



   public void countFindItem2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(con_special_proj_sort_blk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      con_special_proj_sort_lay.setCountValue(toInt(con_special_proj_sort_set.getValue("N")));
      con_special_proj_sort_set.clear();
   }



   public void newRowItem2()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","CON_SPECIAL_PROJ_SORT_API.New__",con_special_proj_sort_blk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      con_special_proj_sort_set.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("SPECIAL_NO").
              setMandatory().
              setInsertable().
              setLabel("CONSPECIALSPECIALNO: Special No").
              setSize(30);
      headblk.addField("SPECIAL_NAME").
              setInsertable().
              setLabel("CONSPECIALSPECIALNAME: Special Name").
              setSize(30);
      headblk.setView("CON_SPECIAL");
      headblk.defineCommand("CON_SPECIAL_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("activateConSpecial", "Con Special...");  
      headbar.addCustomCommand("activateConConditionList", "Con Condition List...");
      headbar.addCustomCommand("activateConSpecialProjSort", "Con Special Proj Sort...");
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("CONSPECIALTBLHEAD: Con Specials");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      
      

      con_condition_list_blk = mgr.newASPBlock("ITEM1");
      con_condition_list_blk.addField("ITEM1_OBJID").
                             setDbName("OBJID").
                             setHidden();
      con_condition_list_blk.addField("ITEM1_OBJVERSION").
                             setDbName("OBJVERSION").
                             setHidden();
      con_condition_list_blk.addField("ID").
                             setHidden().
                             setInsertable().
                             setLabel("CONCONDITIONLISTID: Id").
                             setSize(30);
      con_condition_list_blk.addField("NAME").
                             setInsertable().
                             setLabel("CONCONDITIONLISTNAME: Name").
                             setSize(30);
      con_condition_list_blk.addField("LU").
                             setInsertable().
                             setLabel("CONCONDITIONLISTLU: Lu").
                             setSize(30);
      con_condition_list_blk.setView("CON_CONDITION_LIST");
      con_condition_list_blk.defineCommand("CON_CONDITION_LIST_API","New__,Modify__,Remove__");
      con_condition_list_set = con_condition_list_blk.getASPRowSet();
      con_condition_list_bar = mgr.newASPCommandBar(con_condition_list_blk);
      con_condition_list_bar.defineCommand(con_condition_list_bar.OKFIND, "okFindItem1");
      con_condition_list_bar.defineCommand(con_condition_list_bar.NEWROW, "newRowItem1");
      con_condition_list_bar.defineCommand(con_condition_list_bar.COUNTFIND,"countFindItem1");
      con_condition_list_tbl = mgr.newASPTable(con_condition_list_blk);
      con_condition_list_tbl.setTitle("CONCONDITIONLISTTBLHEAD: Con Condition Lists");
      con_condition_list_tbl.enableRowSelect();
      con_condition_list_tbl.setWrap();
      con_condition_list_lay = con_condition_list_blk.getASPBlockLayout();
      con_condition_list_lay.setDefaultLayoutMode(con_condition_list_lay.MULTIROW_LAYOUT);
 


 	   con_special_proj_sort_blk = mgr.newASPBlock("ITEM2");
      con_special_proj_sort_blk.addField("OBJID2").
                                setDbName("OBJID").
                                setHidden();
      con_special_proj_sort_blk.addField("OBJVERSION2").
                                setDbName("OBJVERSION").
                                setHidden();
      con_special_proj_sort_blk.addField("ID2").
                                setDbName("ID").
                                setInsertable().
                                setLabel("CONSPECIALPROJSORTID: Id").
                                setSize(200).
                                setHidden();      
      //PROJ_NO
      con_special_proj_sort_blk.addField("PROJ_NO").
                                setMandatory().
                                setInsertable().
                                setDynamicLOV("GENERAL_PROJECT").
                                setLabel("CONSPECIALPROJSORTPROJNO: Proj No").
                                setSize(30);
      con_special_proj_sort_blk.addField("GENERAL_PROJECT_PROJ_DESC").
                                setReadOnly().
                                setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
                                setLabel("CONSPECIALPROJSORTGENERALPROJECTPROJDESC: General Project Proj Desc").
                                setSize(30);
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");

      
      con_special_proj_sort_blk.addField("SORT_NO").
                                 setHidden().
                                 setLabel("CONSPECIALPROJSORTSORTNO: Sort No").
                                 setSize(30);
      con_special_proj_sort_blk.addField("SORT_NAME").
                                setInsertable().
                                setLabel("CONSPECIALPROJSORTSORTNAME: Sort Name").
                                setSize(30);
      con_special_proj_sort_blk.setView("CON_SPECIAL_PROJ_SORT");
      con_special_proj_sort_blk.defineCommand("CON_SPECIAL_PROJ_SORT_API","New__,Modify__,Remove__");
      con_special_proj_sort_set = con_special_proj_sort_blk.getASPRowSet();
      con_special_proj_sort_bar = mgr.newASPCommandBar(con_special_proj_sort_blk);
      con_special_proj_sort_bar.defineCommand(con_special_proj_sort_bar.OKFIND, "okFindItem2");
      con_special_proj_sort_bar.defineCommand(con_special_proj_sort_bar.NEWROW, "newRowItem2");
      con_special_proj_sort_bar.defineCommand(con_special_proj_sort_bar.COUNTFIND,"countFindItem2");
      con_special_proj_sort_tbl = mgr.newASPTable(con_special_proj_sort_blk);
      con_special_proj_sort_tbl.setTitle("CONSPECIALPROJSORTTBLHEAD: Con Special Proj Sorts");
      con_special_proj_sort_tbl.enableRowSelect();
      con_special_proj_sort_tbl.setWrap();
      con_special_proj_sort_lay = con_special_proj_sort_blk.getASPBlockLayout();
      con_special_proj_sort_lay.setDefaultLayoutMode(con_special_proj_sort_lay.MULTIROW_LAYOUT);
      con_special_proj_sort_lay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      
      
      tabs = mgr.newASPTabContainer();
      tabs.setDirtyFlagEnabled(false);
      tabs.addTab(mgr.translate("CONSPECIAL: Con Special"), "javascript:commandSet('MAIN.activateConSpecial','')");
      tabs.addTab(mgr.translate("CONCONDITIONLIST: Con Condition List"), "javascript:commandSet('MAIN.activateConConditionList','')");
      tabs.addTab(mgr.translate("CONSPECIALPROJSORT: Con Special Proj Sort"), "javascript:commandSet('MAIN.activateConSpecialProjSort','')");
      tabs.setContainerWidth(700);
      tabs.setLeftTabSpace(1);
      tabs.setContainerSpace(5);
      tabs.setTabWidth(100);



   }
   
   
   public void activateConSpecial()
   {   
      tabs.setActiveTab(1);
   }
   
   public void activateConConditionList()
   {   
      tabs.setActiveTab(2);
      okFindItem1();  

   }
   
   public void activateConSpecialProjSort()
   {   
      tabs.setActiveTab(3);
      okFindItem2();
   }



   public void  adjust()
   {
      // fill function body
      headbar.removeCustomCommand("activateConSpecial");
      headbar.removeCustomCommand("activateConConditionList");
      headbar.removeCustomCommand("activateConSpecialProjSort");
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "CONBASICDATAEDESC: Con Basic Data";
   }


   protected String getTitle()
   {
      return "CONBASICDATATITLE: Con Basic Data";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      appendToHTML(tabs.showTabsInit());

      if (tabs.getActiveTab() == 1 )
         appendToHTML(headlay.show());
      else if (tabs.getActiveTab() == 2 )
         appendToHTML(con_condition_list_lay.show());
      else if (tabs.getActiveTab() == 3 )
         appendToHTML(con_special_proj_sort_lay.show());
      appendToHTML(tabs.showTabsFinish());    

   }
}
