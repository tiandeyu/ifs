/*
 *                 IFS Research & Development
 *
 *  This program is protected by copyright law and by international
 *  conventions. All licensing, renting, lending or copying (including
 *  for private use), and all other use of the program, which is not
 *  expressively permitted by IFS Research & Development (IFS), is a
 *  violation of the rights of IFS. Such violations will be reported to the
 *  appropriate authorities.
 *
 *  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
 *  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
 * ----------------------------------------------------------------------------
 * File                          :
 * Description                   :
 * Notes                         :
 * Other Programs Called :
 * ----------------------------------------------------------------------------
 * Modified    : Automatically generated by IFS/Design
 * ----------------------------------------------------------------------------
 */

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.conmaw;

//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.ASPBlock;
import ifs.fnd.asp.ASPBlockLayout;
import ifs.fnd.asp.ASPBuffer;
import ifs.fnd.asp.ASPCommand;
import ifs.fnd.asp.ASPCommandBar;
import ifs.fnd.asp.ASPConfig;
import ifs.fnd.asp.ASPManager;
import ifs.fnd.asp.ASPPageProvider;
import ifs.fnd.asp.ASPQuery;
import ifs.fnd.asp.ASPRowSet;
import ifs.fnd.asp.ASPTable;
import ifs.fnd.asp.ASPTransactionBuffer;
import ifs.fnd.service.FndException;
import ifs.fnd.service.Util;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------


public class ConProjConnectionListCostOrg extends HzASPPageProviderWf {

   public ConProjConnectionListCostOrg(ASPManager mgr, String pagePath) {
      super(mgr, pagePath);
   }
      // TODO Auto-generated constructor stub
      public static boolean DEBUG = Util.isDebugEnabled("ifs.conmaw.ConProjConnectionListCostOrg");

      //-----------------------------------------------------------------------------
      //---------- Header Instances created on page creation --------
      //-----------------------------------------------------------------------------

      private ASPBlock headblk;
      private ASPRowSet headset;
      private ASPCommandBar headbar;
      private ASPTable headtbl;
      private ASPBlockLayout headlay;

      //-----------------------------------------------------------------------------
      //---------- Item Instances created on page creation --------
      //-----------------------------------------------------------------------------

      private ASPBlock con_connection_list_line_blk;
      private ASPRowSet con_connection_list_line_set;
      private ASPCommandBar con_connection_list_line_bar;
      private ASPTable con_connection_list_line_tbl;
      private ASPBlockLayout con_connection_list_line_lay;


      //-----------------------------------------------------------------------------
      //------------------------  Construction  ---------------------------
      //-----------------------------------------------------------------------------
      public void run() throws FndException
      {
         super.run();
         ASPManager mgr = getASPManager();
         String comnd; 
         if( mgr.commandBarActivated() ){
            eval(mgr.commandBarFunction());
            comnd = mgr.readValue("__COMMAND");
            if (  "ITEM1.SaveReturn".equals(comnd) ||  "ITEM1.Delete".equals(comnd) )
               headset.refreshAllRows();
            else if("ITEM1.SaveNew".equals(comnd))
               headset.refreshAllRows();
          }
         else if(mgr.dataTransfered())
            okFind();
         else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
            okFind();
         else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
            okFind();
         else if( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")) )
            validate();
         else
            okFind();

         adjust();
      }
      //-----------------------------------------------------------------------------
      //------------------------  Command Bar functions  ---------------------------
      //-----------------------------------------------------------------------------

      public void okFind()
      {
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPQuery q;

         mgr.createSearchURL(headblk);
         q = trans.addQuery(headblk);
         q.includeMeta("ALL");
         q.addWhereCondition("CON_LIST_TYPE_DB = 'COSTORG'");
         if(mgr.dataTransfered())
            q.addOrCondition(mgr.getTransferedData());
         mgr.querySubmit(trans,headblk);
         if (  headset.countRows() == 0 )
         {
            mgr.showAlert("CONPROJCONNECTIONLISTNODATA: No data found.");
            headset.clear();
         }
         else
         {
            okFindITEM1();
         }

      }



      public void countFind()
      {
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPQuery q;

         q = trans.addQuery(headblk);
         q.setSelectList("to_char(count(*)) N");
         mgr.submit(trans);
         headlay.setCountValue(toInt(headset.getValue("N")));
         headset.clear();
      }



      public void newRow()
      {
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPBuffer data;
         ASPCommand cmd;

         cmd = trans.addEmptyCommand("HEAD","CON_PROJ_CONNECTION_LIST_API.New__",headblk);
         cmd.setOption("ACTION","PREPARE");
         trans = mgr.perform(trans);
         
         data = trans.getBuffer("HEAD/DATA");
         data.setFieldItem("CON_LIST_TYPE_DB", "COSTORG");
         data.setFieldItem("IS_VALID", "TRUE");
         data.setFieldItem("HAS_FEEDBACK", "FALSE");
         
         
         headset.addRow(data);
      }


      //-----------------------------------------------------------------------------
      //------------------------  Item block cmd bar functions  ---------------------------
      //-----------------------------------------------------------------------------


      public void okFindITEM1()
      {
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPQuery q;
         int headrowno;

         q = trans.addQuery(con_connection_list_line_blk);
         q.addWhereCondition("PROJ_NO = ? AND ID = ?");
         q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
         q.addParameter("ID", headset.getValue("ID"));
         q.includeMeta("ALL");
         headrowno = headset.getCurrentRowNo();
         mgr.querySubmit(trans,con_connection_list_line_blk);
         headset.goTo(headrowno);
      }
      public void newRowITEM1()
      {
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPCommand cmd;
         ASPBuffer data;

         
         cmd = trans.addEmptyCommand("ITEM1","CON_CONNECTION_LIST_LINE_API.New__",con_connection_list_line_blk);
         cmd.setOption("ACTION","PREPARE");
         cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
         cmd.setParameter("ITEM0_ID", headset.getValue("ID"));
         cmd.setParameter("ITEM0_CONTRACT_ID", headset.getValue("CONTRACT_ID"));
         trans = mgr.perform(trans);
         data = trans.getBuffer("ITEM1/DATA");
         con_connection_list_line_set.addRow(data);
      }

      //-----------------------------------------------------------------------------
      //------------------------  Predefines Head ---------------------------
      //-----------------------------------------------------------------------------

      public void  preDefine()
      {
         ASPManager mgr = getASPManager();

         headblk = mgr.newASPBlock("MAIN");
         headblk.addField("OBJID").
                 setHidden();
         headblk.addField("OBJVERSION").
                 setHidden();
         headblk.addField("PROJ_NO").
                 setDynamicLOV("GENERAL_PROJECT").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGPROJNO: Proj No").
                 setSize(30);
         headblk.addField("GENERAL_PROJECT_PROJ_DESC").
                 setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC (:PROJ_NO)").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGGENERALPROJECTPROJDESC: General Project Proj Desc").
                 setSize(30).
                 setReadOnly();
         
         mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
         headblk.addField("CONTRACT_ID").
                 setInsertable().
                 setDefaultNotVisible().
                 setMandatory().
                 setDynamicLOV("PROJECT_CONTRACT_LOV","PROJ_NO").
//                 setLOVProperty("WHERE", "SCHEDULE = 'TRUE'").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGCONTRACTID: Contract Id").
                 setCustomValidation("PROJ_NO,CONTRACT_ID", "CONTRACT_NAME,SEND_TO,COPY_TO,SEND_TO_NAME,COPY_TO_NAME").
                 setSize(30);
         headblk.addField("CONTRACT_NAME").
                 setFunction("PROJECT_CONTRACT_API.Get_Contract_Desc (:PROJ_NO,:CONTRACT_ID)").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGCONTRACTNNAME: Contract Name").
                 setSize(30).
                 setReadOnly();
         headblk.addField("LIST_NO").
                 setInsertable().
                 setMandatory().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGNO: List No").
                 setSize(30);
         headblk.addField("LIST_NAME").
                 setInsertable().
                 setMandatory().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGLISTNAME: List Name").
                 setSize(30);
         headblk.addField("GENSET").
                 setInsertable().
                 setMandatory().
                 setDefaultNotVisible().
                 setDynamicLOV("CON_GENSET_DATA","PROJ_NO").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGGENSET: Genset").
                 setSize(30).
                 setCustomValidation("PROJ_NO,GENSET", "GENSET_NO,GENSET_NAME");
         headblk.addField("GENSET_NO").
                 setReadOnly().
                 setDefaultNotVisible().
                 setFunction("CON_GENSET_DATA_API.GET_GENSET_NO ( :PROJ_NO,:GENSET)").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGGENSETNO: Genset No").
                 setSize(30);
         headblk.addField("GENSET_NAME").
                 setReadOnly().
                 setDefaultNotVisible().
                 setFunction("GENERAL_MACH_GROUP_API.Get_Mach_Grp_Desc (CON_GENSET_DATA_API.GET_GENSET_NO ( :PROJ_NO,:GENSET))").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGGENSETNAME: Genset Name").
                 setSize(30);
         headblk.addField("MAJOR").
                 setInsertable().
                 setMandatory().
                 setDefaultNotVisible().
                 setDynamicLOV("CON_MAJOR_DATA","PROJ_NO").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGMAHOR: Major").
                 setSize(30);
         headblk.addField("MAJOR_NAME").
                 setReadOnly().
                 setFunction("CON_MAJOR_DATA_API.GET_MAJOR_NAME ( :PROJ_NO,:MAJOR)").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGMAJORNAME: Major Name").
                 setSize(30);
         mgr.getASPField("MAJOR").setValidation("MAJOR_NAME");
 
         headblk.addField("BOOK_NO").
                 setInsertable().
                 setDefaultNotVisible().
                 setDynamicLOV("DRAWING_LIST_LOV","PROJ_NO").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGBOOKNO: Book No").
                 setSize(30);
         headblk.addField("BOOK_NAME").
                 setFunction("Drawing_List_api.Get_Volume_Desc(:PROJ_NO, :BOOK_NO)").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGBOOKNAME: Book Name").
                 setDefaultNotVisible().
                 setSize(30).
                 setReadOnly();
         mgr.getASPField("BOOK_NO").setValidation("BOOK_NAME");
         
         headblk.addField("ID").
                 setInsertable().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGID: Id").
                 setSize(200);
        
         headblk.addField("SUB_PROJ_NO").
                 setInsertable().
                 setDefaultNotVisible().
                 setDynamicLOV("CON_QUA_TREE","PROJ_NO").
                 setLOVProperty("TREE_PARE_FIELD", "PARENT_ID").
                  setLOVProperty("TREE_DISP_FIELD", "NODE_NO,NODE_NAME").
                  setLOVProperty("ORDER_BY", "NODE_NO").
                  setLabel("CONPROJCONNECTIONLISTCOSTORGSUBPROJNO: Sub Proj No").
                  setSize(30);
         
         headblk.addField("SUB_PROJ_DESC").
                 setFunction("CON_PROJ_CONSTRUCTION_MAN_API.Get_Node_Name ( :PROJ_NO,:SUB_PROJ_NO)").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGSUBPROJDESC: SUB PROJ DESC").
                 setReadOnly().
                 setSize(30);
         mgr.getASPField("SUB_PROJ_NO").setValidation("SUB_PROJ_DESC");
         //Cost Only Fields
         headblk.addField("IS_VALID").
                 setReadOnly().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGISVALID: Is Valid").
                 setCheckBox("FALSE,TRUE").
                 setSize(30);
         headblk.addField("HAS_FEEDBACK").
                 setReadOnly().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGHASFEEDBACK: Has Feedback").
                 setCheckBox("FALSE,TRUE").
                 setSize(30);
         headblk.addField("FEEDBACK_NO").
                 setReadOnly().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGFEEDBACKNO: Feedback No").
                 setHyperlink("/b2e/secured/conmaw/ConProjConnectionListCostReply.page", "PROJ_NO,FEEDBACK_NO ID").
                 setSize(30);
         headblk.addField("ESTIMATE_COST").
                 setReadOnly().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGESTIMATECOST: Estimate Cost").
                 setSize(30);
         
         headblk.addField("CREATE_PERSON").
                 setInsertable().
                 setDefaultNotVisible().
                 setDynamicLOV("PERSON_INFO").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGCREATEPERSON: Create Person").
                 setSize(30);
         headblk.addField("CREATE_PERSON_NAME").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGCREATEPERSONNAME: Create Person Name").
                 setSize(30).
                 setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
                 setReadOnly(); 
         mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
         headblk.addField("START_ORG").
                 setInsertable().
                 setDefaultNotVisible().
                 setDynamicLOV("GENERAL_ORGANIZATION_LOV", "PROJ_NO").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGSTARTORG: Start Org").
                 setSize(30);
         headblk.addField("START_ORG_NAME").
                 setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc(:START_ORG)").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGSTARTORGNAME: Start Org Name").
                 setSize(30).
                 setDefaultNotVisible().
                 setReadOnly();
         mgr.getASPField("START_ORG").setValidation("START_ORG_NAME");
         
         headblk.addField("REPLY_LIST_NO").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGREPLYLISTNO: Reply List No").
                 setSize(200);
         headblk.addField("ACTUAL_COST").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGACTUALCOST: Actual Cost").
                 setSize(200);
         headblk.addField("CONTRACT_NO").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGCONTRACTNO: Contract No").
                 setSize(30);      
         headblk.addField("CREATE_TIME","Date").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGCREATETIME: Create Time").
                 setSize(30);
         headblk.addField("IS_REPLY").
                 setInsertable().
                 setDefaultNotVisible().
                 setCheckBox("0,1").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGISREPLY: Is Reply").
                 setSize(30);
         headblk.addField("SEND_TO").
                 setMandatory().
                 setDefaultNotVisible().
                 setInsertable().
                 setDynamicLOV("GENERAL_ORGANIZATION_LOV", "PROJ_NO").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGSENDTO: Send To").
                 setSize(30);
         headblk.addField("SEND_TO_NAME").
                 setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc( :SEND_TO)").
                 setReadOnly().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGSENDTONAME: Send To Name").
                 setSize(30);
         mgr.getASPField("SEND_TO").setValidation("SEND_TO_NAME");
         headblk.addField("COPY_TO").
                 setMandatory().
                 setDefaultNotVisible().
                 setInsertable().
                 setDynamicLOV("GENERAL_ORGANIZATION_LOV", "PROJ_NO").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGCOPYTO: Copy To").
                 setSize(30);
         headblk.addField("COPY_TO_NAME").
                 setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc(:COPY_TO)").
                 setReadOnly().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGCOPYTONAME: Copy To Name").
                 setSize(30);
         mgr.getASPField("COPY_TO").setValidation("COPY_TO_NAME");
         headblk.addField("STATUS").
                 setHidden().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGSTATUS: Status").
                 setSize(30);
         headblk.addField("STATUS_DESC").
                 setReadOnly().
                 setFunction("FLOW_STATUS_API.Get_Status_Desc (:STATUS)").
                 setLabel("CONPROJCONNECTIONLISTCOSTORGSTATUSDESC: Status Desc").
                 setSize(30);
         headblk.addField("CAUSE").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGCAUSE: Cause").
                 setSize(130).
                 setHeight(5);
         headblk.addField("NOTE").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGNOTE: Note").
                 setSize(130).
                 setHeight(5);

         headblk.addField("CONTENT").
                 setInsertable().
                 setDefaultNotVisible().
                 setLabel("CONPROJCONNECTIONLISTCOSTORGCONTENT: Content").
                 setSize(130).
                 setHeight(5);
         headblk.addField("FLOW_TITLE").
                 setWfProperties().
                 setReadOnly().
                 setHidden().
                 setFunction("LIST_NAME").
                 setLabel("FLOWTITLE: Flow Title");
         
         headblk.addField("TYPE_ID").setFunction("''").setHidden();
         headblk.addField("CON_LIST_TYPE_DB").setHidden();
         
         headblk.setView("CON_PROJ_CONNECTION_LIST");
         headblk.defineCommand("CON_PROJ_CONNECTION_LIST_API","New__,Modify__,Remove__");
         headset = headblk.getASPRowSet();
         headbar = mgr.newASPCommandBar(headblk);
         headbar.addCustomCommand("printReport", "CONPROJCONNECTIONLISTCOSTORGREPORT: Print Proj Connection List Cost Org Report...");
         headbar.addCustomCommand("setInvalid", "CONPROJCONNECTIONLISTSETINVALID: Set Invalid");
         headbar.addCommandValidConditions("setInvalid", "IS_VALID", "Disable", "FALSE");
         headbar.addCommandValidConditions("setInvalid", "STATUS", "Disable", "2");
         headtbl = mgr.newASPTable(headblk);
         headtbl.setTitle("CONPROJCONNECTIONLISTTBLHEAD: Con Proj Connection List Cost");
         headtbl.enableRowSelect();
         headtbl.setWrap();
         headlay = headblk.getASPBlockLayout();
         headlay.setSimple("CONTRACT_NAME");
         headlay.setSimple("BOOK_NAME");
         
         headlay.setSimple("CREATE_PERSON_NAME");
         headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
         headlay.setSimple("SUB_PROJ_DESC");
         headlay.setSimple("SEND_TO_NAME");
         headlay.setSimple("COPY_TO_NAME");
         headlay.setSimple("START_ORG_NAME");
         headlay.setSimple("GENSET_NO");
         headlay.setSimple("MAJOR_NAME");
         headlay.setDataSpan("NOTE", 5);
         headlay.setDataSpan("CAUSE", 5);
         headlay.setDataSpan("STATUS_DESC", 5);
         headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
    


         con_connection_list_line_blk = mgr.newASPBlock("ITEM1");
         con_connection_list_line_blk.addField("ITEM0_OBJID").
                                      setHidden().
                                      setDbName("OBJID");
         con_connection_list_line_blk.addField("ITEM0_OBJVERSION").
                                      setHidden().
                                      setDbName("OBJVERSION");
         con_connection_list_line_blk.addField("ITEM0_PROJ_NO").
                                      setDbName("PROJ_NO").                           
                                      setInsertable().
                                      setHidden().
                                      setLabel("CONCONNECTIONLISTLINEITEM0PROJNO: Proj No").
                                      setSize(50);
         con_connection_list_line_blk.addField("ITEM0_CONTRACT_ID").
                                      setDbName("CONTRACT_ID").
                                      setInsertable().
                                      setHidden().
                                      setLabel("CONCONNECTIONLISTLINEITEM0CONTRACTID: Contract Id").
                                      setSize(30);
         con_connection_list_line_blk.addField("ITEM0_ID").
                                      setDbName("ID").
                                      setInsertable().
                                      setHidden().  
                                      setLabel("CONCONNECTIONLISTLINEITEM0ID: Id").
                                      setSize(200);
         con_connection_list_line_blk.addField("LINE_NO").
                                      setHidden().
                                      setDynamicLOV("PROJECT_CONTRACT_ITEM","PROJ_NO,CONTRACT_ID"). 
                                      setLabel("CONCONNECTIONLISTLINELINENO: Line No").
                                      setSize(30).
                                      setCustomValidation("PROJ_NO,CONTRACT_ID,LINE_NO", "JOB_LIST_CONTENT,UNIT,PRICE,BUDGET_LINE_NO,BUDGET_NAME,BUDGET_AMOUNT,CONTRACT_SIGN_AMOUNT");
         con_connection_list_line_blk.addField("JOB_LIST_CONTENT").
                                      setInsertable().
                                      setMandatory().
                                      setLabel("CONCONNECTIONLISTLINEJOBLISTCONTENT: Job List Content").
                                      setSize(30);
         con_connection_list_line_blk.addField("UNIT").
                                      setInsertable().
                                      setLabel("CONCONNECTIONLISTLINEUNIT: Unit").
                                      setSize(30);
         con_connection_list_line_blk.addField("QUANTITIES","Number","#0.00").
                                      setInsertable().
                                      setMandatory().
                                      setLabel("CONCONNECTIONLISTLINEQUANTITIES: Quantities").
                                      setSize(30);
         con_connection_list_line_blk.addField("PRICE","Money","#0.00").
                                      setHidden().
                                      setLabel("CONCONNECTIONLISTLINEPRICE: Price").
                                      setCustomValidation("PRICE,QUANTITIES","COST_ESTIMATE").
                                      setSize(30);      
         con_connection_list_line_blk.addField("COST_ESTIMATE","Money","#0.00").
                                      setInsertable().
                                      setMandatory().
                                      setLabel("CONCONNECTIONLISTLINECOSTESTIMATE: Cost Estimate").
                                      setSize(30);
         con_connection_list_line_blk.addField("BUDGET_NO").
                                      setInsertable().
                                      setFunction("PROJECT_CONTRACT_ITEM_API.Get_Budget_No (:PROJ_NO , :CONTRACT_ID , :JOB_LIST_CONTENT)").
                                      setLabel("CONCONNECTIONLISTLINEBUDGETNO: Budget No 2").
                                      setSize(30);
         con_connection_list_line_blk.addField("BUDGET_LINE_NO").
                                      setHidden().
                                      setDynamicLOV("PROJECT_BUDGET_LINE").
                                      setCustomValidation("PROJ_NO,BUDGET_LINE_NO", "BUDGET_NAME").
                                      setLabel("CONCONNECTIONLISTLINEBUDGETLINENO: Budget No").
                                      setSize(30);
         con_connection_list_line_blk.addField("BUDGET_NAME").
                                      setHidden().
                                      setFunction("PROJECT_BUDGET_LINE_API.Get_Budget_Name (:PROJ_NO , :BUDGET_LINE_NO)").
                                      setLabel("CONCONNECTIONLISTLINEBUDGETNAME: Budget Name").
                                      setSize(30);
         con_connection_list_line_blk.addField("BUDGET_AMOUNT").
                                      setHidden().
                                      setFunction("PROJECT_BUDGET_LINE_API.Get_Amount (:PROJ_NO,PROJECT_CONTRACT_ITEM_API.Get_Budget_No (:PROJ_NO , :CONTRACT_ID , :JOB_LIST_CONTENT),PROJECT_CONTRACT_ITEM_API.Get_Budget_Line_No (:PROJ_NO ,:CONTRACT_ID ,:JOB_LIST_CONTENT))").
                                      setLabel("CONCONNECTIONLISTLINEBUDGETAMOUNT: Budget Amount ").
                                      setSize(30);
         con_connection_list_line_blk.addField("CONTRACT_SIGN_AMOUNT").
                                      setReadOnly().
                                      setFunction("PROJECT_CONTRACT_API.Cal_Ori_Contract_Total(:PROJ_NO, :CONTRACT_ID)").
                                      setLabel("CONCONNECTIONLISTLINECONTRACTSIGNAMOUNT: Contract Sign Amount").
                                      setSize(30);
         con_connection_list_line_blk.addField("ITEM_NO").
                                      setInsertable().
                                      setLabel("CONCONNECTIONLISTLINEITEMNO: No").
                                      setSize(30);
         con_connection_list_line_blk.setView("CON_CONNECTION_LIST_LINE");
         con_connection_list_line_blk.defineCommand("CON_CONNECTION_LIST_LINE_API","New__,Modify__,Remove__");
         con_connection_list_line_blk.setMasterBlock(headblk);
         con_connection_list_line_set = con_connection_list_line_blk.getASPRowSet();
         con_connection_list_line_bar = mgr.newASPCommandBar(con_connection_list_line_blk);
         con_connection_list_line_bar.defineCommand(con_connection_list_line_bar.OKFIND, "okFindITEM1");
         con_connection_list_line_bar.defineCommand(con_connection_list_line_bar.NEWROW, "newRowITEM1");
         con_connection_list_line_tbl = mgr.newASPTable(con_connection_list_line_blk);
         con_connection_list_line_tbl.setTitle("CONCONNECTIONLISTLINEITEMHEAD1: ConConnectionListLine");
         con_connection_list_line_tbl.enableRowSelect();
         con_connection_list_line_tbl.setWrap();
         con_connection_list_line_lay = con_connection_list_line_blk.getASPBlockLayout();
         con_connection_list_line_lay.setDefaultLayoutMode(con_connection_list_line_lay.MULTIROW_LAYOUT);

      }

      
    //Report  Function
      public void  printReport() throws FndException, UnsupportedEncodingException//TODO
      {
       ASPManager mgr = getASPManager();
       ASPConfig cfg = getASPConfig();
       String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
       if (headlay.isMultirowLayout())
          headset.goTo(headset.getRowSelected());
       if (headset.countRows()>0 )
             {   
                String proj_no = headset.getValue("PROJ_NO");
                String id = headset.getValue("ID");
                 appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=RptConProjConnectionListCostOrg.raq&proj_no="+proj_no+"&id="+id
                   + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
            }
      }

      public void setInvalid(){
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPCommand cmd;
         cmd = trans.addCustomCommand("PROJ_NO,ID","CON_PROJ_CONNECTION_LIST_API.SET_INVALID");
         cmd.setParameter("PROJ_NO", headset.getValue("PROJ_NO"));
         cmd.setParameter("ID", headset.getValue("ID"));
         trans = mgr.perform(trans);
         cmd.clear();
         okFind();
      }

      public void  adjust() throws FndException
      {
         // fill function body
         ASPManager mgr = getASPManager();
         super.adjust();
         mgr.getASPField("ID").setHidden();
         mgr.getASPField("ACTUAL_COST").setHidden();
         mgr.getASPField("REPLY_LIST_NO").setHidden();
         mgr.getASPField("IS_REPLY").setHidden();
         mgr.getASPField("CONTENT").setHidden();
         mgr.getASPField("CONTRACT_NO").setHidden();
         mgr.getASPField("ITEM0_PROJ_NO").setHidden();
         mgr.getASPField("ITEM0_ID").setHidden();
         mgr.getASPField("ITEM_NO").setHidden();
         mgr.getASPField("ITEM0_CONTRACT_ID").setHidden();
         mgr.getASPField("BUDGET_NO").setHidden();
         mgr.getASPField("CONTRACT_SIGN_AMOUNT").setHidden();
         if(headset.countRows() > 0 && headlay.isMultirowLayout()){
            headbar.disableCommand("setInvalid");
         }
         
      }

      //-----------------------------------------------------------------------------
      //------------------------  Presentation functions  ---------------------------
      //-----------------------------------------------------------------------------
      public void validate() {
         // TODO Auto-generated method stub
         ASPManager mgr = getASPManager();
         ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
         ASPCommand cmd;
         ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
         ASPCommand cmd1;
         String val = mgr.readValue("VALIDATE");
         String txt = "";
         String PERSONMAE = "";
         String STARTORG = "";
         String STARTORGNAME = "";
         String PRICE = "";
         String BUDGETNO = "";
         String BUDGETLINENO = "";
         String BUDGETNAME = "";
         String UNIT = "";
         String BUDGETAMOUNT = "";
         String CONTRACTSIGNAMOUNT = "";
         String JOBLISTCONTENT = "";
         String contract_name="";
         String send_to="";
         String copy_to="";
         String send_to_name="";
         String copy_to_name="";
         String genset_no = "";
         String genset_name = "";
         float tempValue = 0;
         
         
         if ("LINE_NO".equals(val)) {
            
            String PROJ_NO_ITEM = mgr.readValue("PROJ_NO");
            String CONTRACT_ID_ITEM = mgr.readValue("CONTRACT_ID");
            
            cmd = trans.addCustomFunction("GETJOBLISTCONTENT", 
                  "PROJECT_CONTRACT_ITEM_API.Get_Item_Desc", "JOB_LIST_CONTENT");
            cmd.addParameter("ITEM0_PROJ_NO",PROJ_NO_ITEM);
            cmd.addParameter("ITEM0_CONTRACT_ID",CONTRACT_ID_ITEM);
            cmd.addParameter("LINE_NO");
            
            cmd = trans.addCustomFunction("GETPRICE", 
                  "PROJECT_CONTRACT_ITEM_API.GET_PRICE", "PRICE");
            cmd.addParameter("ITEM0_PROJ_NO",PROJ_NO_ITEM);
            cmd.addParameter("ITEM0_CONTRACT_ID",CONTRACT_ID_ITEM);
            cmd.addParameter("LINE_NO");
            
            cmd = trans.addCustomFunction("GETBUDGETNO", 
                  "PROJECT_CONTRACT_ITEM_API.Get_Budget_No", "BUDGET_NO");
            cmd.addParameter("ITEM0_PROJ_NO",PROJ_NO_ITEM);
            cmd.addParameter("ITEM0_CONTRACT_ID",CONTRACT_ID_ITEM);
            cmd.addParameter("LINE_NO");
            
            cmd = trans.addCustomFunction("GETBUDGETLINENO", 
                   "PROJECT_CONTRACT_ITEM_API.Get_Budget_Line_No", "BUDGET_LINE_NO");
            cmd.addParameter("ITEM0_PROJ_NO",PROJ_NO_ITEM);
            cmd.addParameter("ITEM0_CONTRACT_ID",CONTRACT_ID_ITEM);
            cmd.addParameter("LINE_NO");
            
            cmd = trans.addCustomFunction("GETCONTRACTSIGNAMOUNT", 
                  "PROJECT_CONTRACT_API.Cal_Ori_Contract_Total", "CONTRACT_SIGN_AMOUNT");
            cmd.addParameter("ITEM0_PROJ_NO",PROJ_NO_ITEM);
            cmd.addParameter("ITEM0_CONTRACT_ID",CONTRACT_ID_ITEM);
            
            trans = mgr.validate(trans);   
            
            JOBLISTCONTENT = trans.getValue("GETJOBLISTCONTENT/DATA/JOB_LIST_CONTENT");
            PRICE = trans.getValue("GETPRICE/DATA/PRICE");
            BUDGETNO = trans.getValue("GETBUDGETNO/DATA/BUDGET_NO");
            BUDGETLINENO = trans.getValue("GETBUDGETLINENO/DATA/BUDGET_LINE_NO");
            CONTRACTSIGNAMOUNT = trans.getValue("GETCONTRACTSIGNAMOUNT/DATA/CONTRACT_SIGN_AMOUNT");
            
            cmd1 = trans1.addCustomFunction("GETUNIT", 
                  "PROJECT_BUDGET_LINE_API.Get_Unit_Code", "UNIT");
            cmd1.addParameter("ITEM0_PROJ_NO",PROJ_NO_ITEM);    
            cmd1.addParameter("BUDGET_NO",BUDGETNO);
            cmd1.addParameter("BUDGET_LINE_NO",BUDGETLINENO);
            
            cmd1 = trans1.addCustomFunction("GETBUDGETNAME",      
                  "PROJECT_BUDGET_LINE_API.Get_Budget_Name", "BUDGET_NAME");
            cmd1.addParameter("ITEM0_PROJ_NO",PROJ_NO_ITEM);
            cmd1.addParameter("BUDGET_NO",BUDGETNO);  
            cmd1.addParameter("BUDGET_LINE_NO",BUDGETLINENO);
            
            cmd1 = trans1.addCustomFunction("GETBUDGETAMOUNT", 
                  "PROJECT_BUDGET_LINE_API.Get_Amount", "BUDGET_AMOUNT");
            cmd1.addParameter("ITEM0_PROJ_NO",PROJ_NO_ITEM);
            cmd1.addParameter("BUDGET_NO",BUDGETNO);
            cmd1.addParameter("BUDGET_LINE_NO",BUDGETLINENO);               
            

            trans1 = mgr.validate(trans1);    
           
            UNIT = trans1.getValue("GETUNIT/DATA/UNIT");
            BUDGETNAME = trans1.getValue("GETBUDGETNAME/DATA/BUDGET_NAME");
            BUDGETAMOUNT = trans1.getValue("GETBUDGETAMOUNT/DATA/BUDGET_AMOUNT");

            txt = ((mgr.isEmpty(JOBLISTCONTENT)) ? "" : JOBLISTCONTENT )+ "^"
                  +((mgr.isEmpty(UNIT)) ? "" : UNIT )+ "^"
                  +((mgr.isEmpty(PRICE)) ? "" : PRICE )+ "^" 
                  + ((mgr.isEmpty(BUDGETLINENO)) ? "" : BUDGETLINENO )+ "^"
                  + ((mgr.isEmpty(BUDGETNAME)) ? "" : BUDGETNAME )+ "^" 
                  + ((mgr.isEmpty(BUDGETAMOUNT)) ? "" : BUDGETAMOUNT )+ "^"
                  + ((mgr.isEmpty(CONTRACTSIGNAMOUNT)) ? "" : CONTRACTSIGNAMOUNT + "^");
            
            mgr.responseWrite(txt);
         }
         else if ("QUANTITIES".equals(val)) {         
            tempValue = ((mgr.readValue("QUANTITIES")==null)?0:Float.parseFloat(mgr.readValue("QUANTITIES")))*((mgr.readValue("PRICE")==null)?0:Float.parseFloat(mgr.readValue("PRICE")));
            mgr.responseWrite(String.valueOf(tempValue)+"^");
         }
         else if ("PRICE".equals(val)) {         
            tempValue = ((mgr.readValue("PRICE")==null)?0:Float.parseFloat(mgr.readValue("PRICE")))*((mgr.readValue("QUANTITIES")==null)?0:Float.parseFloat(mgr.readValue("QUANTITIES")));
            mgr.responseWrite(String.valueOf(tempValue)+"^");
         }
         else if ("CONTRACT_ID".equals(val)) {
            
            cmd = trans.addCustomFunction("GETCONTRACTNAME", 
                  "PROJECT_CONTRACT_API.Get_Contract_Desc", "CONTRACT_NAME");
            cmd.addParameter("PROJ_NO,CONTRACT_ID");
            
            cmd = trans.addCustomFunction("GETSENDTO", 
                  "GENERAL_ORGANIZATION_API.GET_ORG_NO", "SEND_TO");
            cmd.addParameter("PROJ_NO,CONTRACT_ID");
            
            cmd = trans.addCustomFunction("GETCOPYTO", 
                  "GENERAL_ORGANIZATION_API.GET_ORG_NO", "COPY_TO");
            cmd.addParameter("PROJ_NO");
            cmd.addParameter("CONTRACT_ID");
            cmd.addParameter("TYPE_ID","1");
            
            
            trans = mgr.validate(trans);   
            
            contract_name = trans.getValue("GETCONTRACTNAME/DATA/CONTRACT_NAME");
            send_to = trans.getValue("GETSENDTO/DATA/SEND_TO");
            copy_to = trans.getValue("GETCOPYTO/DATA/COPY_TO");
            
            cmd1 = trans1.addCustomFunction("GETSENDTONAME", 
                  "GENERAL_ORGANIZATION_API.GET_ORG_DESC", "SEND_TO_NAME");
            cmd1.addParameter("SEND_TO",send_to);
            
            cmd1 = trans1.addCustomFunction("GETCOPYTONAME", 
                  "GENERAL_ORGANIZATION_API.GET_ORG_DESC", "COPY_TO_NAME");
            cmd1.addParameter("COPY_TO",copy_to);
            
            trans1 = mgr.validate(trans1);  
            
            send_to_name = trans1.getValue("GETSENDTONAME/DATA/SEND_TO_NAME");
            copy_to_name = trans1.getValue("GETCOPYTONAME/DATA/COPY_TO_NAME");
            
            txt = ((mgr.isEmpty(contract_name)) ? "" : contract_name )+ "^"
               +  ((mgr.isEmpty(send_to)) ? "" : send_to )+ "^"
               +  ((mgr.isEmpty(copy_to)) ? "" : copy_to )+ "^"
               +  ((mgr.isEmpty(send_to_name)) ? "" : send_to_name )+ "^"
               +  ((mgr.isEmpty(copy_to_name)) ? "" : copy_to_name )+ "^";
            
            mgr.responseWrite(txt);
         }else if("GENSET".equals(val)){
            cmd = trans.addCustomFunction("GET_GENSET_NO", 
                  "CON_GENSET_DATA_API.GET_GENSET_NO", "GENSET_NO");
            cmd.addParameter("PROJ_NO,GENSET");
            trans = mgr.validate(trans);
            genset_no = trans.getValue("GET_GENSET_NO/DATA/GENSET_NO");
            
            cmd1 = trans1.addCustomFunction("GET_GENSET_NAME", 
                  "GENERAL_MACH_GROUP_API.GET_MACH_GRP_DESC", "GENSET_NAME");
            cmd1.addParameter("GENSET_NO",genset_no);
            trans1 = mgr.validate(trans1);
            genset_name = trans1.getValue("GET_GENSET_NAME/DATA/GENSET_NAME");

            txt = ((mgr.isEmpty(genset_no)) ? "" : genset_no )+ "^" 
            +((mgr.isEmpty(genset_name)) ? "" : genset_name )+ "^";
            
            mgr.responseWrite(txt);
         }
         mgr.endResponse();
         
      }

      
      protected String getDescription()
      {
         return "CONPROJCONNECTIONLISTCOSTORGDESC: Con Proj Connection List Cost Org";
      }


      protected String getTitle()
      {
         return getDescription();
      }


      protected void printContents() throws FndException
      {
         ASPManager mgr = getASPManager();
         if (headlay.isVisible())
             appendToHTML(headlay.show());
         else 
         {
            headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
            appendToHTML(headlay.show());
         }  
         if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
         {
            appendToHTML(con_connection_list_line_lay.show());
         }
      }
      
      protected ASPBlock getBizWfBlock()
      {
         return headblk;      
      }
   }
