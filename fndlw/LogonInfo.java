/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.fndlw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;

import com.horizon.db.Access;
import com.horizon.util.DateUtil;

import ifs.docmaw.DocmawConstants;
import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.util.Str;
import ifs.fnd.*;
import ifs.genbaw.GenbawConstants;
import ifs.hzwflw.util.URL;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class LogonInfo extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.fndlw.LogonInfo");
   private final String Default_Identifier = "system";
   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;
   
   
   private ASPTransactionBuffer trans;
   private ASPCommand           cmd;
   private ASPQuery             q;
   private ASPBuffer            data;
   private ASPBuffer            keys;
   private ASPBuffer            transferBuffer;
   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  LogonInfo (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();
      trans =mgr.newASPTransactionBuffer();
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("INFO_ID")) )
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("LOGONINFONODATA: No data found.");
         headset.clear();
      }
      
      
      
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","LOGON_INFO_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("INFO_ID").
      setMandatory().
      setInsertable().
      setLabel("LOGONINFOINFOID: Info Id").
      setSize(50).
      setHidden();
      headblk.addField("INFO_TITLE").
      setInsertable().
      setMandatory().
      setLabel("LOGONINFOINFOTITLE: Info Title").
      setSize(100);
      headblk.addField("INFO_DOC_ADDRESS").
      setClientFunc(" style=\"ime-mode:disabled\" onkeypress=\"event.returnValue = false;\" onpaste=\"return false;\" ").
      setInsertable().
      setLOV("AttachUpload.page",700,400).
      setLabel("LOGONINFOINFODOCADDRESS: Info Doc Address").
      setSize(40);
      headblk.addField("INFO_DOC_NAME").
      setLabel("LOGONINFOINFODOCNAME: Info Doc Name").setReadOnly().
      setSize(40);
      headblk.addField("INFO_DATE","Datetime").
      setInsertable().
      setLabel("LOGONINFOINFODATE: Info Date").
      setSize(25);
      headblk.addField("INFO_OWNER").
      setInsertable().
      setLabel("LOGONINFOINFOOWNER: Info Owner").
      setSize(20);
      headblk.addField("INFO_COLOR").
      setInsertable().
      setCheckBox("FALSE,TRUE").
      setLabel("LOGONINFOINFOCOLOR: Info Color").
      setSize(20);
      headblk.addField("INFO_VISIBLE").
      setInsertable().
      setLabel("LOGONINFOINFOVISIBLE: Info Visible").
      setCheckBox("FALSE,TRUE").
      setSize(20);
      headblk.addField("INFO_TYPE").
      enumerateValues("Logon_Info_Type_API"). 
      setSelectBox().
      setInsertable().
      setMandatory().
      setLabel("LOGONINFOINFOTYPE: Info Type").
      setSize(20);
      headblk.addField("INFO_CONTENT").
      setInsertable().
      setLabel("LOGONINFOINFOCONTENT: Info Content").
      setHeight(30).
      setSize(100);
      headblk.setView("LOGON_INFO");
      headblk.defineCommand("LOGON_INFO_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.defineCommand(headbar.SAVERETURN,"saveReturn");
      headbar.defineCommand(headbar.SAVENEW,"saveNew");
      headbar.addCustomCommand("preview", mgr.translate("LOGONINFOINFOPREVIEW: Preview"));
      headbar.removeFromMultirowAction("preview");
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("LOGONINFOTBLHEAD: Logon Infos");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDataSpan("INFO_TITLE", 5);
      headlay.setDataSpan("INFO_CONTENT", 5);
      headlay.setDataSpan("INFO_TYPE", 5);
      headlay.setSimple("INFO_DOC_NAME");
      headlay.setDataSpan("INFO_DOC_ADDRESS", 5);
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
   }

   
   public void preview() throws FndException{
	   ASPManager mgr = getASPManager();
	   String url = "/b2e/unsecured/common/scripts/Logon.page?__ID=156259&commandFlag=logonNewsDetail&";//
	    URL targetUrl = new URL(url);
	    String tempInfoId = headset.getValue("INFO_ID");
	    targetUrl.addParameters("infoId", tempInfoId);
		appendDirtyJavaScript(" var h=screen.availHeight-35;\n");
		appendDirtyJavaScript(" var w=screen.availWidth-15;\n");
		appendDirtyJavaScript(" var vars=\"top=0,left=0,height=\"+h+\",width=\"+w+\",status=no,toolbar=no,menubar=no,location=no,resizable=1,scrollbars=1\";\n");
		appendDirtyJavaScript(" window.open(\"" + mgr.encodeStringForJavascript(targetUrl.toString()) + "\",\"\",vars);\n");
   }
   
   
   public void  saveReturn()
   {
      saveNewRecord("__SAVERETURN");
   }
   
   
   public void  saveNew()
   {
      saveNewRecord("saveNew");
   }
   
	public void saveNewRecord(String finalAction) {
		ASPManager mgr = getASPManager();
		String doNo = "";
		String sAttr = "";
		String sLanguageCode = "";
		String sFormatSize = "";
		String sTitleRev = "";
		int currrow = headset.getCurrentRowNo();

		headset.changeRow();
		String tempInfoId = "";
		String tempInfoTitle = "";
		String tempInfoDocAddress = "";
		Date tempInfoDate = new Date();
		String tempInfoOwner = "";
		String tempInfoColor = "";
		String tempInfoVisible = "";
		String tempInfoType = "";
		String infoDocName = "";
		String tempInfoContent = "";

		data = headset.getRow();
		tempInfoId = headset.getValue("INFO_ID");// to_char(sysdate,'YYYY-MM-DD-HH24.MI.SS')
		tempInfoTitle = headset.getValue("INFO_TITLE");
		tempInfoDocAddress = headset.getValue("INFO_DOC_ADDRESS");
		tempInfoDate = headset.getDateValue("INFO_DATE") == null ? new Date()
				: headset.getDateValue("INFO_DATE");
		tempInfoOwner = headset.getValue("INFO_OWNER");
		tempInfoColor = headset.getValue("INFO_COLOR");
		tempInfoVisible = headset.getValue("INFO_VISIBLE");
		tempInfoType = headset.getValue("INFO_TYPE");

		trans.clear();

		// Decode view copy
		cmd = trans.addCustomFunction("INFOTYPEDECODE",
				"Logon_Info_Type_API.Encode", "INFO_TYPE");
		cmd.addParameter("INFO_TYPE", tempInfoType);
		trans = mgr.validate(trans);
		String infoTypeDecode = trans.getValue("INFOTYPEDECODE/DATA/INFO_TYPE");

		infoDocName = headset.getValue("INFO_DOC_NAME");
		tempInfoContent = headset.getValue("INFO_CONTENT");

		System.out.println("++" + tempInfoContent.length());
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String mDateTime = formatter.format(tempInfoDate);

		LinkedHashMap mapSqlParameters = new LinkedHashMap();
		StringBuffer sql = new StringBuffer();
		List lstConditions = null;
		if ("New__".equals(headset.getRowStatus())) {
			String newInfoId = formatter.format(new Date());
			headset.setValue("INFO_ID", newInfoId);
			headset.store();
			sql.append(" insert into LOGON_INFO_TAB (INFO_ID, INFO_TITLE, INFO_DOC_ADDRESS, INFO_DATE, INFO_OWNER, INFO_COLOR, INFO_VISIBLE, INFO_TYPE,  INFO_DOC_NAME, INFO_CONTENT, ROWVERSION)");
			sql.append(" values (?,?,?,to_date(?,'YYYY-MM-DD HH24.MI.SS'),?,?,?,?,?,?,sysdate)");
			lstConditions = new ArrayList(11);
			lstConditions.add(newInfoId);
			lstConditions.add(tempInfoTitle);
			lstConditions.add(tempInfoDocAddress);
			lstConditions.add(mDateTime);// //
			lstConditions.add(tempInfoOwner);
			lstConditions.add(tempInfoColor);
			lstConditions.add(tempInfoVisible);
			lstConditions.add(infoTypeDecode);
			lstConditions.add(infoDocName);
			lstConditions.add(tempInfoContent);
			System.out.println("flowvarset: sql: " + sql);
			mapSqlParameters.put(sql.toString(), lstConditions);
		} else {
			sql.append(" update LOGON_INFO_TAB set INFO_TITLE=?, INFO_DOC_ADDRESS=?, INFO_DATE=to_date(?,'YYYY-MM-DD HH24.MI.SS'), INFO_OWNER=?, INFO_COLOR=?, INFO_VISIBLE=?, INFO_TYPE=?,  INFO_DOC_NAME=?, INFO_CONTENT=?, ROWVERSION=sysdate ");
			sql.append(" where  info_id=? ");
			lstConditions = new ArrayList(11);
			lstConditions.add(tempInfoTitle);
			lstConditions.add(tempInfoDocAddress);
			lstConditions.add(mDateTime);// //
			lstConditions.add(tempInfoOwner);
			lstConditions.add(tempInfoColor);
			lstConditions.add(tempInfoVisible);
			lstConditions.add(infoTypeDecode);
			lstConditions.add(infoDocName);
			lstConditions.add(tempInfoContent);
			lstConditions.add(tempInfoId);
			System.out.println("flowvarset: sql: " + sql);
			mapSqlParameters.put(sql.toString(), lstConditions);
		}
		Access.executeMultiUpdate(mapSqlParameters, Default_Identifier);
		
	}

   public void  adjust()
   {
      ASPManager mgr = getASPManager();
      // fill function body
      if(headlay.isMultirowLayout()){
         mgr.getASPField("INFO_CONTENT").setHidden();
      }
      
      if(headset.countRows() > 0){
    	  if(!headlay.isSingleLayout()){
    		  headbar.removeCustomCommand("preview");
    	  }
      }
      if(headlay.isFindLayout()){
    	  mgr.getASPField("INFO_CONTENT").setHidden();
      }
	  if(headlay.isSingleLayout() || headlay.isEditLayout()){
		  String infoId = headset.getValue("INFO_ID");
	      String sql = "select t.info_content from logon_info_tab t where t.info_id= ? ";
	      List conditionList = new ArrayList(2);
	      conditionList.add(infoId);
	      ArrayList countList = (ArrayList)Access.getSingleList(sql, conditionList);
		  
		  String tempInfoContents = (String) countList.get(0);;
		  headset.setValue("INFO_CONTENT", tempInfoContents);
	  }
      
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "LOGONINFODESC: Logon Info";
   }


   protected String getTitle()
   {
      return "LOGONINFOTITLE: Logon Info";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());

   }
}
