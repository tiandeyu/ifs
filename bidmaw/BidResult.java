/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.bidmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class BidResult extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.bidmaw.BidResult");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock bid_person_list_info_blk;
   private ASPRowSet bid_person_list_info_set;
   private ASPCommandBar bid_person_list_info_bar;
   private ASPTable bid_person_list_info_tbl;
   private ASPBlockLayout bid_person_list_info_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  BidResult (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("BID_RESULT_NO")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")) )
         validate();
      else
         okFind();
      adjust();
   }
   public void validate()
   {
       ASPManager mgr = getASPManager();
       ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
       ASPCommand cmd;
       String val = mgr.readValue("VALIDATE");    
       String txt="";
       String createBidName="";
       String budgetPrice="";
       if("CRE_ID".equals(val)){
          cmd = trans.addCustomFunction("GETCREATEBIDNAME", 
                "BID_CRE_PROJ_APPLY_API.GET_CREATE_BID_NAME", "CREATE_BID_NAME");
          cmd.addParameter("PROJ_NO,CRE_ID");
          
          cmd = trans.addCustomFunction("GETBUDGETPRICE", 
                "BID_CRE_PROJ_APPLY_API.GET_FEE", "BUDGET_PRICE");
          cmd.addParameter("PROJ_NO,CRE_ID");
          trans = mgr.validate(trans);
          
          createBidName = trans.getValue("GETCREATEBIDNAME/DATA/CREATE_BID_NAME");
          budgetPrice = trans.getValue("GETBUDGETPRICE/DATA/BUDGET_PRICE");
          
          txt = ((mgr.isEmpty(createBidName)) ? "" : createBidName )+"^" + 
          ((mgr.isEmpty(budgetPrice)) ? "" : budgetPrice )+ "^";
    
          mgr.responseWrite(txt);
       }
       mgr.endResponse();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("BIDRESULTNODATA: No data found.");
         headset.clear();
      }
      eval( bid_person_list_info_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","BID_RESULT_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(bid_person_list_info_blk);
      q.addWhereCondition("BID_RESULT_NO = ?");
      q.addParameter("BID_RESULT_NO", headset.getValue("BID_RESULT_NO"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,bid_person_list_info_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","BID_PERSON_LIST_INFO_API.New__",bid_person_list_info_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_BID_RESULT_NO", headset.getValue("BID_RESULT_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      bid_person_list_info_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      
      headblk.addField("PROJ_NO").
              setInsertable().
              setDefaultNotVisible().
              setDynamicLOV("General_Project").
              setLabel("BIDRESULTPROJNO: Proj No").
              setSize(30);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("BIDPLANGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(30).
              setReadOnly();
      mgr.getASPField("PROJ_NO").setValidateFunction("GENERAL_PROJECT_PROJ_DESC");
      headblk.addField("CRE_ID").
              setInsertable().
              setDefaultNotVisible().
              setDynamicLOV("BID_CRE_PROJ_APPLY_LOV","PROJ_NO").
              setLabel("BIDRESULTCREID: Cre Id").
              setCustomValidation("PROJ_NO,CRE_ID", "CREATE_BID_NAME,BUDGET_PRICE").
              setSize(30);
      headblk.addField("CREATE_BID_NAME").
              setReadOnly().
              setFunction("BID_CRE_PROJ_APPLY_API.GET_CREATE_BID_NAME ( :PROJ_NO,:CRE_ID)").
              setLabel("BIDPLANLINECREATEBIDNAME: Create Bid Name").
              setSize(30);
      
      headblk.addField("BID_RESULT_NO").
              //setMandatory().
              setInsertable().
              setDefaultNotVisible().
              setLabel("BIDRESULTBIDRESULTNO: Bid Result No").
              setSize(30);
      
      headblk.addField("BUDGET_PRICE","Number").
              setReadOnly().
              setDefaultNotVisible().
              setLabel("BIDRESULTBUDGETPRICE: Budget Price").
              setSize(30);
      headblk.addField("CREATE_DATE","Date").
              setInsertable().
              setDefaultNotVisible().
              setLabel("BIDRESULTCREATEDATE: Create Date").
              setSize(30);
      headblk.addField("CREATE_PERSON").
              setReadOnly().
              setDefaultNotVisible().
              setLabel("BIDRESULTCREATEPERSON: Create Person").
              setSize(30);
      headblk.addField("CREATE_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
              setLabel("BIDMATENQJUDGECREATEPERSONNAME: Create Person Name").
              setSize(30).
              setDefaultNotVisible().
              setReadOnly();
      headblk.addField("STATUS").
              setHidden().
              setLabel("BIDRESULTSTATUS: Status").
              setSize(30);
      headblk.addField("PREFER_BID_PERSON").
              setInsertable().
              setDefaultNotVisible().
              setLabel("BIDRESULTPREFERBIDPERSON: Prefer Bid Person").
              setSize(30);
      headblk.addField("ALTER_BID_PERSON").
              setInsertable().
              setLabel("BIDRESULTALTERBIDPERSON: Alter Bid Person").
              setSize(30);
      headblk.addField("BIDED_PERSON").
              setInsertable().
              setLabel("BIDRESULTBIDEDPERSON: Bided Person").
              setSize(30);
      headblk.addField("TOP_BID_PRICE","Number").
              setInsertable().
              setLabel("BIDRESULTTOPBIDPRICE: Top Bid Price").
              setSize(30);
      headblk.addField("NOTE").
              setInsertable().
              setDefaultNotVisible().
              setLabel("BIDRESULTNOTE: Note").
              setSize(129).
              setHeight(5);

      headblk.setView("BID_RESULT");
      headblk.defineCommand("BID_RESULT_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("BIDRESULTTBLHEAD: Bid Results");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setDataSpan("NOTE", 5);
      headlay.setDataSpan("TOP_BID_PRICE", 5);
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("CREATE_BID_NAME");
      headlay.setSimple("CREATE_PERSON_NAME");
 


      bid_person_list_info_blk = mgr.newASPBlock("ITEM1");
      bid_person_list_info_blk.addField("ITEM0_OBJID").
                               setHidden().
                               setDbName("OBJID");
      bid_person_list_info_blk.addField("ITEM0_OBJVERSION").
                               setHidden().
                               setDbName("OBJVERSION");
      bid_person_list_info_blk.addField("ITEM0_BID_RESULT_NO").
                               setDbName("BID_RESULT_NO").
                               setMandatory().
                               setInsertable().
                               setDynamicLOV("BID_RESULT").
                               setLabel("BIDPERSONLISTINFOITEM0BIDRESULTNO: Bid Result No").
                               setHidden().
                               setSize(30);
      bid_person_list_info_blk.addField("LINE_NO").
                               //setMandatory().
                               setInsertable().
                               setLabel("BIDPERSONLISTINFOLINENO: Line No").
                               setHidden().
                               setSize(30);
      bid_person_list_info_blk.addField("ORG_NAME").
                               setInsertable().
                               setLabel("BIDPERSONLISTINFOORGNAME: Org Name").
                               setSize(30);
      bid_person_list_info_blk.addField("BID_PRICE","Number").
                               setReadOnly().
                               setLabel("BIDPERSONLISTINFOBIDPRICE: Bid Price").
                               setSize(30);
      bid_person_list_info_blk.addField("ITEM0_NOTE").
                               setDbName("NOTE").
                               setInsertable().
                               setLabel("BIDPERSONLISTINFOITEM0NOTE: Note").
                               setSize(30);
      bid_person_list_info_blk.setView("BID_PERSON_LIST_INFO");
      bid_person_list_info_blk.defineCommand("BID_PERSON_LIST_INFO_API","New__,Modify__,Remove__");
      bid_person_list_info_blk.setMasterBlock(headblk);
      bid_person_list_info_set = bid_person_list_info_blk.getASPRowSet();
      bid_person_list_info_bar = mgr.newASPCommandBar(bid_person_list_info_blk);
      bid_person_list_info_bar.defineCommand(bid_person_list_info_bar.OKFIND, "okFindITEM1");
      bid_person_list_info_bar.defineCommand(bid_person_list_info_bar.NEWROW, "newRowITEM1");
      bid_person_list_info_tbl = mgr.newASPTable(bid_person_list_info_blk);
      bid_person_list_info_tbl.setTitle("BIDPERSONLISTINFOITEMHEAD1: BidPersonListInfo");
      bid_person_list_info_tbl.enableRowSelect();
      bid_person_list_info_tbl.setWrap();
      bid_person_list_info_lay = bid_person_list_info_blk.getASPBlockLayout();
      bid_person_list_info_lay.setDefaultLayoutMode(bid_person_list_info_lay.MULTIROW_LAYOUT);



   }



   public void  adjust()
   {
      // fill function body
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "BIDRESULTDESC: Bid Result";
   }


   protected String getTitle()
   {
      return "BIDRESULTTITLE: Bid Result";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
//      if (bid_person_list_info_lay.isVisible())
//          appendToHTML(bid_person_list_info_lay.show());
      else 
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }  
      if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
      {
         appendToHTML(bid_person_list_info_lay.show());
      }

   }
}
