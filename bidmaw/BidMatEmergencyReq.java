/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.bidmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class BidMatEmergencyReq extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.bidmaw.BidMatEmergencyReq");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock bid_emergency_mat_list_blk;
   private ASPRowSet bid_emergency_mat_list_set;
   private ASPCommandBar bid_emergency_mat_list_bar;
   private ASPTable bid_emergency_mat_list_tbl;
   private ASPBlockLayout bid_emergency_mat_list_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  BidMatEmergencyReq (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      ASPManager mgr = getASPManager();
      super.run();
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if(!mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")))
         validate();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("REQ_ID")) )
         okFind();
      else
         okFind();
      adjust();
   }
   
   public void validate(){
      ASPManager mgr = getASPManager();
      String val = mgr.readValue("VALIDATE");    
      float tempValue = 0;
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      String txt = "";
      String matName = "";
      String prodModle = "";
      
      if ("COUNT".equals(val)) {         
        tempValue = ((mgr.readValue("COUNT")==null)?0:Float.parseFloat(mgr.readValue("COUNT")))*
        ((mgr.readValue("BUDGET_PRICE")==null)?0:Float.parseFloat(mgr.readValue("BUDGET_PRICE")));
        mgr.responseWrite(String.valueOf(tempValue)+"^");
      }
      else if("BUDGET_PRICE".equals(val)){
        tempValue = ((mgr.readValue("COUNT")==null)?0:Float.parseFloat(mgr.readValue("COUNT")))*
        ((mgr.readValue("BUDGET_PRICE")==null)?0:Float.parseFloat(mgr.readValue("BUDGET_PRICE")));
        mgr.responseWrite(String.valueOf(tempValue)+"^");
      }
      else if ("MAT_NO".equals(val)) {
         cmd = trans.addCustomFunction("GETMATNAME", 
               "MAT_CODE_API.GET_MAT_NAME", "MAT_NAME");
         cmd.addParameter("ITEM0_PROJ_NO,MAT_NO");
         
         cmd = trans.addCustomFunction("GETPRODMODLE", 
               "MAT_CODE_API.GET_PROD_MODEL", "PROD_MODLE");
         cmd.addParameter("ITEM0_PROJ_NO,MAT_NO");
         
         trans = mgr.validate(trans);
         
         matName = trans.getValue("GETMATNAME/DATA/MAT_NAME");
         prodModle = trans.getValue("GETPRODMODLE/DATA/PROD_MODLE");

         txt = ((mgr.isEmpty(matName)) ? "" : matName )+ "^" + 
               ((mgr.isEmpty(prodModle)) ? "" : prodModle )+ "^";
         
         mgr.responseWrite(txt);
      }
      mgr.endResponse(); 
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("BIDMATEMERGENCYREQNODATA: No data found.");
         headset.clear();
      }
      else{
         okFindITEM1();
      }
      eval( bid_emergency_mat_list_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","BID_MAT_EMERGENCY_REQ_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(bid_emergency_mat_list_blk);
      q.addWhereCondition("PROJ_NO = ? AND REQ_ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("REQ_ID", headset.getValue("REQ_ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,bid_emergency_mat_list_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","BID_EMERGENCY_MAT_LIST_API.New__",bid_emergency_mat_list_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_REQ_ID", headset.getValue("REQ_ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      bid_emergency_mat_list_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setLabel("BIDMATEMERGENCYREQPROJNO: Proj No").
              setSize(30).
              setDynamicLOV("GENERAL_PROJECT");
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("CONADJUSTNOTICEGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(30).
              setReadOnly();
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      headblk.addField("REQ_ID").
              setInsertable().
              setLabel("BIDMATEMERGENCYREQEMEPURCHPLANNO: Eme Purch Plan No").
              setSize(30).
              setHidden();
//      headblk.addField("EME_PURCH_PLAN_NO").
//              setInsertable().
//              setWfProperties().      
//              setLabel("BIDMATEMERGENCYREQEMEPURCHPLANNO: Eme Purch Plan No").
//              setSize(30);
      headblk.addField("EME_PURCH_PLAN_NAME").
              setInsertable().
              setWfProperties().
              setLabel("BIDMATEMERGENCYREQEMEPURCHPLANNAME: Eme Purch Plan Name").
              setSize(30);
      headblk.addField("HANDLER").
              setReadOnly().
              setLabel("BIDMATEMERGENCYREQHANDLER: Handler").
              setSize(30);
      headblk.addField("CREATE_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :HANDLER)").
              setLabel("BIDMATENQJUDGECREATEPERSONNAME: Create Person Name").
              setSize(30).
              setReadOnly();
      headblk.addField("HANDLE_DATE","Date").
              setInsertable().
              setLabel("BIDMATEMERGENCYREQHANDLEDATE: Handle Date").
              setSize(30);
      headblk.addField("SUB_PROJECT").
              setInsertable().
              setDynamicLOV("CON_QUA_TREE","PROJ_NO").
              setLOVProperty("TREE_PARE_FIELD", "PARENT_ID").
              setLOVProperty("TREE_DISP_FIELD", "NODE_NO,NODE_NAME").
              setLabel("BIDMATEMERGENCYREQSUB_PROJECT: Sub Project").
              setSize(30);
      headblk.addField("SUB_PROJ_DESC").
              setFunction("CON_PROJ_CONSTRUCTION_MAN_API.Get_Node_Name ( :PROJ_NO,:SUB_PROJECT)").
              setLabel("CONPROJCONNECTIONLISTCOSTORGSUBPROJDESC: SUB PROJ DESC").
              setReadOnly().
              setSize(30);
      mgr.getASPField("SUB_PROJECT").setValidation("SUB_PROJ_DESC");
      headblk.addField("DEPT").
              setInsertable().
              setLabel("BIDMATEMERGENCYREQDEPT: Dept").
              setSize(30).
              setDynamicLOV("GENERAL_ORGANIZATION");
      headblk.addField("START_ORG_NAME").
              setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc(:DEPT)").
              setLabel("CONPROJCONNECTIONLISTFREENOREPLYSTARTORGNAME: Start Org Name").
              setSize(30).
              setReadOnly();
      mgr.getASPField("DEPT").setValidation("START_ORG_NAME");
      headblk.addField("BID_TYPE").
              setInsertable().
              setCheckBox("NORMAL,EMERGENCY").
              setLabel("BIDMATEMERGENCYREQBIDTYPE: Bid Type").
              setSize(30);
      headblk.addField("STATUS").
              setLabel("BIDMATEMERGENCYREQSTATUS: Status").
              setSize(30).
              setHidden();
      //Dec 10th 2014 add status's desc by natic
      headblk.addField("STATUS_DESC").
            setReadOnly().
            setFunction("FLOW_STATUS_API.Get_Status_Desc (:STATUS)").
            setLabel("BIDCREPROJAPPLYSTATUSDESC: Status Desc").
            setSize(30);
      mgr.getASPField("STATUS").setValidation("STATUS_DESC");
      //add end
      headblk.addField("PURCH_REASON").
              setInsertable().
              setLabel("BIDMATEMERGENCYREQPURCHREASON: Purch Reason").
              setSize(129).
              setHeight(5);
      headblk.addField("NOTE").
              setInsertable().
              setLabel("BIDMATEMERGENCYREQNOTE: Note").
              setSize(129).
              setHidden();
      headblk.setView("BID_MAT_EMERGENCY_REQ");
      headblk.defineCommand("BID_MAT_EMERGENCY_REQ_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("BIDMATEMERGENCYREQTBLHEAD: Bid Mat Emergency Reqs");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headbar.addCustomCommand("printReport", "BIDMATEMERGENCYREQPRINTREPORT: Print Report...");
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC"); 
      headlay.setDataSpan("PURCH_REASON", 5);
      headlay.setSimple("START_ORG_NAME");
      headlay.setSimple("SUB_PROJ_DESC");
      headlay.setSimple("CREATE_PERSON_NAME");
 


      bid_emergency_mat_list_blk = mgr.newASPBlock("ITEM1");
      bid_emergency_mat_list_blk.addField("ITEM0_OBJID").
                                 setHidden().
                                 setDbName("OBJID");
      bid_emergency_mat_list_blk.addField("ITEM0_OBJVERSION").
                                 setHidden().
                                 setDbName("OBJVERSION");
      bid_emergency_mat_list_blk.addField("ITEM0_PROJ_NO").
                                 setDbName("PROJ_NO").
                                 setMandatory().
                                 setInsertable().
                                 setLabel("BIDEMERGENCYMATLISTITEM0PROJNO: Proj No").
                                 setSize(30).setHidden();
      bid_emergency_mat_list_blk.addField("ITEM0_REQ_ID").
                                 setDbName("REQ_ID").
                                 setMandatory().
                                 setInsertable().
                                 setLabel("BIDEMERGENCYMATLISTITEM0REQID: Req Id").
                                 setSize(30).setHidden();
      bid_emergency_mat_list_blk.addField("MAT_LINE_NO").
                                 setInsertable().
                                 setLabel("BIDEMERGENCYMATLISTMATLINENO: Mat Line No").
                                 setSize(30).setHidden();
      bid_emergency_mat_list_blk.addField("CONTRACT_SIGN_AMOUNT","Number").
                                 setInsertable().
                                 setHidden().
                                 setLabel("BIDEMERGENCYMATLISTCONTRACTSIGNAMOUNT: Contract Sign Amount").
                                 setSize(30);
      bid_emergency_mat_list_blk.addField("MAT_NO").
                                 setInsertable().
                                 setDynamicLOV("MAT_CODE_LOV","PROJ_NO").
                                 setLabel("BIDEMERGENCYMATLISTMATNO: Mat No").
                                 setSize(30).
                                 setCustomValidation("ITEM0_PROJ_NO,MAT_NO", "MAT_NAME,PROD_MODLE");
      bid_emergency_mat_list_blk.addField("MAT_NAME").
                                 setReadOnly().
                                 setLabel("BIDEMERGENCYMATLISTMATNAME: Mat Name").
                                 setSize(30);
      bid_emergency_mat_list_blk.addField("PROD_MODLE").
                                 setReadOnly().
                                 setLabel("BIDEMERGENCYMATLISTPRODMODLE: Prod Modle").
                                 setSize(30);
      bid_emergency_mat_list_blk.addField("COUNT","Number").
                                 setInsertable().
                                 setLabel("BIDEMERGENCYMATLISTCOUNT: Count").
                                 setCustomValidation("COUNT,BUDGET_PRICE", "BUGET_TOTAL_PRICE").
                                 setSize(30);
      bid_emergency_mat_list_blk.addField("BUDGET_PRICE","Number").
                                 setInsertable().
                                 setLabel("BIDEMERGENCYMATLISTBUDGETPRICE: Budget Price").
                                 setCustomValidation("COUNT,BUDGET_PRICE", "BUGET_TOTAL_PRICE").
                                 setSize(30);
      bid_emergency_mat_list_blk.addField("BUGET_TOTAL_PRICE","Number").
                                 setReadOnly().
                                 setLabel("BIDEMERGENCYMATLISTBUDGETTOTALPRICE: Buget Total Price").
                                 setSize(30);
      bid_emergency_mat_list_blk.addField("USE_PART").
                                 setInsertable().
                                 setLabel("BIDEMERGENCYMATLISTUSEPART: Use Part").
                                 setSize(30);
      bid_emergency_mat_list_blk.addField("REQ_ACCEPT_TIME","Date").
                                 setInsertable().
                                 setLabel("BIDEMERGENCYMATLISTREQACCEPTTIME: Req Accept Time").
                                 setSize(30);
      bid_emergency_mat_list_blk.addField("BUDGET_LINE_NO").
                                 setInsertable().
                                 setLabel("BIDEMERGENCYMATLISTBUDGETLINENO: Budget Line No").
                                 setDynamicLOV("PROJECT_BUDGET_LINE","PROJ_NO").
                                 setSize(30);
      bid_emergency_mat_list_blk.addField("BUDGET_NAME").
                                 setReadOnly().
                                 setLabel("BIDEMERGENCYMATLISTBUDGETNAME: Budget Name").
                                 setFunction("PROJECT_BUDGET_LINE_API.GET_BUDGET_NAME ( :PROJ_NO,:BUDGET_LINE_NO)").
                                 setSize(30);
      mgr.getASPField("BUDGET_LINE_NO").setValidation("BUDGET_NAME");
      bid_emergency_mat_list_blk.setView("BID_EMERGENCY_MAT_LIST");
      bid_emergency_mat_list_blk.defineCommand("BID_EMERGENCY_MAT_LIST_API","New__,Modify__,Remove__");
      bid_emergency_mat_list_blk.setMasterBlock(headblk);
      bid_emergency_mat_list_set = bid_emergency_mat_list_blk.getASPRowSet();
      bid_emergency_mat_list_bar = mgr.newASPCommandBar(bid_emergency_mat_list_blk);
      bid_emergency_mat_list_bar.defineCommand(bid_emergency_mat_list_bar.OKFIND, "okFindITEM1");
      bid_emergency_mat_list_bar.defineCommand(bid_emergency_mat_list_bar.NEWROW, "newRowITEM1");
      bid_emergency_mat_list_tbl = mgr.newASPTable(bid_emergency_mat_list_blk);
      bid_emergency_mat_list_tbl.setTitle("BIDEMERGENCYMATLISTITEMHEAD1: BidEmergencyMatList");
      bid_emergency_mat_list_tbl.enableRowSelect();
      bid_emergency_mat_list_tbl.setWrap();
      bid_emergency_mat_list_lay = bid_emergency_mat_list_blk.getASPBlockLayout();
      bid_emergency_mat_list_lay.setDefaultLayoutMode(bid_emergency_mat_list_lay.MULTIROW_LAYOUT);
      bid_emergency_mat_list_lay.setSimple("BUDGET_NAME");



   }



   public void  adjust() throws FndException
   {
      // fill function body
      super.adjust();
   }
   
   public void  printReport() throws FndException, UnsupportedEncodingException
   {
    ASPManager mgr = getASPManager();
    ASPConfig cfg = getASPConfig();
    String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
    if (headlay.isMultirowLayout())
       headset.goTo(headset.getRowSelected());
    if (headset.countRows()>0 )
          {   
             String proj_no = headset.getValue("PROJ_NO");
             String req_id = headset.getValue("REQ_ID");
              appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=BidMatEmergencyReq.raq&proj_no="+proj_no+"&req_id="+req_id
                + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
         }
   }   

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "BIDMATEMERGENCYREQDESC: Bid Mat Emergency Req";
   }


   protected String getTitle()
   {
      return "BIDMATEMERGENCYREQTITLE: Bid Mat Emergency Req";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
//      if (bid_emergency_mat_list_lay.isVisible())
//          appendToHTML(bid_emergency_mat_list_lay.show());
      else 
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }  
      if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
      {
         appendToHTML(bid_emergency_mat_list_lay.show());
      }

   }
   protected ASPBlock getBizWfBlock()
   {
      return headblk;      
   }
}
