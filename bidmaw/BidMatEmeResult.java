/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.bidmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class BidMatEmeResult extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.bidmaw.BidMatEmeResult");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock bid_result_mat_list_blk;
   private ASPRowSet bid_result_mat_list_set;
   private ASPCommandBar bid_result_mat_list_bar;
   private ASPTable bid_result_mat_list_tbl;
   private ASPBlockLayout bid_result_mat_list_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  BidMatEmeResult (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("ID")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("VALIDATE")) )
         validate();
      else
         okFind();
      adjust();
   }
   
   /**
    * customer validation
    */
   public void validate(){
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPTransactionBuffer trans1 = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPCommand cmd1;
      String val = mgr.readValue("VALIDATE");
      String txt = "";
      String budgetLineNo = "";
      String contractSignAmount = "";
      String matNo = "";
      String matName = "";
      String prodModle = "";
      String count = "";
      String budgetPrice = "";
      String bugetTotalPrice = "";
      String usePart = "";
      String reqAcceptTime = "";
      String emePurchPlanName="";
      String subProject="";
      String manufactory="";
      float tempValue=0;
      if ("MAT_LINE_NO".equals(val)) {
         cmd = trans.addCustomFunction("GETBUDGETLINENO", 
               "BID_EMERGENCY_MAT_LIST_API.GET_BUDGET_LINE_NO", "BUDGET_LINE_NO");
         cmd.addParameter("PROJ_NO,REQ_ID,MAT_LINE_NO");
         
         cmd = trans.addCustomFunction("GETCONTRACTSIGNAMOUNT", 
                 "BID_EMERGENCY_MAT_LIST_API.GET_CONTRACT_SIGN_AMOUNT", "CONTRACT_SIGN_AMOUNT");
         cmd.addParameter("PROJ_NO,REQ_ID,MAT_LINE_NO");
         
         cmd = trans.addCustomFunction("GETMATNO", 
               "BID_EMERGENCY_MAT_LIST_API.GET_MAT_NO", "MAT_NO");
         cmd.addParameter("PROJ_NO,REQ_ID,MAT_LINE_NO");
         
         cmd = trans.addCustomFunction("GETMATNAME", 
               "BID_EMERGENCY_MAT_LIST_API.GET_MAT_NAME", "MAT_NAME");
         cmd.addParameter("PROJ_NO,REQ_ID,MAT_LINE_NO");
         
         cmd = trans.addCustomFunction("GETPRODMODLE", 
               "BID_EMERGENCY_MAT_LIST_API.GET_PROD_MODLE", "PROD_MODLE");
         cmd.addParameter("PROJ_NO,REQ_ID,MAT_LINE_NO");
         
         cmd = trans.addCustomFunction("GETCOUNT", 
               "BID_EMERGENCY_MAT_LIST_API.GET_COUNT", "COUNT");
         cmd.addParameter("PROJ_NO,REQ_ID,MAT_LINE_NO");
         
         cmd = trans.addCustomFunction("GETBUDGETPRICE", 
               "BID_EMERGENCY_MAT_LIST_API.GET_BUDGET_PRICE", "BUDGET_PRICE");
         cmd.addParameter("PROJ_NO,REQ_ID,MAT_LINE_NO");
         
         cmd = trans.addCustomFunction("GETBUGETTOTALPRICE", 
               "BID_EMERGENCY_MAT_LIST_API.GET_BUGET_TOTAL_PRICE", "BUGET_TOTAL_PRICE");
         cmd.addParameter("PROJ_NO,REQ_ID,MAT_LINE_NO");
         
         cmd = trans.addCustomFunction("GETUSEPART", 
               "BID_EMERGENCY_MAT_LIST_API.GET_USE_PART", "USE_PART");
         cmd.addParameter("PROJ_NO,REQ_ID,MAT_LINE_NO");
         
         cmd = trans.addCustomFunction("GETREQACCEPTTIME", 
               "BID_EMERGENCY_MAT_LIST_API.GET_REQ_ACCEPT_TIME", "REQ_ACCEPT_TIME");
         cmd.addParameter("PROJ_NO,REQ_ID,MAT_LINE_NO");
         
         trans = mgr.validate(trans);
         
         budgetLineNo = trans.getValue("GETBUDGETLINENO/DATA/BUDGET_LINE_NO");
         contractSignAmount = trans.getValue("GETCONTRACTSIGNAMOUNT/DATA/CONTRACT_SIGN_AMOUNT");
         matNo = trans.getValue("GETMATNO/DATA/MAT_NO");
         matName = trans.getValue("GETMATNAME/DATA/MAT_NAME");
         prodModle = trans.getValue("GETPRODMODLE/DATA/PROD_MODLE");
         count = trans.getValue("GETCOUNT/DATA/COUNT");
         budgetPrice = trans.getValue("GETBUDGETPRICE/DATA/BUDGET_PRICE");
         bugetTotalPrice = trans.getValue("GETBUGETTOTALPRICE/DATA/BUGET_TOTAL_PRICE");
         usePart = trans.getValue("GETUSEPART/DATA/USE_PART");
         reqAcceptTime = trans.getValue("GETREQACCEPTTIME/DATA/REQ_ACCEPT_TIME");

         
         cmd1 = trans1.addCustomFunction("GETMANUFACTORY", 
               "MAT_CODE_API.GET_MANUFACTORY", "MANUFACTORY");
         cmd1.addParameter("PROJ_NO");
         cmd1.addParameter("MAT_NO",matNo);
         trans1 = mgr.validate(trans1);
         manufactory = trans1.getValue("GETMANUFACTORY/DATA/MANUFACTORY");
         
         
         txt = ((mgr.isEmpty(budgetLineNo)) ? "" : budgetLineNo )+ "^" + 
               ((mgr.isEmpty(contractSignAmount)) ? "" : contractSignAmount )+ "^" + 
               ((mgr.isEmpty(matNo)) ? "" : matNo )+ "^" + 
               ((mgr.isEmpty(matName)) ? "" : matName )+ "^" + 
               ((mgr.isEmpty(prodModle)) ? "" : prodModle )+ "^" +
               ((mgr.isEmpty(count)) ? "" : count )+ "^" + 
               ((mgr.isEmpty(budgetPrice)) ? "" : budgetPrice )+ "^" + 
               ((mgr.isEmpty(bugetTotalPrice)) ? "" : bugetTotalPrice )+ "^" + 
               ((mgr.isEmpty(usePart)) ? "" : usePart )+ "^" + 
               ((mgr.isEmpty(reqAcceptTime)) ? "" : reqAcceptTime )+ "^" + 
               ((mgr.isEmpty(manufactory)) ? "" : manufactory )+ "^";
         
         mgr.responseWrite(txt);
      }else if("REQ_ID".equals(val)){
         cmd = trans.addCustomFunction("GETEMEPURCHPLANNAME", 
               "BID_MAT_EMERGENCY_REQ_API.GET_EME_PURCH_PLAN_NAME", "EME_PURCH_PLAN_NAME");
         cmd.addParameter("PROJ_NO,REQ_ID");
         
         cmd = trans.addCustomFunction("GETSUBPROJECT", 
               "BID_MAT_EMERGENCY_REQ_API.GET_SUB_PROJECT", "SUB_PROJECT");
         cmd.addParameter("PROJ_NO,REQ_ID");
         
         trans = mgr.validate(trans);
         
         emePurchPlanName = trans.getValue("GETEMEPURCHPLANNAME/DATA/EME_PURCH_PLAN_NAME");
         subProject = trans.getValue("GETSUBPROJECT/DATA/SUB_PROJECT");
         
         txt = ((mgr.isEmpty(emePurchPlanName)) ? "" : emePurchPlanName )+ "^" + 
               ((mgr.isEmpty(subProject)) ? "" : subProject )+ "^";
         mgr.responseWrite(txt);
      }
      
      if("COUNT".equals(val)) {         
         tempValue = ((mgr.readValue("COUNT")==null)?0:Float.parseFloat(mgr.readValue("COUNT")))*((mgr.readValue("PRICE")==null)?0:Float.parseFloat(mgr.readValue("PRICE")));
         mgr.responseWrite(String.valueOf(tempValue)+"^");
       }
      if("PRICE".equals(val)){
          tempValue = ((mgr.readValue("COUNT")==null)?0:Float.parseFloat(mgr.readValue("COUNT")))*((mgr.readValue("PRICE")==null)?0:Float.parseFloat(mgr.readValue("PRICE")));
          mgr.responseWrite(String.valueOf(tempValue)+"^");
       }
      mgr.endResponse();
   }
   
   
   
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("BIDMATEMERESULTNODATA: No data found.");
         headset.clear();
      }
      eval( bid_result_mat_list_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","BID_MAT_EME_RESULT_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(bid_result_mat_list_blk);
      q.addWhereCondition("PROJ_NO = ? AND ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("ID", headset.getValue("ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,bid_result_mat_list_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","BID_RESULT_MAT_LIST_API.New__",bid_result_mat_list_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_ID", headset.getValue("ID"));
      cmd.setParameter("ITEM0_REQ_ID", headset.getValue("REQ_ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      bid_result_mat_list_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setLabel("BIDMATEMERESULTPROJNO: Proj No").
              setSize(30).
              setDynamicLOV("GENERAL_PROJECT");
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("CONADJUSTNOTICEGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(30).
              setReadOnly();
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      headblk.addField("ID").
              setInsertable().
              setLabel("BIDMATEMERESULTID: Id").
              setSize(30).
              setHidden();
      headblk.addField("REQ_ID").
//              setLabel("BIDMATEMERESULTREQID: Req Id").
              setLabel("BIDMATEMERESULTEMEPURCHPLANNO: Eme Purch Plan No").
              setSize(30).
              setCustomValidation("PROJ_NO,REQ_ID", "EME_PURCH_PLAN_NAME,SUB_PROJECT").
              setDynamicLOV("BID_MAT_EMERGENCY_REQ").
              setLOVProperty("WHERE", "STATUS='2'");
      headblk.addField("EME_PURCH_PLAN_NAME").
              setFunction("BID_MAT_EMERGENCY_REQ_API.GET_EME_PURCH_PLAN_NAME ( :PROJ_NO,:REQ_ID)").
              setLabel("BIDMATEMERESULTEMEPURCHPLANNAME: Eme Purch Plan Name").
              setSize(30);
//      mgr.getASPField("REQ_ID").setValidation("EME_PURCH_PLAN_NAME");
      //headblk.addField("EME_PURCH_PLAN_NO").
      //    setInsertable().
      //    setLabel("BIDMATEMERESULTEMEPURCHPLANNO: Eme Purch Plan No").
      //    setSize(30);
      headblk.addField("SUB_PROJECT").
              setLabel("BIDMATEMERESULTSUBPROJECT: Sub Project").
              setFunction("BID_MAT_EMERGENCY_REQ_API.GET_SUB_PROJECT (:PROJ_NO,:REQ_ID)").
              setDynamicLOV("CON_QUA_TREE","PROJ_NO").
              setLOVProperty("TREE_PARE_FIELD", "PARENT_ID").
              setLOVProperty("TREE_DISP_FIELD", "NODE_NO,NODE_NAME").
              setSize(30);
      headblk.addField("HANDLER").
              setInsertable().
              setLabel("BIDMATEMERESULTHANDLER: Handler").
              setSize(30).setHidden();
      headblk.addField("HANDLE_DATE","Date").
              setInsertable().
              setLabel("BIDMATEMERESULTHANDLEDATE: Handle Date").
              setSize(30).setHidden();
      headblk.addField("PURCH_REASON").
              setInsertable().
              setLabel("BIDMATEMERESULTPURCHREASON: Purch Reason").
              setSize(129).
              setHeight(5);
      headblk.addField("STATUS").
              setInsertable().
              setLabel("BIDMATEMERESULTSTATUS: Status").
              setSize(30).setHidden();
      headblk.addField("NOTE").
              setInsertable().
              setLabel("BIDMATEMERESULTNOTE: Note").
              setSize(129).setHidden();

      headblk.setView("BID_MAT_EME_RESULT");
      headblk.defineCommand("BID_MAT_EME_RESULT_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("BIDMATEMERESULTTBLHEAD: Bid Mat Eme Results");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headbar.addCustomCommand("printReport", "BIDMATEMERESULTPRINTREPORT: Print Report...");
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC"); 
      headlay.setDataSpan("PURCH_REASON", 5);
 


      bid_result_mat_list_blk = mgr.newASPBlock("ITEM1");
      bid_result_mat_list_blk.addField("ITEM0_OBJID").
                              setHidden().
                              setDbName("OBJID");
      bid_result_mat_list_blk.addField("ITEM0_OBJVERSION").
                              setHidden().
                              setDbName("OBJVERSION");
      bid_result_mat_list_blk.addField("ITEM0_PROJ_NO").
                              setDbName("PROJ_NO").
                              setMandatory().
                              setInsertable().
                              setLabel("BIDRESULTMATLISTITEM0PROJNO: Proj No").
                              setSize(30)
                              .setHidden();
      bid_result_mat_list_blk.addField("ITEM0_ID").
                              setDbName("ID").
                              setMandatory().
                              setInsertable().
                              setLabel("BIDRESULTMATLISTITEM0EMEPURCHPLANNO: Eme Purch Plan No").
                              setSize(30).
                              setHidden();
      bid_result_mat_list_blk.addField("LINE_NO").
                              setInsertable().
                              setLabel("BIDRESULTMATLISTLINENO: Line No").
                              setSize(30).
                              setHidden();
//      bid_result_mat_list_blk.addField("COUNT","Number").
//                              setInsertable().
//                              setLabel("BIDRESULTMATLISTCOUNT: Count").
//                              setSize(30);
      bid_result_mat_list_blk.addField("ITEM0_REQ_ID").
                              setDbName("REQ_ID").
                              setInsertable().
                              setLabel("BIDMATEMERGENCYREQEMEPURCHPLANNO: Eme Purch Plan No").
                              setSize(30).
                              setHidden().
                              setDynamicLOV("BID_MAT_EMERGENCY_REQ");
      bid_result_mat_list_blk.addField("MAT_LINE_NO").
                              setInsertable().
                              setDynamicLOV("BID_EMERGENCY_MAT_LIST").
                              setLabel("BIDRESULTMATLISTMATLINENO: Mat Line No").
                              setSize(30).
                              setCustomValidation("PROJ_NO,REQ_ID,MAT_LINE_NO", "BUDGET_LINE_NO,CONTRACT_SIGN_AMOUNT,MAT_NO,MAT_NAME,PROD_MODLE,COUNT,BUDGET_PRICE,BUGET_TOTAL_PRICE,USE_PART,REQ_ACCEPT_TIME,MANUFACTORY");
      //copy file 
      bid_result_mat_list_blk.addField("BUDGET_LINE_NO").
                              setReadOnly().
                              setFunction("BID_EMERGENCY_MAT_LIST_API.GET_BUDGET_LINE_NO ( :PROJ_NO,:REQ_ID,:MAT_LINE_NO)").      
                              setLabel("BIDEMERGENCYMATLISTBUDGETLINENO: Budget Line No").
                              setSize(30);
      bid_result_mat_list_blk.addField("CONTRACT_SIGN_AMOUNT","Number").
                              setReadOnly().
                              setFunction("BID_EMERGENCY_MAT_LIST_API.GET_CONTRACT_SIGN_AMOUNT ( :PROJ_NO,:REQ_ID,:MAT_LINE_NO)").      
                              setLabel("BIDEMERGENCYMATLISTCONTRACTSIGNAMOUNT: Contract Sign Amount").
                              setSize(30);
      bid_result_mat_list_blk.addField("MAT_NO").
                              setReadOnly().
                              setFunction("BID_EMERGENCY_MAT_LIST_API.GET_MAT_NO ( :PROJ_NO,:REQ_ID,:MAT_LINE_NO)").      
                              setLabel("BIDEMERGENCYMATLISTMATNO: Mat No").
                              setSize(30);
      bid_result_mat_list_blk.addField("MAT_NAME").
                              setReadOnly().
                              setFunction("BID_EMERGENCY_MAT_LIST_API.GET_MAT_NAME ( :PROJ_NO,:REQ_ID,:MAT_LINE_NO)").
                              setLabel("BIDEMERGENCYMATLISTMATNAME: Mat Name").
                              setSize(30);
      bid_result_mat_list_blk.addField("PROD_MODLE").
                              setReadOnly().
                              setFunction("BID_EMERGENCY_MAT_LIST_API.GET_PROD_MODLE ( :PROJ_NO,:REQ_ID,:MAT_LINE_NO)").
                              setLabel("BIDEMERGENCYMATLISTPRODMODLE: Prod Modle").
                              setSize(30);
      bid_result_mat_list_blk.addField("COUNT","Number").
                              setInsertable().
//                              setFunction("BID_EMERGENCY_MAT_LIST_API.GET_COUNT ( :PROJ_NO,:REQ_ID,:MAT_LINE_NO)").
                              setLabel("BIDRESULTMATLISTCOUNT: Count").
                              setCustomValidation("COUNT,PRICE", "TOTAL_PRICE").
                              setSize(30);
      
      bid_result_mat_list_blk.addField("BUDGET_PRICE","Number").
                              setFunction("BID_EMERGENCY_MAT_LIST_API.GET_BUDGET_PRICE ( :PROJ_NO,:REQ_ID,:MAT_LINE_NO)").
                              setReadOnly().
                              setLabel("BIDEMERGENCYMATLISTBUGETPRICE: Buget Price").
                              setSize(30);
      bid_result_mat_list_blk.addField("PRICE","Number","0.00").
                              setInsertable().
                              setLabel("BIDRESULTMATLISTPRICE: Price").
                              setCustomValidation("COUNT,PRICE", "TOTAL_PRICE").
                              setSize(30);
      bid_result_mat_list_blk.addField("BUGET_TOTAL_PRICE","Number").
                              setFunction("BID_EMERGENCY_MAT_LIST_API.GET_BUGET_TOTAL_PRICE ( :PROJ_NO,:REQ_ID,:MAT_LINE_NO)").
                              setReadOnly().
                              setLabel("BIDEMERGENCYMATLISTBUGETTOTALPRICE: Buget Total Price").
                              setSize(30);
      bid_result_mat_list_blk.addField("TOTAL_PRICE","Number","#0.00").
                              setFunction("BID_RESULT_MAT_LIST_API.GET_TOTAL_PRICE (:COUNT,:PRICE)").
                              setLabel("BIDRESULTMATLISTTOTALPRICE: Total Price").
                              setSize(30);
      
      bid_result_mat_list_blk.addField("USE_PART").
                              setReadOnly().
                              setFunction("BID_EMERGENCY_MAT_LIST_API.GET_USE_PART ( :PROJ_NO,:REQ_ID,:MAT_LINE_NO)").
                              setLabel("BIDEMERGENCYMATLISTUSEPART: Use Part").
                              setSize(30);
      bid_result_mat_list_blk.addField("REQ_ACCEPT_TIME","Date").
                              setReadOnly().
                              setFunction("BID_EMERGENCY_MAT_LIST_API.GET_REQ_ACCEPT_TIME ( :PROJ_NO,:REQ_ID,:MAT_LINE_NO)").
                              setLabel("BIDEMERGENCYMATLISTREQACCEPTTIME: Req Accept Time").
                              setSize(30);
      bid_result_mat_list_blk.addField("QUOTE_BILL_NO").
                              setInsertable().
                              setLabel("BIDRESULTMATLISTQUOTEBILLNO: Quote Bill No").
                              setSize(30);
      bid_result_mat_list_blk.addField("MANUFACTORY").
                              setReadOnly().
                              setFunction("MAT_CODE_API.GET_MANUFACTORY ( :PROJ_NO,BID_EMERGENCY_MAT_LIST_API.GET_MAT_NO (:PROJ_NO,:REQ_ID,:MAT_LINE_NO))").
                              setLabel("BIDEMERGENCYMATLISTMANUFACTORY: Manufactory").
                              setSize(30);
      bid_result_mat_list_blk.addField("SUPPLIER").
                              setInsertable().
                              setLabel("BIDEMERGENCYMATLISTSUPPLYORG: Supplier").
                              setSize(30).
                              setDynamicLOV("GENERAL_ORGANIZATION");
      bid_result_mat_list_blk.addField("START_ORG_NAME").
                              setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc(:SUPPLIER)").
                              setLabel("CONPROJCONNECTIONLISTCOSTORGSTARTORGNAME: Start Org Name").
                              setSize(30).
                              setReadOnly();
      
      mgr.getASPField("SUPPLIER").setValidation("START_ORG_NAME");
      
      bid_result_mat_list_blk.setView("BID_RESULT_MAT_LIST");
      bid_result_mat_list_blk.defineCommand("BID_RESULT_MAT_LIST_API","New__,Modify__,Remove__");
      bid_result_mat_list_blk.setMasterBlock(headblk);
      bid_result_mat_list_set = bid_result_mat_list_blk.getASPRowSet();
      bid_result_mat_list_bar = mgr.newASPCommandBar(bid_result_mat_list_blk);
      bid_result_mat_list_bar.defineCommand(bid_result_mat_list_bar.OKFIND, "okFindITEM1");
      bid_result_mat_list_bar.defineCommand(bid_result_mat_list_bar.NEWROW, "newRowITEM1");
      bid_result_mat_list_tbl = mgr.newASPTable(bid_result_mat_list_blk);
      bid_result_mat_list_tbl.setTitle("BIDRESULTMATLISTITEMHEAD1: BidResultMatList");
      bid_result_mat_list_tbl.enableRowSelect();
      bid_result_mat_list_tbl.setWrap();
      bid_result_mat_list_lay = bid_result_mat_list_blk.getASPBlockLayout();
      bid_result_mat_list_lay.setDefaultLayoutMode(bid_result_mat_list_lay.MULTIROW_LAYOUT);
      bid_result_mat_list_lay.setSimple("START_ORG_NAME");
      bid_result_mat_list_lay.setDataSpan("COUNT", 5);


   }



   public void  adjust()
   {
      // fill function body
   }

   public void  printReport() throws FndException, UnsupportedEncodingException//TODO
   {
    ASPManager mgr = getASPManager();
    ASPConfig cfg = getASPConfig();
    String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
    if (headlay.isMultirowLayout())
       headset.goTo(headset.getRowSelected());
    if (headset.countRows()>0 )
          {   
             String proj_no = headset.getValue("PROJ_NO");
             String id = headset.getValue("ID");
              appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=BidMatEmeResult.raq&proj_no="+proj_no+"&id="+id
                + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
         }
   }   
   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "BIDMATEMERESULTDESC: Bid Mat Eme Result";
   }


   protected String getTitle()
   {
      return "BIDMATEMERESULTTITLE: Bid Mat Eme Result";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
//      if (bid_result_mat_list_lay.isVisible())
//          appendToHTML(bid_result_mat_list_lay.show());
      else 
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }  
      if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
      {
         appendToHTML(bid_result_mat_list_lay.show());
      }

   }
}
