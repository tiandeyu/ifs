/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.bidmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class BidCreProjApply extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.bidmaw.BidCreProjApply");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  BidCreProjApply (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      ASPManager mgr = getASPManager();
      super.run();
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("CRE_ID")) )
         okFind();
      else
         okFind();
      adjust();
      
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("BIDCREPROJAPPLYNODATA: No data found.");
         headset.clear();
      }
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","BID_CRE_PROJ_APPLY_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   public void  performHEAD( String command)
   {
      int currow;
      
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      

      currow = headset.getCurrentRowNo();
      if(headlay.isMultirowLayout())
         headset.storeSelections();
      else
         headset.selectRow();
      headset.markSelectedRows( command );
      mgr.submit(trans);
      headset.goTo(currow);
   }
   public void  checking()
   {

      performHEAD( "Checking__" );
   }
   public void  close()
   {

      performHEAD( "Close__" );
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("OBJSTATE").
              setHidden();
      headblk.addField("OBJEVENTS").
              setHidden();   
      headblk.addField("CRE_ID").
              setHidden().
              //setMandatory().
             // setInsertable().
              //setDynamicLOV("GENERAL_PROJECT",600,445).
              setLabel("BIDCREPROJAPPLYPROJNO: Proj No").
              setSize(50);
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setDynamicLOV("GENERAL_PROJECT",600,445).
              setLabel("BIDCREPROJAPPLYPROJNO: Proj No").
              setSize(30);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("PBMCREPROJAPPLYGENERALPROJECTPROJDESC: General Project Proj Desc").
              setReadOnly().
              setSize(25);
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC"); 
      headblk.addField("BID_PROJ_TYPE").
              enumerateValues("Bid_Proj_Type_API").
              setSelectBox().
              setMandatory().
              setInsertable().
              setLabel("BIDCREPROJAPPLYBIDPROJTYPE: Bid Proj Type").
              setSize(30);
      headblk.addField("CREATE_BID_NO").
              setInsertable().
              setLabel("BIDCREPROJAPPLYCREATEBIDNO: Create Bid No").
              setSize(30);
      headblk.addField("CREATE_BID_NAME").
              setInsertable().
              setWfProperties().
              setLabel("BIDCREPROJAPPLYCREATEBIDNAME: Create Bid Name").
              setSize(30);
      headblk.addField("APPLY_PERSON").
              setReadOnly().
              setLabel("BIDCREPROJAPPLYAPPLYPERSON: Apply Person").
              setSize(30);
      headblk.addField("CREATE_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :APPLY_PERSON)").
              setLabel("BIDMATENQJUDGECREATEPERSONNAME: Create Person Name").
              setSize(25).
              setReadOnly();
      headblk.addField("APPLY_TIME","Date").
              setInsertable().
              setLabel("BIDCREPROJAPPLYAPPLYTIME: Apply Time").
              setSize(30);
      headblk.addField("FEE","Number").
              setInsertable().
              setLabel("BIDCREPROJAPPLYFEE: Fee(The-Thousand)").
              setSize(30);
      headblk.addField("REQUEST_TIME").
              setInsertable().
              setLabel("BIDCREPROJAPPLYREQUESTTIME: Request Time").
              setSize(30);
      headblk.addField("COST_LIST").
              setInsertable().
              setLabel("BIDCREPROJAPPLYCOSTLIST: Cost List").
              setSize(30).
              setDynamicLOV("PROJECT_BUDGET_LINE","PROJ_NO").
              setLOVProperty("WHERE", "STATUS='1'");
      headblk.addField("BUDGET_NAME").
              setReadOnly().
              setFunction("PROJECT_BUDGET_LINE_API.GET_BUDGET_NAME ( :PROJ_NO,:COST_LIST)").
              setLabel("BIDCREPROJAPPLYBUDGETNAME: Budget Name").
              setSize(25);
      mgr.getASPField("PROJ_NO").setValidation("BUDGET_NAME");
      mgr.getASPField("COST_LIST").setValidation("BUDGET_NAME");
      headblk.addField("PURCH_TYPE_NO").
             setInsertable().
             setDynamicLOV("CONTRACT_PURCH_TYPE").
             setLabel("BIDCREPROJAPPLYPURCHTYPENO: Purch Type No").
             setSize(30);
      headblk.addField("DESCRIPTION").
              setFunction("CONTRACT_PURCH_TYPE_API.Get_Description ( :PURCH_TYPE_NO)").
              setLabel("PBMCREPROJAPPLYPURCHTYPEDESCRIPTION: Purch Type Description").
              setReadOnly().
              setSize(30);
      mgr.getASPField("PURCH_TYPE_NO").setValidation("DESCRIPTION");
      
      headblk.addField("STATUS").
              setHidden().
              setLabel("PBMCREPROJAPPLYSTATUS: Status").
              setSize(30);
      //Dec 10th 2014 add status's desc by natic
      headblk.addField("STATUS_DESC").
              setReadOnly().
              setFunction("FLOW_STATUS_API.Get_Status_Desc (:STATUS)").
              setLabel("BIDCREPROJAPPLYSTATUSDESC: Status Desc").
              setSize(30);
      mgr.getASPField("STATUS").setValidation("STATUS_DESC");
      //add end
      headblk.addField("STATE").
              setHidden().
              setLabel("BIDCREPROJAPPLYSTATE: State").
              setSize(30);  
      headblk.addField("CREATE_BID_REASON").
              setInsertable().
              setLabel("BIDCREPROJAPPLYCREATEBIDREASON: Create Bid Reason").
              setHeight(3).
              setSize(140);
      headblk.addField("CREATE_BID_CONTENT").
              setInsertable().
              setLabel("BIDCREPROJAPPLYCREATEBIDCONTENT: Create Bid Content").
              setHeight(12).
              setSize(140);     
      headblk.addField("NOTE").
              setInsertable().
              setLabel("BIDCREPROJAPPLYNOTE: Note").
              setHeight(4).
              setSize(140);
      


      headblk.setView("BID_CRE_PROJ_APPLY");
      headblk.defineCommand("BID_CRE_PROJ_APPLY_API","New__,Modify__,Remove__,Checking__,Close__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
//      headbar.addSecureCustomCommand("Checking", "BIDCREPROJAPPLYCHECKING: Checking Bid Cre Proj Apply", "BID_CRE_PROJ_APPLY_API.Checking__");
//      headbar.addSecureCustomCommand("Close","BIDCREPROJAPPLYCLOSE: Close Bid Cre Proj Apply", "BID_CRE_PROJ_APPLY_API.Close__"); 
//      headbar.addCommandValidConditions("Checking",     "OBJSTATE",    "Enable",      "Initialize");
//      headbar.addCommandValidConditions("Close", "OBJSTATE",    "Enable",      "Checked");    
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("BIDCREPROJAPPLYTBLHEAD: Bid Cre Proj Applys");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headbar.addCustomCommand("printReport", "BIDCREPROJAPPLYPRINTREPORT: Print Report...");
      headlay.setDataSpan("STATUS_DESC", 5);
      headlay.setDataSpan("CREATE_BID_REASON", 5);
      headlay.setDataSpan("CREATE_BID_CONTENT", 5);
      headlay.setDataSpan("NOTE", 5);
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("BUDGET_NAME");
      headlay.setSimple("CREATE_PERSON_NAME");
      headlay.setSimple("DESCRIPTION");


   }



   public void  adjust()
   {
      // fill function body
      try {
         super.adjust();
      } catch (FndException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
      }
   }

   public void  printReport() throws FndException, UnsupportedEncodingException//TODO
   {
    ASPManager mgr = getASPManager();
    ASPConfig cfg = getASPConfig();
    String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
    if (headlay.isMultirowLayout())
       headset.goTo(headset.getRowSelected());
    if (headset.countRows()>0 )
          {   
             String proj_no = headset.getValue("PROJ_NO");
             String cre_id = headset.getValue("CRE_ID");
              appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=BidCreProjApply.raq&proj_no="+proj_no+"&cre_id="+cre_id
                + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
         }
   }   

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   
   protected String getDescription()
   {
      return "BIDCREPROJAPPLYDESC: Bid Cre Proj Apply";
   }


   protected String getTitle()
   {
      return "BIDCREPROJAPPLYTITLE: Bid Cre Proj Apply";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());

   }

   @Override
   protected ASPBlock getBizWfBlock() {
      // TODO Auto-generated method stub
      return headblk;
   }
}
