/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.bidmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import java.io.UnsupportedEncodingException;

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;
import ifs.hzwflw.HzASPPageProviderWf;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class BidMatReq extends HzASPPageProviderWf
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.bidmaw.BidMatReq");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock bid_mat_req_line_blk;
   private ASPRowSet bid_mat_req_line_set;
   private ASPCommandBar bid_mat_req_line_bar;
   private ASPTable bid_mat_req_line_tbl;
   private ASPBlockLayout bid_mat_req_line_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  BidMatReq (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run() throws FndException
   {
      ASPManager mgr = getASPManager();
      super.run();
      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("REQ_ID")) )
         okFind();
      else
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("BIDMATREQNODATA: No data found.");
         headset.clear();
      }else{
         okFindITEM1();
      }
      eval( bid_mat_req_line_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","BID_MAT_REQ_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(bid_mat_req_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND REQ_ID = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("REQ_ID", headset.getValue("REQ_ID"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,bid_mat_req_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","BID_MAT_REQ_LINE_API.New__",bid_mat_req_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_REQ_ID", headset.getValue("REQ_ID"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      bid_mat_req_line_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setDynamicLOV("GENERAL_PROJECT").
              setInsertable().
              setLabel("BIDMATREQPROJNO: Proj No").
              setSize(30);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("BIDMATREQGENERALPROJECTPROJDESC: General Project Proj Desc").
              setReadOnly().
              setSize(30);
      mgr.getASPField("PROJ_NO").setValidation("GENERAL_PROJECT_PROJ_DESC");
      headblk.addField("REQ_ID").
              setHidden().
              setInsertable().
              setLabel("BIDMATREQREQID: Req Id").
              setSize(30);
      headblk.addField("REQ_NAME").
              setInsertable().
              setWfProperties().
              setLabel("BIDMATREQREQNAME: Req Name").
              setSize(30);
      headblk.addField("SUB_PROJECT").
              setInsertable().
              setLabel("BIDMATREQSUBPROJECT: Sub Project").
              setSize(30);
      headblk.addField("DEPT").
              setInsertable().
              setLabel("BIDMATREQDEPT: Dept").
              setSize(30);
      headblk.addField("IS_EMERGENCY_").
              setCheckBox("FALSE,TRUE").
              setInsertable().
              setLabel("BIDMATREQISEMERGENCY: Is Emergency ").
              setSize(20);
      headblk.addField("CREATE_PERSON").
              setInsertable().
              setDynamicLOV("PERSON_INFO").
              setLabel("BIDMATREQCREATEPERSON: Create Person").
              setSize(20);
      headblk.addField("CREATE_PERSON_NAME").
              setReadOnly().
              setFunction("PERSON_INFO_API.GET_NAME (:CREATE_PERSON)").
              setLabel("BIDMATREQCREATEPERSONNAME: Create Person Name").
              setSize(30);
      mgr.getASPField("CREATE_PERSON").setValidation("CREATE_PERSON_NAME");
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setLabel("BIDMATREQCREATETIME: Create Time").
              setSize(30);
      headblk.addField("STATUS").
              setHidden().
              setLabel("BIDMATREQSTATUS: Status").
              setSize(20);
      headblk.addField("STATUS_DESC").
              setReadOnly().
              setFunction("FLOW_STATUS_API.Get_Status_Desc (:STATUS)").
              setLabel("BIDMATREQSTATUSDESC: Status Desc").
              setSize(30);
      mgr.getASPField("STATUS").setValidation("STATUS_DESC");
      headblk.addField("PURCH_REASON").
              setInsertable().
              setHeight(3).
              setLabel("BIDMATREQPURCHREASON: Purch Reason").
              setSize(120);
      headblk.setView("BID_MAT_REQ");
      headblk.defineCommand("BID_MAT_REQ_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headbar.addCustomCommand("printReport", "BIDMATREQPRINTREPORT: Print Report...");
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("BIDMATREQTBLHEAD: Bid Mat Reqs");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      headlay.setSimple("CREATE_PERSON_NAME");
 


      bid_mat_req_line_blk = mgr.newASPBlock("ITEM1");
      bid_mat_req_line_blk.addField("ITEM0_OBJID").
                           setHidden().
                           setDbName("OBJID");
      bid_mat_req_line_blk.addField("ITEM0_OBJVERSION").
                           setHidden().
                           setDbName("OBJVERSION");
      bid_mat_req_line_blk.addField("ITEM0_PROJ_NO").
                           setDbName("PROJ_NO").
                           setMandatory().
                           setInsertable().
                           setHidden().
                           setLabel("BIDMATREQLINEITEM0PROJNO: Proj No").
                           setSize(30);
      bid_mat_req_line_blk.addField("ITEM0_REQ_ID").
                           setDbName("REQ_ID").
                           setMandatory().
                           setInsertable().
                           setHidden().
                           setLabel("BIDMATREQLINEITEM0REQID: Req Id").
                           setSize(30);
      bid_mat_req_line_blk.addField("REQ_LINE_NO").
                           setHidden().
                           setInsertable().
                           setLabel("BIDMATREQLINEREQLINENO: Req Line No").
                           setSize(30);
      bid_mat_req_line_blk.addField("MAT_NAME").
                           setInsertable().
                           setLabel("BIDMATREQLINEMATNAME: Mat Name").
                           setSize(30);
      bid_mat_req_line_blk.addField("SPECIFICATIONS").
                           setInsertable().
                           setLabel("BIDMATREQLINESPECIFICATIONS: Specifications").
                           setSize(30);
      bid_mat_req_line_blk.addField("REQ_QTY","Number").
                           setInsertable().
                           setLabel("BIDMATREQLINEREQQTY: Req Qty").
                           setSize(30);
      bid_mat_req_line_blk.addField("UNIT").
                           setInsertable().
                           setLabel("BIDMATREQLINEUNIT: Unit").
                           setSize(30);
      bid_mat_req_line_blk.addField("BUDGET_PRICE","Number").
                           setInsertable().
                           setLabel("BIDMATREQLINEBUDGETPRICE: Budget Price").
                           setSize(30);
      bid_mat_req_line_blk.addField("BUDGET_TOTAL_PRICE","Number").
                           setInsertable().
                           setLabel("BIDMATREQLINEBUDGETTOTALPRICE: Budget Total Price").
                           setSize(30);
      bid_mat_req_line_blk.addField("USED_PART").
                           setInsertable().
                           setLabel("BIDMATREQLINEUSEDPART: Used Part").
                           setSize(30);
      bid_mat_req_line_blk.addField("ACCEPT_TIME","Date").
                           setInsertable().
                           setLabel("BIDMATREQLINEACCEPTTIME: Accept Time").
                           setSize(30);
      bid_mat_req_line_blk.addField("BUDGET_LINE_NO").
                           setInsertable().
                           setDynamicLOV("PROJECT_BUDGET_LINE","PROJ_NO").
                           setLabel("BIDMATREQLINEBUDGETLINENO: Budget Line No").
                           setSize(30);
      bid_mat_req_line_blk.addField("BUDGET_NAME").
                           setReadOnly().
                           setFunction("PROJECT_BUDGET_LINE_API.GET_BUDGET_NAME ( :PROJ_NO, :BUDGET_LINE_NO)").
                           setLabel("BIDMATREQLINEBUDGETNAME: Budget Name").
                           setSize(30);
      mgr.getASPField("BUDGET_LINE_NO").setValidation("BUDGET_NAME");
      bid_mat_req_line_blk.addField("NOTE").
                           setInsertable().
                           setHeight(3).
                           setLabel("BIDMATREQLINENOTE: Note").
                           setSize(120);
      bid_mat_req_line_blk.addField("IS_PURCHED").
                           setHidden().
                           setLabel("BIDMATREQLINEISPURCHED: Is Purched").
                           setSize(20);
      bid_mat_req_line_blk.setView("BID_MAT_REQ_LINE");
      bid_mat_req_line_blk.defineCommand("BID_MAT_REQ_LINE_API","New__,Modify__,Remove__");
      bid_mat_req_line_blk.setMasterBlock(headblk);
      bid_mat_req_line_set = bid_mat_req_line_blk.getASPRowSet();
      bid_mat_req_line_bar = mgr.newASPCommandBar(bid_mat_req_line_blk);
      bid_mat_req_line_bar.defineCommand(bid_mat_req_line_bar.OKFIND, "okFindITEM1");
      bid_mat_req_line_bar.defineCommand(bid_mat_req_line_bar.NEWROW, "newRowITEM1");
      bid_mat_req_line_tbl = mgr.newASPTable(bid_mat_req_line_blk);
      bid_mat_req_line_tbl.setTitle("BIDMATREQLINEITEMHEAD1: BidMatReqLine");
      bid_mat_req_line_tbl.enableRowSelect();
      bid_mat_req_line_tbl.setWrap();
      bid_mat_req_line_lay = bid_mat_req_line_blk.getASPBlockLayout();
      bid_mat_req_line_lay.setDefaultLayoutMode(bid_mat_req_line_lay.MULTIROW_LAYOUT);
      bid_mat_req_line_lay.setSimple("BUDGET_NAME");
      bid_mat_req_line_lay.setDataSpan("BUDGET_LINE_NO", 5);
      bid_mat_req_line_lay.setDataSpan("NOTE", 5);

   }



   public void  adjust() throws FndException
   {
      // fill function body
         super.adjust();
   }

   public void  printReport() throws FndException, UnsupportedEncodingException
  {
   ASPManager mgr = getASPManager();
   ASPConfig cfg = getASPConfig();
   String URL=cfg.getParameter("APPLICATION/RUNQIAN/SERVER_URL");
   if (headlay.isMultirowLayout())
      headset.goTo(headset.getRowSelected());
   if (headset.countRows()>0 )
         {   
            String proj_no = headset.getValue("PROJ_NO");
            String accept_id = headset.getValue("REQ_ID");
             appendDirtyJavaScript("window.open('"+URL+"/showReport.jsp?raq=BidMatReq.raq&proj_no="+proj_no+"&id="+accept_id
               + "','_blank','height=600, width=780, top=200, left=350, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, status=no');");                                
        }
  }   
   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "BIDMATREQDESC: Bid Mat Req";
   }


   protected String getTitle()
   {
      return "BIDMATREQTITLE: Bid Mat Req";
   }


   protected void printContents() throws FndException
   { 
      super.printContents();
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
      else
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }
      if (bid_mat_req_line_lay.isVisible())
          appendToHTML(bid_mat_req_line_lay.show());

   }

   protected ASPBlock getBizWfBlock() 
   {
      return headblk;
   }
}
