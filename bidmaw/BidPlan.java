/*
*                 IFS Research & Development
*
*  This program is protected by copyright law and by international
*  conventions. All licensing, renting, lending or copying (including
*  for private use), and all other use of the program, which is not
*  expressively permitted by IFS Research & Development (IFS), is a
*  violation of the rights of IFS. Such violations will be reported to the
*  appropriate authorities.
*
*  VIOLATIONS OF ANY COPYRIGHT IS PUNISHABLE BY LAW AND CAN LEAD
*  TO UP TO TWO YEARS OF IMPRISONMENT AND LIABILITY TO PAY DAMAGES.
* ----------------------------------------------------------------------------
* File                          :
* Description                   :
* Notes                         :
* Other Programs Called :
* ----------------------------------------------------------------------------
* Modified    : Automatically generated by IFS/Design
* ----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
//-----------------------------   Package def  ------------------------------
//-----------------------------------------------------------------------------

package ifs.bidmaw;
//-----------------------------------------------------------------------------
//-----------------------------   Import def  ------------------------------
//-----------------------------------------------------------------------------

import ifs.fnd.asp.*;
import ifs.fnd.buffer.*;
import ifs.fnd.service.*;
import ifs.fnd.*;

//-----------------------------------------------------------------------------
//-----------------------------   Class def  ------------------------------
//-----------------------------------------------------------------------------

public class BidPlan extends ASPPageProvider
{

   //-----------------------------------------------------------------------------
   //---------- Static constants ------------------------------------------------
   //-----------------------------------------------------------------------------

   public static boolean DEBUG = Util.isDebugEnabled("ifs.bidmaw.BidPlan");

   //-----------------------------------------------------------------------------
   //---------- Header Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock headblk;
   private ASPRowSet headset;
   private ASPCommandBar headbar;
   private ASPTable headtbl;
   private ASPBlockLayout headlay;

   //-----------------------------------------------------------------------------
   //---------- Item Instances created on page creation --------
   //-----------------------------------------------------------------------------

   private ASPBlock bid_plan_line_blk;
   private ASPRowSet bid_plan_line_set;
   private ASPCommandBar bid_plan_line_bar;
   private ASPTable bid_plan_line_tbl;
   private ASPBlockLayout bid_plan_line_lay;


   //-----------------------------------------------------------------------------
   //------------------------  Construction  ---------------------------
   //-----------------------------------------------------------------------------

   public  BidPlan (ASPManager mgr, String page_path)
   {
      super(mgr,page_path);
   }

   public void run()
   {
      ASPManager mgr = getASPManager();

      if( mgr.commandBarActivated() )
         eval(mgr.commandBarFunction());
      else if(mgr.dataTransfered())
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("SEARCH")) )
         okFind();
      else if( !mgr.isEmpty(mgr.getQueryStringValue("PLAN_NO")) )
         okFind();
      else
         okFind();
      adjust();
   }
   //-----------------------------------------------------------------------------
   //------------------------  Command Bar functions  ---------------------------
   //-----------------------------------------------------------------------------

   public void okFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      mgr.createSearchURL(headblk);
      q = trans.addQuery(headblk);
      q.includeMeta("ALL");
      if(mgr.dataTransfered())
         q.addOrCondition(mgr.getTransferedData());
      mgr.querySubmit(trans,headblk);
      if (  headset.countRows() == 0 )
      {
         mgr.showAlert("BIDPLANNODATA: No data found.");
         headset.clear();
      }
      eval( bid_plan_line_set.syncItemSets() );
   }



   public void countFind()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;

      q = trans.addQuery(headblk);
      q.setSelectList("to_char(count(*)) N");
      mgr.submit(trans);
      headlay.setCountValue(toInt(headset.getValue("N")));
      headset.clear();
   }



   public void newRow()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPBuffer data;
      ASPCommand cmd;

      cmd = trans.addEmptyCommand("HEAD","BID_PLAN_API.New__",headblk);
      cmd.setOption("ACTION","PREPARE");
      trans = mgr.perform(trans);
      data = trans.getBuffer("HEAD/DATA");
      headset.addRow(data);
   }


   //-----------------------------------------------------------------------------
   //------------------------  Item block cmd bar functions  ---------------------------
   //-----------------------------------------------------------------------------


   public void okFindITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPQuery q;
      int headrowno;

      q = trans.addQuery(bid_plan_line_blk);
      q.addWhereCondition("PROJ_NO = ? AND PLAN_NO = ?");
      q.addParameter("PROJ_NO", headset.getValue("PROJ_NO"));
      q.addParameter("PLAN_NO", headset.getValue("PLAN_NO"));
      q.includeMeta("ALL");
      headrowno = headset.getCurrentRowNo();
      mgr.querySubmit(trans,bid_plan_line_blk);
      headset.goTo(headrowno);
   }
   public void newRowITEM1()
   {
      ASPManager mgr = getASPManager();
      ASPTransactionBuffer trans = mgr.newASPTransactionBuffer();
      ASPCommand cmd;
      ASPBuffer data;

      
      cmd = trans.addEmptyCommand("ITEM1","BID_PLAN_LINE_API.New__",bid_plan_line_blk);
      cmd.setOption("ACTION","PREPARE");
      cmd.setParameter("BID_AGENCY_ORG", "国电诚信招标有限公司");
      cmd.setParameter("ITEM0_PROJ_NO", headset.getValue("PROJ_NO"));
      cmd.setParameter("ITEM0_PLAN_NO", headset.getValue("PLAN_NO"));
      trans = mgr.perform(trans);
      data = trans.getBuffer("ITEM1/DATA");
      bid_plan_line_set.addRow(data);
   }

   //-----------------------------------------------------------------------------
   //------------------------  Predefines Head ---------------------------
   //-----------------------------------------------------------------------------

   public void  preDefine()
   {
      ASPManager mgr = getASPManager();

      headblk = mgr.newASPBlock("MAIN");
      headblk.addField("OBJID").
              setHidden();
      headblk.addField("OBJVERSION").
              setHidden();
      headblk.addField("PROJ_NO").
              setMandatory().
              setInsertable().
              setDynamicLOV("GENERAL_PROJECT").
              setLabel("BIDPLANPROJNO: Proj No").
              setSize(30);
      headblk.addField("GENERAL_PROJECT_PROJ_DESC").
              setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC ( :PROJ_NO)").
              setLabel("BIDPLANGENERALPROJECTPROJDESC: General Project Proj Desc").
              setSize(30).
              setReadOnly();
      mgr.getASPField("PROJ_NO").setValidateFunction("GENERAL_PROJECT_PROJ_DESC");
      headblk.addField("PLAN_NO").
              setMandatory().
              setInsertable().
              setLabel("BIDPLANPLANNO: Plan No").
              setSize(30);
      headblk.addField("PLAN_NAME").
              setInsertable().
              setLabel("BIDPLANPLANNAME: Plan Name").
              setSize(30);
      headblk.addField("CREATE_TIME","Date").
              setInsertable().
              setLabel("BIDPLANCREATETIME: Create Time").
              setSize(30);
      headblk.addField("CREATE_PERSON").
              setReadOnly().
              setLabel("BIDPLANCREATEPERSON: Create Person").
              setSize(30);
      headblk.addField("CREATE_PERSON_NAME").
              setFunction("PERSON_INFO_API.GET_NAME ( :CREATE_PERSON)").
              setLabel("BIDMATENQJUDGECREATEPERSONNAME: Create Person Name").
              setSize(30).
              setReadOnly();
      headblk.addField("CREATE_ORG").
              setInsertable().
              setLabel("BIDPLANCREATEORG: Create Org").
              setSize(30).
              setDynamicLOV("GENERAL_ORGANIZATION");
      headblk.addField("START_ORG_NAME").
              setFunction("GENERAL_ORGANIZATION_API.Get_Org_Desc(:CREATE_ORG)").
              setLabel("CONPROJCONNECTIONLISTCOSTORGSTARTORGNAME: Start Org Name").
              setSize(30).
              setReadOnly();
      
      mgr.getASPField("CREATE_ORG").setValidation("START_ORG_NAME");
      headblk.addField("STATUS").
              setInsertable().
              setLabel("BIDPLANSTATUS: Status").
              setSize(30).
              setHidden();
      headblk.addField("NOTE").
              setInsertable().
              setLabel("BIDPLANNOTE: Note").
              setHeight(5).
              setSize(129);
      headblk.setView("BID_PLAN");
      headblk.defineCommand("BID_PLAN_API","New__,Modify__,Remove__");
      headset = headblk.getASPRowSet();
      headbar = mgr.newASPCommandBar(headblk);
      headtbl = mgr.newASPTable(headblk);
      headtbl.setTitle("BIDPLANTBLHEAD: Bid Plans");
      headtbl.enableRowSelect();
      headtbl.setWrap();
      headlay = headblk.getASPBlockLayout();
      headlay.setDefaultLayoutMode(headlay.MULTIROW_LAYOUT);
      headlay.setDataSpan("NOTE", 5);
      headlay.setDataSpan("CREATE_ORG", 5);
      headlay.setSimple("GENERAL_PROJECT_PROJ_DESC");
      //headlay.setDataSpan("PLAN_NAME", 5);
      headlay.setSimple("START_ORG_NAME");
      headlay.setSimple("CREATE_PERSON_NAME");
 


      bid_plan_line_blk = mgr.newASPBlock("ITEM1");
      bid_plan_line_blk.addField("ITEM0_OBJID").
                        setHidden().
                        setDbName("OBJID");
      bid_plan_line_blk.addField("ITEM0_OBJVERSION").
                        setHidden().
                        setDbName("OBJVERSION");
      
      bid_plan_line_blk.addField("ITEM0_PROJ_NO").
                        setHidden().
                        setDbName("PROJ_NO").
                        setMandatory().
                        setInsertable().
                        setLabel("BIDPLANLINEITEM0PROJNO: Proj No").
                        setSize(30);

      bid_plan_line_blk.addField("PROJ_DESC").
                        setHidden().
//                        setMandatory().
//                        setInsertable().
                        setReadOnly().
                        setFunction("GENERAL_PROJECT_API.GET_PROJ_DESC(:PROJ_NO)").
                        setLabel("BIDPLANLINEBIDPROJNAME: Bid Proj Name").
                        setSize(30);
//      mgr.getASPField("PROJ_NO").setValidation("PROJ_DESC");

      bid_plan_line_blk.addField("LINE_NO").
                        //setMandatory().
                        setInsertable().
                        setHidden().
                        setLabel("BIDPLANLINELINENO: Line No").
                        setSize(30);

      bid_plan_line_blk.addField("CRE_ID").
                        setInsertable().
                        setDynamicLOV("BID_CRE_PROJ_APPLY", "PROJ_NO").
                        setLabel("BIDPLANLINECREID: Cre Id").
                        setSize(30);
      bid_plan_line_blk.addField("CREATE_BID_NAME").
                        setReadOnly().
                        setFunction("BID_CRE_PROJ_APPLY_API.GET_CREATE_BID_NAME ( :PROJ_NO,:CRE_ID)").
                        setLabel("BIDPLANLINECREATEBIDNAME: Create Bid Name").
                        setSize(30);
      mgr.getASPField("CRE_ID").setValidation("CREATE_BID_NAME");
      bid_plan_line_blk.addField("ITEM0_PLAN_NO").
                        setHidden().
                        setDbName("PLAN_NO").
                        setMandatory().
                        setInsertable().
                        setLabel("BIDPLANLINEITEM0PLANNO: Plan No").
                        setSize(30);
     
//      bid_plan_line_blk.addField("BID_PROJ_NO").
//                        setInsertable().
//                        setLabel("BIDPLANLINEBIDPROJNO: Bid Proj No").
//                        setSize(30);
//      bid_plan_line_blk.addField("BID_PROJ_NAME").
//                        setInsertable().
//                        setLabel("BIDPLANLINEBIDPROJNAME: Bid Proj Name").
//                        setSize(30);
      bid_plan_line_blk.addField("PLAN_BID_DATE","Date").
                        setInsertable().
                        setLabel("BIDPLANLINEPLANBIDDATE: Plan Bid Date").
                        setSize(30);
      bid_plan_line_blk.addField("BUDGET_LINE_NO").
                        setInsertable().
                        setLabel("BIDPLANLINEBUDGETLINENO: Budget Line No").
                        setSize(30).
                        setHidden();
      bid_plan_line_blk.addField("BID_AMOUNT").
                        setInsertable().
                        setLabel("BIDPLANLINEBIDAMOUNT: Bid Amount").
                        setSize(30).
                        setHidden();
      bid_plan_line_blk.addField("BID_AGENCY_ORG").
                        setInsertable().
                        setLabel("BIDPLANLINEBIDAGENCYORG: Bid Agency Org").
                        setSize(30);
      bid_plan_line_blk.addField("PLAN_CONFIRM_BID_DATE","Date").
                        setInsertable().
                        setLabel("BIDPLANLINEPLANCONFIRMBIDDATE: Plan Confirm Bid Date").
                        setSize(30);
     
      bid_plan_line_blk.addField("BID_PERSON").
                        enumerateValues("Bid_Person_API").
                        setSelectBox().
                        setInsertable().
                        setLabel("BIDPLANLINEBIDPERSON: Bid Person").
                        setSize(30);
      bid_plan_line_blk.addField("BID_MAN_ORG").
                        enumerateValues("Bid_Man_Org_API").
                        setSelectBox().
                        setInsertable().
                        setLabel("BIDPLANLINEBIDMANORG: Bid Man Org").
                        setSize(30);
      bid_plan_line_blk.addField("BID_METHOD_NO").
                        setHidden().
                        setInsertable().
                        setDynamicLOV("BID_METHOD").
                        setLabel("BIDPLANLINEBIDMETHODNO: Bid Method No").
                        setSize(30);
      bid_plan_line_blk.addField("ITEM0_NOTE").
                        setDbName("NOTE").
                        setInsertable().
                        setLabel("BIDPLANLINEITEM0NOTE: Note").
                        setHeight(5).
                        setSize(129);
      bid_plan_line_blk.setView("BID_PLAN_LINE");
      bid_plan_line_blk.defineCommand("BID_PLAN_LINE_API","New__,Modify__,Remove__");
      bid_plan_line_blk.setMasterBlock(headblk);
      bid_plan_line_set = bid_plan_line_blk.getASPRowSet();
      bid_plan_line_bar = mgr.newASPCommandBar(bid_plan_line_blk);
      bid_plan_line_bar.defineCommand(bid_plan_line_bar.OKFIND, "okFindITEM1");
      bid_plan_line_bar.defineCommand(bid_plan_line_bar.NEWROW, "newRowITEM1");
      bid_plan_line_tbl = mgr.newASPTable(bid_plan_line_blk);
      bid_plan_line_tbl.setTitle("BIDPLANLINEITEMHEAD1: BidPlanLine");
      bid_plan_line_tbl.enableRowSelect();
      bid_plan_line_tbl.setWrap();
      bid_plan_line_lay = bid_plan_line_blk.getASPBlockLayout();
      bid_plan_line_lay.setDefaultLayoutMode(bid_plan_line_lay.MULTIROW_LAYOUT);
      bid_plan_line_lay.setDataSpan("BID_MAN_ORG", 5);
      headlay.setDataSpan("ITEM0_NOTE", 5);
      bid_plan_line_lay.setSimple("CREATE_BID_NAME");



   }



   public void  adjust()
   {
      // fill function body
   }

   //-----------------------------------------------------------------------------
   //------------------------  Presentation functions  ---------------------------
   //-----------------------------------------------------------------------------

   protected String getDescription()
   {
      return "BIDPLANDESC: Bid Plan";
   }


   protected String getTitle()
   {
      return "BIDPLANTITLE: Bid Plan";
   }


   protected void printContents() throws FndException
   {
      ASPManager mgr = getASPManager();
      if (headlay.isVisible())
          appendToHTML(headlay.show());
//      if (bid_plan_line_lay.isVisible())
//          appendToHTML(bid_plan_line_lay.show());
      else 
      {
         headlay.setLayoutMode(headlay.CUSTOM_LAYOUT);
         appendToHTML(headlay.show());
      }  
      if ((headlay.isSingleLayout() || headlay.isCustomLayout()) && headset.countRows() > 0)
      {
         appendToHTML(bid_plan_line_lay.show());
      }

   }
}
